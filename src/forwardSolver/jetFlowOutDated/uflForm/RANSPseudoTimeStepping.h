// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.1.0.post0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              6
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __RANSPSEUDOTIMESTEPPING_H
#define __RANSPSEUDOTIMESTEPPING_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class ranspseudotimestepping_finite_element_0: public ufc::finite_element
{
public:

  ranspseudotimestepping_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', triangle, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[ip] += coefficients0[0][0] * basisvalues0[0];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * num_derivatives, 0.0);
    if (order > 0)
        return;
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    std::fill_n(values, num_points, 0.0);
    const std::size_t reference_offsets[1] = {};
    const std::size_t physical_offsets[1] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 1; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[ip + d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[ip + d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
    }
    // Evaluate basis on reference element
    double ref_values[1];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[1];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[2] = { 0.3333333333333333, 0.3333333333333333 };
    std::copy_n(dof_X, 2, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new ranspseudotimestepping_finite_element_0();
  }

};


class ranspseudotimestepping_finite_element_1: public ufc::finite_element
{
public:

  ranspseudotimestepping_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Real', triangle, 0), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 2;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points * 2 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[2 * 2 * ip] += coefficients0[0][0] * basisvalues0[0];
        reference_values[2 * 2 * ip + 2 + 1] += coefficients0[0][0] * basisvalues0[0];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 2 * num_derivatives * 2, 0.0);
    if (order > 0)
        return;
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    std::fill_n(values, num_points * 2 * 2, 0.0);
    const std::size_t reference_offsets[2] = { 0, 1 };
    const std::size_t physical_offsets[2] = { 0, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 2; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[2 * 2 * ip + 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[2 * 2 * ip + 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
    }
    // Evaluate basis on reference element
    double ref_values[4];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[4];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 2; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 2, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 2; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[4] = dof_values[0];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[1];
    vertex_values[3] = dof_values[1];
    vertex_values[5] = dof_values[1];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[2] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[2 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[4] = { 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333 };
    std::copy_n(dof_X, 4, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_finite_element_0();
    case 1:
        return new ranspseudotimestepping_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new ranspseudotimestepping_finite_element_1();
  }

};


class ranspseudotimestepping_finite_element_2: public ufc::finite_element
{
public:

  ranspseudotimestepping_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', triangle, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 3;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 3 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[3] = {};
    const std::size_t num_components[3] = { 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 3; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[3 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 3 * num_derivatives, 0.0);
    const std::size_t reference_offsets[3] = {};
    const std::size_t physical_offsets[3] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 3; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[3 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[3 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[3];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[3];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 3, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[6] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 6, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new ranspseudotimestepping_finite_element_2();
  }

};


class ranspseudotimestepping_finite_element_3: public ufc::finite_element
{
public:

  ranspseudotimestepping_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 6;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 6 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 3 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 4 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 5 + 1] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives * 2, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t physical_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[12];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[12];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 6, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = coordinate_dofs[0];
    dof_coordinates[2 * 3 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 4] = coordinate_dofs[2];
    dof_coordinates[2 * 4 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 5] = coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_finite_element_2();
    case 1:
        return new ranspseudotimestepping_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new ranspseudotimestepping_finite_element_3();
  }

};


class ranspseudotimestepping_finite_element_4: public ufc::finite_element
{
public:

  ranspseudotimestepping_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_finite_element_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', triangle, 2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 6;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    for (std::size_t k = 0; k < num_points * 6; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 5] += coefficients5[0][r] * basisvalues2[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
            { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
            { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    const std::size_t reference_offset[6] = {};
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives, 0.0);
    const std::size_t reference_offsets[6] = {};
    const std::size_t physical_offsets[6] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[6];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[6];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 6, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new ranspseudotimestepping_finite_element_4();
  }

};


class ranspseudotimestepping_finite_element_5: public ufc::finite_element
{
public:

  ranspseudotimestepping_finite_element_5() : ufc::finite_element()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_finite_element_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    for (std::size_t k = 0; k < num_points * 12 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 6 + 1] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 7 + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 8 + 1] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 9 + 1] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 10 + 1] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 11 + 1] += coefficients5[0][r] * basisvalues2[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 12 * num_derivatives * 2, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
            { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
            { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    const std::size_t reference_offset[12] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    const std::size_t num_components[12] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 12; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[12 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 12 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[12] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    const std::size_t physical_offsets[12] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 12; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[12 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[12 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[24];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[24];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 12, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[8] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 9:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 10:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 11:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[3] = dof_values[7];
    vertex_values[5] = dof_values[8];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 6] = coordinate_dofs[0];
    dof_coordinates[2 * 6 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 7] = coordinate_dofs[2];
    dof_coordinates[2 * 7 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 8] = coordinate_dofs[4];
    dof_coordinates[2 * 8 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 9] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 9 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 10] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 10 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 11] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[24] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0 };
    std::copy_n(dof_X, 24, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_finite_element_4();
    case 1:
        return new ranspseudotimestepping_finite_element_4();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new ranspseudotimestepping_finite_element_5();
  }

};


class ranspseudotimestepping_finite_element_6: public ufc::finite_element
{
public:

  ranspseudotimestepping_finite_element_6() : ufc::finite_element()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_finite_element_6() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), FiniteElement('Lagrange', triangle, 1), FiniteElement('Lagrange', triangle, 1), FiniteElement('Lagrange', triangle, 1))";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 21;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 5 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 5;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 5 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 5;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Mixed";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    static const double coefficients12[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients13[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients14[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 21 * 5; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 6 + 1] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 7 + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 8 + 1] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 9 + 1] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 10 + 1] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 11 + 1] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 12 + 2] += coefficients12[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 13 + 2] += coefficients13[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 14 + 2] += coefficients14[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 15 + 3] += coefficients12[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 16 + 3] += coefficients13[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 17 + 3] += coefficients14[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 18 + 4] += coefficients12[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 19 + 4] += coefficients13[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 20 + 4] += coefficients14[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 21 * num_derivatives * 5, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
            { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
            { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    alignas(32) static const double dmats12[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    static const double coefficients12[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients13[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients14[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[21] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4 };
    const std::size_t num_components[21] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 21; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 15:
                // Compute reference derivatives for dof 15.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 16:
                // Compute reference derivatives for dof 16.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 17:
                // Compute reference derivatives for dof 17.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 18:
                // Compute reference derivatives for dof 18.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 19:
                // Compute reference derivatives for dof 19.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 20:
                // Compute reference derivatives for dof 20.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[21 * (num_derivatives * 5) * ip + num_derivatives * 5 * i + 5 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 21 * num_derivatives * 5, 0.0);
    const std::size_t reference_offsets[21] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4 };
    const std::size_t physical_offsets[21] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 21; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[21 * (num_derivatives * 5) * ip + num_derivatives * 5 * d + 5 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[21 * (num_derivatives * 5) * ip + num_derivatives * 5 * d + 5 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[105];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[105];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 5; ++k)
        values[k] = physical_values[5 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[5] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 21; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 5; ++s)
            values[r * 5 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 5 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 15:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[3 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 16:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[3 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 17:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[3 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 18:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[4 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 19:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[4 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 20:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[4 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 5 * num_derivatives * 21, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[20] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 21; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 5 * num_derivatives; ++s)
            values[5 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[5];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 9:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 10:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 11:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 12:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 13:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 14:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 15:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 16:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 17:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 18:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[4];
        }
        break;
    case 19:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[4];
        }
        break;
    case 20:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[4];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[5];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[12] = vals[2];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[13] = vals[2];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[15] = vals[3];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[16] = vals[3];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[17] = vals[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[18] = vals[4];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[19] = vals[4];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[20] = vals[4];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[5] = dof_values[1];
    vertex_values[10] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[6] = dof_values[7];
    vertex_values[11] = dof_values[8];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[12];
    vertex_values[7] = dof_values[13];
    vertex_values[12] = dof_values[14];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[15];
    vertex_values[8] = dof_values[16];
    vertex_values[13] = dof_values[17];
    // Evaluate function and change variables
    vertex_values[4] = dof_values[18];
    vertex_values[9] = dof_values[19];
    vertex_values[14] = dof_values[20];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 6] = coordinate_dofs[0];
    dof_coordinates[2 * 6 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 7] = coordinate_dofs[2];
    dof_coordinates[2 * 7 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 8] = coordinate_dofs[4];
    dof_coordinates[2 * 8 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 9] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 9 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 10] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 10 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 11] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 12] = coordinate_dofs[0];
    dof_coordinates[2 * 12 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 13] = coordinate_dofs[2];
    dof_coordinates[2 * 13 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 14] = coordinate_dofs[4];
    dof_coordinates[2 * 14 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 15] = coordinate_dofs[0];
    dof_coordinates[2 * 15 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 16] = coordinate_dofs[2];
    dof_coordinates[2 * 16 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 17] = coordinate_dofs[4];
    dof_coordinates[2 * 17 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 18] = coordinate_dofs[0];
    dof_coordinates[2 * 18 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 19] = coordinate_dofs[2];
    dof_coordinates[2 * 19 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 20] = coordinate_dofs[4];
    dof_coordinates[2 * 20 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[42] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 42, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 4;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_finite_element_5();
    case 1:
        return new ranspseudotimestepping_finite_element_2();
    case 2:
        return new ranspseudotimestepping_finite_element_2();
    case 3:
        return new ranspseudotimestepping_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new ranspseudotimestepping_finite_element_6();
  }

};


class ranspseudotimestepping_dofmap_0: public ufc::dofmap
{
public:

  ranspseudotimestepping_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', triangle, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = {};
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 1;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new ranspseudotimestepping_dofmap_0();
  }

};


class ranspseudotimestepping_dofmap_1: public ufc::dofmap
{
public:

  ranspseudotimestepping_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Real', triangle, 0), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { false, false, true };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2;
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 2;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_dofs() const final override
  {
    return 2;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 2 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 2 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset;
    offset += 1;
    dofs[1] = offset;
    offset += 1;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_dofmap_0();
    case 1:
        return new ranspseudotimestepping_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new ranspseudotimestepping_dofmap_1();
  }

};


class ranspseudotimestepping_dofmap_2: public ufc::dofmap
{
public:

  ranspseudotimestepping_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 3;
  }

  std::size_t num_element_dofs() const final override
  {
    return 3;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 2;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 2, 3 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new ranspseudotimestepping_dofmap_2();
  }

};


class ranspseudotimestepping_dofmap_3: public ufc::dofmap
{
public:

  ranspseudotimestepping_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 6;
  }

  std::size_t num_element_dofs() const final override
  {
    return 6;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 4;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 4, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[0][0];
    dofs[4] = offset + entity_indices[0][1];
    dofs[5] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 5;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 5;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_dofmap_2();
    case 1:
        return new ranspseudotimestepping_dofmap_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new ranspseudotimestepping_dofmap_3();
  }

};


class ranspseudotimestepping_dofmap_4: public ufc::dofmap
{
public:

  ranspseudotimestepping_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_dofmap_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0] + num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 6;
  }

  std::size_t num_element_dofs() const final override
  {
    return 6;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 1, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 3, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 5;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            break;
        case 1:
            dofs[0] = 4;
            break;
        case 2:
            dofs[0] = 5;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 5;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new ranspseudotimestepping_dofmap_4();
  }

};


class ranspseudotimestepping_dofmap_5: public ufc::dofmap
{
public:

  ranspseudotimestepping_dofmap_5() : ufc::dofmap()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_dofmap_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2 * num_global_entities[0] + 2 * num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 12;
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 6;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 2, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 6, 12 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + entity_indices[0][0];
    dofs[7] = offset + entity_indices[0][1];
    dofs[8] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + entity_indices[1][0];
    dofs[10] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 9;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 7;
        dofs[5] = 11;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            dofs[1] = 9;
            break;
        case 1:
            dofs[0] = 4;
            dofs[1] = 10;
            break;
        case 2:
            dofs[0] = 5;
            dofs[1] = 11;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 9;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 7;
            dofs[5] = 11;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_dofmap_4();
    case 1:
        return new ranspseudotimestepping_dofmap_4();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new ranspseudotimestepping_dofmap_5();
  }

};


class ranspseudotimestepping_dofmap_6: public ufc::dofmap
{
public:

  ranspseudotimestepping_dofmap_6() : ufc::dofmap()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_dofmap_6() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), FiniteElement('Lagrange', triangle, 1), FiniteElement('Lagrange', triangle, 1), FiniteElement('Lagrange', triangle, 1))";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 5 * num_global_entities[0] + 2 * num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 21;
  }

  std::size_t num_element_dofs() const final override
  {
    return 21;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 12;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 5, 2, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 5, 12, 21 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + entity_indices[0][0];
    dofs[7] = offset + entity_indices[0][1];
    dofs[8] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + entity_indices[1][0];
    dofs[10] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[12] = offset + entity_indices[0][0];
    dofs[13] = offset + entity_indices[0][1];
    dofs[14] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[15] = offset + entity_indices[0][0];
    dofs[16] = offset + entity_indices[0][1];
    dofs[17] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[18] = offset + entity_indices[0][0];
    dofs[19] = offset + entity_indices[0][1];
    dofs[20] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 9;
        dofs[6] = 13;
        dofs[7] = 14;
        dofs[8] = 16;
        dofs[9] = 17;
        dofs[10] = 19;
        dofs[11] = 20;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
        dofs[6] = 12;
        dofs[7] = 14;
        dofs[8] = 15;
        dofs[9] = 17;
        dofs[10] = 18;
        dofs[11] = 20;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 7;
        dofs[5] = 11;
        dofs[6] = 12;
        dofs[7] = 13;
        dofs[8] = 15;
        dofs[9] = 16;
        dofs[10] = 18;
        dofs[11] = 19;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            dofs[2] = 12;
            dofs[3] = 15;
            dofs[4] = 18;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            dofs[2] = 13;
            dofs[3] = 16;
            dofs[4] = 19;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            dofs[2] = 14;
            dofs[3] = 17;
            dofs[4] = 20;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            dofs[1] = 9;
            break;
        case 1:
            dofs[0] = 4;
            dofs[1] = 10;
            break;
        case 2:
            dofs[0] = 5;
            dofs[1] = 11;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            dofs[2] = 12;
            dofs[3] = 15;
            dofs[4] = 18;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            dofs[2] = 13;
            dofs[3] = 16;
            dofs[4] = 19;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            dofs[2] = 14;
            dofs[3] = 17;
            dofs[4] = 20;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 9;
            dofs[6] = 13;
            dofs[7] = 14;
            dofs[8] = 16;
            dofs[9] = 17;
            dofs[10] = 19;
            dofs[11] = 20;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            dofs[6] = 12;
            dofs[7] = 14;
            dofs[8] = 15;
            dofs[9] = 17;
            dofs[10] = 18;
            dofs[11] = 20;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 7;
            dofs[5] = 11;
            dofs[6] = 12;
            dofs[7] = 13;
            dofs[8] = 15;
            dofs[9] = 16;
            dofs[10] = 18;
            dofs[11] = 19;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            dofs[20] = 20;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 4;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_dofmap_5();
    case 1:
        return new ranspseudotimestepping_dofmap_2();
    case 2:
        return new ranspseudotimestepping_dofmap_2();
    case 3:
        return new ranspseudotimestepping_dofmap_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new ranspseudotimestepping_dofmap_6();
  }

};


class ranspseudotimestepping_coordinate_mapping_3: public ufc::coordinate_mapping
{
public:

  ranspseudotimestepping_coordinate_mapping_3() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_coordinate_mapping_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new ranspseudotimestepping_coordinate_mapping_3();
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new ranspseudotimestepping_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new ranspseudotimestepping_dofmap_3();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    ranspseudotimestepping_finite_element_2 xelement;
    double phi[3];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[2 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t d = 0; d < 3; ++d)
                x[2 * ip + i] += coordinate_dofs[2 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double J[4];
    double detJ[1];
    double K[4];
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    ranspseudotimestepping_finite_element_2 xelement;
    double dphi[6];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[2 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t j = 0; j < 2; ++j)
                for (std::size_t d = 0; d < 3; ++d)
                    J[2 * 2 * ip + 2 * i + j] += coordinate_dofs[2 * d + i] * dphi[2 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[2 * 2 * ip] * J[2 * 2 * ip + 2 + 1] - J[2 * 2 * ip + 1] * J[2 * 2 * ip + 2];
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[2 * 2 * ip] = J[2 * 2 * ip + 2 + 1] / detJ[ip];
        K[2 * 2 * ip + 1] = -J[2 * 2 * ip + 1] / detJ[ip];
        K[2 * 2 * ip + 2] = -J[2 * 2 * ip + 2] / detJ[ip];
        K[2 * 2 * ip + 2 + 1] = J[2 * 2 * ip] / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[3] = { 0.33333333333333337, 0.33333333333333337, 0.3333333333333333 };
    const double dphi_Xm[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t d = 0; d < 3; ++d)
            x[i] += coordinate_dofs[2 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t d = 0; d < 3; ++d)
                J[2 * i + j] += coordinate_dofs[2 * d + i] * dphi_Xm[j][d];
  }

};


class ranspseudotimestepping_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  ranspseudotimestepping_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~ranspseudotimestepping_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({false, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 106
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    alignas(32) static const double FE70_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE70_C0_D02_Q12[1][1][3] = { { { 3.999999999999998, 4.000000000000004, -7.999999999999995 } } };
    alignas(32) static const double FE70_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE70_C0_D11_Q12[1][1][4] = { { { 4.0, 3.999999999999997, -3.999999999999997, -4.000000000000005 } } };
    alignas(32) static const double FE70_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803568, 0.2205142679699366 },
            { -0.05512856699248404, -0.05512856699248409, 0.6533077030470597, 0.2205142679699364, 0.2205142679699362, 0.01592089499803596 },
            { 0.6533077030470594, -0.05512856699248415, -0.05512856699248411, 0.01592089499803581, 0.2205142679699364, 0.2205142679699366 },
            { -0.1249989825350975, 0.001430579517788794, -0.1249989825350975, 0.4999959301403892, 0.2485755252716258, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788821, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880001, 0.173768363654174, -0.1177151633084292, 0.790160442765823, 0.06597478591860526, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880001, 0.1353078281686267, 0.06597478591860512, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860538 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880001, 0.06597478591860524, 0.1353078281686266, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860538 },
            { 0.1737683636541741, -0.04749625719880015, -0.1177151633084292, 0.06597478591860535, 0.7901604427658229, 0.1353078281686269 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q12[0][0][1];
    const double w4_d1 = w[4][0] * FE3_C0_D01_Q12[0][0][0] + w[4][2] * FE3_C0_D01_Q12[0][0][1];
    double w4_d0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w4_d0 += w[4][ic] * FE3_C0_D01_Q12[0][0][ic];
    const double w3_d1_c3 = w[3][15] * FE3_C0_D01_Q12[0][0][0] + w[3][17] * FE3_C0_D01_Q12[0][0][1];
    double w3_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c3 += w[3][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w3_d1_c4 = w[3][18] * FE3_C0_D01_Q12[0][0][0] + w[3][20] * FE3_C0_D01_Q12[0][0][1];
    double w3_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c4 += w[3][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d11_c1 = w[2][6] * FE70_C0_D02_Q12[0][0][0] + w[2][8] * FE70_C0_D02_Q12[0][0][1] + w[2][10] * FE70_C0_D02_Q12[0][0][2];
    const double w2_d01_c1 = w[2][6] * FE70_C0_D11_Q12[0][0][0] + w[2][9] * FE70_C0_D11_Q12[0][0][1] + w[2][10] * FE70_C0_D11_Q12[0][0][2] + w[2][11] * FE70_C0_D11_Q12[0][0][3];
    const double w2_d00_c1 = w[2][6] * FE70_C0_D02_Q12[0][0][0] + w[2][7] * FE70_C0_D02_Q12[0][0][1] + w[2][11] * FE70_C0_D02_Q12[0][0][2];
    const double w2_d01_c0 = w[2][0] * FE70_C0_D11_Q12[0][0][0] + w[2][3] * FE70_C0_D11_Q12[0][0][1] + w[2][4] * FE70_C0_D11_Q12[0][0][2] + w[2][5] * FE70_C0_D11_Q12[0][0][3];
    const double w2_d11_c0 = w[2][0] * FE70_C0_D02_Q12[0][0][0] + w[2][2] * FE70_C0_D02_Q12[0][0][1] + w[2][4] * FE70_C0_D02_Q12[0][0][2];
    const double w2_d00_c0 = w[2][0] * FE70_C0_D02_Q12[0][0][0] + w[2][1] * FE70_C0_D02_Q12[0][0][1] + w[2][5] * FE70_C0_D02_Q12[0][0][2];
    const double w2_d1_c2 = w[2][12] * FE3_C0_D01_Q12[0][0][0] + w[2][14] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c2 += w[2][ic + 12] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c3 = w[2][15] * FE3_C0_D01_Q12[0][0][0] + w[2][17] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c3 += w[2][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c4 = w[2][18] * FE3_C0_D01_Q12[0][0][0] + w[2][20] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c4 += w[2][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    alignas(32) double sp[143];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[8] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[9] = sp[7] + sp[8];
    sp[10] = std::sqrt(sp[9]);
    sp[11] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[12] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[13] = sp[11] + sp[12];
    sp[14] = std::sqrt(sp[13]);
    sp[15] = sp[10] * sp[14];
    sp[16] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[17] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[18] = sp[16] + sp[17];
    sp[19] = std::sqrt(sp[18]);
    sp[20] = sp[15] * sp[19];
    sp[21] = triangle_reference_cell_volume * sp[2];
    sp[22] = std::abs(sp[21]);
    sp[23] = sp[20] / (4.0 * sp[22]);
    sp[24] = 2.0 * sp[23] * (2.0 * sp[23]);
    sp[25] = w4_d1 * sp[3];
    sp[26] = w4_d0 * sp[4];
    sp[27] = sp[25] + sp[26];
    sp[28] = w3_d1_c3 * sp[3];
    sp[29] = w3_d0_c3 * sp[4];
    sp[30] = sp[28] + sp[29];
    sp[31] = w3_d1_c4 * sp[3];
    sp[32] = w3_d0_c4 * sp[4];
    sp[33] = sp[31] + sp[32];
    sp[34] = sp[3] + sp[3];
    sp[35] = sp[4] + sp[4];
    sp[36] = sp[3] * sp[3];
    sp[37] = sp[3] * sp[4];
    sp[38] = sp[4] * sp[4];
    sp[39] = sp[37] + sp[37];
    sp[40] = sp[36] + sp[36];
    sp[41] = sp[39] + sp[39];
    sp[42] = sp[38] + sp[38];
    sp[43] = w4_d0 * sp[5];
    sp[44] = w4_d1 * sp[6];
    sp[45] = sp[43] + sp[44];
    sp[46] = w3_d0_c3 * sp[5];
    sp[47] = w3_d1_c3 * sp[6];
    sp[48] = sp[46] + sp[47];
    sp[49] = w3_d0_c4 * sp[5];
    sp[50] = w3_d1_c4 * sp[6];
    sp[51] = sp[49] + sp[50];
    sp[52] = sp[3] * sp[5];
    sp[53] = sp[3] * sp[6];
    sp[54] = sp[4] * sp[6];
    sp[55] = sp[5] * sp[4];
    sp[56] = sp[52] + sp[54];
    sp[57] = sp[5] * sp[6];
    sp[58] = sp[5] * sp[5];
    sp[59] = sp[6] * sp[6];
    sp[60] = sp[57] + sp[57];
    sp[61] = w2_d11_c1 * sp[3];
    sp[62] = w2_d01_c1 * sp[4];
    sp[63] = sp[61] + sp[62];
    sp[64] = sp[63] * sp[3];
    sp[65] = w2_d01_c1 * sp[3];
    sp[66] = w2_d00_c1 * sp[4];
    sp[67] = sp[65] + sp[66];
    sp[68] = sp[67] * sp[4];
    sp[69] = sp[64] + sp[68];
    sp[70] = sp[69] + sp[69];
    sp[71] = w2_d01_c0 * sp[5];
    sp[72] = w2_d11_c0 * sp[6];
    sp[73] = sp[71] + sp[72];
    sp[74] = sp[73] * sp[3];
    sp[75] = w2_d00_c0 * sp[5];
    sp[76] = w2_d01_c0 * sp[6];
    sp[77] = sp[75] + sp[76];
    sp[78] = sp[77] * sp[4];
    sp[79] = sp[74] + sp[78];
    sp[80] = w2_d00_c1 * sp[5];
    sp[81] = w2_d01_c1 * sp[6];
    sp[82] = sp[80] + sp[81];
    sp[83] = sp[82] * sp[5];
    sp[84] = w2_d01_c1 * sp[5];
    sp[85] = w2_d11_c1 * sp[6];
    sp[86] = sp[84] + sp[85];
    sp[87] = sp[86] * sp[6];
    sp[88] = sp[83] + sp[87];
    sp[89] = sp[79] + sp[88];
    sp[90] = w2_d1_c2 * sp[3];
    sp[91] = w2_d0_c2 * sp[4];
    sp[92] = sp[90] + sp[91];
    sp[93] = sp[5] + sp[5];
    sp[94] = sp[6] + sp[6];
    sp[95] = sp[60] + sp[60];
    sp[96] = sp[59] + sp[59];
    sp[97] = sp[58] + sp[58];
    sp[98] = w2_d11_c0 * sp[3];
    sp[99] = w2_d01_c0 * sp[4];
    sp[100] = sp[98] + sp[99];
    sp[101] = sp[100] * sp[3];
    sp[102] = w2_d01_c0 * sp[3];
    sp[103] = w2_d00_c0 * sp[4];
    sp[104] = sp[102] + sp[103];
    sp[105] = sp[104] * sp[4];
    sp[106] = sp[101] + sp[105];
    sp[107] = sp[67] * sp[5];
    sp[108] = sp[63] * sp[6];
    sp[109] = sp[107] + sp[108];
    sp[110] = sp[106] + sp[109];
    sp[111] = sp[77] * sp[5];
    sp[112] = sp[73] * sp[6];
    sp[113] = sp[111] + sp[112];
    sp[114] = sp[113] + sp[113];
    sp[115] = w2_d0_c2 * sp[5];
    sp[116] = w2_d1_c2 * sp[6];
    sp[117] = sp[115] + sp[116];
    sp[118] = w2_d1_c3 * sp[3];
    sp[119] = w2_d0_c3 * sp[4];
    sp[120] = sp[118] + sp[119];
    sp[121] = w2_d0_c3 * sp[5];
    sp[122] = w2_d1_c3 * sp[6];
    sp[123] = sp[121] + sp[122];
    sp[124] = w2_d1_c4 * sp[3];
    sp[125] = w2_d0_c4 * sp[4];
    sp[126] = sp[124] + sp[125];
    sp[127] = w2_d0_c4 * sp[5];
    sp[128] = w2_d1_c4 * sp[6];
    sp[129] = sp[127] + sp[128];
    sp[130] = sp[120] * sp[3];
    sp[131] = sp[120] * sp[4];
    sp[132] = sp[123] * sp[6];
    sp[133] = sp[123] * sp[5];
    sp[134] = sp[130] + sp[132];
    sp[135] = sp[133] + sp[131];
    sp[136] = sp[126] * sp[3];
    sp[137] = sp[126] * sp[4];
    sp[138] = sp[129] * sp[6];
    sp[139] = sp[129] * sp[5];
    sp[140] = sp[136] + sp[138];
    sp[141] = sp[139] + sp[137];
    sp[142] = std::abs(sp[2]);
    alignas(32) double BF0[6] = {};
    alignas(32) double BF1[5] = {};
    alignas(32) double BF2[3] = {};
    alignas(32) double BF3[5] = {};
    alignas(32) double BF4[3] = {};
    alignas(32) double BF5[4] = {};
    alignas(32) double BF6[6] = {};
    alignas(32) double BF7[5] = {};
    alignas(32) double BF8[3] = {};
    alignas(32) double BF9[5] = {};
    alignas(32) double BF10[3] = {};
    alignas(32) double BF11[4] = {};
    alignas(32) double BF12[2] = {};
    alignas(32) double BF13[3] = {};
    alignas(32) double BF14[2] = {};
    alignas(32) double BF15[2] = {};
    alignas(32) double BF16[3] = {};
    alignas(32) double BF17[2] = {};
    alignas(32) double BF18[2] = {};
    alignas(32) double BF19[3] = {};
    alignas(32) double BF20[2] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE70_C0_Q12[0][iq][ic];
        const double w2_d1_c0 = w[2][0] * FE70_C0_D01_Q12[0][iq][0] + w[2][2] * FE70_C0_D01_Q12[0][iq][1] + w[2][3] * FE70_C0_D01_Q12[0][iq][2] + w[2][4] * FE70_C0_D01_Q12[0][iq][3] + w[2][5] * FE70_C0_D01_Q12[0][iq][4];
        const double w2_d0_c0 = w[2][0] * FE70_C0_D10_Q12[0][iq][0] + w[2][1] * FE70_C0_D10_Q12[0][iq][1] + w[2][3] * FE70_C0_D10_Q12[0][iq][2] + w[2][4] * FE70_C0_D10_Q12[0][iq][3] + w[2][5] * FE70_C0_D10_Q12[0][iq][4];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE70_C0_Q12[0][iq][ic];
        const double w2_d1_c1 = w[2][6] * FE70_C0_D01_Q12[0][iq][0] + w[2][8] * FE70_C0_D01_Q12[0][iq][1] + w[2][9] * FE70_C0_D01_Q12[0][iq][2] + w[2][10] * FE70_C0_D01_Q12[0][iq][3] + w[2][11] * FE70_C0_D01_Q12[0][iq][4];
        const double w2_d0_c1 = w[2][6] * FE70_C0_D10_Q12[0][iq][0] + w[2][7] * FE70_C0_D10_Q12[0][iq][1] + w[2][9] * FE70_C0_D10_Q12[0][iq][2] + w[2][10] * FE70_C0_D10_Q12[0][iq][3] + w[2][11] * FE70_C0_D10_Q12[0][iq][4];
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c0 += w[3][ic] * FE70_C0_Q12[0][iq][ic];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c1 += w[3][ic + 6] * FE70_C0_Q12[0][iq][ic];
        double w3_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c3 += w[3][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4 += w[4][ic] * FE3_C0_Q12[0][iq][ic];
        double w3_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c4 += w[3][ic + 18] * FE3_C0_Q12[0][iq][ic];
        const double w3_d1_c1 = w[3][6] * FE70_C0_D01_Q12[0][iq][0] + w[3][8] * FE70_C0_D01_Q12[0][iq][1] + w[3][9] * FE70_C0_D01_Q12[0][iq][2] + w[3][10] * FE70_C0_D01_Q12[0][iq][3] + w[3][11] * FE70_C0_D01_Q12[0][iq][4];
        const double w3_d0_c1 = w[3][6] * FE70_C0_D10_Q12[0][iq][0] + w[3][7] * FE70_C0_D10_Q12[0][iq][1] + w[3][9] * FE70_C0_D10_Q12[0][iq][2] + w[3][10] * FE70_C0_D10_Q12[0][iq][3] + w[3][11] * FE70_C0_D10_Q12[0][iq][4];
        const double w3_d1_c0 = w[3][0] * FE70_C0_D01_Q12[0][iq][0] + w[3][2] * FE70_C0_D01_Q12[0][iq][1] + w[3][3] * FE70_C0_D01_Q12[0][iq][2] + w[3][4] * FE70_C0_D01_Q12[0][iq][3] + w[3][5] * FE70_C0_D01_Q12[0][iq][4];
        const double w3_d0_c0 = w[3][0] * FE70_C0_D10_Q12[0][iq][0] + w[3][1] * FE70_C0_D10_Q12[0][iq][1] + w[3][3] * FE70_C0_D10_Q12[0][iq][2] + w[3][4] * FE70_C0_D10_Q12[0][iq][3] + w[3][5] * FE70_C0_D10_Q12[0][iq][4];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE3_C0_Q12[0][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w2_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c2 += w[2][ic + 12] * FE3_C0_Q12[0][iq][ic];
        alignas(32) double sv12[382];
        sv12[0] = w2_d1_c0 * sp[3];
        sv12[1] = w2_d0_c0 * sp[4];
        sv12[2] = sv12[0] + sv12[1];
        sv12[3] = w2_c1 * sv12[2];
        sv12[4] = w2_d0_c0 * sp[5];
        sv12[5] = w2_d1_c0 * sp[6];
        sv12[6] = sv12[4] + sv12[5];
        sv12[7] = w2_c0 * sv12[6];
        sv12[8] = sv12[3] + sv12[7];
        sv12[9] = w2_d1_c1 * sp[3];
        sv12[10] = w2_d0_c1 * sp[4];
        sv12[11] = sv12[9] + sv12[10];
        sv12[12] = w2_c1 * sv12[11];
        sv12[13] = w2_d0_c1 * sp[5];
        sv12[14] = w2_d1_c1 * sp[6];
        sv12[15] = sv12[13] + sv12[14];
        sv12[16] = w2_c0 * sv12[15];
        sv12[17] = sv12[12] + sv12[16];
        sv12[18] = sv12[11] + sv12[6];
        sv12[19] = sv12[18] * sp[3];
        sv12[20] = sv12[18] * sp[4];
        sv12[21] = sv12[18] * sp[5];
        sv12[22] = sv12[18] * sp[6];
        sv12[23] = w3_c0 * w3_c0;
        sv12[24] = w3_c1 * w3_c1;
        sv12[25] = sv12[23] + sv12[24];
        sv12[26] = std::sqrt(1e-9 + sv12[25]);
        sv12[27] = sp[24] * sv12[26];
        sv12[28] = sv12[19] * sv12[27];
        sv12[29] = sv12[20] * sv12[27];
        sv12[30] = sv12[21] * sv12[27];
        sv12[31] = sv12[22] * sv12[27];
        sv12[32] = w3_c1 * sp[3];
        sv12[33] = w3_c1 * sp[4];
        sv12[34] = w3_c0 * sp[6];
        sv12[35] = w3_c0 * sp[5];
        sv12[36] = sv12[32] + sv12[34];
        sv12[37] = sv12[35] + sv12[33];
        sv12[38] = std::exp(w4);
        sv12[39] = sp[27] * sv12[38];
        sv12[40] = w3_c3 * (0.09 * sv12[39]);
        sv12[41] = sp[30] * (0.09 * sv12[38]);
        sv12[42] = sv12[40] + sv12[41];
        sv12[43] = w3_c3 * sv12[42];
        sv12[44] = w3_c3 * (0.09 * sv12[38]);
        sv12[45] = sp[30] * sv12[44];
        sv12[46] = sv12[43] + sv12[45];
        sv12[47] = w3_c4 * sp[33];
        sv12[48] = sv12[47] + sv12[47];
        sv12[49] = w3_c4 * w3_c4;
        sv12[50] = std::sqrt(1e-8 + sv12[49]);
        sv12[51] = sv12[48] / (2 * sv12[50]);
        sv12[52] = sp[33] + sv12[51];
        sv12[53] = w3_c3 * sv12[44];
        sv12[54] = w3_c4 + sv12[50];
        sv12[55] = sv12[53] / (0.5 * sv12[54]);
        sv12[56] = 0.5 * sv12[52] * sv12[55];
        sv12[57] = sv12[46] + -1 * sv12[56];
        sv12[58] = sv12[57] / (0.5 * sv12[54]);
        sv12[59] = 2.0 * sv12[58] * (sp[34] / 2);
        sv12[60] = 2.0 * sv12[58] * (sp[35] / 2);
        sv12[61] = 2.0 * (0.0001 + sv12[55]) * (sp[40] / 2);
        sv12[62] = 2.0 * (0.0001 + sv12[55]) * (sp[41] / 2);
        sv12[63] = 2.0 * (0.0001 + sv12[55]) * (sp[42] / 2);
        sv12[64] = sp[45] * sv12[38];
        sv12[65] = w3_c3 * (0.09 * sv12[64]);
        sv12[66] = sp[48] * (0.09 * sv12[38]);
        sv12[67] = sv12[65] + sv12[66];
        sv12[68] = w3_c3 * sv12[67];
        sv12[69] = sp[48] * sv12[44];
        sv12[70] = sv12[68] + sv12[69];
        sv12[71] = w3_c4 * sp[51];
        sv12[72] = sv12[71] + sv12[71];
        sv12[73] = sv12[72] / (2 * sv12[50]);
        sv12[74] = sp[51] + sv12[73];
        sv12[75] = 0.5 * sv12[74] * sv12[55];
        sv12[76] = sv12[70] + -1 * sv12[75];
        sv12[77] = sv12[76] / (0.5 * sv12[54]);
        sv12[78] = 2.0 * sv12[77] * (sp[6] / 2);
        sv12[79] = 2.0 * sv12[77] * (sp[5] / 2);
        sv12[80] = 2.0 * sv12[77] * (sp[4] / 2);
        sv12[81] = 2.0 * sv12[77] * (sp[3] / 2);
        sv12[82] = 2.0 * (0.0001 + sv12[55]) * (sp[59] / 2);
        sv12[83] = 2.0 * (0.0001 + sv12[55]) * (sp[60] / 2);
        sv12[84] = 2.0 * (0.0001 + sv12[55]) * (sp[58] / 2);
        sv12[85] = 2.0 * (0.0001 + sv12[55]) * (sp[56] / 2);
        sv12[86] = 2.0 * (0.0001 + sv12[55]) * (sp[53] / 2);
        sv12[87] = 2.0 * (0.0001 + sv12[55]) * (sp[55] / 2);
        sv12[88] = sv12[59] + sv12[78];
        sv12[89] = sv12[60] + sv12[79];
        sv12[90] = sv12[61] + sv12[82];
        sv12[91] = sv12[62] + sv12[83];
        sv12[92] = sv12[63] + sv12[84];
        sv12[93] = sv12[36] + -1 * sv12[88];
        sv12[94] = sv12[37] + -1 * sv12[89];
        sv12[95] = w3_c1 * sv12[11];
        sv12[96] = w3_c0 * sv12[15];
        sv12[97] = sv12[95] + sv12[96];
        sv12[98] = sv12[11] + sv12[11];
        sv12[99] = 2.0 * sv12[58] * (sv12[98] / 2);
        sv12[100] = 2.0 * (0.0001 + sv12[55]) * (sp[70] / 2);
        sv12[101] = sv12[99] + sv12[100];
        sv12[102] = sv12[2] + sv12[15];
        sv12[103] = 2.0 * sv12[77] * (sv12[102] / 2);
        sv12[104] = 2.0 * (0.0001 + sv12[55]) * (sp[89] / 2);
        sv12[105] = sv12[103] + sv12[104];
        sv12[106] = sv12[101] + sv12[105];
        sv12[107] = sv12[97] + -1 * sv12[106];
        sv12[108] = sv12[107] + sp[92];
        sv12[109] = sv12[108] * sv12[93];
        sv12[110] = sv12[108] * sv12[94];
        sv12[111] = sv12[108] * (-1 * sv12[80]);
        sv12[112] = sv12[108] * (-1 * sv12[81]);
        sv12[113] = sv12[108] * (-1 * sv12[90]);
        sv12[114] = sv12[108] * (-1 * sv12[91]);
        sv12[115] = sv12[108] * (-1 * sv12[92]);
        sv12[116] = sv12[108] * (-1 * sv12[85]);
        sv12[117] = sv12[108] * (-1 * sv12[86]);
        sv12[118] = sv12[108] * (-1 * sv12[87]);
        sv12[119] = sv12[108] * sp[3];
        sv12[120] = sv12[108] * sp[4];
        sv12[121] = 2.0 * sv12[58] * (sp[6] / 2);
        sv12[122] = 2.0 * sv12[58] * (sp[5] / 2);
        sv12[123] = 2.0 * sv12[58] * (sp[4] / 2);
        sv12[124] = 2.0 * sv12[58] * (sp[3] / 2);
        sv12[125] = 2.0 * (0.0001 + sv12[55]) * (sp[39] / 2);
        sv12[126] = 2.0 * (0.0001 + sv12[55]) * (sp[36] / 2);
        sv12[127] = 2.0 * (0.0001 + sv12[55]) * (sp[38] / 2);
        sv12[128] = 2.0 * sv12[77] * (sp[93] / 2);
        sv12[129] = 2.0 * sv12[77] * (sp[94] / 2);
        sv12[130] = 2.0 * (0.0001 + sv12[55]) * (sp[95] / 2);
        sv12[131] = 2.0 * (0.0001 + sv12[55]) * (sp[96] / 2);
        sv12[132] = 2.0 * (0.0001 + sv12[55]) * (sp[97] / 2);
        sv12[133] = sv12[128] + sv12[123];
        sv12[134] = sv12[129] + sv12[124];
        sv12[135] = sv12[130] + sv12[125];
        sv12[136] = sv12[131] + sv12[126];
        sv12[137] = sv12[132] + sv12[127];
        sv12[138] = sv12[37] + -1 * sv12[133];
        sv12[139] = sv12[36] + -1 * sv12[134];
        sv12[140] = w3_c1 * sv12[2];
        sv12[141] = w3_c0 * sv12[6];
        sv12[142] = sv12[140] + sv12[141];
        sv12[143] = 2.0 * sv12[58] * (sv12[102] / 2);
        sv12[144] = 2.0 * (0.0001 + sv12[55]) * (sp[110] / 2);
        sv12[145] = sv12[143] + sv12[144];
        sv12[146] = sv12[6] + sv12[6];
        sv12[147] = 2.0 * sv12[77] * (sv12[146] / 2);
        sv12[148] = 2.0 * (0.0001 + sv12[55]) * (sp[114] / 2);
        sv12[149] = sv12[147] + sv12[148];
        sv12[150] = sv12[145] + sv12[149];
        sv12[151] = sv12[142] + -1 * sv12[150];
        sv12[152] = sv12[151] + sp[117];
        sv12[153] = sv12[152] * (-1 * sv12[121]);
        sv12[154] = sv12[152] * (-1 * sv12[122]);
        sv12[155] = sv12[152] * sv12[138];
        sv12[156] = sv12[152] * sv12[139];
        sv12[157] = sv12[152] * (-1 * sv12[86]);
        sv12[158] = sv12[152] * (-1 * sv12[85]);
        sv12[159] = sv12[152] * (-1 * sv12[87]);
        sv12[160] = sv12[152] * (-1 * sv12[135]);
        sv12[161] = sv12[152] * (-1 * sv12[136]);
        sv12[162] = sv12[152] * (-1 * sv12[137]);
        sv12[163] = sv12[152] * sp[6];
        sv12[164] = sv12[152] * sp[5];
        sv12[165] = sv12[109] + sv12[153];
        sv12[166] = sv12[110] + sv12[154];
        sv12[167] = sv12[155] + sv12[111];
        sv12[168] = sv12[156] + sv12[112];
        sv12[169] = sv12[113] + sv12[157];
        sv12[170] = sv12[114] + sv12[158];
        sv12[171] = sv12[115] + sv12[159];
        sv12[172] = sv12[160] + sv12[116];
        sv12[173] = sv12[161] + sv12[117];
        sv12[174] = sv12[162] + sv12[118];
        sv12[175] = sv12[119] + sv12[163];
        sv12[176] = sv12[164] + sv12[120];
        sv12[177] = std::sqrt(sv12[25]);
        sv12[178] = 0.5 * (2.0 * sp[23]) * sv12[177];
        sv12[179] = sv12[178] / (0.0001 + sv12[55]);
        sv12[180] = std::exp(-2.0 * sv12[179]);
        sv12[181] = (1.0 + sv12[180]) / (1.0 + -1 * sv12[180]);
        sv12[182] = -1 * (1.0 / sv12[179]) + sv12[181];
        sv12[183] = sv12[182] * (2.0 * sp[23]);
        sv12[184] = sv12[183] / sv12[177];
        sv12[185] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[179]) * (2.0 * sp[23]);
        sv12[186] = sv12[185] * (2.0 * sp[23]);
        sv12[187] = sv12[186] / (0.0001 + sv12[55]);
        sv12[188] = (sv12[179] >= 0.1 ? sv12[184] : sv12[187]);
        sv12[189] = sv12[165] * sv12[188];
        sv12[190] = sv12[166] * sv12[188];
        sv12[191] = sv12[167] * sv12[188];
        sv12[192] = sv12[168] * sv12[188];
        sv12[193] = sv12[169] * sv12[188];
        sv12[194] = sv12[170] * sv12[188];
        sv12[195] = sv12[171] * sv12[188];
        sv12[196] = sv12[172] * sv12[188];
        sv12[197] = sv12[173] * sv12[188];
        sv12[198] = sv12[174] * sv12[188];
        sv12[199] = sv12[175] * sv12[188];
        sv12[200] = sv12[176] * sv12[188];
        sv12[201] = sv12[28] + sv12[189];
        sv12[202] = sv12[29] + sv12[190];
        sv12[203] = sv12[30] + sv12[191];
        sv12[204] = sv12[31] + sv12[192];
        sv12[205] = sp[3] * sv12[58];
        sv12[206] = sp[4] * sv12[58];
        sv12[207] = sp[6] * sv12[77];
        sv12[208] = sp[5] * sv12[77];
        sv12[209] = sv12[205] + sv12[207];
        sv12[210] = sv12[206] + sv12[208];
        sv12[211] = sv12[36] + -1 * sv12[209];
        sv12[212] = sv12[37] + -1 * sv12[210];
        sv12[213] = w3_c1 * sp[120];
        sv12[214] = w3_c0 * sp[123];
        sv12[215] = sv12[213] + sv12[214];
        sv12[216] = sp[120] * sv12[58];
        sv12[217] = sp[123] * sv12[77];
        sv12[218] = sv12[216] + sv12[217];
        sv12[219] = sv12[215] + -1 * sv12[218];
        sv12[220] = w3_c4 + sv12[219];
        sv12[221] = w3_d1_c1 * sp[3];
        sv12[222] = w3_d0_c1 * sp[4];
        sv12[223] = sv12[221] + sv12[222];
        sv12[224] = sv12[223] + sv12[223];
        sv12[225] = sv12[224] / 2 * (sv12[224] / 2);
        sv12[226] = w3_d1_c0 * sp[3];
        sv12[227] = w3_d0_c0 * sp[4];
        sv12[228] = sv12[226] + sv12[227];
        sv12[229] = w3_d0_c1 * sp[5];
        sv12[230] = w3_d1_c1 * sp[6];
        sv12[231] = sv12[229] + sv12[230];
        sv12[232] = sv12[228] + sv12[231];
        sv12[233] = sv12[232] / 2 * (sv12[232] / 2);
        sv12[234] = sv12[225] + sv12[233];
        sv12[235] = w3_d0_c0 * sp[5];
        sv12[236] = w3_d1_c0 * sp[6];
        sv12[237] = sv12[235] + sv12[236];
        sv12[238] = sv12[237] + sv12[237];
        sv12[239] = sv12[238] / 2 * (sv12[238] / 2);
        sv12[240] = sv12[239] + sv12[233];
        sv12[241] = sv12[234] + sv12[240];
        sv12[242] = 2.0 * sv12[241] * sv12[55];
        sv12[243] = sv12[220] + -1 * sv12[242];
        sv12[244] = sv12[211] * sv12[243];
        sv12[245] = sv12[212] * sv12[243];
        sv12[246] = sv12[244] * sv12[188];
        sv12[247] = sv12[245] * sv12[188];
        sv12[248] = sv12[58] / 1.3 * sp[3];
        sv12[249] = sv12[58] / 1.3 * sp[4];
        sv12[250] = sv12[77] / 1.3 * sp[6];
        sv12[251] = sv12[77] / 1.3 * sp[5];
        sv12[252] = sv12[248] + sv12[250];
        sv12[253] = sv12[251] + sv12[249];
        sv12[254] = sv12[36] + -1 * sv12[252];
        sv12[255] = sv12[37] + -1 * sv12[253];
        sv12[256] = w3_c3 * w3_c3;
        sv12[257] = std::sqrt(1e-8 + sv12[256]);
        sv12[258] = w3_c3 + sv12[257];
        sv12[259] = 1.92 * w2_c4 * (1.0 / (0.5 * sv12[258]));
        sv12[260] = w2_c4 / (0.5 * sv12[258]);
        sv12[261] = sv12[259] + 1.92 * sv12[260];
        sv12[262] = w3_c1 * sp[126];
        sv12[263] = w3_c0 * sp[129];
        sv12[264] = sv12[262] + sv12[263];
        sv12[265] = sp[126] * (sv12[58] / 1.3);
        sv12[266] = sp[129] * (sv12[77] / 1.3);
        sv12[267] = sv12[265] + sv12[266];
        sv12[268] = sv12[264] + -1 * sv12[267];
        sv12[269] = 1.92 * w2_c4 * sv12[260];
        sv12[270] = sv12[268] + sv12[269];
        sv12[271] = w3_c3 * (0.09 * (1.44 * sv12[38]));
        sv12[272] = 2.0 * sv12[241] * sv12[271];
        sv12[273] = sv12[270] + -1 * sv12[272];
        sv12[274] = sv12[254] * sv12[273];
        sv12[275] = sv12[255] * sv12[273];
        sv12[276] = sv12[273] * sv12[261];
        sv12[277] = sv12[178] / (0.0001 + sv12[55] / 1.3);
        sv12[278] = std::exp(-2.0 * sv12[277]);
        sv12[279] = (1.0 + sv12[278]) / (1.0 + -1 * sv12[278]);
        sv12[280] = -1 * (1.0 / sv12[277]) + sv12[279];
        sv12[281] = sv12[280] * (2.0 * sp[23]);
        sv12[282] = sv12[281] / sv12[177];
        sv12[283] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[277]) * (2.0 * sp[23]);
        sv12[284] = sv12[283] * (2.0 * sp[23]);
        sv12[285] = sv12[284] / (0.0001 + sv12[55] / 1.3);
        sv12[286] = (sv12[277] >= 0.1 ? sv12[282] : sv12[285]);
        sv12[287] = sv12[274] * sv12[286];
        sv12[288] = sv12[275] * sv12[286];
        sv12[289] = sv12[276] * sv12[286];
        sv12[290] = w2_c0 + -1 * w3_c0;
        sv12[291] = w2_c1 + -1 * w3_c1;
        sv12[292] = w2_c3 + -1 * w3_c3;
        sv12[293] = w2_c4 + -1 * w3_c4;
        sv12[294] = sv12[290] * w[1][0];
        sv12[295] = sv12[291] * w[1][0];
        sv12[296] = sv12[293] * w[1][0];
        sv12[297] = sv12[292] * w[1][0];
        sv12[298] = sv12[289] + sv12[296];
        sv12[299] = w2_c4 + sv12[297];
        sv12[300] = w2_c3 * (0.09 * (1.44 * sv12[38]));
        sv12[301] = 2.0 * sv12[241] * sv12[300];
        sv12[302] = sv12[298] + -1 * sv12[301];
        sv12[303] = w2_c3 * (0.09 * sv12[38]);
        sv12[304] = w2_c3 * sv12[303];
        sv12[305] = w2_c4 * w2_c4;
        sv12[306] = std::sqrt(1e-8 + sv12[305]);
        sv12[307] = w2_c4 + sv12[306];
        sv12[308] = sv12[304] / (0.5 * sv12[307]);
        sv12[309] = 2.0 * sv12[241] * sv12[308];
        sv12[310] = sv12[299] + -1 * sv12[309];
        sv12[311] = w2_c3 * w2_c3;
        sv12[312] = std::sqrt(1e-8 + sv12[311]);
        sv12[313] = w2_c3 + sv12[312];
        sv12[314] = w2_c4 / (0.5 * sv12[313]);
        sv12[315] = 1.92 * w2_c4 * sv12[314];
        sv12[316] = sv12[302] + sv12[315];
        sv12[317] = w2_c2 * sp[3];
        sv12[318] = w2_c2 * sp[4];
        sv12[319] = w2_c2 * sp[5];
        sv12[320] = w2_c2 * sp[6];
        sv12[321] = sv12[201] + -1 * sv12[317];
        sv12[322] = sv12[202] + -1 * sv12[318];
        sv12[323] = sv12[203] + -1 * sv12[319];
        sv12[324] = sv12[204] + -1 * sv12[320];
        sv12[325] = sp[134] * (0.0001 + sv12[308]);
        sv12[326] = sp[135] * (0.0001 + sv12[308]);
        sv12[327] = sv12[325] + sv12[246];
        sv12[328] = sv12[326] + sv12[247];
        sv12[329] = sp[140] * (0.0001 + sv12[308] / 1.3);
        sv12[330] = sp[141] * (0.0001 + sv12[308] / 1.3);
        sv12[331] = sv12[329] + sv12[287];
        sv12[332] = sv12[330] + sv12[288];
        sv12[333] = sv12[215] + sv12[310];
        sv12[334] = sv12[264] + sv12[316];
        sv12[335] = sv12[98] / 2 * (sp[34] / 2);
        sv12[336] = sv12[98] / 2 * (sp[35] / 2);
        sv12[337] = sv12[102] / 2 * (sp[6] / 2);
        sv12[338] = sv12[102] / 2 * (sp[5] / 2);
        sv12[339] = sv12[102] / 2 * (sp[4] / 2);
        sv12[340] = sv12[102] / 2 * (sp[3] / 2);
        sv12[341] = sv12[335] + sv12[337];
        sv12[342] = sv12[336] + sv12[338];
        sv12[343] = sv12[146] / 2 * (sp[93] / 2);
        sv12[344] = sv12[146] / 2 * (sp[94] / 2);
        sv12[345] = sv12[343] + sv12[339];
        sv12[346] = sv12[344] + sv12[340];
        sv12[347] = sv12[341] + sv12[337];
        sv12[348] = sv12[342] + sv12[338];
        sv12[349] = sv12[345] + sv12[339];
        sv12[350] = sv12[346] + sv12[340];
        sv12[351] = sv12[347] * (2.0 * (0.0001 + sv12[55]));
        sv12[352] = sv12[348] * (2.0 * (0.0001 + sv12[55]));
        sv12[353] = sv12[349] * (2.0 * (0.0001 + sv12[55]));
        sv12[354] = sv12[350] * (2.0 * (0.0001 + sv12[55]));
        sv12[355] = sv12[321] + sv12[351];
        sv12[356] = sv12[322] + sv12[352];
        sv12[357] = sv12[323] + sv12[353];
        sv12[358] = sv12[324] + sv12[354];
        sv12[359] = sv12[8] + sv12[294];
        sv12[360] = sv12[17] + sv12[295];
        sv12[361] = sv12[359] * sp[142];
        sv12[362] = sv12[360] * sp[142];
        sv12[363] = sv12[355] * sp[142];
        sv12[364] = sv12[356] * sp[142];
        sv12[365] = sv12[357] * sp[142];
        sv12[366] = sv12[358] * sp[142];
        sv12[367] = sv12[193] * sp[142];
        sv12[368] = sv12[194] * sp[142];
        sv12[369] = sv12[195] * sp[142];
        sv12[370] = sv12[196] * sp[142];
        sv12[371] = sv12[197] * sp[142];
        sv12[372] = sv12[198] * sp[142];
        sv12[373] = sv12[199] * sp[142];
        sv12[374] = sv12[200] * sp[142];
        sv12[375] = sv12[327] * sp[142];
        sv12[376] = sv12[328] * sp[142];
        sv12[377] = sv12[331] * sp[142];
        sv12[378] = sv12[332] * sp[142];
        sv12[379] = sv12[334] * sp[142];
        sv12[380] = sv12[333] * sp[142];
        sv12[381] = sv12[18] * sp[142];
        const double fw0 = sv12[361] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            BF0[i] += fw0 * FE70_C0_Q12[0][iq][i];
        const double fw1 = sv12[365] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF1[i] += fw1 * FE70_C0_D10_Q12[0][iq][i];
        const double fw2 = sv12[372] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF2[i] += fw2 * FE70_C0_D02_Q12[0][0][i];
        const double fw3 = sv12[366] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF3[i] += fw3 * FE70_C0_D01_Q12[0][iq][i];
        const double fw4 = sv12[371] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF4[i] += fw4 * FE70_C0_D02_Q12[0][0][i];
        const double fw5 = sv12[370] * weights12[iq];
        for (int i = 0; i < 4; ++i)
            BF5[i] += fw5 * FE70_C0_D11_Q12[0][0][i];
        const double fw6 = sv12[362] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            BF6[i] += fw6 * FE70_C0_Q12[0][iq][i];
        const double fw7 = sv12[364] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF7[i] += fw7 * FE70_C0_D10_Q12[0][iq][i];
        const double fw8 = sv12[369] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF8[i] += fw8 * FE70_C0_D02_Q12[0][0][i];
        const double fw9 = sv12[363] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF9[i] += fw9 * FE70_C0_D01_Q12[0][iq][i];
        const double fw10 = sv12[367] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF10[i] += fw10 * FE70_C0_D02_Q12[0][0][i];
        const double fw11 = sv12[368] * weights12[iq];
        for (int i = 0; i < 4; ++i)
            BF11[i] += fw11 * FE70_C0_D11_Q12[0][0][i];
        const double fw12 = sv12[374] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF12[i] += fw12 * FE3_C0_D01_Q12[0][0][i];
        const double fw13 = sv12[381] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF13[i] += fw13 * FE3_C0_Q12[0][iq][i];
        const double fw14 = sv12[373] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF14[i] += fw14 * FE3_C0_D01_Q12[0][0][i];
        const double fw15 = sv12[376] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF15[i] += fw15 * FE3_C0_D01_Q12[0][0][i];
        const double fw16 = sv12[380] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF16[i] += fw16 * FE3_C0_Q12[0][iq][i];
        const double fw17 = sv12[375] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF17[i] += fw17 * FE3_C0_D01_Q12[0][0][i];
        const double fw18 = sv12[378] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF18[i] += fw18 * FE3_C0_D01_Q12[0][0][i];
        const double fw19 = sv12[379] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF19[i] += fw19 * FE3_C0_Q12[0][iq][i];
        const double fw20 = sv12[377] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF20[i] += fw20 * FE3_C0_D01_Q12[0][0][i];
    }
    std::fill(A, A + 21, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[3] = { 0, 1, 5 };
    static const int DM2[5] = { 0, 2, 3, 4, 5 };
    static const int DM3[3] = { 0, 2, 4 };
    static const int DM4[4] = { 0, 3, 4, 5 };
    static const int DM5[5] = { 6, 7, 9, 10, 11 };
    static const int DM6[3] = { 6, 7, 11 };
    static const int DM7[5] = { 6, 8, 9, 10, 11 };
    static const int DM8[3] = { 6, 8, 10 };
    static const int DM9[4] = { 6, 9, 10, 11 };
    static const int DM10[2] = { 12, 14 };
    static const int DM11[2] = { 15, 17 };
    static const int DM12[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 5; ++i)
        A[DM0[i]] += BF1[i];
    for (int i = 0; i < 3; ++i)
        A[DM1[i]] += BF2[i];
    for (int i = 0; i < 5; ++i)
        A[DM2[i]] += BF3[i];
    for (int i = 0; i < 3; ++i)
        A[DM3[i]] += BF4[i];
    for (int i = 0; i < 4; ++i)
        A[DM4[i]] += BF5[i];
    for (int i = 0; i < 6; ++i)
        A[i + 6] += BF6[i];
    for (int i = 0; i < 5; ++i)
        A[DM5[i]] += BF7[i];
    for (int i = 0; i < 3; ++i)
        A[DM6[i]] += BF8[i];
    for (int i = 0; i < 5; ++i)
        A[DM7[i]] += BF9[i];
    for (int i = 0; i < 3; ++i)
        A[DM8[i]] += BF10[i];
    for (int i = 0; i < 4; ++i)
        A[DM9[i]] += BF11[i];
    for (int i = 0; i < 2; ++i)
        A[i + 12] += BF12[i];
    for (int i = 0; i < 3; ++i)
        A[i + 12] += BF13[i];
    for (int i = 0; i < 2; ++i)
        A[DM10[i]] += BF14[i];
    for (int i = 0; i < 2; ++i)
        A[i + 15] += BF15[i];
    for (int i = 0; i < 3; ++i)
        A[i + 15] += BF16[i];
    for (int i = 0; i < 2; ++i)
        A[DM11[i]] += BF17[i];
    for (int i = 0; i < 2; ++i)
        A[i + 18] += BF18[i];
    for (int i = 0; i < 3; ++i)
        A[i + 18] += BF19[i];
    for (int i = 0; i < 2; ++i)
        A[DM12[i]] += BF20[i];
  }

};


class ranspseudotimestepping_exterior_facet_integral_0_3: public ufc::exterior_facet_integral
{
public:

  ranspseudotimestepping_exterior_facet_integral_0_3() : ufc::exterior_facet_integral()
  {

  }

  ~ranspseudotimestepping_exterior_facet_integral_0_3() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, false, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 21
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.1739274225687268, 0.3260725774312731, 0.3260725774312731, 0.1739274225687268 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE35_C0_D01_F_Q4[3][4][5] =
        { { { 1.0, -0.7222726231881047, 3.722272623188091, -0.2777273768118826, -3.722272623188107 },
            { 1.0, 0.3200379128302891, 2.679962087169697, -1.320037912830275, -2.679962087169714 },
            { 1.0, 1.679962087169715, 1.320037912830271, -2.679962087169701, -1.320037912830287 },
            { 1.0, 2.722272623188108, 0.2777273768118786, -3.722272623188096, -0.2777273768118922 } },
          { { -2.72227262318811, -0.722272623188105, 0.0, 3.444545246376218, 0.0 },
            { -1.679962087169718, 0.3200379128302888, 0.0, 1.359924174339433, 0.0 },
            { -0.3200379128302928, 1.679962087169715, 0.0, -1.359924174339417, 0.0 },
            { 0.7222726231881, 2.722272623188108, 0.0, -3.444545246376202, 0.0 } },
          { { -2.72227262318811, -1.0, 0.2777273768118848, 3.722272623188112, -0.2777273768118925 },
            { -1.679962087169717, -1.0, 1.320037912830276, 2.679962087169721, -1.320037912830287 },
            { -0.3200379128302917, -1.0, 2.6799620871697, 1.320037912830298, -2.679962087169714 },
            { 0.7222726231880999, -1.0, 3.722272623188092, 0.2777273768119067, -3.722272623188106 } } };
    alignas(32) static const double FE35_C0_D10_F_Q4[3][4][5] =
        { { { 1.0, 2.722272623188104, 0.2777273768118936, -0.2777273768118936, -3.722272623188106 },
            { 1.0, 1.679962087169712, 1.320037912830285, -1.320037912830285, -2.679962087169713 },
            { 1.0, 0.3200379128302879, 2.679962087169708, -2.679962087169708, -1.320037912830288 },
            { 1.0, -0.7222726231881051, 3.722272623188099, -3.722272623188099, -0.2777273768118945 } },
          { { -2.722272623188107, -1.0, 0.277727376811893, -0.277727376811893, 3.72227262318811 },
            { -1.679962087169713, -1.0, 1.320037912830285, -1.320037912830285, 2.679962087169716 },
            { -0.3200379128302884, -1.0, 2.679962087169709, -2.679962087169709, 1.320037912830289 },
            { 0.7222726231881045, -1.0, 3.722272623188099, -3.722272623188099, 0.2777273768118963 } },
          { { -2.722272623188106, -0.7222726231881095, 0.0, 0.0, 3.444545246376216 },
            { -1.679962087169712, 0.3200379128302852, 0.0, 0.0, 1.359924174339427 },
            { -0.3200379128302857, 1.679962087169712, 0.0, 0.0, -1.359924174339426 },
            { 0.7222726231881069, 2.722272623188104, 0.0, 0.0, -3.444545246376211 } } };
    alignas(32) static const double FE35_C0_F_Q4[3][4][6] =
        { { { 0.0, 0.8013460293699309, -0.05979028222412166, 0.2584442528541909, 0.0, 0.0 },
            { 0.0, 0.2277840767909521, -0.1121969667939041, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.1121969667939041, 0.227784076790952, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.05979028222412169, 0.8013460293699309, 0.2584442528541908, 0.0, 0.0 } },
          { { 0.8013460293699309, 0.0, -0.05979028222412166, 0.0, 0.2584442528541908, 0.0 },
            { 0.2277840767909521, 0.0, -0.1121969667939041, 0.0, 0.8844128900029518, 0.0 },
            { -0.1121969667939041, 0.0, 0.2277840767909521, 0.0, 0.8844128900029519, 0.0 },
            { -0.05979028222412166, 0.0, 0.8013460293699309, 0.0, 0.2584442528541906, 0.0 } },
          { { 0.8013460293699309, -0.05979028222412169, 0.0, 0.0, 0.0, 0.2584442528541908 },
            { 0.2277840767909521, -0.1121969667939041, 0.0, 0.0, 0.0, 0.8844128900029519 },
            { -0.1121969667939041, 0.2277840767909522, 0.0, 0.0, 0.0, 0.884412890002952 },
            { -0.05979028222412169, 0.8013460293699308, 0.0, 0.0, 0.0, 0.2584442528541909 } } };
    alignas(32) static const double FE37_C2_D01_F_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE37_C2_F_Q4[3][4][3] =
        { { { 0.0, 0.9305681557970263, 0.06943184420297369 },
            { 0.0, 0.6699905217924281, 0.3300094782075718 },
            { 0.0, 0.3300094782075719, 0.6699905217924279 },
            { 0.0, 0.06943184420297382, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.0, 0.06943184420297369 },
            { 0.6699905217924281, 0.0, 0.3300094782075718 },
            { 0.3300094782075719, 0.0, 0.669990521792428 },
            { 0.06943184420297382, 0.0, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.06943184420297367, 0.0 },
            { 0.6699905217924281, 0.3300094782075718, 0.0 },
            { 0.3300094782075719, 0.6699905217924281, 0.0 },
            { 0.06943184420297374, 0.9305681557970263, 0.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE37_C2_D01_F_Q4[0][0][0] + coordinate_dofs[2] * FE37_C2_D01_F_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE37_C2_D01_F_Q4[0][0][0] + coordinate_dofs[5] * FE37_C2_D01_F_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE37_C2_D01_F_Q4[0][0][0] + coordinate_dofs[4] * FE37_C2_D01_F_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE37_C2_D01_F_Q4[0][0][0] + coordinate_dofs[3] * FE37_C2_D01_F_Q4[0][0][1];
    const double w2_d1_c3 = w[2][15] * FE37_C2_D01_F_Q4[0][0][0] + w[2][17] * FE37_C2_D01_F_Q4[0][0][1];
    double w2_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c3 += w[2][ic + 15] * FE37_C2_D01_F_Q4[0][0][ic];
    const double w2_d1_c4 = w[2][18] * FE37_C2_D01_F_Q4[0][0][0] + w[2][20] * FE37_C2_D01_F_Q4[0][0][1];
    double w2_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c4 += w[2][ic + 18] * FE37_C2_D01_F_Q4[0][0][ic];
    alignas(32) double sp[74];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = triangle_reference_facet_normals[facet][1] * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = triangle_reference_facet_normals[facet][0] * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet][0] * sp[9];
    sp[11] = -1 * J_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[20] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[21] = sp[19] + sp[20];
    sp[22] = std::sqrt(sp[21]);
    sp[23] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[24] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[25] = sp[23] + sp[24];
    sp[26] = std::sqrt(sp[25]);
    sp[27] = sp[22] * sp[26];
    sp[28] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[29] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[30] = sp[28] + sp[29];
    sp[31] = std::sqrt(sp[30]);
    sp[32] = sp[27] * sp[31];
    sp[33] = triangle_reference_cell_volume * sp[2];
    sp[34] = std::abs(sp[33]);
    sp[35] = sp[32] / (4.0 * sp[34]);
    sp[36] = sp[3] * sp[17];
    sp[37] = sp[5] * sp[17];
    sp[38] = sp[11] * sp[18];
    sp[39] = sp[9] * sp[18];
    sp[40] = sp[36] + sp[38];
    sp[41] = sp[37] + sp[39];
    sp[42] = w2_d1_c3 * sp[3];
    sp[43] = w2_d0_c3 * sp[5];
    sp[44] = sp[42] + sp[43];
    sp[45] = sp[44] * sp[17];
    sp[46] = w2_d0_c3 * sp[9];
    sp[47] = w2_d1_c3 * sp[11];
    sp[48] = sp[46] + sp[47];
    sp[49] = sp[48] * sp[18];
    sp[50] = sp[45] + sp[49];
    sp[51] = w2_d1_c4 * sp[3];
    sp[52] = w2_d0_c4 * sp[5];
    sp[53] = sp[51] + sp[52];
    sp[54] = sp[53] * sp[17];
    sp[55] = w2_d0_c4 * sp[9];
    sp[56] = w2_d1_c4 * sp[11];
    sp[57] = sp[55] + sp[56];
    sp[58] = sp[57] * sp[18];
    sp[59] = sp[54] + sp[58];
    sp[60] = sp[11] + sp[11];
    sp[61] = sp[9] + sp[9];
    sp[62] = sp[5] + sp[5];
    sp[63] = sp[3] + sp[3];
    sp[64] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[65] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[66] = sp[64] + sp[65];
    sp[67] = sp[66] * sp[66];
    sp[68] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[69] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[70] = sp[68] + sp[69];
    sp[71] = sp[70] * sp[70];
    sp[72] = sp[67] + sp[71];
    sp[73] = std::sqrt(sp[72]);
    alignas(32) double BF0[6] = {};
    alignas(32) double BF1[5] = {};
    alignas(32) double BF2[5] = {};
    alignas(32) double BF3[6] = {};
    alignas(32) double BF4[5] = {};
    alignas(32) double BF5[5] = {};
    alignas(32) double BF6[2] = {};
    alignas(32) double BF7[3] = {};
    alignas(32) double BF8[2] = {};
    alignas(32) double BF9[2] = {};
    alignas(32) double BF10[3] = {};
    alignas(32) double BF11[2] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE37_C2_F_Q4[facet][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE37_C2_F_Q4[facet][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4 += w[4][ic] * FE37_C2_F_Q4[facet][iq][ic];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c1 += w[3][ic + 6] * FE35_C0_F_Q4[facet][iq][ic];
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c0 += w[3][ic] * FE35_C0_F_Q4[facet][iq][ic];
        double w3_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c3 += w[3][ic + 15] * FE37_C2_F_Q4[facet][iq][ic];
        double w3_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c4 += w[3][ic + 18] * FE37_C2_F_Q4[facet][iq][ic];
        const double w2_d1_c0 = w[2][0] * FE35_C0_D01_F_Q4[facet][iq][0] + w[2][2] * FE35_C0_D01_F_Q4[facet][iq][1] + w[2][3] * FE35_C0_D01_F_Q4[facet][iq][2] + w[2][4] * FE35_C0_D01_F_Q4[facet][iq][3] + w[2][5] * FE35_C0_D01_F_Q4[facet][iq][4];
        const double w2_d0_c0 = w[2][0] * FE35_C0_D10_F_Q4[facet][iq][0] + w[2][1] * FE35_C0_D10_F_Q4[facet][iq][1] + w[2][3] * FE35_C0_D10_F_Q4[facet][iq][2] + w[2][4] * FE35_C0_D10_F_Q4[facet][iq][3] + w[2][5] * FE35_C0_D10_F_Q4[facet][iq][4];
        const double w2_d0_c1 = w[2][6] * FE35_C0_D10_F_Q4[facet][iq][0] + w[2][7] * FE35_C0_D10_F_Q4[facet][iq][1] + w[2][9] * FE35_C0_D10_F_Q4[facet][iq][2] + w[2][10] * FE35_C0_D10_F_Q4[facet][iq][3] + w[2][11] * FE35_C0_D10_F_Q4[facet][iq][4];
        const double w2_d1_c1 = w[2][6] * FE35_C0_D01_F_Q4[facet][iq][0] + w[2][8] * FE35_C0_D01_F_Q4[facet][iq][1] + w[2][9] * FE35_C0_D01_F_Q4[facet][iq][2] + w[2][10] * FE35_C0_D01_F_Q4[facet][iq][3] + w[2][11] * FE35_C0_D01_F_Q4[facet][iq][4];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE35_C0_F_Q4[facet][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE35_C0_F_Q4[facet][iq][ic];
        alignas(32) double sv4[129];
        sv4[0] = std::exp(w4);
        sv4[1] = w2_c3 * (0.09 * sv4[0]);
        sv4[2] = w2_c3 * sv4[1];
        sv4[3] = w2_c4 * w2_c4;
        sv4[4] = std::sqrt(1e-8 + sv4[3]);
        sv4[5] = w2_c4 + sv4[4];
        sv4[6] = sv4[2] / (0.5 * sv4[5]);
        sv4[7] = w3_c1 * sp[17];
        sv4[8] = w3_c0 * sp[18];
        sv4[9] = sv4[7] + sv4[8];
        sv4[10] = std::tanh(100.0 * sv4[9]);
        sv4[11] = (0.0001 + sv4[6] / 1.3) * (100000.0 * (0.5 + -1 * (0.5 * sv4[10])));
        sv4[12] = sv4[11] * (1.0 / (2.0 * sp[35]));
        sv4[13] = w2_c4 * sv4[12];
        sv4[14] = (0.0001 + sv4[6]) * (100000.0 * (0.5 + -1 * (0.5 * sv4[10])));
        sv4[15] = sv4[14] * (1.0 / (2.0 * sp[35]));
        sv4[16] = w2_c3 * sv4[15];
        sv4[17] = (0.5 + -1 * (0.5 * sv4[10])) * (0.0001 + sv4[6]);
        sv4[18] = sp[40] * sv4[17];
        sv4[19] = sp[41] * sv4[17];
        sv4[20] = w2_c3 * sv4[18];
        sv4[21] = w2_c3 * sv4[19];
        sv4[22] = sp[50] * sv4[17];
        sv4[23] = -1 * sv4[22] + sv4[16];
        sv4[24] = (0.5 + -1 * (0.5 * sv4[10])) * (0.0001 + sv4[6] / 1.3);
        sv4[25] = sp[40] * sv4[24];
        sv4[26] = sp[41] * sv4[24];
        sv4[27] = w2_c4 * sv4[25];
        sv4[28] = w2_c4 * sv4[26];
        sv4[29] = sp[59] * sv4[24];
        sv4[30] = sv4[23] + -1 * sv4[29];
        sv4[31] = w3_c3 * (0.09 * sv4[0]);
        sv4[32] = w3_c3 * sv4[31];
        sv4[33] = w3_c4 * w3_c4;
        sv4[34] = std::sqrt(1e-8 + sv4[33]);
        sv4[35] = w3_c4 + sv4[34];
        sv4[36] = sv4[32] / (0.5 * sv4[35]);
        sv4[37] = w2_d1_c0 * sp[3];
        sv4[38] = w2_d0_c0 * sp[5];
        sv4[39] = sv4[37] + sv4[38];
        sv4[40] = w2_d0_c1 * sp[9];
        sv4[41] = w2_d1_c1 * sp[11];
        sv4[42] = sv4[40] + sv4[41];
        sv4[43] = sv4[39] + sv4[42];
        sv4[44] = 2.0 * (0.0001 + sv4[36]) * (sv4[43] / 2);
        sv4[45] = sv4[44] * sp[17];
        sv4[46] = w2_d0_c0 * sp[9];
        sv4[47] = w2_d1_c0 * sp[11];
        sv4[48] = sv4[46] + sv4[47];
        sv4[49] = sv4[48] + sv4[48];
        sv4[50] = 2.0 * (0.0001 + sv4[36]) * (sv4[49] / 2);
        sv4[51] = sv4[50] * sp[18];
        sv4[52] = sv4[45] + sv4[51];
        sv4[53] = sv4[52] * (-1 * sp[17]);
        sv4[54] = w2_d1_c1 * sp[3];
        sv4[55] = w2_d0_c1 * sp[5];
        sv4[56] = sv4[54] + sv4[55];
        sv4[57] = sv4[56] + sv4[56];
        sv4[58] = 2.0 * (0.0001 + sv4[36]) * (sv4[57] / 2);
        sv4[59] = sv4[58] * sp[17];
        sv4[60] = sv4[44] * sp[18];
        sv4[61] = sv4[59] + sv4[60];
        sv4[62] = sv4[61] * sp[18];
        sv4[63] = sv4[53] + sv4[62];
        sv4[64] = sv4[63] * (-1 * sp[17]);
        sv4[65] = sv4[63] * sp[18];
        sv4[66] = w2_c0 + -1 * w[0][0];
        sv4[67] = sv4[66] * (-1 * sp[17]);
        sv4[68] = w2_c1 + -1 * w[0][1];
        sv4[69] = sv4[68] * sp[18];
        sv4[70] = sv4[67] + sv4[69];
        sv4[71] = 2.0 * (0.0001 + sv4[36]) * (sp[3] / 2);
        sv4[72] = 2.0 * (0.0001 + sv4[36]) * (sp[5] / 2);
        sv4[73] = 2.0 * (0.0001 + sv4[36]) * (sp[9] / 2);
        sv4[74] = 2.0 * (0.0001 + sv4[36]) * (sp[11] / 2);
        sv4[75] = sv4[71] * sp[17];
        sv4[76] = sv4[72] * sp[17];
        sv4[77] = sv4[73] * sp[17];
        sv4[78] = sv4[74] * sp[17];
        sv4[79] = 2.0 * (0.0001 + sv4[36]) * (sp[60] / 2);
        sv4[80] = 2.0 * (0.0001 + sv4[36]) * (sp[61] / 2);
        sv4[81] = sv4[79] * sp[18];
        sv4[82] = sv4[80] * sp[18];
        sv4[83] = sv4[75] + sv4[81];
        sv4[84] = sv4[76] + sv4[82];
        sv4[85] = sv4[83] * (-1 * sp[17]);
        sv4[86] = sv4[84] * (-1 * sp[17]);
        sv4[87] = -1 * sp[17] * sv4[77];
        sv4[88] = -1 * sp[17] * sv4[78];
        sv4[89] = 2.0 * (0.0001 + sv4[36]) * (sp[62] / 2);
        sv4[90] = 2.0 * (0.0001 + sv4[36]) * (sp[63] / 2);
        sv4[91] = sv4[89] * sp[17];
        sv4[92] = sv4[90] * sp[17];
        sv4[93] = sv4[71] * sp[18];
        sv4[94] = sv4[72] * sp[18];
        sv4[95] = sv4[73] * sp[18];
        sv4[96] = sv4[74] * sp[18];
        sv4[97] = sv4[91] + sv4[95];
        sv4[98] = sv4[92] + sv4[96];
        sv4[99] = sv4[93] * sp[18];
        sv4[100] = sv4[94] * sp[18];
        sv4[101] = sv4[97] * sp[18];
        sv4[102] = sv4[98] * sp[18];
        sv4[103] = sv4[85] + sv4[99];
        sv4[104] = sv4[86] + sv4[100];
        sv4[105] = sv4[87] + sv4[101];
        sv4[106] = sv4[88] + sv4[102];
        sv4[107] = sv4[70] * sv4[103];
        sv4[108] = sv4[70] * sv4[104];
        sv4[109] = sv4[70] * sv4[105];
        sv4[110] = sv4[70] * sv4[106];
        sv4[111] = 100000.0 * (0.0001 + sv4[36]) * (1.0 / (2.0 * sp[35]));
        sv4[112] = sv4[70] * sv4[111];
        sv4[113] = sv4[112] * (-1 * sp[17]);
        sv4[114] = sv4[112] * sp[18];
        sv4[115] = -1 * sv4[64] + sv4[113];
        sv4[116] = -1 * sv4[65] + sv4[114];
        sv4[117] = sv4[13] * sp[73];
        sv4[118] = sv4[30] * sp[73];
        sv4[119] = -1 * sv4[20] * sp[73];
        sv4[120] = -1 * sv4[21] * sp[73];
        sv4[121] = -1 * sv4[27] * sp[73];
        sv4[122] = -1 * sv4[28] * sp[73];
        sv4[123] = sv4[115] * sp[73];
        sv4[124] = sv4[116] * sp[73];
        sv4[125] = -1 * sv4[107] * sp[73];
        sv4[126] = -1 * sv4[108] * sp[73];
        sv4[127] = -1 * sv4[109] * sp[73];
        sv4[128] = -1 * sv4[110] * sp[73];
        const double fw0 = sv4[123] * weights4[iq];
        for (int i = 0; i < 6; ++i)
            BF0[i] += fw0 * FE35_C0_F_Q4[facet][iq][i];
        const double fw1 = sv4[126] * weights4[iq];
        for (int i = 0; i < 5; ++i)
            BF1[i] += fw1 * FE35_C0_D10_F_Q4[facet][iq][i];
        const double fw2 = sv4[125] * weights4[iq];
        for (int i = 0; i < 5; ++i)
            BF2[i] += fw2 * FE35_C0_D01_F_Q4[facet][iq][i];
        const double fw3 = sv4[124] * weights4[iq];
        for (int i = 0; i < 6; ++i)
            BF3[i] += fw3 * FE35_C0_F_Q4[facet][iq][i];
        const double fw4 = sv4[127] * weights4[iq];
        for (int i = 0; i < 5; ++i)
            BF4[i] += fw4 * FE35_C0_D10_F_Q4[facet][iq][i];
        const double fw5 = sv4[128] * weights4[iq];
        for (int i = 0; i < 5; ++i)
            BF5[i] += fw5 * FE35_C0_D01_F_Q4[facet][iq][i];
        const double fw6 = sv4[120] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF6[i] += fw6 * FE37_C2_D01_F_Q4[0][0][i];
        const double fw7 = sv4[118] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            BF7[i] += fw7 * FE37_C2_F_Q4[facet][iq][i];
        const double fw8 = sv4[119] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF8[i] += fw8 * FE37_C2_D01_F_Q4[0][0][i];
        const double fw9 = sv4[122] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF9[i] += fw9 * FE37_C2_D01_F_Q4[0][0][i];
        const double fw10 = sv4[117] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            BF10[i] += fw10 * FE37_C2_F_Q4[facet][iq][i];
        const double fw11 = sv4[121] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF11[i] += fw11 * FE37_C2_D01_F_Q4[0][0][i];
    }
    std::fill(A, A + 21, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    static const int DM4[2] = { 15, 17 };
    static const int DM5[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 5; ++i)
        A[DM0[i]] += BF1[i];
    for (int i = 0; i < 5; ++i)
        A[DM1[i]] += BF2[i];
    for (int i = 0; i < 6; ++i)
        A[i + 6] += BF3[i];
    for (int i = 0; i < 5; ++i)
        A[DM2[i]] += BF4[i];
    for (int i = 0; i < 5; ++i)
        A[DM3[i]] += BF5[i];
    for (int i = 0; i < 2; ++i)
        A[i + 15] += BF6[i];
    for (int i = 0; i < 3; ++i)
        A[i + 15] += BF7[i];
    for (int i = 0; i < 2; ++i)
        A[DM4[i]] += BF8[i];
    for (int i = 0; i < 2; ++i)
        A[i + 18] += BF9[i];
    for (int i = 0; i < 3; ++i)
        A[i + 18] += BF10[i];
    for (int i = 0; i < 2; ++i)
        A[DM5[i]] += BF11[i];
  }

};


class ranspseudotimestepping_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  ranspseudotimestepping_cell_integral_1_otherwise() : ufc::cell_integral()
  {

  }

  ~ranspseudotimestepping_cell_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 106
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    alignas(32) static const double FE85_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE85_C0_D02_Q12[1][1][3] = { { { 3.999999999999998, 4.000000000000004, -7.999999999999995 } } };
    alignas(32) static const double FE85_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE85_C0_D11_Q12[1][1][4] = { { { 4.0, 3.999999999999997, -3.999999999999997, -4.000000000000005 } } };
    alignas(32) static const double FE85_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803568, 0.2205142679699366 },
            { -0.05512856699248404, -0.05512856699248409, 0.6533077030470597, 0.2205142679699364, 0.2205142679699362, 0.01592089499803596 },
            { 0.6533077030470594, -0.05512856699248415, -0.05512856699248411, 0.01592089499803581, 0.2205142679699364, 0.2205142679699366 },
            { -0.1249989825350975, 0.001430579517788794, -0.1249989825350975, 0.4999959301403892, 0.2485755252716258, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788821, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880001, 0.173768363654174, -0.1177151633084292, 0.790160442765823, 0.06597478591860526, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880001, 0.1353078281686267, 0.06597478591860512, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860538 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880001, 0.06597478591860524, 0.1353078281686266, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860538 },
            { 0.1737683636541741, -0.04749625719880015, -0.1177151633084292, 0.06597478591860535, 0.7901604427658229, 0.1353078281686269 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q12[0][0][1];
    const double w1_d1_c4 = w[1][18] * FE3_C0_D01_Q12[0][0][0] + w[1][20] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c4 += w[1][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    const double w1_d1_c3 = w[1][15] * FE3_C0_D01_Q12[0][0][0] + w[1][17] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c3 += w[1][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w3_d1 = w[3][0] * FE3_C0_D01_Q12[0][0][0] + w[3][2] * FE3_C0_D01_Q12[0][0][1];
    double w3_d0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0 += w[3][ic] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c3 = w[2][15] * FE3_C0_D01_Q12[0][0][0] + w[2][17] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c3 += w[2][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c4 = w[2][18] * FE3_C0_D01_Q12[0][0][0] + w[2][20] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c4 += w[2][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    alignas(32) double sp[134];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = sp[3] * sp[3];
    sp[8] = sp[3] * sp[4];
    sp[9] = sp[4] * sp[4];
    sp[10] = sp[6] * sp[6];
    sp[11] = sp[5] * sp[6];
    sp[12] = sp[5] * sp[5];
    sp[13] = sp[7] + sp[10];
    sp[14] = sp[8] + sp[11];
    sp[15] = sp[12] + sp[9];
    sp[16] = w1_d1_c4 * sp[3];
    sp[17] = w1_d0_c4 * sp[4];
    sp[18] = sp[16] + sp[17];
    sp[19] = sp[18] * sp[3];
    sp[20] = sp[18] * sp[4];
    sp[21] = w1_d0_c4 * sp[5];
    sp[22] = w1_d1_c4 * sp[6];
    sp[23] = sp[21] + sp[22];
    sp[24] = sp[23] * sp[6];
    sp[25] = sp[23] * sp[5];
    sp[26] = sp[19] + sp[24];
    sp[27] = sp[25] + sp[20];
    sp[28] = w1_d1_c3 * sp[3];
    sp[29] = w1_d0_c3 * sp[4];
    sp[30] = sp[28] + sp[29];
    sp[31] = sp[30] * sp[3];
    sp[32] = sp[30] * sp[4];
    sp[33] = w1_d0_c3 * sp[5];
    sp[34] = w1_d1_c3 * sp[6];
    sp[35] = sp[33] + sp[34];
    sp[36] = sp[35] * sp[6];
    sp[37] = sp[35] * sp[5];
    sp[38] = sp[31] + sp[36];
    sp[39] = sp[37] + sp[32];
    sp[40] = sp[3] * sp[6];
    sp[41] = sp[3] * sp[5];
    sp[42] = sp[4] * sp[6];
    sp[43] = sp[5] * sp[4];
    sp[44] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[45] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[46] = sp[44] + sp[45];
    sp[47] = std::sqrt(sp[46]);
    sp[48] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[49] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[50] = sp[48] + sp[49];
    sp[51] = std::sqrt(sp[50]);
    sp[52] = sp[47] * sp[51];
    sp[53] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[54] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[55] = sp[53] + sp[54];
    sp[56] = std::sqrt(sp[55]);
    sp[57] = sp[52] * sp[56];
    sp[58] = triangle_reference_cell_volume * sp[2];
    sp[59] = std::abs(sp[58]);
    sp[60] = sp[57] / (4.0 * sp[59]);
    sp[61] = 2.0 * sp[60] * (2.0 * sp[60]);
    sp[62] = w3_d1 * sp[3];
    sp[63] = w3_d0 * sp[4];
    sp[64] = sp[62] + sp[63];
    sp[65] = w2_d1_c3 * sp[3];
    sp[66] = w2_d0_c3 * sp[4];
    sp[67] = sp[65] + sp[66];
    sp[68] = w2_d1_c4 * sp[3];
    sp[69] = w2_d0_c4 * sp[4];
    sp[70] = sp[68] + sp[69];
    sp[71] = sp[3] + sp[3];
    sp[72] = sp[4] + sp[4];
    sp[73] = sp[8] + sp[8];
    sp[74] = sp[7] + sp[7];
    sp[75] = sp[73] + sp[73];
    sp[76] = sp[9] + sp[9];
    sp[77] = w3_d0 * sp[5];
    sp[78] = w3_d1 * sp[6];
    sp[79] = sp[77] + sp[78];
    sp[80] = w2_d0_c3 * sp[5];
    sp[81] = w2_d1_c3 * sp[6];
    sp[82] = sp[80] + sp[81];
    sp[83] = w2_d0_c4 * sp[5];
    sp[84] = w2_d1_c4 * sp[6];
    sp[85] = sp[83] + sp[84];
    sp[86] = sp[41] + sp[42];
    sp[87] = sp[11] + sp[11];
    sp[88] = sp[5] + sp[5];
    sp[89] = sp[6] + sp[6];
    sp[90] = sp[87] + sp[87];
    sp[91] = sp[10] + sp[10];
    sp[92] = sp[12] + sp[12];
    sp[93] = sp[71] / 2 * (sp[71] / 2);
    sp[94] = sp[71] / 2 * (sp[72] / 2);
    sp[95] = sp[72] / 2 * (sp[72] / 2);
    sp[96] = sp[3] / 2 * (sp[6] / 2);
    sp[97] = sp[4] / 2 * (sp[6] / 2);
    sp[98] = sp[6] / 2 * (sp[6] / 2);
    sp[99] = sp[5] / 2 * (sp[6] / 2);
    sp[100] = sp[3] / 2 * (sp[5] / 2);
    sp[101] = sp[5] / 2 * (sp[4] / 2);
    sp[102] = sp[5] / 2 * (sp[5] / 2);
    sp[103] = sp[3] / 2 * (sp[4] / 2);
    sp[104] = sp[4] / 2 * (sp[4] / 2);
    sp[105] = sp[3] / 2 * (sp[3] / 2);
    sp[106] = sp[93] + sp[98];
    sp[107] = sp[94] + sp[99];
    sp[108] = sp[95] + sp[102];
    sp[109] = sp[88] / 2 * (sp[89] / 2);
    sp[110] = sp[88] / 2 * (sp[88] / 2);
    sp[111] = sp[89] / 2 * (sp[89] / 2);
    sp[112] = sp[109] + sp[103];
    sp[113] = sp[111] + sp[105];
    sp[114] = sp[110] + sp[104];
    sp[115] = sp[96] + sp[96];
    sp[116] = sp[100] + sp[100];
    sp[117] = sp[112] + sp[103];
    sp[118] = sp[113] + sp[105];
    sp[119] = sp[97] + sp[97];
    sp[120] = sp[101] + sp[101];
    sp[121] = sp[114] + sp[104];
    sp[122] = sp[106] + sp[98];
    sp[123] = sp[107] + sp[99];
    sp[124] = sp[108] + sp[102];
    sp[125] = std::abs(sp[2]);
    sp[126] = sp[6] * sp[125];
    sp[127] = sp[5] * sp[125];
    sp[128] = sp[3] * sp[125];
    sp[129] = sp[4] * sp[125];
    sp[130] = -1 * sp[3] * sp[125];
    sp[131] = -1 * sp[4] * sp[125];
    sp[132] = -1 * sp[5] * sp[125];
    sp[133] = -1 * sp[6] * sp[125];
    alignas(32) double BF0[6][6] = {};
    alignas(32) double BF1[6][5] = {};
    alignas(32) double BF2[6][5] = {};
    alignas(32) double BF3[6][6] = {};
    alignas(32) double BF4[5][5] = {};
    alignas(32) double TP0[5] = {};
    alignas(32) double BF5[5][5] = {};
    alignas(32) double TP1[5] = {};
    alignas(32) double TP2[5] = {};
    alignas(32) double BF6[5][5] = {};
    alignas(32) double TP3[5] = {};
    alignas(32) double BF7[5][5] = {};
    alignas(32) double TP4[5] = {};
    alignas(32) double TP5[5] = {};
    alignas(32) double TP6[5] = {};
    alignas(32) double TP7[5] = {};
    alignas(32) double TP8[5] = {};
    alignas(32) double TP9[3] = {};
    alignas(32) double TP10[5] = {};
    alignas(32) double TP11[3] = {};
    alignas(32) double TP12[4] = {};
    alignas(32) double TP13[5] = {};
    alignas(32) double TP14[3] = {};
    alignas(32) double TP15[5] = {};
    alignas(32) double TP16[3] = {};
    alignas(32) double TP17[4] = {};
    alignas(32) double TP18[2] = {};
    alignas(32) double TP19[2] = {};
    alignas(32) double BF8[5][5] = {};
    alignas(32) double TP20[5] = {};
    alignas(32) double BF9[5][5] = {};
    alignas(32) double TP21[5] = {};
    alignas(32) double TP22[5] = {};
    alignas(32) double BF10[5][5] = {};
    alignas(32) double TP23[5] = {};
    alignas(32) double BF11[5][5] = {};
    alignas(32) double TP24[5] = {};
    alignas(32) double TP25[5] = {};
    alignas(32) double TP26[5] = {};
    alignas(32) double TP27[5] = {};
    alignas(32) double TP28[5] = {};
    alignas(32) double TP29[5] = {};
    alignas(32) double TP30[3] = {};
    alignas(32) double TP31[4] = {};
    alignas(32) double TP32[5] = {};
    alignas(32) double TP33[3] = {};
    alignas(32) double TP34[5] = {};
    alignas(32) double TP35[3] = {};
    alignas(32) double TP36[4] = {};
    alignas(32) double TP37[2] = {};
    alignas(32) double TP38[2] = {};
    alignas(32) double TP39[5] = {};
    alignas(32) double TP40[3] = {};
    alignas(32) double TP41[5] = {};
    alignas(32) double TP42[3] = {};
    alignas(32) double TP43[4] = {};
    alignas(32) double TP44[5] = {};
    alignas(32) double TP45[3] = {};
    alignas(32) double TP46[5] = {};
    alignas(32) double TP47[3] = {};
    alignas(32) double TP48[4] = {};
    alignas(32) double TP49[2] = {};
    alignas(32) double TP50[2] = {};
    alignas(32) double BF12[6][6] = {};
    alignas(32) double BF13[6][6] = {};
    alignas(32) double TP51[5] = {};
    alignas(32) double BF14[5][5] = {};
    alignas(32) double TP52[5] = {};
    alignas(32) double TP53[5] = {};
    alignas(32) double BF15[5][5] = {};
    alignas(32) double TP54[5] = {};
    alignas(32) double BF16[5][5] = {};
    alignas(32) double TP55[5] = {};
    alignas(32) double TP56[5] = {};
    alignas(32) double TP57[5] = {};
    alignas(32) double TP58[5] = {};
    alignas(32) double TP59[5] = {};
    alignas(32) double TP60[5] = {};
    alignas(32) double TP61[4] = {};
    alignas(32) double TP62[5] = {};
    alignas(32) double TP63[3] = {};
    alignas(32) double TP64[5] = {};
    alignas(32) double TP65[3] = {};
    alignas(32) double TP66[4] = {};
    alignas(32) double TP67[2] = {};
    alignas(32) double TP68[2] = {};
    alignas(32) double BF17[5][5] = {};
    alignas(32) double TP69[5] = {};
    alignas(32) double TP70[5] = {};
    alignas(32) double TP71[5] = {};
    alignas(32) double BF18[5][5] = {};
    alignas(32) double TP72[5] = {};
    alignas(32) double BF19[5][5] = {};
    alignas(32) double TP73[5] = {};
    alignas(32) double TP74[5] = {};
    alignas(32) double TP75[5] = {};
    alignas(32) double TP76[5] = {};
    alignas(32) double TP77[5] = {};
    alignas(32) double TP78[5] = {};
    alignas(32) double TP79[4] = {};
    alignas(32) double TP80[5] = {};
    alignas(32) double TP81[5] = {};
    alignas(32) double TP82[3] = {};
    alignas(32) double TP83[4] = {};
    alignas(32) double TP84[2] = {};
    alignas(32) double TP85[2] = {};
    alignas(32) double TP86[5] = {};
    alignas(32) double TP87[3] = {};
    alignas(32) double TP88[5] = {};
    alignas(32) double TP89[3] = {};
    alignas(32) double TP90[5] = {};
    alignas(32) double TP91[3] = {};
    alignas(32) double TP92[5] = {};
    alignas(32) double TP93[3] = {};
    alignas(32) double TP94[4] = {};
    alignas(32) double TP95[2] = {};
    alignas(32) double TP96[2] = {};
    alignas(32) double TP97[5] = {};
    alignas(32) double TP98[3] = {};
    alignas(32) double TP99[5] = {};
    alignas(32) double TP100[3] = {};
    alignas(32) double TP101[4] = {};
    alignas(32) double TP102[5] = {};
    alignas(32) double TP103[3] = {};
    alignas(32) double TP104[5] = {};
    alignas(32) double TP105[3] = {};
    alignas(32) double TP106[4] = {};
    alignas(32) double TP107[2] = {};
    alignas(32) double TP108[2] = {};
    alignas(32) double TP109[5] = {};
    alignas(32) double TP110[3] = {};
    alignas(32) double TP111[5] = {};
    alignas(32) double TP112[3] = {};
    alignas(32) double TP113[4] = {};
    alignas(32) double TP114[5] = {};
    alignas(32) double TP115[3] = {};
    alignas(32) double TP116[5] = {};
    alignas(32) double TP117[3] = {};
    alignas(32) double TP118[4] = {};
    alignas(32) double TP119[2] = {};
    alignas(32) double TP120[2] = {};
    alignas(32) double TP121[3] = {};
    alignas(32) double TP122[2] = {};
    alignas(32) double TP123[3] = {};
    alignas(32) double TP124[3] = {};
    alignas(32) double BF20[3][3] = {};
    alignas(32) double TP125[3] = {};
    alignas(32) double BF21[3][3] = {};
    alignas(32) double TP126[3] = {};
    alignas(32) double TP127[2] = {};
    alignas(32) double TP128[3] = {};
    alignas(32) double TP129[3] = {};
    alignas(32) double TP130[2] = {};
    alignas(32) double TP131[3] = {};
    alignas(32) double TP132[2] = {};
    alignas(32) double BF22[3][3] = {};
    alignas(32) double TP133[3] = {};
    alignas(32) double BF23[3][3] = {};
    alignas(32) double TP134[3] = {};
    alignas(32) double TP135[3] = {};
    alignas(32) double TP136[3] = {};
    alignas(32) double TP137[2] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c1 += w[1][ic + 6] * FE85_C0_Q12[0][iq][ic];
        const double w1_d1_c0 = w[1][0] * FE85_C0_D01_Q12[0][iq][0] + w[1][2] * FE85_C0_D01_Q12[0][iq][1] + w[1][3] * FE85_C0_D01_Q12[0][iq][2] + w[1][4] * FE85_C0_D01_Q12[0][iq][3] + w[1][5] * FE85_C0_D01_Q12[0][iq][4];
        const double w1_d0_c0 = w[1][0] * FE85_C0_D10_Q12[0][iq][0] + w[1][1] * FE85_C0_D10_Q12[0][iq][1] + w[1][3] * FE85_C0_D10_Q12[0][iq][2] + w[1][4] * FE85_C0_D10_Q12[0][iq][3] + w[1][5] * FE85_C0_D10_Q12[0][iq][4];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c0 += w[1][ic] * FE85_C0_Q12[0][iq][ic];
        const double w1_d1_c1 = w[1][6] * FE85_C0_D01_Q12[0][iq][0] + w[1][8] * FE85_C0_D01_Q12[0][iq][1] + w[1][9] * FE85_C0_D01_Q12[0][iq][2] + w[1][10] * FE85_C0_D01_Q12[0][iq][3] + w[1][11] * FE85_C0_D01_Q12[0][iq][4];
        const double w1_d0_c1 = w[1][6] * FE85_C0_D10_Q12[0][iq][0] + w[1][7] * FE85_C0_D10_Q12[0][iq][1] + w[1][9] * FE85_C0_D10_Q12[0][iq][2] + w[1][10] * FE85_C0_D10_Q12[0][iq][3] + w[1][11] * FE85_C0_D10_Q12[0][iq][4];
        double w1_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c3 += w[1][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3 += w[3][ic] * FE3_C0_Q12[0][iq][ic];
        double w1_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c4 += w[1][ic + 18] * FE3_C0_Q12[0][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE85_C0_Q12[0][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE85_C0_Q12[0][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE3_C0_Q12[0][iq][ic];
        const double w2_d1_c1 = w[2][6] * FE85_C0_D01_Q12[0][iq][0] + w[2][8] * FE85_C0_D01_Q12[0][iq][1] + w[2][9] * FE85_C0_D01_Q12[0][iq][2] + w[2][10] * FE85_C0_D01_Q12[0][iq][3] + w[2][11] * FE85_C0_D01_Q12[0][iq][4];
        const double w2_d0_c1 = w[2][6] * FE85_C0_D10_Q12[0][iq][0] + w[2][7] * FE85_C0_D10_Q12[0][iq][1] + w[2][9] * FE85_C0_D10_Q12[0][iq][2] + w[2][10] * FE85_C0_D10_Q12[0][iq][3] + w[2][11] * FE85_C0_D10_Q12[0][iq][4];
        const double w2_d1_c0 = w[2][0] * FE85_C0_D01_Q12[0][iq][0] + w[2][2] * FE85_C0_D01_Q12[0][iq][1] + w[2][3] * FE85_C0_D01_Q12[0][iq][2] + w[2][4] * FE85_C0_D01_Q12[0][iq][3] + w[2][5] * FE85_C0_D01_Q12[0][iq][4];
        const double w2_d0_c0 = w[2][0] * FE85_C0_D10_Q12[0][iq][0] + w[2][1] * FE85_C0_D10_Q12[0][iq][1] + w[2][3] * FE85_C0_D10_Q12[0][iq][2] + w[2][4] * FE85_C0_D10_Q12[0][iq][3] + w[2][5] * FE85_C0_D10_Q12[0][iq][4];
        alignas(32) double sv12[702];
        sv12[0] = w1_c1 * sp[3];
        sv12[1] = w1_c1 * sp[4];
        sv12[2] = w1_d1_c0 * sp[3];
        sv12[3] = w1_d0_c0 * sp[4];
        sv12[4] = sv12[2] + sv12[3];
        sv12[5] = w1_c0 * sp[6];
        sv12[6] = w1_c0 * sp[5];
        sv12[7] = w1_d0_c0 * sp[5];
        sv12[8] = w1_d1_c0 * sp[6];
        sv12[9] = sv12[7] + sv12[8];
        sv12[10] = sv12[0] + sv12[5];
        sv12[11] = sv12[6] + sv12[1];
        sv12[12] = w1_d1_c1 * sp[3];
        sv12[13] = w1_d0_c1 * sp[4];
        sv12[14] = sv12[12] + sv12[13];
        sv12[15] = w1_d0_c1 * sp[5];
        sv12[16] = w1_d1_c1 * sp[6];
        sv12[17] = sv12[15] + sv12[16];
        sv12[18] = std::exp(w3);
        sv12[19] = w1_c3 * (0.09 * sv12[18]);
        sv12[20] = w1_c3 * sv12[19];
        sv12[21] = w1_c4 * w1_c4;
        sv12[22] = std::sqrt(1e-8 + sv12[21]);
        sv12[23] = w1_c4 + sv12[22];
        sv12[24] = sv12[20] / (0.5 * sv12[23]);
        sv12[25] = sp[13] * (0.0001 + sv12[24] / 1.3);
        sv12[26] = sp[14] * (0.0001 + sv12[24] / 1.3);
        sv12[27] = sp[15] * (0.0001 + sv12[24] / 1.3);
        sv12[28] = sv12[19] + sv12[19];
        sv12[29] = w1_c4 + w1_c4;
        sv12[30] = sv12[29] / (2 * sv12[22]);
        sv12[31] = 0.5 * (1.0 + sv12[30]) * sv12[24];
        sv12[32] = sv12[28] / (0.5 * sv12[23]);
        sv12[33] = -1 * sv12[31] / (0.5 * sv12[23]);
        sv12[34] = sp[26] * (sv12[32] / 1.3);
        sv12[35] = sp[26] * (sv12[33] / 1.3);
        sv12[36] = sp[27] * (sv12[32] / 1.3);
        sv12[37] = sp[27] * (sv12[33] / 1.3);
        sv12[38] = sp[13] * (0.0001 + sv12[24]);
        sv12[39] = sp[14] * (0.0001 + sv12[24]);
        sv12[40] = sp[15] * (0.0001 + sv12[24]);
        sv12[41] = sp[38] * sv12[32];
        sv12[42] = sp[38] * sv12[33];
        sv12[43] = sp[39] * sv12[32];
        sv12[44] = sp[39] * sv12[33];
        sv12[45] = w2_c0 * w2_c0;
        sv12[46] = w2_c1 * w2_c1;
        sv12[47] = sv12[45] + sv12[46];
        sv12[48] = std::sqrt(1e-9 + sv12[47]);
        sv12[49] = sp[61] * sv12[48];
        sv12[50] = sp[40] * sv12[49];
        sv12[51] = sp[42] * sv12[49];
        sv12[52] = sp[11] * sv12[49];
        sv12[53] = sp[10] * sv12[49];
        sv12[54] = sp[41] * sv12[49];
        sv12[55] = sp[43] * sv12[49];
        sv12[56] = sp[12] * sv12[49];
        sv12[57] = sp[7] * sv12[49];
        sv12[58] = sp[8] * sv12[49];
        sv12[59] = sp[9] * sv12[49];
        sv12[60] = w2_c1 * sp[3];
        sv12[61] = w2_c1 * sp[4];
        sv12[62] = w2_c0 * sp[6];
        sv12[63] = w2_c0 * sp[5];
        sv12[64] = sv12[60] + sv12[62];
        sv12[65] = sv12[63] + sv12[61];
        sv12[66] = sp[64] * sv12[18];
        sv12[67] = w2_c3 * (0.09 * sv12[66]);
        sv12[68] = sp[67] * (0.09 * sv12[18]);
        sv12[69] = sv12[67] + sv12[68];
        sv12[70] = w2_c3 * sv12[69];
        sv12[71] = w2_c3 * (0.09 * sv12[18]);
        sv12[72] = sp[67] * sv12[71];
        sv12[73] = sv12[70] + sv12[72];
        sv12[74] = w2_c4 * sp[70];
        sv12[75] = sv12[74] + sv12[74];
        sv12[76] = w2_c4 * w2_c4;
        sv12[77] = std::sqrt(1e-8 + sv12[76]);
        sv12[78] = sv12[75] / (2 * sv12[77]);
        sv12[79] = sp[70] + sv12[78];
        sv12[80] = w2_c3 * sv12[71];
        sv12[81] = w2_c4 + sv12[77];
        sv12[82] = sv12[80] / (0.5 * sv12[81]);
        sv12[83] = 0.5 * sv12[79] * sv12[82];
        sv12[84] = sv12[73] + -1 * sv12[83];
        sv12[85] = sv12[84] / (0.5 * sv12[81]);
        sv12[86] = 2.0 * sv12[85] * (sp[71] / 2);
        sv12[87] = 2.0 * sv12[85] * (sp[72] / 2);
        sv12[88] = 2.0 * (0.0001 + sv12[82]) * (sp[74] / 2);
        sv12[89] = 2.0 * (0.0001 + sv12[82]) * (sp[75] / 2);
        sv12[90] = 2.0 * (0.0001 + sv12[82]) * (sp[76] / 2);
        sv12[91] = sp[79] * sv12[18];
        sv12[92] = w2_c3 * (0.09 * sv12[91]);
        sv12[93] = sp[82] * (0.09 * sv12[18]);
        sv12[94] = sv12[92] + sv12[93];
        sv12[95] = w2_c3 * sv12[94];
        sv12[96] = sp[82] * sv12[71];
        sv12[97] = sv12[95] + sv12[96];
        sv12[98] = w2_c4 * sp[85];
        sv12[99] = sv12[98] + sv12[98];
        sv12[100] = sv12[99] / (2 * sv12[77]);
        sv12[101] = sp[85] + sv12[100];
        sv12[102] = 0.5 * sv12[101] * sv12[82];
        sv12[103] = sv12[97] + -1 * sv12[102];
        sv12[104] = sv12[103] / (0.5 * sv12[81]);
        sv12[105] = 2.0 * sv12[104] * (sp[6] / 2);
        sv12[106] = 2.0 * sv12[104] * (sp[5] / 2);
        sv12[107] = 2.0 * sv12[104] * (sp[4] / 2);
        sv12[108] = 2.0 * sv12[104] * (sp[3] / 2);
        sv12[109] = 2.0 * (0.0001 + sv12[82]) * (sp[10] / 2);
        sv12[110] = 2.0 * (0.0001 + sv12[82]) * (sp[87] / 2);
        sv12[111] = 2.0 * (0.0001 + sv12[82]) * (sp[12] / 2);
        sv12[112] = 2.0 * (0.0001 + sv12[82]) * (sp[86] / 2);
        sv12[113] = 2.0 * (0.0001 + sv12[82]) * (sp[40] / 2);
        sv12[114] = 2.0 * (0.0001 + sv12[82]) * (sp[43] / 2);
        sv12[115] = sv12[86] + sv12[105];
        sv12[116] = sv12[87] + sv12[106];
        sv12[117] = sv12[88] + sv12[109];
        sv12[118] = sv12[89] + sv12[110];
        sv12[119] = sv12[90] + sv12[111];
        sv12[120] = sv12[64] + -1 * sv12[115];
        sv12[121] = sv12[65] + -1 * sv12[116];
        sv12[122] = sv12[120] * (-1 * sv12[108]);
        sv12[123] = sv12[120] * (-1 * sv12[107]);
        sv12[124] = sv12[120] * sv12[120];
        sv12[125] = sv12[121] * sv12[120];
        sv12[126] = sv12[120] * (-1 * sv12[117]);
        sv12[127] = sv12[120] * (-1 * sv12[118]);
        sv12[128] = sv12[120] * (-1 * sv12[119]);
        sv12[129] = sv12[120] * (-1 * sv12[112]);
        sv12[130] = sv12[120] * (-1 * sv12[113]);
        sv12[131] = sv12[120] * (-1 * sv12[114]);
        sv12[132] = sv12[120] * sp[3];
        sv12[133] = sv12[120] * sp[4];
        sv12[134] = sv12[121] * (-1 * sv12[108]);
        sv12[135] = sv12[121] * (-1 * sv12[107]);
        sv12[136] = sv12[121] * sv12[121];
        sv12[137] = sv12[121] * (-1 * sv12[117]);
        sv12[138] = sv12[121] * (-1 * sv12[118]);
        sv12[139] = sv12[121] * (-1 * sv12[119]);
        sv12[140] = sv12[121] * (-1 * sv12[112]);
        sv12[141] = sv12[121] * (-1 * sv12[113]);
        sv12[142] = sv12[121] * (-1 * sv12[114]);
        sv12[143] = sv12[121] * sp[3];
        sv12[144] = sv12[121] * sp[4];
        sv12[145] = -1 * sv12[108] * (-1 * sv12[107]);
        sv12[146] = -1 * sv12[107] * (-1 * sv12[107]);
        sv12[147] = -1 * sv12[117] * (-1 * sv12[107]);
        sv12[148] = -1 * sv12[118] * (-1 * sv12[107]);
        sv12[149] = -1 * sv12[119] * (-1 * sv12[107]);
        sv12[150] = -1 * sv12[112] * (-1 * sv12[107]);
        sv12[151] = -1 * sv12[113] * (-1 * sv12[107]);
        sv12[152] = -1 * sv12[114] * (-1 * sv12[107]);
        sv12[153] = -1 * sv12[107] * sp[3];
        sv12[154] = -1 * sv12[107] * sp[4];
        sv12[155] = -1 * sv12[108] * (-1 * sv12[108]);
        sv12[156] = -1 * sv12[117] * (-1 * sv12[108]);
        sv12[157] = -1 * sv12[118] * (-1 * sv12[108]);
        sv12[158] = -1 * sv12[119] * (-1 * sv12[108]);
        sv12[159] = -1 * sv12[112] * (-1 * sv12[108]);
        sv12[160] = -1 * sv12[113] * (-1 * sv12[108]);
        sv12[161] = -1 * sv12[114] * (-1 * sv12[108]);
        sv12[162] = -1 * sv12[108] * sp[3];
        sv12[163] = -1 * sv12[108] * sp[4];
        sv12[164] = -1 * sv12[117] * (-1 * sv12[117]);
        sv12[165] = -1 * sv12[118] * (-1 * sv12[117]);
        sv12[166] = -1 * sv12[119] * (-1 * sv12[117]);
        sv12[167] = -1 * sv12[117] * (-1 * sv12[112]);
        sv12[168] = -1 * sv12[117] * (-1 * sv12[113]);
        sv12[169] = -1 * sv12[117] * (-1 * sv12[114]);
        sv12[170] = -1 * sv12[117] * sp[3];
        sv12[171] = -1 * sv12[117] * sp[4];
        sv12[172] = -1 * sv12[118] * (-1 * sv12[118]);
        sv12[173] = -1 * sv12[118] * (-1 * sv12[119]);
        sv12[174] = -1 * sv12[118] * (-1 * sv12[112]);
        sv12[175] = -1 * sv12[118] * (-1 * sv12[113]);
        sv12[176] = -1 * sv12[118] * (-1 * sv12[114]);
        sv12[177] = -1 * sv12[118] * sp[3];
        sv12[178] = -1 * sv12[118] * sp[4];
        sv12[179] = -1 * sv12[119] * (-1 * sv12[119]);
        sv12[180] = -1 * sv12[119] * (-1 * sv12[112]);
        sv12[181] = -1 * sv12[119] * (-1 * sv12[113]);
        sv12[182] = -1 * sv12[119] * (-1 * sv12[114]);
        sv12[183] = -1 * sv12[119] * sp[3];
        sv12[184] = -1 * sv12[119] * sp[4];
        sv12[185] = -1 * sv12[112] * (-1 * sv12[112]);
        sv12[186] = -1 * sv12[112] * (-1 * sv12[113]);
        sv12[187] = -1 * sv12[112] * (-1 * sv12[114]);
        sv12[188] = -1 * sv12[112] * sp[3];
        sv12[189] = -1 * sv12[112] * sp[4];
        sv12[190] = -1 * sv12[113] * (-1 * sv12[113]);
        sv12[191] = -1 * sv12[114] * (-1 * sv12[113]);
        sv12[192] = -1 * sv12[113] * sp[3];
        sv12[193] = -1 * sv12[113] * sp[4];
        sv12[194] = -1 * sv12[114] * (-1 * sv12[114]);
        sv12[195] = -1 * sv12[114] * sp[3];
        sv12[196] = -1 * sv12[114] * sp[4];
        sv12[197] = 2.0 * sv12[85] * (sp[6] / 2);
        sv12[198] = 2.0 * sv12[85] * (sp[5] / 2);
        sv12[199] = 2.0 * sv12[85] * (sp[4] / 2);
        sv12[200] = 2.0 * sv12[85] * (sp[3] / 2);
        sv12[201] = 2.0 * (0.0001 + sv12[82]) * (sp[73] / 2);
        sv12[202] = 2.0 * (0.0001 + sv12[82]) * (sp[7] / 2);
        sv12[203] = 2.0 * (0.0001 + sv12[82]) * (sp[9] / 2);
        sv12[204] = 2.0 * sv12[104] * (sp[88] / 2);
        sv12[205] = 2.0 * sv12[104] * (sp[89] / 2);
        sv12[206] = 2.0 * (0.0001 + sv12[82]) * (sp[90] / 2);
        sv12[207] = 2.0 * (0.0001 + sv12[82]) * (sp[91] / 2);
        sv12[208] = 2.0 * (0.0001 + sv12[82]) * (sp[92] / 2);
        sv12[209] = sv12[204] + sv12[199];
        sv12[210] = sv12[205] + sv12[200];
        sv12[211] = sv12[206] + sv12[201];
        sv12[212] = sv12[207] + sv12[202];
        sv12[213] = sv12[208] + sv12[203];
        sv12[214] = sv12[65] + -1 * sv12[209];
        sv12[215] = sv12[64] + -1 * sv12[210];
        sv12[216] = sv12[215] * (-1 * sv12[197]);
        sv12[217] = sv12[214] * (-1 * sv12[197]);
        sv12[218] = -1 * sv12[197] * (-1 * sv12[197]);
        sv12[219] = -1 * sv12[198] * (-1 * sv12[197]);
        sv12[220] = -1 * sv12[113] * (-1 * sv12[197]);
        sv12[221] = -1 * sv12[112] * (-1 * sv12[197]);
        sv12[222] = -1 * sv12[114] * (-1 * sv12[197]);
        sv12[223] = -1 * sv12[211] * (-1 * sv12[197]);
        sv12[224] = -1 * sv12[212] * (-1 * sv12[197]);
        sv12[225] = -1 * sv12[213] * (-1 * sv12[197]);
        sv12[226] = -1 * sv12[197] * sp[6];
        sv12[227] = -1 * sv12[197] * sp[5];
        sv12[228] = sv12[215] * (-1 * sv12[198]);
        sv12[229] = sv12[214] * (-1 * sv12[198]);
        sv12[230] = -1 * sv12[198] * (-1 * sv12[198]);
        sv12[231] = -1 * sv12[113] * (-1 * sv12[198]);
        sv12[232] = -1 * sv12[112] * (-1 * sv12[198]);
        sv12[233] = -1 * sv12[114] * (-1 * sv12[198]);
        sv12[234] = -1 * sv12[211] * (-1 * sv12[198]);
        sv12[235] = -1 * sv12[212] * (-1 * sv12[198]);
        sv12[236] = -1 * sv12[213] * (-1 * sv12[198]);
        sv12[237] = -1 * sv12[198] * sp[6];
        sv12[238] = -1 * sv12[198] * sp[5];
        sv12[239] = sv12[215] * sv12[214];
        sv12[240] = sv12[214] * sv12[214];
        sv12[241] = sv12[214] * (-1 * sv12[113]);
        sv12[242] = sv12[214] * (-1 * sv12[112]);
        sv12[243] = sv12[214] * (-1 * sv12[114]);
        sv12[244] = sv12[214] * (-1 * sv12[211]);
        sv12[245] = sv12[214] * (-1 * sv12[212]);
        sv12[246] = sv12[214] * (-1 * sv12[213]);
        sv12[247] = sv12[214] * sp[6];
        sv12[248] = sv12[214] * sp[5];
        sv12[249] = sv12[215] * sv12[215];
        sv12[250] = sv12[215] * (-1 * sv12[113]);
        sv12[251] = sv12[215] * (-1 * sv12[112]);
        sv12[252] = sv12[215] * (-1 * sv12[114]);
        sv12[253] = sv12[215] * (-1 * sv12[211]);
        sv12[254] = sv12[215] * (-1 * sv12[212]);
        sv12[255] = sv12[215] * (-1 * sv12[213]);
        sv12[256] = sv12[215] * sp[6];
        sv12[257] = sv12[215] * sp[5];
        sv12[258] = -1 * sv12[211] * (-1 * sv12[113]);
        sv12[259] = -1 * sv12[212] * (-1 * sv12[113]);
        sv12[260] = -1 * sv12[213] * (-1 * sv12[113]);
        sv12[261] = -1 * sv12[113] * sp[6];
        sv12[262] = -1 * sv12[113] * sp[5];
        sv12[263] = -1 * sv12[211] * (-1 * sv12[112]);
        sv12[264] = -1 * sv12[212] * (-1 * sv12[112]);
        sv12[265] = -1 * sv12[213] * (-1 * sv12[112]);
        sv12[266] = -1 * sv12[112] * sp[6];
        sv12[267] = -1 * sv12[112] * sp[5];
        sv12[268] = -1 * sv12[211] * (-1 * sv12[114]);
        sv12[269] = -1 * sv12[212] * (-1 * sv12[114]);
        sv12[270] = -1 * sv12[213] * (-1 * sv12[114]);
        sv12[271] = -1 * sv12[114] * sp[6];
        sv12[272] = -1 * sv12[114] * sp[5];
        sv12[273] = -1 * sv12[211] * (-1 * sv12[211]);
        sv12[274] = -1 * sv12[211] * (-1 * sv12[212]);
        sv12[275] = -1 * sv12[211] * (-1 * sv12[213]);
        sv12[276] = -1 * sv12[211] * sp[6];
        sv12[277] = -1 * sv12[211] * sp[5];
        sv12[278] = -1 * sv12[212] * (-1 * sv12[212]);
        sv12[279] = -1 * sv12[212] * (-1 * sv12[213]);
        sv12[280] = -1 * sv12[212] * sp[6];
        sv12[281] = -1 * sv12[212] * sp[5];
        sv12[282] = -1 * sv12[213] * (-1 * sv12[213]);
        sv12[283] = -1 * sv12[213] * sp[6];
        sv12[284] = -1 * sv12[213] * sp[5];
        sv12[285] = sv12[122] + sv12[216];
        sv12[286] = sv12[134] + sv12[228];
        sv12[287] = sv12[239] + sv12[145];
        sv12[288] = sv12[249] + sv12[155];
        sv12[289] = sv12[250] + sv12[156];
        sv12[290] = sv12[251] + sv12[157];
        sv12[291] = sv12[252] + sv12[158];
        sv12[292] = sv12[253] + sv12[159];
        sv12[293] = sv12[254] + sv12[160];
        sv12[294] = sv12[255] + sv12[161];
        sv12[295] = sv12[162] + sv12[256];
        sv12[296] = sv12[257] + sv12[163];
        sv12[297] = sv12[123] + sv12[217];
        sv12[298] = sv12[229] + sv12[135];
        sv12[299] = sv12[240] + sv12[146];
        sv12[300] = sv12[241] + sv12[147];
        sv12[301] = sv12[242] + sv12[148];
        sv12[302] = sv12[243] + sv12[149];
        sv12[303] = sv12[244] + sv12[150];
        sv12[304] = sv12[245] + sv12[151];
        sv12[305] = sv12[246] + sv12[152];
        sv12[306] = sv12[153] + sv12[247];
        sv12[307] = sv12[248] + sv12[154];
        sv12[308] = sv12[124] + sv12[218];
        sv12[309] = sv12[125] + sv12[219];
        sv12[310] = sv12[126] + sv12[220];
        sv12[311] = sv12[127] + sv12[221];
        sv12[312] = sv12[128] + sv12[222];
        sv12[313] = sv12[129] + sv12[223];
        sv12[314] = sv12[130] + sv12[224];
        sv12[315] = sv12[131] + sv12[225];
        sv12[316] = sv12[132] + sv12[226];
        sv12[317] = sv12[227] + sv12[133];
        sv12[318] = sv12[136] + sv12[230];
        sv12[319] = sv12[137] + sv12[231];
        sv12[320] = sv12[138] + sv12[232];
        sv12[321] = sv12[139] + sv12[233];
        sv12[322] = sv12[140] + sv12[234];
        sv12[323] = sv12[141] + sv12[235];
        sv12[324] = sv12[142] + sv12[236];
        sv12[325] = sv12[143] + sv12[237];
        sv12[326] = sv12[238] + sv12[144];
        sv12[327] = sv12[164] + sv12[190];
        sv12[328] = sv12[165] + sv12[186];
        sv12[329] = sv12[166] + sv12[191];
        sv12[330] = sv12[167] + sv12[258];
        sv12[331] = sv12[259] + sv12[168];
        sv12[332] = sv12[169] + sv12[260];
        sv12[333] = sv12[170] + sv12[261];
        sv12[334] = sv12[262] + sv12[171];
        sv12[335] = sv12[172] + sv12[185];
        sv12[336] = sv12[173] + sv12[187];
        sv12[337] = sv12[263] + sv12[174];
        sv12[338] = sv12[264] + sv12[175];
        sv12[339] = sv12[265] + sv12[176];
        sv12[340] = sv12[177] + sv12[266];
        sv12[341] = sv12[267] + sv12[178];
        sv12[342] = sv12[179] + sv12[194];
        sv12[343] = sv12[180] + sv12[268];
        sv12[344] = sv12[269] + sv12[181];
        sv12[345] = sv12[182] + sv12[270];
        sv12[346] = sv12[183] + sv12[271];
        sv12[347] = sv12[272] + sv12[184];
        sv12[348] = sv12[273] + sv12[185];
        sv12[349] = sv12[274] + sv12[186];
        sv12[350] = sv12[275] + sv12[187];
        sv12[351] = sv12[188] + sv12[276];
        sv12[352] = sv12[277] + sv12[189];
        sv12[353] = sv12[278] + sv12[190];
        sv12[354] = sv12[279] + sv12[191];
        sv12[355] = sv12[192] + sv12[280];
        sv12[356] = sv12[281] + sv12[193];
        sv12[357] = sv12[282] + sv12[194];
        sv12[358] = sv12[195] + sv12[283];
        sv12[359] = sv12[284] + sv12[196];
        sv12[360] = std::sqrt(sv12[47]);
        sv12[361] = 0.5 * (2.0 * sp[60]) * sv12[360];
        sv12[362] = sv12[361] / (0.0001 + sv12[82]);
        sv12[363] = std::exp(-2.0 * sv12[362]);
        sv12[364] = (1.0 + sv12[363]) / (1.0 + -1 * sv12[363]);
        sv12[365] = -1 * (1.0 / sv12[362]) + sv12[364];
        sv12[366] = sv12[365] * (2.0 * sp[60]);
        sv12[367] = sv12[366] / sv12[360];
        sv12[368] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[362]) * (2.0 * sp[60]);
        sv12[369] = sv12[368] * (2.0 * sp[60]);
        sv12[370] = sv12[369] / (0.0001 + sv12[82]);
        sv12[371] = (sv12[362] >= 0.1 ? sv12[367] : sv12[370]);
        sv12[372] = sv12[285] * sv12[371];
        sv12[373] = sv12[286] * sv12[371];
        sv12[374] = sv12[287] * sv12[371];
        sv12[375] = sv12[288] * sv12[371];
        sv12[376] = sv12[289] * sv12[371];
        sv12[377] = sv12[290] * sv12[371];
        sv12[378] = sv12[291] * sv12[371];
        sv12[379] = sv12[292] * sv12[371];
        sv12[380] = sv12[293] * sv12[371];
        sv12[381] = sv12[294] * sv12[371];
        sv12[382] = sv12[295] * sv12[371];
        sv12[383] = sv12[296] * sv12[371];
        sv12[384] = sv12[297] * sv12[371];
        sv12[385] = sv12[298] * sv12[371];
        sv12[386] = sv12[299] * sv12[371];
        sv12[387] = sv12[300] * sv12[371];
        sv12[388] = sv12[301] * sv12[371];
        sv12[389] = sv12[302] * sv12[371];
        sv12[390] = sv12[303] * sv12[371];
        sv12[391] = sv12[304] * sv12[371];
        sv12[392] = sv12[305] * sv12[371];
        sv12[393] = sv12[306] * sv12[371];
        sv12[394] = sv12[307] * sv12[371];
        sv12[395] = sv12[308] * sv12[371];
        sv12[396] = sv12[309] * sv12[371];
        sv12[397] = sv12[310] * sv12[371];
        sv12[398] = sv12[311] * sv12[371];
        sv12[399] = sv12[312] * sv12[371];
        sv12[400] = sv12[313] * sv12[371];
        sv12[401] = sv12[314] * sv12[371];
        sv12[402] = sv12[315] * sv12[371];
        sv12[403] = sv12[316] * sv12[371];
        sv12[404] = sv12[317] * sv12[371];
        sv12[405] = sv12[318] * sv12[371];
        sv12[406] = sv12[319] * sv12[371];
        sv12[407] = sv12[320] * sv12[371];
        sv12[408] = sv12[321] * sv12[371];
        sv12[409] = sv12[322] * sv12[371];
        sv12[410] = sv12[323] * sv12[371];
        sv12[411] = sv12[324] * sv12[371];
        sv12[412] = sv12[325] * sv12[371];
        sv12[413] = sv12[326] * sv12[371];
        sv12[414] = sv12[327] * sv12[371];
        sv12[415] = sv12[328] * sv12[371];
        sv12[416] = sv12[329] * sv12[371];
        sv12[417] = sv12[330] * sv12[371];
        sv12[418] = sv12[331] * sv12[371];
        sv12[419] = sv12[332] * sv12[371];
        sv12[420] = sv12[333] * sv12[371];
        sv12[421] = sv12[334] * sv12[371];
        sv12[422] = sv12[335] * sv12[371];
        sv12[423] = sv12[336] * sv12[371];
        sv12[424] = sv12[337] * sv12[371];
        sv12[425] = sv12[338] * sv12[371];
        sv12[426] = sv12[339] * sv12[371];
        sv12[427] = sv12[340] * sv12[371];
        sv12[428] = sv12[341] * sv12[371];
        sv12[429] = sv12[342] * sv12[371];
        sv12[430] = sv12[343] * sv12[371];
        sv12[431] = sv12[344] * sv12[371];
        sv12[432] = sv12[345] * sv12[371];
        sv12[433] = sv12[346] * sv12[371];
        sv12[434] = sv12[347] * sv12[371];
        sv12[435] = sv12[348] * sv12[371];
        sv12[436] = sv12[349] * sv12[371];
        sv12[437] = sv12[350] * sv12[371];
        sv12[438] = sv12[351] * sv12[371];
        sv12[439] = sv12[352] * sv12[371];
        sv12[440] = sv12[353] * sv12[371];
        sv12[441] = sv12[354] * sv12[371];
        sv12[442] = sv12[355] * sv12[371];
        sv12[443] = sv12[356] * sv12[371];
        sv12[444] = sv12[357] * sv12[371];
        sv12[445] = sv12[358] * sv12[371];
        sv12[446] = sv12[359] * sv12[371];
        sv12[447] = sp[13] * sv12[371];
        sv12[448] = sp[14] * sv12[371];
        sv12[449] = sp[15] * sv12[371];
        sv12[450] = sv12[50] + sv12[372];
        sv12[451] = sv12[51] + sv12[373];
        sv12[452] = sv12[52] + sv12[374];
        sv12[453] = sv12[53] + sv12[375];
        sv12[454] = sv12[54] + sv12[384];
        sv12[455] = sv12[55] + sv12[385];
        sv12[456] = sv12[56] + sv12[386];
        sv12[457] = sv12[57] + sv12[395];
        sv12[458] = sv12[58] + sv12[396];
        sv12[459] = sv12[59] + sv12[405];
        sv12[460] = sp[3] * sv12[85];
        sv12[461] = sp[4] * sv12[85];
        sv12[462] = sp[6] * sv12[104];
        sv12[463] = sp[5] * sv12[104];
        sv12[464] = sv12[460] + sv12[462];
        sv12[465] = sv12[461] + sv12[463];
        sv12[466] = sv12[64] + -1 * sv12[464];
        sv12[467] = sv12[65] + -1 * sv12[465];
        sv12[468] = sv12[466] * sv12[466];
        sv12[469] = sv12[467] * sv12[466];
        sv12[470] = sv12[467] * sv12[467];
        sv12[471] = sv12[468] * sv12[371];
        sv12[472] = sv12[469] * sv12[371];
        sv12[473] = sv12[470] * sv12[371];
        sv12[474] = sv12[85] / 1.3 * sp[3];
        sv12[475] = sv12[85] / 1.3 * sp[4];
        sv12[476] = sv12[104] / 1.3 * sp[6];
        sv12[477] = sv12[104] / 1.3 * sp[5];
        sv12[478] = sv12[474] + sv12[476];
        sv12[479] = sv12[477] + sv12[475];
        sv12[480] = sv12[64] + -1 * sv12[478];
        sv12[481] = sv12[65] + -1 * sv12[479];
        sv12[482] = w2_c3 * w2_c3;
        sv12[483] = std::sqrt(1e-8 + sv12[482]);
        sv12[484] = w2_c3 + sv12[483];
        sv12[485] = 1.92 * w1_c4 * (1.0 / (0.5 * sv12[484]));
        sv12[486] = w1_c4 / (0.5 * sv12[484]);
        sv12[487] = sv12[485] + 1.92 * sv12[486];
        sv12[488] = sv12[480] * sv12[480];
        sv12[489] = sv12[481] * sv12[480];
        sv12[490] = sv12[480] * sv12[487];
        sv12[491] = sv12[481] * sv12[481];
        sv12[492] = sv12[481] * sv12[487];
        sv12[493] = sv12[487] * sv12[487];
        sv12[494] = w2_c1 * sp[18];
        sv12[495] = w2_c0 * sp[23];
        sv12[496] = sv12[494] + sv12[495];
        sv12[497] = sp[18] * (sv12[85] / 1.3);
        sv12[498] = sp[23] * (sv12[104] / 1.3);
        sv12[499] = sv12[497] + sv12[498];
        sv12[500] = sv12[496] + -1 * sv12[499];
        sv12[501] = 1.92 * w1_c4 * sv12[486];
        sv12[502] = sv12[500] + sv12[501];
        sv12[503] = w2_d1_c1 * sp[3];
        sv12[504] = w2_d0_c1 * sp[4];
        sv12[505] = sv12[503] + sv12[504];
        sv12[506] = sv12[505] + sv12[505];
        sv12[507] = sv12[506] / 2 * (sv12[506] / 2);
        sv12[508] = w2_d1_c0 * sp[3];
        sv12[509] = w2_d0_c0 * sp[4];
        sv12[510] = sv12[508] + sv12[509];
        sv12[511] = w2_d0_c1 * sp[5];
        sv12[512] = w2_d1_c1 * sp[6];
        sv12[513] = sv12[511] + sv12[512];
        sv12[514] = sv12[510] + sv12[513];
        sv12[515] = sv12[514] / 2 * (sv12[514] / 2);
        sv12[516] = sv12[507] + sv12[515];
        sv12[517] = w2_d0_c0 * sp[5];
        sv12[518] = w2_d1_c0 * sp[6];
        sv12[519] = sv12[517] + sv12[518];
        sv12[520] = sv12[519] + sv12[519];
        sv12[521] = sv12[520] / 2 * (sv12[520] / 2);
        sv12[522] = sv12[521] + sv12[515];
        sv12[523] = sv12[516] + sv12[522];
        sv12[524] = w2_c3 * (0.09 * (1.44 * sv12[18]));
        sv12[525] = 2.0 * sv12[523] * sv12[524];
        sv12[526] = sv12[502] + -1 * sv12[525];
        sv12[527] = 1.92 * (1.0 / (0.5 * sv12[484])) + 1.92 * (1.0 / (0.5 * sv12[484]));
        sv12[528] = sv12[526] * sv12[527];
        sv12[529] = sv12[528] + sv12[493];
        sv12[530] = sv12[361] / (0.0001 + sv12[82] / 1.3);
        sv12[531] = std::exp(-2.0 * sv12[530]);
        sv12[532] = (1.0 + sv12[531]) / (1.0 + -1 * sv12[531]);
        sv12[533] = -1 * (1.0 / sv12[530]) + sv12[532];
        sv12[534] = sv12[533] * (2.0 * sp[60]);
        sv12[535] = sv12[534] / sv12[360];
        sv12[536] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[530]) * (2.0 * sp[60]);
        sv12[537] = sv12[536] * (2.0 * sp[60]);
        sv12[538] = sv12[537] / (0.0001 + sv12[82] / 1.3);
        sv12[539] = (sv12[530] >= 0.1 ? sv12[535] : sv12[538]);
        sv12[540] = sv12[488] * sv12[539];
        sv12[541] = sv12[489] * sv12[539];
        sv12[542] = sv12[490] * sv12[539];
        sv12[543] = sv12[491] * sv12[539];
        sv12[544] = sv12[492] * sv12[539];
        sv12[545] = sv12[529] * sv12[539];
        sv12[546] = sv12[25] + sv12[540];
        sv12[547] = sv12[26] + sv12[541];
        sv12[548] = sv12[35] + sv12[542];
        sv12[549] = sv12[27] + sv12[543];
        sv12[550] = sv12[37] + sv12[544];
        sv12[551] = sv12[38] + sv12[471];
        sv12[552] = sv12[39] + sv12[472];
        sv12[553] = sv12[40] + sv12[473];
        sv12[554] = sv12[545] + w[0][0];
        sv12[555] = w1_c3 * w1_c3;
        sv12[556] = std::sqrt(1e-8 + sv12[555]);
        sv12[557] = w1_c3 + sv12[556];
        sv12[558] = w1_c4 / (0.5 * sv12[557]);
        sv12[559] = w1_c3 + w1_c3;
        sv12[560] = sv12[559] / (2 * sv12[556]);
        sv12[561] = 0.5 * (1.0 + sv12[560]) * sv12[558];
        sv12[562] = -1 * sv12[561] / (0.5 * sv12[557]);
        sv12[563] = 1.92 * w1_c4 * sv12[562];
        sv12[564] = 1.92 * w1_c4 * (1.0 / (0.5 * sv12[557]));
        sv12[565] = sv12[564] + 1.92 * sv12[558];
        sv12[566] = sv12[565] + sv12[554];
        sv12[567] = 2.0 * sv12[523] * (0.09 * (1.44 * sv12[18]));
        sv12[568] = -1 * sv12[567] + sv12[563];
        sv12[569] = 2.0 * sv12[523] * sv12[32];
        sv12[570] = 2.0 * sv12[523] * sv12[33];
        sv12[571] = -1 * sv12[569] + w[0][0];
        sv12[572] = sv12[64] + sv12[542];
        sv12[573] = sv12[65] + sv12[544];
        sv12[574] = sp[115] * (2.0 * (0.0001 + sv12[82]));
        sv12[575] = sp[116] * (2.0 * (0.0001 + sv12[82]));
        sv12[576] = sp[117] * (2.0 * (0.0001 + sv12[82]));
        sv12[577] = sp[118] * (2.0 * (0.0001 + sv12[82]));
        sv12[578] = sp[119] * (2.0 * (0.0001 + sv12[82]));
        sv12[579] = sp[120] * (2.0 * (0.0001 + sv12[82]));
        sv12[580] = sp[121] * (2.0 * (0.0001 + sv12[82]));
        sv12[581] = sp[122] * (2.0 * (0.0001 + sv12[82]));
        sv12[582] = sp[123] * (2.0 * (0.0001 + sv12[82]));
        sv12[583] = sp[124] * (2.0 * (0.0001 + sv12[82]));
        sv12[584] = sv12[450] + sv12[574];
        sv12[585] = sv12[451] + sv12[575];
        sv12[586] = sv12[452] + sv12[576];
        sv12[587] = sv12[453] + sv12[577];
        sv12[588] = sv12[454] + sv12[578];
        sv12[589] = sv12[455] + sv12[579];
        sv12[590] = sv12[456] + sv12[580];
        sv12[591] = sv12[457] + sv12[581];
        sv12[592] = sv12[458] + sv12[582];
        sv12[593] = sv12[459] + sv12[583];
        sv12[594] = sv12[9] + w[0][0];
        sv12[595] = sv12[14] + w[0][0];
        sv12[596] = sv12[10] * sp[125];
        sv12[597] = sv12[11] * sp[125];
        sv12[598] = sv12[4] * sp[125];
        sv12[599] = sv12[594] * sp[125];
        sv12[600] = sv12[584] * sp[125];
        sv12[601] = sv12[585] * sp[125];
        sv12[602] = sv12[586] * sp[125];
        sv12[603] = sv12[587] * sp[125];
        sv12[604] = sv12[376] * sp[125];
        sv12[605] = sv12[377] * sp[125];
        sv12[606] = sv12[378] * sp[125];
        sv12[607] = sv12[379] * sp[125];
        sv12[608] = sv12[380] * sp[125];
        sv12[609] = sv12[381] * sp[125];
        sv12[610] = sv12[382] * sp[125];
        sv12[611] = sv12[383] * sp[125];
        sv12[612] = sv12[588] * sp[125];
        sv12[613] = sv12[589] * sp[125];
        sv12[614] = sv12[590] * sp[125];
        sv12[615] = sv12[387] * sp[125];
        sv12[616] = sv12[388] * sp[125];
        sv12[617] = sv12[389] * sp[125];
        sv12[618] = sv12[390] * sp[125];
        sv12[619] = sv12[391] * sp[125];
        sv12[620] = sv12[392] * sp[125];
        sv12[621] = sv12[393] * sp[125];
        sv12[622] = sv12[394] * sp[125];
        sv12[623] = sv12[595] * sp[125];
        sv12[624] = sv12[17] * sp[125];
        sv12[625] = sv12[591] * sp[125];
        sv12[626] = sv12[592] * sp[125];
        sv12[627] = sv12[397] * sp[125];
        sv12[628] = sv12[398] * sp[125];
        sv12[629] = sv12[399] * sp[125];
        sv12[630] = sv12[400] * sp[125];
        sv12[631] = sv12[401] * sp[125];
        sv12[632] = sv12[402] * sp[125];
        sv12[633] = sv12[403] * sp[125];
        sv12[634] = sv12[404] * sp[125];
        sv12[635] = sv12[593] * sp[125];
        sv12[636] = sv12[406] * sp[125];
        sv12[637] = sv12[407] * sp[125];
        sv12[638] = sv12[408] * sp[125];
        sv12[639] = sv12[409] * sp[125];
        sv12[640] = sv12[410] * sp[125];
        sv12[641] = sv12[411] * sp[125];
        sv12[642] = sv12[412] * sp[125];
        sv12[643] = sv12[413] * sp[125];
        sv12[644] = sv12[546] * sp[125];
        sv12[645] = sv12[547] * sp[125];
        sv12[646] = sv12[34] * sp[125];
        sv12[647] = sv12[548] * sp[125];
        sv12[648] = sv12[549] * sp[125];
        sv12[649] = sv12[36] * sp[125];
        sv12[650] = sv12[550] * sp[125];
        sv12[651] = sv12[572] * sp[125];
        sv12[652] = sv12[573] * sp[125];
        sv12[653] = sv12[41] * sp[125];
        sv12[654] = sv12[43] * sp[125];
        sv12[655] = sv12[568] * sp[125];
        sv12[656] = sv12[571] * sp[125];
        sv12[657] = sv12[42] * sp[125];
        sv12[658] = sv12[44] * sp[125];
        sv12[659] = sv12[566] * sp[125];
        sv12[660] = (1.0 + -1 * sv12[570]) * sp[125];
        sv12[661] = sv12[551] * sp[125];
        sv12[662] = sv12[552] * sp[125];
        sv12[663] = sv12[553] * sp[125];
        sv12[664] = sv12[64] * sp[125];
        sv12[665] = sv12[65] * sp[125];
        sv12[666] = sv12[414] * sp[125];
        sv12[667] = sv12[415] * sp[125];
        sv12[668] = sv12[416] * sp[125];
        sv12[669] = sv12[417] * sp[125];
        sv12[670] = sv12[418] * sp[125];
        sv12[671] = sv12[419] * sp[125];
        sv12[672] = sv12[420] * sp[125];
        sv12[673] = sv12[421] * sp[125];
        sv12[674] = sv12[422] * sp[125];
        sv12[675] = sv12[423] * sp[125];
        sv12[676] = sv12[424] * sp[125];
        sv12[677] = sv12[425] * sp[125];
        sv12[678] = sv12[426] * sp[125];
        sv12[679] = sv12[427] * sp[125];
        sv12[680] = sv12[428] * sp[125];
        sv12[681] = sv12[429] * sp[125];
        sv12[682] = sv12[430] * sp[125];
        sv12[683] = sv12[431] * sp[125];
        sv12[684] = sv12[432] * sp[125];
        sv12[685] = sv12[433] * sp[125];
        sv12[686] = sv12[434] * sp[125];
        sv12[687] = sv12[435] * sp[125];
        sv12[688] = sv12[436] * sp[125];
        sv12[689] = sv12[437] * sp[125];
        sv12[690] = sv12[438] * sp[125];
        sv12[691] = sv12[439] * sp[125];
        sv12[692] = sv12[440] * sp[125];
        sv12[693] = sv12[441] * sp[125];
        sv12[694] = sv12[442] * sp[125];
        sv12[695] = sv12[443] * sp[125];
        sv12[696] = sv12[444] * sp[125];
        sv12[697] = sv12[445] * sp[125];
        sv12[698] = sv12[446] * sp[125];
        sv12[699] = sv12[447] * sp[125];
        sv12[700] = sv12[448] * sp[125];
        sv12[701] = sv12[449] * sp[125];
        const double fw0 = sv12[599] * weights12[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE85_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF0[i][j] += TF0[i] * FE85_C0_Q12[0][iq][j];
        const double fw1 = sv12[597] * weights12[iq];
        alignas(32) double TF1[6];
        for (int i = 0; i < 6; ++i)
            TF1[i] = fw1 * FE85_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF1[i][j] += TF1[i] * FE85_C0_D10_Q12[0][iq][j];
        const double fw2 = sv12[596] * weights12[iq];
        alignas(32) double TF2[6];
        for (int i = 0; i < 6; ++i)
            TF2[i] = fw2 * FE85_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF2[i][j] += TF2[i] * FE85_C0_D01_Q12[0][iq][j];
        const double fw3 = sv12[598] * weights12[iq];
        alignas(32) double TF3[6];
        for (int i = 0; i < 6; ++i)
            TF3[i] = fw3 * FE85_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF3[i][j] += TF3[i] * FE85_C0_Q12[0][iq][j];
        const double fw4 = sv12[614] * weights12[iq];
        alignas(32) double TF4[5];
        for (int i = 0; i < 5; ++i)
            TF4[i] = fw4 * FE85_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF4[i][j] += TF4[i] * FE85_C0_D10_Q12[0][iq][j];
        const double fw5 = sv12[620] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP0[i] += fw5 * FE85_C0_D10_Q12[0][iq][i];
        const double fw6 = sv12[602] * weights12[iq];
        alignas(32) double TF5[5];
        for (int i = 0; i < 5; ++i)
            TF5[i] = fw6 * FE85_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF5[i][j] += TF5[i] * FE85_C0_D01_Q12[0][iq][j];
        const double fw7 = sv12[619] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP1[i] += fw7 * FE85_C0_D10_Q12[0][iq][i];
        const double fw8 = sv12[618] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP2[i] += fw8 * FE85_C0_D10_Q12[0][iq][i];
        const double fw9 = sv12[613] * weights12[iq];
        alignas(32) double TF6[5];
        for (int i = 0; i < 5; ++i)
            TF6[i] = fw9 * FE85_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF6[i][j] += TF6[i] * FE85_C0_D10_Q12[0][iq][j];
        const double fw10 = sv12[617] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP3[i] += fw10 * FE85_C0_D10_Q12[0][iq][i];
        const double fw11 = sv12[612] * weights12[iq];
        alignas(32) double TF7[5];
        for (int i = 0; i < 5; ++i)
            TF7[i] = fw11 * FE85_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF7[i][j] += TF7[i] * FE85_C0_D01_Q12[0][iq][j];
        const double fw12 = sv12[615] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP4[i] += fw12 * FE85_C0_D10_Q12[0][iq][i];
        const double fw13 = sv12[616] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP5[i] += fw13 * FE85_C0_D10_Q12[0][iq][i];
        const double fw14 = sv12[622] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP6[i] += fw14 * FE85_C0_D10_Q12[0][iq][i];
        const double fw15 = sv12[621] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP7[i] += fw15 * FE85_C0_D10_Q12[0][iq][i];
        for (int j = 0; j < 5; ++j)
            TP8[j] += fw5 * FE85_C0_D10_Q12[0][iq][j];
        const double fw16 = sv12[696] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP9[j] += fw16 * FE85_C0_D02_Q12[0][0][j];
        const double fw17 = sv12[609] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP10[j] += fw17 * FE85_C0_D01_Q12[0][iq][j];
        const double fw18 = sv12[693] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP11[j] += fw18 * FE85_C0_D02_Q12[0][0][j];
        const double fw19 = sv12[689] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP12[j] += fw19 * FE85_C0_D11_Q12[0][0][j];
        const double fw20 = sv12[641] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP13[j] += fw20 * FE85_C0_D10_Q12[0][iq][j];
        const double fw21 = sv12[684] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP14[j] += fw21 * FE85_C0_D02_Q12[0][0][j];
        const double fw22 = sv12[632] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP15[j] += fw22 * FE85_C0_D01_Q12[0][iq][j];
        const double fw23 = sv12[671] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP16[j] += fw23 * FE85_C0_D02_Q12[0][0][j];
        const double fw24 = sv12[678] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP17[j] += fw24 * FE85_C0_D11_Q12[0][0][j];
        const double fw25 = sv12[698] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP18[j] += fw25 * FE3_C0_D01_Q12[0][0][j];
        const double fw26 = sv12[697] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP19[j] += fw26 * FE3_C0_D01_Q12[0][0][j];
        alignas(32) double TF8[5];
        for (int i = 0; i < 5; ++i)
            TF8[i] = fw6 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF8[i][j] += TF8[i] * FE85_C0_D10_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP20[i] += fw17 * FE85_C0_D01_Q12[0][iq][i];
        const double fw27 = sv12[603] * weights12[iq];
        alignas(32) double TF9[5];
        for (int i = 0; i < 5; ++i)
            TF9[i] = fw27 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF9[i][j] += TF9[i] * FE85_C0_D01_Q12[0][iq][j];
        const double fw28 = sv12[608] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP21[i] += fw28 * FE85_C0_D01_Q12[0][iq][i];
        const double fw29 = sv12[607] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP22[i] += fw29 * FE85_C0_D01_Q12[0][iq][i];
        const double fw30 = sv12[601] * weights12[iq];
        alignas(32) double TF10[5];
        for (int i = 0; i < 5; ++i)
            TF10[i] = fw30 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF10[i][j] += TF10[i] * FE85_C0_D10_Q12[0][iq][j];
        const double fw31 = sv12[606] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP23[i] += fw31 * FE85_C0_D01_Q12[0][iq][i];
        const double fw32 = sv12[600] * weights12[iq];
        alignas(32) double TF11[5];
        for (int i = 0; i < 5; ++i)
            TF11[i] = fw32 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF11[i][j] += TF11[i] * FE85_C0_D01_Q12[0][iq][j];
        const double fw33 = sv12[604] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP24[i] += fw33 * FE85_C0_D01_Q12[0][iq][i];
        const double fw34 = sv12[605] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP25[i] += fw34 * FE85_C0_D01_Q12[0][iq][i];
        const double fw35 = sv12[611] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP26[i] += fw35 * FE85_C0_D01_Q12[0][iq][i];
        const double fw36 = sv12[610] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP27[i] += fw36 * FE85_C0_D01_Q12[0][iq][i];
        for (int j = 0; j < 5; ++j)
            TP28[j] += fw7 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP29[j] += fw28 * FE85_C0_D01_Q12[0][iq][j];
        const double fw37 = sv12[692] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP30[j] += fw37 * FE85_C0_D02_Q12[0][0][j];
        const double fw38 = sv12[688] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP31[j] += fw38 * FE85_C0_D11_Q12[0][0][j];
        const double fw39 = sv12[640] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP32[j] += fw39 * FE85_C0_D10_Q12[0][iq][j];
        const double fw40 = sv12[683] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP33[j] += fw40 * FE85_C0_D02_Q12[0][0][j];
        const double fw41 = sv12[631] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP34[j] += fw41 * FE85_C0_D01_Q12[0][iq][j];
        const double fw42 = sv12[670] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP35[j] += fw42 * FE85_C0_D02_Q12[0][0][j];
        const double fw43 = sv12[677] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP36[j] += fw43 * FE85_C0_D11_Q12[0][0][j];
        const double fw44 = sv12[695] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP37[j] += fw44 * FE3_C0_D01_Q12[0][0][j];
        const double fw45 = sv12[694] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP38[j] += fw45 * FE3_C0_D01_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP39[j] += fw8 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP40[j] += fw19 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP41[j] += fw29 * FE85_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP42[j] += fw38 * FE85_C0_D02_Q12[0][0][j];
        const double fw46 = sv12[687] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP43[j] += fw46 * FE85_C0_D11_Q12[0][0][j];
        const double fw47 = sv12[639] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP44[j] += fw47 * FE85_C0_D10_Q12[0][iq][j];
        const double fw48 = sv12[682] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP45[j] += fw48 * FE85_C0_D02_Q12[0][0][j];
        const double fw49 = sv12[630] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP46[j] += fw49 * FE85_C0_D01_Q12[0][iq][j];
        const double fw50 = sv12[669] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP47[j] += fw50 * FE85_C0_D02_Q12[0][0][j];
        const double fw51 = sv12[676] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP48[j] += fw51 * FE85_C0_D11_Q12[0][0][j];
        const double fw52 = sv12[691] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP49[j] += fw52 * FE3_C0_D01_Q12[0][0][j];
        const double fw53 = sv12[690] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP50[j] += fw53 * FE3_C0_D01_Q12[0][0][j];
        const double fw54 = sv12[624] * weights12[iq];
        alignas(32) double TF12[6];
        for (int i = 0; i < 6; ++i)
            TF12[i] = fw54 * FE85_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF12[i][j] += TF12[i] * FE85_C0_Q12[0][iq][j];
        const double fw55 = sv12[623] * weights12[iq];
        alignas(32) double TF13[6];
        for (int i = 0; i < 6; ++i)
            TF13[i] = fw55 * FE85_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF13[i][j] += TF13[i] * FE85_C0_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP51[i] += fw20 * FE85_C0_D10_Q12[0][iq][i];
        alignas(32) double TF14[5];
        for (int i = 0; i < 5; ++i)
            TF14[i] = fw30 * FE85_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF14[i][j] += TF14[i] * FE85_C0_D01_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP52[i] += fw39 * FE85_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            TP53[i] += fw47 * FE85_C0_D10_Q12[0][iq][i];
        const double fw56 = sv12[635] * weights12[iq];
        alignas(32) double TF15[5];
        for (int i = 0; i < 5; ++i)
            TF15[i] = fw56 * FE85_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF15[i][j] += TF15[i] * FE85_C0_D10_Q12[0][iq][j];
        const double fw57 = sv12[638] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP54[i] += fw57 * FE85_C0_D10_Q12[0][iq][i];
        const double fw58 = sv12[626] * weights12[iq];
        alignas(32) double TF16[5];
        for (int i = 0; i < 5; ++i)
            TF16[i] = fw58 * FE85_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF16[i][j] += TF16[i] * FE85_C0_D01_Q12[0][iq][j];
        const double fw59 = sv12[636] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP55[i] += fw59 * FE85_C0_D10_Q12[0][iq][i];
        const double fw60 = sv12[637] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP56[i] += fw60 * FE85_C0_D10_Q12[0][iq][i];
        const double fw61 = sv12[643] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP57[i] += fw61 * FE85_C0_D10_Q12[0][iq][i];
        const double fw62 = sv12[642] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP58[i] += fw62 * FE85_C0_D10_Q12[0][iq][i];
        for (int j = 0; j < 5; ++j)
            TP59[j] += fw10 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP60[j] += fw31 * FE85_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 4; ++j)
            TP61[j] += fw48 * FE85_C0_D11_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP62[j] += fw57 * FE85_C0_D10_Q12[0][iq][j];
        const double fw63 = sv12[681] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP63[j] += fw63 * FE85_C0_D02_Q12[0][0][j];
        const double fw64 = sv12[629] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP64[j] += fw64 * FE85_C0_D01_Q12[0][iq][j];
        const double fw65 = sv12[668] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP65[j] += fw65 * FE85_C0_D02_Q12[0][0][j];
        const double fw66 = sv12[675] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP66[j] += fw66 * FE85_C0_D11_Q12[0][0][j];
        const double fw67 = sv12[686] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP67[j] += fw67 * FE3_C0_D01_Q12[0][0][j];
        const double fw68 = sv12[685] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP68[j] += fw68 * FE3_C0_D01_Q12[0][0][j];
        alignas(32) double TF17[5];
        for (int i = 0; i < 5; ++i)
            TF17[i] = fw11 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF17[i][j] += TF17[i] * FE85_C0_D10_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP69[i] += fw22 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            TP70[i] += fw41 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            TP71[i] += fw49 * FE85_C0_D01_Q12[0][iq][i];
        alignas(32) double TF18[5];
        for (int i = 0; i < 5; ++i)
            TF18[i] = fw58 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF18[i][j] += TF18[i] * FE85_C0_D10_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP72[i] += fw64 * FE85_C0_D01_Q12[0][iq][i];
        const double fw69 = sv12[625] * weights12[iq];
        alignas(32) double TF19[5];
        for (int i = 0; i < 5; ++i)
            TF19[i] = fw69 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF19[i][j] += TF19[i] * FE85_C0_D01_Q12[0][iq][j];
        const double fw70 = sv12[627] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP73[i] += fw70 * FE85_C0_D01_Q12[0][iq][i];
        const double fw71 = sv12[628] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP74[i] += fw71 * FE85_C0_D01_Q12[0][iq][i];
        const double fw72 = sv12[634] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP75[i] += fw72 * FE85_C0_D01_Q12[0][iq][i];
        const double fw73 = sv12[633] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP76[i] += fw73 * FE85_C0_D01_Q12[0][iq][i];
        for (int j = 0; j < 5; ++j)
            TP77[j] += fw12 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP78[j] += fw33 * FE85_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 4; ++j)
            TP79[j] += fw50 * FE85_C0_D11_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP80[j] += fw59 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP81[j] += fw70 * FE85_C0_D01_Q12[0][iq][j];
        const double fw74 = sv12[666] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP82[j] += fw74 * FE85_C0_D02_Q12[0][0][j];
        const double fw75 = sv12[667] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP83[j] += fw75 * FE85_C0_D11_Q12[0][0][j];
        const double fw76 = sv12[673] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP84[j] += fw76 * FE3_C0_D01_Q12[0][0][j];
        const double fw77 = sv12[672] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP85[j] += fw77 * FE3_C0_D01_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP86[j] += fw13 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP87[j] += fw24 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP88[j] += fw34 * FE85_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP89[j] += fw43 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP90[j] += fw60 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP91[j] += fw66 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP92[j] += fw71 * FE85_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP93[j] += fw75 * FE85_C0_D02_Q12[0][0][j];
        const double fw78 = sv12[674] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP94[j] += fw78 * FE85_C0_D11_Q12[0][0][j];
        const double fw79 = sv12[680] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP95[j] += fw79 * FE3_C0_D01_Q12[0][0][j];
        const double fw80 = sv12[679] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP96[j] += fw80 * FE3_C0_D01_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP97[j] += fw14 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP98[j] += fw25 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP99[j] += fw35 * FE85_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP100[j] += fw44 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP101[j] += fw52 * FE85_C0_D11_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP102[j] += fw61 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP103[j] += fw67 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP104[j] += fw72 * FE85_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP105[j] += fw76 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP106[j] += fw79 * FE85_C0_D11_Q12[0][0][j];
        const double fw81 = sv12[701] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP107[j] += fw81 * FE3_C0_D01_Q12[0][0][j];
        const double fw82 = sv12[700] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP108[j] += fw82 * FE3_C0_D01_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP109[j] += fw15 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP110[j] += fw26 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP111[j] += fw36 * FE85_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP112[j] += fw45 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP113[j] += fw53 * FE85_C0_D11_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP114[j] += fw62 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP115[j] += fw68 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP116[j] += fw73 * FE85_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP117[j] += fw77 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP118[j] += fw80 * FE85_C0_D11_Q12[0][0][j];
        const double fw83 = sv12[699] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP119[j] += fw83 * FE3_C0_D01_Q12[0][0][j];
        const double fw84 = sv12[663] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP120[j] += fw84 * FE3_C0_D01_Q12[0][0][j];
        const double fw85 = sv12[654] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP121[j] += fw85 * FE3_C0_Q12[0][iq][j];
        const double fw86 = sv12[662] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP122[j] += fw86 * FE3_C0_D01_Q12[0][0][j];
        const double fw87 = sv12[658] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP123[j] += fw87 * FE3_C0_Q12[0][iq][j];
        const double fw88 = sv12[665] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP124[i] += fw88 * FE3_C0_Q12[0][iq][i];
        const double fw89 = sv12[656] * weights12[iq];
        alignas(32) double TF20[3];
        for (int i = 0; i < 3; ++i)
            TF20[i] = fw89 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF20[i][j] += TF20[i] * FE3_C0_Q12[0][iq][j];
        const double fw90 = sv12[664] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP125[i] += fw90 * FE3_C0_Q12[0][iq][i];
        const double fw91 = sv12[660] * weights12[iq];
        alignas(32) double TF21[3];
        for (int i = 0; i < 3; ++i)
            TF21[i] = fw91 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF21[i][j] += TF21[i] * FE3_C0_Q12[0][iq][j];
        const double fw92 = sv12[653] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP126[j] += fw92 * FE3_C0_Q12[0][iq][j];
        const double fw93 = sv12[661] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP127[j] += fw93 * FE3_C0_D01_Q12[0][0][j];
        const double fw94 = sv12[657] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP128[j] += fw94 * FE3_C0_Q12[0][iq][j];
        const double fw95 = sv12[649] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP129[j] += fw95 * FE3_C0_Q12[0][iq][j];
        const double fw96 = sv12[648] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP130[j] += fw96 * FE3_C0_D01_Q12[0][0][j];
        const double fw97 = sv12[650] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP131[j] += fw97 * FE3_C0_Q12[0][iq][j];
        const double fw98 = sv12[645] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP132[j] += fw98 * FE3_C0_D01_Q12[0][0][j];
        const double fw99 = sv12[655] * weights12[iq];
        alignas(32) double TF22[3];
        for (int i = 0; i < 3; ++i)
            TF22[i] = fw99 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF22[i][j] += TF22[i] * FE3_C0_Q12[0][iq][j];
        const double fw100 = sv12[652] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP133[i] += fw100 * FE3_C0_Q12[0][iq][i];
        const double fw101 = sv12[659] * weights12[iq];
        alignas(32) double TF23[3];
        for (int i = 0; i < 3; ++i)
            TF23[i] = fw101 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF23[i][j] += TF23[i] * FE3_C0_Q12[0][iq][j];
        const double fw102 = sv12[651] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP134[i] += fw102 * FE3_C0_Q12[0][iq][i];
        const double fw103 = sv12[646] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP135[j] += fw103 * FE3_C0_Q12[0][iq][j];
        const double fw104 = sv12[647] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP136[j] += fw104 * FE3_C0_Q12[0][iq][j];
        const double fw105 = sv12[644] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP137[j] += fw105 * FE3_C0_D01_Q12[0][0][j];
    }
    std::fill(A, A + 12, 0.0);
    A[12] = -0.1666666666666677 * sp[132] + -0.1666666666666685 * sp[133];
    std::fill(A + 13, A + 34, 0.0);
    A[34] = 0.1666666666666674 * sp[132];
    std::fill(A + 35, A + 56, 0.0);
    A[56] = 0.1666666666666677 * sp[133];
    std::fill(A + 57, A + 75, 0.0);
    A[75] = 0.1666666666666665 * sp[132] + 0.1666666666666648 * sp[133];
    A[76] = 0.1666666666666663 * sp[132] + 0.3333333333333322 * sp[133];
    A[77] = 0.3333333333333338 * sp[132] + 0.1666666666666643 * sp[133];
    std::fill(A + 78, A + 96, 0.0);
    A[96] = -0.1666666666666665 * sp[132] + 0.1666666666666693 * sp[133];
    A[97] = -0.1666666666666663 * sp[132];
    A[98] = -0.3333333333333338 * sp[132] + -0.1666666666666662 * sp[133];
    std::fill(A + 99, A + 117, 0.0);
    A[117] = 0.1666666666666682 * sp[132] + -0.1666666666666668 * sp[133];
    A[118] = -0.1666666666666677 * sp[132] + -0.3333333333333345 * sp[133];
    A[119] = -0.1666666666666665 * sp[133];
    std::fill(A + 120, A + 138, 0.0);
    A[138] = -0.1666666666666677 * sp[131] + -0.1666666666666685 * sp[130];
    std::fill(A + 139, A + 160, 0.0);
    A[160] = 0.1666666666666674 * sp[131];
    std::fill(A + 161, A + 182, 0.0);
    A[182] = 0.1666666666666677 * sp[130];
    std::fill(A + 183, A + 201, 0.0);
    A[201] = 0.1666666666666665 * sp[131] + 0.1666666666666648 * sp[130];
    A[202] = 0.1666666666666663 * sp[131] + 0.3333333333333322 * sp[130];
    A[203] = 0.3333333333333338 * sp[131] + 0.1666666666666643 * sp[130];
    std::fill(A + 204, A + 222, 0.0);
    A[222] = -0.1666666666666665 * sp[131] + 0.1666666666666693 * sp[130];
    A[223] = -0.1666666666666663 * sp[131];
    A[224] = -0.3333333333333338 * sp[131] + -0.1666666666666662 * sp[130];
    std::fill(A + 225, A + 243, 0.0);
    A[243] = 0.1666666666666682 * sp[131] + -0.1666666666666668 * sp[130];
    A[244] = -0.1666666666666677 * sp[131] + -0.3333333333333345 * sp[130];
    A[245] = -0.1666666666666665 * sp[130];
    std::fill(A + 246, A + 252, 0.0);
    A[252] = -0.1666666666666677 * sp[127] + -0.1666666666666685 * sp[126];
    std::fill(A + 253, A + 255, 0.0);
    A[255] = 0.1666666666666665 * sp[127] + 0.1666666666666648 * sp[126];
    A[256] = -0.1666666666666665 * sp[127] + 0.1666666666666693 * sp[126];
    A[257] = 0.1666666666666682 * sp[127] + -0.1666666666666668 * sp[126];
    A[258] = -0.1666666666666677 * sp[129] + -0.1666666666666685 * sp[128];
    std::fill(A + 259, A + 261, 0.0);
    A[261] = 0.1666666666666665 * sp[129] + 0.1666666666666648 * sp[128];
    A[262] = -0.1666666666666665 * sp[129] + 0.1666666666666693 * sp[128];
    A[263] = 0.1666666666666682 * sp[129] + -0.1666666666666668 * sp[128];
    std::fill(A + 264, A + 274, 0.0);
    A[274] = 0.1666666666666674 * sp[127];
    A[275] = 0.0;
    A[276] = 0.1666666666666663 * sp[127] + 0.3333333333333322 * sp[126];
    A[277] = -0.1666666666666663 * sp[127];
    A[278] = -0.1666666666666677 * sp[127] + -0.3333333333333345 * sp[126];
    A[279] = 0.0;
    A[280] = 0.1666666666666674 * sp[129];
    A[281] = 0.0;
    A[282] = 0.1666666666666663 * sp[129] + 0.3333333333333322 * sp[128];
    A[283] = -0.1666666666666663 * sp[129];
    A[284] = -0.1666666666666677 * sp[129] + -0.3333333333333345 * sp[128];
    std::fill(A + 285, A + 296, 0.0);
    A[296] = 0.1666666666666677 * sp[126];
    A[297] = 0.3333333333333338 * sp[127] + 0.1666666666666643 * sp[126];
    A[298] = -0.3333333333333338 * sp[127] + -0.1666666666666662 * sp[126];
    A[299] = -0.1666666666666665 * sp[126];
    std::fill(A + 300, A + 302, 0.0);
    A[302] = 0.1666666666666677 * sp[128];
    A[303] = 0.3333333333333338 * sp[129] + 0.1666666666666643 * sp[128];
    A[304] = -0.3333333333333338 * sp[129] + -0.1666666666666662 * sp[128];
    A[305] = -0.1666666666666665 * sp[128];
    std::fill(A + 306, A + 441, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[3] = { 0, 1, 5 };
    static const int DM3[3] = { 0, 2, 4 };
    static const int DM4[4] = { 0, 3, 4, 5 };
    static const int DM5[5] = { 6, 7, 9, 10, 11 };
    static const int DM6[3] = { 6, 7, 11 };
    static const int DM7[5] = { 6, 8, 9, 10, 11 };
    static const int DM8[3] = { 6, 8, 10 };
    static const int DM9[4] = { 6, 9, 10, 11 };
    static const int DM10[2] = { 12, 14 };
    static const int DM11[2] = { 15, 17 };
    static const int DM12[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + j] += BF0[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM0[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM1[j]] += BF2[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + (j + 6)] += BF3[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM0[j]] += BF4[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + DM2[j]] += FE85_C0_D02_Q12[0][0][j] * TP0[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM1[j]] += BF5[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + DM3[j]] += FE85_C0_D02_Q12[0][0][j] * TP1[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM0[i] + DM4[j]] += FE85_C0_D11_Q12[0][0][j] * TP2[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM5[j]] += BF6[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + DM6[j]] += FE85_C0_D02_Q12[0][0][j] * TP3[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM7[j]] += BF7[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + DM8[j]] += FE85_C0_D02_Q12[0][0][j] * TP4[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM0[i] + DM9[j]] += FE85_C0_D11_Q12[0][0][j] * TP5[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP6[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP7[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM0[j]] += FE85_C0_D02_Q12[0][0][i] * TP8[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + DM2[j]] += FE85_C0_D02_Q12[0][0][i] * TP9[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM1[j]] += FE85_C0_D02_Q12[0][0][i] * TP10[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + DM3[j]] += FE85_C0_D02_Q12[0][0][i] * TP11[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM2[i] + DM4[j]] += FE85_C0_D02_Q12[0][0][i] * TP12[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM5[j]] += FE85_C0_D02_Q12[0][0][i] * TP13[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + DM6[j]] += FE85_C0_D02_Q12[0][0][i] * TP14[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM7[j]] += FE85_C0_D02_Q12[0][0][i] * TP15[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + DM8[j]] += FE85_C0_D02_Q12[0][0][i] * TP16[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM2[i] + DM9[j]] += FE85_C0_D02_Q12[0][0][i] * TP17[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + (j + 12)] += FE85_C0_D02_Q12[0][0][i] * TP18[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + DM10[j]] += FE85_C0_D02_Q12[0][0][i] * TP19[j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM1[i] + DM0[j]] += BF8[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + DM2[j]] += FE85_C0_D02_Q12[0][0][j] * TP20[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM1[i] + DM1[j]] += BF9[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + DM3[j]] += FE85_C0_D02_Q12[0][0][j] * TP21[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM1[i] + DM4[j]] += FE85_C0_D11_Q12[0][0][j] * TP22[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM1[i] + DM5[j]] += BF10[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + DM6[j]] += FE85_C0_D02_Q12[0][0][j] * TP23[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM1[i] + DM7[j]] += BF11[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + DM8[j]] += FE85_C0_D02_Q12[0][0][j] * TP24[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM1[i] + DM9[j]] += FE85_C0_D11_Q12[0][0][j] * TP25[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP26[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP27[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM3[i] + DM0[j]] += FE85_C0_D02_Q12[0][0][i] * TP28[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + DM2[j]] += FE85_C0_D02_Q12[0][0][i] * TP11[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM3[i] + DM1[j]] += FE85_C0_D02_Q12[0][0][i] * TP29[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + DM3[j]] += FE85_C0_D02_Q12[0][0][i] * TP30[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM3[i] + DM4[j]] += FE85_C0_D02_Q12[0][0][i] * TP31[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM3[i] + DM5[j]] += FE85_C0_D02_Q12[0][0][i] * TP32[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + DM6[j]] += FE85_C0_D02_Q12[0][0][i] * TP33[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM3[i] + DM7[j]] += FE85_C0_D02_Q12[0][0][i] * TP34[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + DM8[j]] += FE85_C0_D02_Q12[0][0][i] * TP35[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM3[i] + DM9[j]] += FE85_C0_D02_Q12[0][0][i] * TP36[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + (j + 12)] += FE85_C0_D02_Q12[0][0][i] * TP37[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + DM10[j]] += FE85_C0_D02_Q12[0][0][i] * TP38[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM4[i] + DM0[j]] += FE85_C0_D11_Q12[0][0][i] * TP39[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + DM2[j]] += FE85_C0_D11_Q12[0][0][i] * TP40[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM4[i] + DM1[j]] += FE85_C0_D11_Q12[0][0][i] * TP41[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + DM3[j]] += FE85_C0_D11_Q12[0][0][i] * TP42[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM4[i] + DM4[j]] += FE85_C0_D11_Q12[0][0][i] * TP43[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM4[i] + DM5[j]] += FE85_C0_D11_Q12[0][0][i] * TP44[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + DM6[j]] += FE85_C0_D11_Q12[0][0][i] * TP45[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM4[i] + DM7[j]] += FE85_C0_D11_Q12[0][0][i] * TP46[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + DM8[j]] += FE85_C0_D11_Q12[0][0][i] * TP47[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM4[i] + DM9[j]] += FE85_C0_D11_Q12[0][0][i] * TP48[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + (j + 12)] += FE85_C0_D11_Q12[0][0][i] * TP49[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + DM10[j]] += FE85_C0_D11_Q12[0][0][i] * TP50[j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + j] += BF12[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + (j + 6)] += BF13[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM5[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM7[j]] += BF2[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM0[j]] += BF6[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + DM2[j]] += FE85_C0_D02_Q12[0][0][j] * TP51[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM1[j]] += BF14[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + DM3[j]] += FE85_C0_D02_Q12[0][0][j] * TP52[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM5[i] + DM4[j]] += FE85_C0_D11_Q12[0][0][j] * TP53[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM5[j]] += BF15[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + DM6[j]] += FE85_C0_D02_Q12[0][0][j] * TP54[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM7[j]] += BF16[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + DM8[j]] += FE85_C0_D02_Q12[0][0][j] * TP55[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM5[i] + DM9[j]] += FE85_C0_D11_Q12[0][0][j] * TP56[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP57[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP58[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM6[i] + DM0[j]] += FE85_C0_D02_Q12[0][0][i] * TP59[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + DM2[j]] += FE85_C0_D02_Q12[0][0][i] * TP14[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM6[i] + DM1[j]] += FE85_C0_D02_Q12[0][0][i] * TP60[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + DM3[j]] += FE85_C0_D02_Q12[0][0][i] * TP33[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM6[i] + DM4[j]] += FE85_C0_D02_Q12[0][0][i] * TP61[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM6[i] + DM5[j]] += FE85_C0_D02_Q12[0][0][i] * TP62[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + DM6[j]] += FE85_C0_D02_Q12[0][0][i] * TP63[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM6[i] + DM7[j]] += FE85_C0_D02_Q12[0][0][i] * TP64[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + DM8[j]] += FE85_C0_D02_Q12[0][0][i] * TP65[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM6[i] + DM9[j]] += FE85_C0_D02_Q12[0][0][i] * TP66[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + (j + 12)] += FE85_C0_D02_Q12[0][0][i] * TP67[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + DM10[j]] += FE85_C0_D02_Q12[0][0][i] * TP68[j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM0[j]] += BF17[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + DM2[j]] += FE85_C0_D02_Q12[0][0][j] * TP69[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM1[j]] += BF11[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + DM3[j]] += FE85_C0_D02_Q12[0][0][j] * TP70[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM7[i] + DM4[j]] += FE85_C0_D11_Q12[0][0][j] * TP71[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM5[j]] += BF18[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + DM6[j]] += FE85_C0_D02_Q12[0][0][j] * TP72[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM7[j]] += BF19[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + DM8[j]] += FE85_C0_D02_Q12[0][0][j] * TP73[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM7[i] + DM9[j]] += FE85_C0_D11_Q12[0][0][j] * TP74[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP75[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP76[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM8[i] + DM0[j]] += FE85_C0_D02_Q12[0][0][i] * TP77[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + DM2[j]] += FE85_C0_D02_Q12[0][0][i] * TP16[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM8[i] + DM1[j]] += FE85_C0_D02_Q12[0][0][i] * TP78[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + DM3[j]] += FE85_C0_D02_Q12[0][0][i] * TP35[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM8[i] + DM4[j]] += FE85_C0_D02_Q12[0][0][i] * TP79[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM8[i] + DM5[j]] += FE85_C0_D02_Q12[0][0][i] * TP80[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + DM6[j]] += FE85_C0_D02_Q12[0][0][i] * TP65[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM8[i] + DM7[j]] += FE85_C0_D02_Q12[0][0][i] * TP81[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + DM8[j]] += FE85_C0_D02_Q12[0][0][i] * TP82[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM8[i] + DM9[j]] += FE85_C0_D02_Q12[0][0][i] * TP83[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + (j + 12)] += FE85_C0_D02_Q12[0][0][i] * TP84[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + DM10[j]] += FE85_C0_D02_Q12[0][0][i] * TP85[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM9[i] + DM0[j]] += FE85_C0_D11_Q12[0][0][i] * TP86[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + DM2[j]] += FE85_C0_D11_Q12[0][0][i] * TP87[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM9[i] + DM1[j]] += FE85_C0_D11_Q12[0][0][i] * TP88[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + DM3[j]] += FE85_C0_D11_Q12[0][0][i] * TP89[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM9[i] + DM4[j]] += FE85_C0_D11_Q12[0][0][i] * TP48[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM9[i] + DM5[j]] += FE85_C0_D11_Q12[0][0][i] * TP90[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + DM6[j]] += FE85_C0_D11_Q12[0][0][i] * TP91[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM9[i] + DM7[j]] += FE85_C0_D11_Q12[0][0][i] * TP92[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + DM8[j]] += FE85_C0_D11_Q12[0][0][i] * TP93[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM9[i] + DM9[j]] += FE85_C0_D11_Q12[0][0][i] * TP94[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + (j + 12)] += FE85_C0_D11_Q12[0][0][i] * TP95[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + DM10[j]] += FE85_C0_D11_Q12[0][0][i] * TP96[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 12) + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP97[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + DM2[j]] += FE3_C0_D01_Q12[0][0][i] * TP98[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 12) + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP99[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + DM3[j]] += FE3_C0_D01_Q12[0][0][i] * TP100[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 12) + DM4[j]] += FE3_C0_D01_Q12[0][0][i] * TP101[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 12) + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP102[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + DM6[j]] += FE3_C0_D01_Q12[0][0][i] * TP103[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 12) + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP104[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + DM8[j]] += FE3_C0_D01_Q12[0][0][i] * TP105[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 12) + DM9[j]] += FE3_C0_D01_Q12[0][0][i] * TP106[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + (j + 12)] += FE3_C0_D01_Q12[0][0][i] * TP107[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + DM10[j]] += FE3_C0_D01_Q12[0][0][i] * TP108[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM10[i] + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP109[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + DM2[j]] += FE3_C0_D01_Q12[0][0][i] * TP110[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM10[i] + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP111[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + DM3[j]] += FE3_C0_D01_Q12[0][0][i] * TP112[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM10[i] + DM4[j]] += FE3_C0_D01_Q12[0][0][i] * TP113[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM10[i] + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP114[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + DM6[j]] += FE3_C0_D01_Q12[0][0][i] * TP115[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM10[i] + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP116[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + DM8[j]] += FE3_C0_D01_Q12[0][0][i] * TP117[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM10[i] + DM9[j]] += FE3_C0_D01_Q12[0][0][i] * TP118[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][i] * TP108[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][i] * TP119[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP120[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP121[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM11[j]] += FE3_C0_D01_Q12[0][0][i] * TP122[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP123[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP124[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += BF20[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP125[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += BF21[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP122[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM11[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP126[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][i] * TP127[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM11[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP128[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP129[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP130[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP131[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM12[j]] += FE3_C0_D01_Q12[0][0][i] * TP132[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += BF22[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 18)] += FE3_C0_D01_Q12[0][0][j] * TP133[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += BF23[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM12[j]] += FE3_C0_D01_Q12[0][0][j] * TP134[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM12[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP135[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP132[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM12[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP136[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][i] * TP137[j];
  }

};


class ranspseudotimestepping_exterior_facet_integral_1_3: public ufc::exterior_facet_integral
{
public:

  ranspseudotimestepping_exterior_facet_integral_1_3() : ufc::exterior_facet_integral()
  {

  }

  ~ranspseudotimestepping_exterior_facet_integral_1_3() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({false, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 37
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.1739274225687268, 0.3260725774312731, 0.3260725774312731, 0.1739274225687268 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE38_C0_D01_F_Q4[3][4][5] =
        { { { 1.0, -0.7222726231881047, 3.722272623188091, -0.2777273768118826, -3.722272623188107 },
            { 1.0, 0.3200379128302891, 2.679962087169697, -1.320037912830275, -2.679962087169714 },
            { 1.0, 1.679962087169715, 1.320037912830271, -2.679962087169701, -1.320037912830287 },
            { 1.0, 2.722272623188108, 0.2777273768118786, -3.722272623188096, -0.2777273768118922 } },
          { { -2.72227262318811, -0.722272623188105, 0.0, 3.444545246376218, 0.0 },
            { -1.679962087169718, 0.3200379128302888, 0.0, 1.359924174339433, 0.0 },
            { -0.3200379128302928, 1.679962087169715, 0.0, -1.359924174339417, 0.0 },
            { 0.7222726231881, 2.722272623188108, 0.0, -3.444545246376202, 0.0 } },
          { { -2.72227262318811, -1.0, 0.2777273768118848, 3.722272623188112, -0.2777273768118925 },
            { -1.679962087169717, -1.0, 1.320037912830276, 2.679962087169721, -1.320037912830287 },
            { -0.3200379128302917, -1.0, 2.6799620871697, 1.320037912830298, -2.679962087169714 },
            { 0.7222726231880999, -1.0, 3.722272623188092, 0.2777273768119067, -3.722272623188106 } } };
    alignas(32) static const double FE38_C0_D10_F_Q4[3][4][5] =
        { { { 1.0, 2.722272623188104, 0.2777273768118936, -0.2777273768118936, -3.722272623188106 },
            { 1.0, 1.679962087169712, 1.320037912830285, -1.320037912830285, -2.679962087169713 },
            { 1.0, 0.3200379128302879, 2.679962087169708, -2.679962087169708, -1.320037912830288 },
            { 1.0, -0.7222726231881051, 3.722272623188099, -3.722272623188099, -0.2777273768118945 } },
          { { -2.722272623188107, -1.0, 0.277727376811893, -0.277727376811893, 3.72227262318811 },
            { -1.679962087169713, -1.0, 1.320037912830285, -1.320037912830285, 2.679962087169716 },
            { -0.3200379128302884, -1.0, 2.679962087169709, -2.679962087169709, 1.320037912830289 },
            { 0.7222726231881045, -1.0, 3.722272623188099, -3.722272623188099, 0.2777273768118963 } },
          { { -2.722272623188106, -0.7222726231881095, 0.0, 0.0, 3.444545246376216 },
            { -1.679962087169712, 0.3200379128302852, 0.0, 0.0, 1.359924174339427 },
            { -0.3200379128302857, 1.679962087169712, 0.0, 0.0, -1.359924174339426 },
            { 0.7222726231881069, 2.722272623188104, 0.0, 0.0, -3.444545246376211 } } };
    alignas(32) static const double FE38_C0_F_Q4[3][4][6] =
        { { { 0.0, 0.8013460293699309, -0.05979028222412166, 0.2584442528541909, 0.0, 0.0 },
            { 0.0, 0.2277840767909521, -0.1121969667939041, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.1121969667939041, 0.227784076790952, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.05979028222412169, 0.8013460293699309, 0.2584442528541908, 0.0, 0.0 } },
          { { 0.8013460293699309, 0.0, -0.05979028222412166, 0.0, 0.2584442528541908, 0.0 },
            { 0.2277840767909521, 0.0, -0.1121969667939041, 0.0, 0.8844128900029518, 0.0 },
            { -0.1121969667939041, 0.0, 0.2277840767909521, 0.0, 0.8844128900029519, 0.0 },
            { -0.05979028222412166, 0.0, 0.8013460293699309, 0.0, 0.2584442528541906, 0.0 } },
          { { 0.8013460293699309, -0.05979028222412169, 0.0, 0.0, 0.0, 0.2584442528541908 },
            { 0.2277840767909521, -0.1121969667939041, 0.0, 0.0, 0.0, 0.8844128900029519 },
            { -0.1121969667939041, 0.2277840767909522, 0.0, 0.0, 0.0, 0.884412890002952 },
            { -0.05979028222412169, 0.8013460293699308, 0.0, 0.0, 0.0, 0.2584442528541909 } } };
    alignas(32) static const double FE3_C0_D01_F_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_F_Q4[3][4][3] =
        { { { 0.0, 0.9305681557970263, 0.06943184420297369 },
            { 0.0, 0.6699905217924281, 0.3300094782075718 },
            { 0.0, 0.3300094782075719, 0.6699905217924279 },
            { 0.0, 0.06943184420297382, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.0, 0.06943184420297369 },
            { 0.6699905217924281, 0.0, 0.3300094782075718 },
            { 0.3300094782075719, 0.0, 0.669990521792428 },
            { 0.06943184420297382, 0.0, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.06943184420297367, 0.0 },
            { 0.6699905217924281, 0.3300094782075718, 0.0 },
            { 0.3300094782075719, 0.6699905217924281, 0.0 },
            { 0.06943184420297374, 0.9305681557970263, 0.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_F_Q4[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_F_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_F_Q4[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_F_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_F_Q4[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_F_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_F_Q4[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_F_Q4[0][0][1];
    const double w1_d1_c3 = w[1][15] * FE3_C0_D01_F_Q4[0][0][0] + w[1][17] * FE3_C0_D01_F_Q4[0][0][1];
    double w1_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c3 += w[1][ic + 15] * FE3_C0_D01_F_Q4[0][0][ic];
    const double w1_d1_c4 = w[1][18] * FE3_C0_D01_F_Q4[0][0][0] + w[1][20] * FE3_C0_D01_F_Q4[0][0][1];
    double w1_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c4 += w[1][ic + 18] * FE3_C0_D01_F_Q4[0][0][ic];
    alignas(32) double sp[74];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = triangle_reference_facet_normals[facet][1] * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = triangle_reference_facet_normals[facet][0] * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet][0] * sp[9];
    sp[11] = -1 * J_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[20] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[21] = sp[19] + sp[20];
    sp[22] = std::sqrt(sp[21]);
    sp[23] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[24] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[25] = sp[23] + sp[24];
    sp[26] = std::sqrt(sp[25]);
    sp[27] = sp[22] * sp[26];
    sp[28] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[29] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[30] = sp[28] + sp[29];
    sp[31] = std::sqrt(sp[30]);
    sp[32] = sp[27] * sp[31];
    sp[33] = triangle_reference_cell_volume * sp[2];
    sp[34] = std::abs(sp[33]);
    sp[35] = sp[32] / (4.0 * sp[34]);
    sp[36] = sp[3] * sp[17];
    sp[37] = sp[5] * sp[17];
    sp[38] = sp[11] * sp[18];
    sp[39] = sp[9] * sp[18];
    sp[40] = sp[36] + sp[38];
    sp[41] = sp[37] + sp[39];
    sp[42] = w1_d1_c3 * sp[3];
    sp[43] = w1_d0_c3 * sp[5];
    sp[44] = sp[42] + sp[43];
    sp[45] = sp[44] * sp[17];
    sp[46] = w1_d0_c3 * sp[9];
    sp[47] = w1_d1_c3 * sp[11];
    sp[48] = sp[46] + sp[47];
    sp[49] = sp[48] * sp[18];
    sp[50] = sp[45] + sp[49];
    sp[51] = w1_d1_c4 * sp[3];
    sp[52] = w1_d0_c4 * sp[5];
    sp[53] = sp[51] + sp[52];
    sp[54] = sp[53] * sp[17];
    sp[55] = w1_d0_c4 * sp[9];
    sp[56] = w1_d1_c4 * sp[11];
    sp[57] = sp[55] + sp[56];
    sp[58] = sp[57] * sp[18];
    sp[59] = sp[54] + sp[58];
    sp[60] = sp[11] + sp[11];
    sp[61] = sp[9] + sp[9];
    sp[62] = sp[5] + sp[5];
    sp[63] = sp[3] + sp[3];
    sp[64] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[65] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[66] = sp[64] + sp[65];
    sp[67] = sp[66] * sp[66];
    sp[68] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[69] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[70] = sp[68] + sp[69];
    sp[71] = sp[70] * sp[70];
    sp[72] = sp[67] + sp[71];
    sp[73] = std::sqrt(sp[72]);
    alignas(32) double BF0[6][6] = {};
    alignas(32) double BF1[6][5] = {};
    alignas(32) double BF2[6][5] = {};
    alignas(32) double BF3[6][6] = {};
    alignas(32) double BF4[6][5] = {};
    alignas(32) double BF5[6][5] = {};
    alignas(32) double BF6[5][6] = {};
    alignas(32) double BF7[5][6] = {};
    alignas(32) double BF8[5][6] = {};
    alignas(32) double BF9[5][6] = {};
    alignas(32) double BF10[6][6] = {};
    alignas(32) double BF11[6][5] = {};
    alignas(32) double BF12[6][5] = {};
    alignas(32) double BF13[6][6] = {};
    alignas(32) double BF14[6][5] = {};
    alignas(32) double BF15[6][5] = {};
    alignas(32) double BF16[5][6] = {};
    alignas(32) double BF17[5][6] = {};
    alignas(32) double BF18[5][6] = {};
    alignas(32) double BF19[5][6] = {};
    alignas(32) double TP0[3] = {};
    alignas(32) double TP1[3] = {};
    alignas(32) double TP2[3] = {};
    alignas(32) double BF20[3][3] = {};
    alignas(32) double TP3[3] = {};
    alignas(32) double TP4[3] = {};
    alignas(32) double BF21[3][3] = {};
    alignas(32) double TP5[3] = {};
    alignas(32) double TP6[3] = {};
    alignas(32) double TP7[3] = {};
    alignas(32) double TP8[3] = {};
    alignas(32) double TP9[3] = {};
    alignas(32) double BF22[3][3] = {};
    alignas(32) double BF23[3][3] = {};
    alignas(32) double TP10[3] = {};
    alignas(32) double TP11[3] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w1_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c3 += w[1][ic + 15] * FE3_C0_F_Q4[facet][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3 += w[3][ic] * FE3_C0_F_Q4[facet][iq][ic];
        double w1_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c4 += w[1][ic + 18] * FE3_C0_F_Q4[facet][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE38_C0_F_Q4[facet][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE38_C0_F_Q4[facet][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE3_C0_F_Q4[facet][iq][ic];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE3_C0_F_Q4[facet][iq][ic];
        alignas(32) double sv4[158];
        sv4[0] = std::exp(w3);
        sv4[1] = w1_c3 * (0.09 * sv4[0]);
        sv4[2] = w1_c3 * sv4[1];
        sv4[3] = w1_c4 * w1_c4;
        sv4[4] = std::sqrt(1e-8 + sv4[3]);
        sv4[5] = w1_c4 + sv4[4];
        sv4[6] = sv4[2] / (0.5 * sv4[5]);
        sv4[7] = w2_c1 * sp[17];
        sv4[8] = w2_c0 * sp[18];
        sv4[9] = sv4[7] + sv4[8];
        sv4[10] = std::tanh(100.0 * sv4[9]);
        sv4[11] = (0.0001 + sv4[6] / 1.3) * (100000.0 * (0.5 + -1 * (0.5 * sv4[10])));
        sv4[12] = sv4[11] * (1.0 / (2.0 * sp[35]));
        sv4[13] = sv4[1] + sv4[1];
        sv4[14] = w1_c4 + w1_c4;
        sv4[15] = sv4[14] / (2 * sv4[4]);
        sv4[16] = 0.5 * (1.0 + sv4[15]) * sv4[6];
        sv4[17] = -1 * sv4[16] / (0.5 * sv4[5]);
        sv4[18] = sv4[13] / (0.5 * sv4[5]);
        sv4[19] = 100000.0 * (0.5 + -1 * (0.5 * sv4[10])) * (sv4[17] / 1.3);
        sv4[20] = 100000.0 * (0.5 + -1 * (0.5 * sv4[10])) * (sv4[18] / 1.3);
        sv4[21] = sv4[19] * (1.0 / (2.0 * sp[35]));
        sv4[22] = sv4[20] * (1.0 / (2.0 * sp[35]));
        sv4[23] = w1_c4 * sv4[21];
        sv4[24] = w1_c4 * sv4[22];
        sv4[25] = sv4[23] + sv4[12];
        sv4[26] = (0.0001 + sv4[6]) * (100000.0 * (0.5 + -1 * (0.5 * sv4[10])));
        sv4[27] = sv4[26] * (1.0 / (2.0 * sp[35]));
        sv4[28] = 100000.0 * (0.5 + -1 * (0.5 * sv4[10])) * sv4[17];
        sv4[29] = 100000.0 * (0.5 + -1 * (0.5 * sv4[10])) * sv4[18];
        sv4[30] = sv4[28] * (1.0 / (2.0 * sp[35]));
        sv4[31] = sv4[29] * (1.0 / (2.0 * sp[35]));
        sv4[32] = w1_c3 * sv4[30];
        sv4[33] = w1_c3 * sv4[31];
        sv4[34] = sv4[33] + sv4[27];
        sv4[35] = (0.5 + -1 * (0.5 * sv4[10])) * (0.0001 + sv4[6]);
        sv4[36] = sp[40] * sv4[35];
        sv4[37] = sp[41] * sv4[35];
        sv4[38] = (0.5 + -1 * (0.5 * sv4[10])) * sv4[17];
        sv4[39] = (0.5 + -1 * (0.5 * sv4[10])) * sv4[18];
        sv4[40] = sp[40] * sv4[38];
        sv4[41] = sp[40] * sv4[39];
        sv4[42] = sp[41] * sv4[38];
        sv4[43] = sp[41] * sv4[39];
        sv4[44] = w1_c3 * sv4[40];
        sv4[45] = w1_c3 * sv4[42];
        sv4[46] = w1_c3 * sv4[41];
        sv4[47] = w1_c3 * sv4[43];
        sv4[48] = sv4[36] + sv4[46];
        sv4[49] = sv4[37] + sv4[47];
        sv4[50] = (0.5 + -1 * (0.5 * sv4[10])) * (0.0001 + sv4[6] / 1.3);
        sv4[51] = sp[40] * sv4[50];
        sv4[52] = sp[41] * sv4[50];
        sv4[53] = (0.5 + -1 * (0.5 * sv4[10])) * (sv4[17] / 1.3);
        sv4[54] = (0.5 + -1 * (0.5 * sv4[10])) * (sv4[18] / 1.3);
        sv4[55] = sp[40] * sv4[53];
        sv4[56] = sp[40] * sv4[54];
        sv4[57] = sp[41] * sv4[53];
        sv4[58] = sp[41] * sv4[54];
        sv4[59] = w1_c4 * sv4[55];
        sv4[60] = w1_c4 * sv4[57];
        sv4[61] = w1_c4 * sv4[56];
        sv4[62] = w1_c4 * sv4[58];
        sv4[63] = sv4[51] + sv4[59];
        sv4[64] = sv4[52] + sv4[60];
        sv4[65] = sp[50] * sv4[38];
        sv4[66] = sp[50] * sv4[39];
        sv4[67] = -1 * sv4[65] + sv4[32];
        sv4[68] = sv4[34] + -1 * sv4[66];
        sv4[69] = sp[59] * sv4[53];
        sv4[70] = sp[59] * sv4[54];
        sv4[71] = sv4[67] + -1 * sv4[69];
        sv4[72] = sv4[68] + -1 * sv4[70];
        sv4[73] = w2_c3 * (0.09 * sv4[0]);
        sv4[74] = w2_c3 * sv4[73];
        sv4[75] = w2_c4 * w2_c4;
        sv4[76] = std::sqrt(1e-8 + sv4[75]);
        sv4[77] = w2_c4 + sv4[76];
        sv4[78] = sv4[74] / (0.5 * sv4[77]);
        sv4[79] = 2.0 * (0.0001 + sv4[78]) * (sp[3] / 2);
        sv4[80] = 2.0 * (0.0001 + sv4[78]) * (sp[5] / 2);
        sv4[81] = 2.0 * (0.0001 + sv4[78]) * (sp[9] / 2);
        sv4[82] = 2.0 * (0.0001 + sv4[78]) * (sp[11] / 2);
        sv4[83] = sv4[79] * sp[17];
        sv4[84] = sv4[80] * sp[17];
        sv4[85] = sv4[81] * sp[17];
        sv4[86] = sv4[82] * sp[17];
        sv4[87] = 2.0 * (0.0001 + sv4[78]) * (sp[60] / 2);
        sv4[88] = 2.0 * (0.0001 + sv4[78]) * (sp[61] / 2);
        sv4[89] = sv4[87] * sp[18];
        sv4[90] = sv4[88] * sp[18];
        sv4[91] = sv4[83] + sv4[89];
        sv4[92] = sv4[84] + sv4[90];
        sv4[93] = sv4[91] * (-1 * sp[17]);
        sv4[94] = sv4[92] * (-1 * sp[17]);
        sv4[95] = -1 * sp[17] * sv4[85];
        sv4[96] = -1 * sp[17] * sv4[86];
        sv4[97] = 2.0 * (0.0001 + sv4[78]) * (sp[62] / 2);
        sv4[98] = 2.0 * (0.0001 + sv4[78]) * (sp[63] / 2);
        sv4[99] = sv4[97] * sp[17];
        sv4[100] = sv4[98] * sp[17];
        sv4[101] = sv4[79] * sp[18];
        sv4[102] = sv4[80] * sp[18];
        sv4[103] = sv4[81] * sp[18];
        sv4[104] = sv4[82] * sp[18];
        sv4[105] = sv4[99] + sv4[103];
        sv4[106] = sv4[100] + sv4[104];
        sv4[107] = sv4[101] * sp[18];
        sv4[108] = sv4[102] * sp[18];
        sv4[109] = sv4[105] * sp[18];
        sv4[110] = sv4[106] * sp[18];
        sv4[111] = sv4[93] + sv4[107];
        sv4[112] = sv4[94] + sv4[108];
        sv4[113] = sv4[95] + sv4[109];
        sv4[114] = sv4[96] + sv4[110];
        sv4[115] = sv4[111] * (-1 * sp[17]);
        sv4[116] = sv4[112] * (-1 * sp[17]);
        sv4[117] = sv4[113] * (-1 * sp[17]);
        sv4[118] = sv4[114] * (-1 * sp[17]);
        sv4[119] = sv4[111] * sp[18];
        sv4[120] = sv4[112] * sp[18];
        sv4[121] = sv4[113] * sp[18];
        sv4[122] = sv4[114] * sp[18];
        sv4[123] = 100000.0 * (0.0001 + sv4[78]) * (1.0 / (2.0 * sp[35]));
        sv4[124] = sv4[123] * (-1 * sp[17]);
        sv4[125] = sv4[123] * sp[18];
        sv4[126] = sv4[124] * (-1 * sp[17]);
        sv4[127] = -1 * sp[17] * sv4[125];
        sv4[128] = sv4[124] * sp[18];
        sv4[129] = sv4[125] * sp[18];
        sv4[130] = sv4[25] * sp[73];
        sv4[131] = sv4[24] * sp[73];
        sv4[132] = sv4[71] * sp[73];
        sv4[133] = -1 * sv4[44] * sp[73];
        sv4[134] = -1 * sv4[45] * sp[73];
        sv4[135] = -1 * sv4[63] * sp[73];
        sv4[136] = -1 * sv4[64] * sp[73];
        sv4[137] = sv4[72] * sp[73];
        sv4[138] = -1 * sv4[48] * sp[73];
        sv4[139] = -1 * sv4[49] * sp[73];
        sv4[140] = -1 * sv4[61] * sp[73];
        sv4[141] = -1 * sv4[62] * sp[73];
        sv4[142] = -1 * sv4[36] * sp[73];
        sv4[143] = -1 * sv4[37] * sp[73];
        sv4[144] = -1 * sv4[51] * sp[73];
        sv4[145] = -1 * sv4[52] * sp[73];
        sv4[146] = -1 * sv4[115] * sp[73];
        sv4[147] = -1 * sv4[116] * sp[73];
        sv4[148] = -1 * sv4[117] * sp[73];
        sv4[149] = -1 * sv4[118] * sp[73];
        sv4[150] = sv4[126] * sp[73];
        sv4[151] = sv4[128] * sp[73];
        sv4[152] = -1 * sv4[119] * sp[73];
        sv4[153] = -1 * sv4[120] * sp[73];
        sv4[154] = -1 * sv4[121] * sp[73];
        sv4[155] = -1 * sv4[122] * sp[73];
        sv4[156] = sv4[127] * sp[73];
        sv4[157] = sv4[129] * sp[73];
        const double fw0 = sv4[150] * weights4[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE38_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF0[i][j] += TF0[i] * FE38_C0_F_Q4[facet][iq][j];
        const double fw1 = sv4[147] * weights4[iq];
        alignas(32) double TF1[6];
        for (int i = 0; i < 6; ++i)
            TF1[i] = fw1 * FE38_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF1[i][j] += TF1[i] * FE38_C0_D10_F_Q4[facet][iq][j];
        const double fw2 = sv4[146] * weights4[iq];
        alignas(32) double TF2[6];
        for (int i = 0; i < 6; ++i)
            TF2[i] = fw2 * FE38_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF2[i][j] += TF2[i] * FE38_C0_D01_F_Q4[facet][iq][j];
        const double fw3 = sv4[156] * weights4[iq];
        alignas(32) double TF3[6];
        for (int i = 0; i < 6; ++i)
            TF3[i] = fw3 * FE38_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF3[i][j] += TF3[i] * FE38_C0_F_Q4[facet][iq][j];
        const double fw4 = sv4[148] * weights4[iq];
        alignas(32) double TF4[6];
        for (int i = 0; i < 6; ++i)
            TF4[i] = fw4 * FE38_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF4[i][j] += TF4[i] * FE38_C0_D10_F_Q4[facet][iq][j];
        const double fw5 = sv4[149] * weights4[iq];
        alignas(32) double TF5[6];
        for (int i = 0; i < 6; ++i)
            TF5[i] = fw5 * FE38_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF5[i][j] += TF5[i] * FE38_C0_D01_F_Q4[facet][iq][j];
        alignas(32) double TF6[5];
        for (int i = 0; i < 5; ++i)
            TF6[i] = fw1 * FE38_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF6[i][j] += TF6[i] * FE38_C0_F_Q4[facet][iq][j];
        const double fw6 = sv4[153] * weights4[iq];
        alignas(32) double TF7[5];
        for (int i = 0; i < 5; ++i)
            TF7[i] = fw6 * FE38_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF7[i][j] += TF7[i] * FE38_C0_F_Q4[facet][iq][j];
        alignas(32) double TF8[5];
        for (int i = 0; i < 5; ++i)
            TF8[i] = fw2 * FE38_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF8[i][j] += TF8[i] * FE38_C0_F_Q4[facet][iq][j];
        const double fw7 = sv4[152] * weights4[iq];
        alignas(32) double TF9[5];
        for (int i = 0; i < 5; ++i)
            TF9[i] = fw7 * FE38_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF9[i][j] += TF9[i] * FE38_C0_F_Q4[facet][iq][j];
        const double fw8 = sv4[151] * weights4[iq];
        alignas(32) double TF10[6];
        for (int i = 0; i < 6; ++i)
            TF10[i] = fw8 * FE38_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF10[i][j] += TF10[i] * FE38_C0_F_Q4[facet][iq][j];
        alignas(32) double TF11[6];
        for (int i = 0; i < 6; ++i)
            TF11[i] = fw6 * FE38_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF11[i][j] += TF11[i] * FE38_C0_D10_F_Q4[facet][iq][j];
        alignas(32) double TF12[6];
        for (int i = 0; i < 6; ++i)
            TF12[i] = fw7 * FE38_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF12[i][j] += TF12[i] * FE38_C0_D01_F_Q4[facet][iq][j];
        const double fw9 = sv4[157] * weights4[iq];
        alignas(32) double TF13[6];
        for (int i = 0; i < 6; ++i)
            TF13[i] = fw9 * FE38_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF13[i][j] += TF13[i] * FE38_C0_F_Q4[facet][iq][j];
        const double fw10 = sv4[154] * weights4[iq];
        alignas(32) double TF14[6];
        for (int i = 0; i < 6; ++i)
            TF14[i] = fw10 * FE38_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF14[i][j] += TF14[i] * FE38_C0_D10_F_Q4[facet][iq][j];
        const double fw11 = sv4[155] * weights4[iq];
        alignas(32) double TF15[6];
        for (int i = 0; i < 6; ++i)
            TF15[i] = fw11 * FE38_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF15[i][j] += TF15[i] * FE38_C0_D01_F_Q4[facet][iq][j];
        alignas(32) double TF16[5];
        for (int i = 0; i < 5; ++i)
            TF16[i] = fw4 * FE38_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF16[i][j] += TF16[i] * FE38_C0_F_Q4[facet][iq][j];
        alignas(32) double TF17[5];
        for (int i = 0; i < 5; ++i)
            TF17[i] = fw10 * FE38_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF17[i][j] += TF17[i] * FE38_C0_F_Q4[facet][iq][j];
        alignas(32) double TF18[5];
        for (int i = 0; i < 5; ++i)
            TF18[i] = fw5 * FE38_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF18[i][j] += TF18[i] * FE38_C0_F_Q4[facet][iq][j];
        alignas(32) double TF19[5];
        for (int i = 0; i < 5; ++i)
            TF19[i] = fw11 * FE38_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF19[i][j] += TF19[i] * FE38_C0_F_Q4[facet][iq][j];
        const double fw12 = sv4[139] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP0[j] += fw12 * FE3_C0_F_Q4[facet][iq][j];
        const double fw13 = sv4[134] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP1[j] += fw13 * FE3_C0_F_Q4[facet][iq][j];
        const double fw14 = sv4[143] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP2[i] += fw14 * FE3_C0_F_Q4[facet][iq][i];
        const double fw15 = sv4[137] * weights4[iq];
        alignas(32) double TF20[3];
        for (int i = 0; i < 3; ++i)
            TF20[i] = fw15 * FE3_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF20[i][j] += TF20[i] * FE3_C0_F_Q4[facet][iq][j];
        const double fw16 = sv4[142] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP3[i] += fw16 * FE3_C0_F_Q4[facet][iq][i];
        const double fw17 = sv4[145] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP4[i] += fw17 * FE3_C0_F_Q4[facet][iq][i];
        const double fw18 = sv4[132] * weights4[iq];
        alignas(32) double TF21[3];
        for (int i = 0; i < 3; ++i)
            TF21[i] = fw18 * FE3_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF21[i][j] += TF21[i] * FE3_C0_F_Q4[facet][iq][j];
        const double fw19 = sv4[144] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP5[i] += fw19 * FE3_C0_F_Q4[facet][iq][i];
        const double fw20 = sv4[138] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP6[j] += fw20 * FE3_C0_F_Q4[facet][iq][j];
        const double fw21 = sv4[133] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP7[j] += fw21 * FE3_C0_F_Q4[facet][iq][j];
        const double fw22 = sv4[141] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP8[j] += fw22 * FE3_C0_F_Q4[facet][iq][j];
        const double fw23 = sv4[136] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP9[j] += fw23 * FE3_C0_F_Q4[facet][iq][j];
        const double fw24 = sv4[131] * weights4[iq];
        alignas(32) double TF22[3];
        for (int i = 0; i < 3; ++i)
            TF22[i] = fw24 * FE3_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF22[i][j] += TF22[i] * FE3_C0_F_Q4[facet][iq][j];
        const double fw25 = sv4[130] * weights4[iq];
        alignas(32) double TF23[3];
        for (int i = 0; i < 3; ++i)
            TF23[i] = fw25 * FE3_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF23[i][j] += TF23[i] * FE3_C0_F_Q4[facet][iq][j];
        const double fw26 = sv4[140] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP10[j] += fw26 * FE3_C0_F_Q4[facet][iq][j];
        const double fw27 = sv4[135] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP11[j] += fw27 * FE3_C0_F_Q4[facet][iq][j];
    }
    std::fill(A, A + 441, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    static const int DM4[2] = { 15, 17 };
    static const int DM5[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + j] += BF0[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM0[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM1[j]] += BF2[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + (j + 6)] += BF3[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM2[j]] += BF4[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM3[j]] += BF5[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM0[i] + j] += BF6[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM0[i] + (j + 6)] += BF7[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM1[i] + j] += BF8[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM1[i] + (j + 6)] += BF9[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + j] += BF10[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM0[j]] += BF11[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM1[j]] += BF12[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + (j + 6)] += BF13[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM2[j]] += BF14[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM3[j]] += BF15[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM2[i] + j] += BF16[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM2[i] + (j + 6)] += BF17[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM3[i] + j] += BF18[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM3[i] + (j + 6)] += BF19[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += FE3_C0_D01_F_Q4[0][0][i] * TP0[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += FE3_C0_D01_F_Q4[0][0][i] * TP1[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 15)] += FE3_C0_D01_F_Q4[0][0][j] * TP2[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += BF20[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM4[j]] += FE3_C0_D01_F_Q4[0][0][j] * TP3[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 18)] += FE3_C0_D01_F_Q4[0][0][j] * TP4[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += BF21[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM5[j]] += FE3_C0_D01_F_Q4[0][0][j] * TP5[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + (j + 15)] += FE3_C0_D01_F_Q4[0][0][i] * TP6[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + (j + 18)] += FE3_C0_D01_F_Q4[0][0][i] * TP7[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += FE3_C0_D01_F_Q4[0][0][i] * TP8[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += FE3_C0_D01_F_Q4[0][0][i] * TP9[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += BF22[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += BF23[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 15)] += FE3_C0_D01_F_Q4[0][0][i] * TP10[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 18)] += FE3_C0_D01_F_Q4[0][0][i] * TP11[j];
  }

};


class ranspseudotimestepping_cell_integral_2_otherwise: public ufc::cell_integral
{
public:

  ranspseudotimestepping_cell_integral_2_otherwise() : ufc::cell_integral()
  {

  }

  ~ranspseudotimestepping_cell_integral_2_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({false, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 209
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    alignas(32) static const double FE96_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE96_C0_D02_Q12[1][1][3] = { { { 3.999999999999998, 4.000000000000004, -7.999999999999995 } } };
    alignas(32) static const double FE96_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE96_C0_D11_Q12[1][1][4] = { { { 4.0, 3.999999999999997, -3.999999999999997, -4.000000000000005 } } };
    alignas(32) static const double FE96_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803568, 0.2205142679699366 },
            { -0.05512856699248404, -0.05512856699248409, 0.6533077030470597, 0.2205142679699364, 0.2205142679699362, 0.01592089499803596 },
            { 0.6533077030470594, -0.05512856699248415, -0.05512856699248411, 0.01592089499803581, 0.2205142679699364, 0.2205142679699366 },
            { -0.1249989825350975, 0.001430579517788794, -0.1249989825350975, 0.4999959301403892, 0.2485755252716258, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788821, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880001, 0.173768363654174, -0.1177151633084292, 0.790160442765823, 0.06597478591860526, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880001, 0.1353078281686267, 0.06597478591860512, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860538 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880001, 0.06597478591860524, 0.1353078281686266, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860538 },
            { 0.1737683636541741, -0.04749625719880015, -0.1177151633084292, 0.06597478591860535, 0.7901604427658229, 0.1353078281686269 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q12[0][0][1];
    const double w4_d1 = w[4][0] * FE3_C0_D01_Q12[0][0][0] + w[4][2] * FE3_C0_D01_Q12[0][0][1];
    double w4_d0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w4_d0 += w[4][ic] * FE3_C0_D01_Q12[0][0][ic];
    const double w3_d1_c3 = w[3][15] * FE3_C0_D01_Q12[0][0][0] + w[3][17] * FE3_C0_D01_Q12[0][0][1];
    double w3_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c3 += w[3][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w3_d1_c4 = w[3][18] * FE3_C0_D01_Q12[0][0][0] + w[3][20] * FE3_C0_D01_Q12[0][0][1];
    double w3_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c4 += w[3][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d11_c1 = w[2][6] * FE96_C0_D02_Q12[0][0][0] + w[2][8] * FE96_C0_D02_Q12[0][0][1] + w[2][10] * FE96_C0_D02_Q12[0][0][2];
    const double w2_d01_c1 = w[2][6] * FE96_C0_D11_Q12[0][0][0] + w[2][9] * FE96_C0_D11_Q12[0][0][1] + w[2][10] * FE96_C0_D11_Q12[0][0][2] + w[2][11] * FE96_C0_D11_Q12[0][0][3];
    const double w2_d00_c1 = w[2][6] * FE96_C0_D02_Q12[0][0][0] + w[2][7] * FE96_C0_D02_Q12[0][0][1] + w[2][11] * FE96_C0_D02_Q12[0][0][2];
    const double w2_d01_c0 = w[2][0] * FE96_C0_D11_Q12[0][0][0] + w[2][3] * FE96_C0_D11_Q12[0][0][1] + w[2][4] * FE96_C0_D11_Q12[0][0][2] + w[2][5] * FE96_C0_D11_Q12[0][0][3];
    const double w2_d11_c0 = w[2][0] * FE96_C0_D02_Q12[0][0][0] + w[2][2] * FE96_C0_D02_Q12[0][0][1] + w[2][4] * FE96_C0_D02_Q12[0][0][2];
    const double w2_d00_c0 = w[2][0] * FE96_C0_D02_Q12[0][0][0] + w[2][1] * FE96_C0_D02_Q12[0][0][1] + w[2][5] * FE96_C0_D02_Q12[0][0][2];
    const double w2_d1_c2 = w[2][12] * FE3_C0_D01_Q12[0][0][0] + w[2][14] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c2 += w[2][ic + 12] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c3 = w[2][15] * FE3_C0_D01_Q12[0][0][0] + w[2][17] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c3 += w[2][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c4 = w[2][18] * FE3_C0_D01_Q12[0][0][0] + w[2][20] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c4 += w[2][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    alignas(32) double sp[191];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = w4_d1 * sp[3];
    sp[8] = w4_d0 * sp[4];
    sp[9] = sp[7] + sp[8];
    sp[10] = w3_d1_c3 * sp[3];
    sp[11] = w3_d0_c3 * sp[4];
    sp[12] = sp[10] + sp[11];
    sp[13] = w3_d1_c4 * sp[3];
    sp[14] = w3_d0_c4 * sp[4];
    sp[15] = sp[13] + sp[14];
    sp[16] = sp[3] + sp[3];
    sp[17] = sp[4] + sp[4];
    sp[18] = sp[3] * sp[3];
    sp[19] = sp[3] * sp[4];
    sp[20] = sp[4] * sp[4];
    sp[21] = sp[19] + sp[19];
    sp[22] = sp[18] + sp[18];
    sp[23] = sp[21] + sp[21];
    sp[24] = sp[20] + sp[20];
    sp[25] = w4_d0 * sp[5];
    sp[26] = w4_d1 * sp[6];
    sp[27] = sp[25] + sp[26];
    sp[28] = w3_d0_c3 * sp[5];
    sp[29] = w3_d1_c3 * sp[6];
    sp[30] = sp[28] + sp[29];
    sp[31] = w3_d0_c4 * sp[5];
    sp[32] = w3_d1_c4 * sp[6];
    sp[33] = sp[31] + sp[32];
    sp[34] = sp[3] * sp[5];
    sp[35] = sp[3] * sp[6];
    sp[36] = sp[4] * sp[6];
    sp[37] = sp[5] * sp[4];
    sp[38] = sp[34] + sp[36];
    sp[39] = sp[5] * sp[6];
    sp[40] = sp[5] * sp[5];
    sp[41] = sp[6] * sp[6];
    sp[42] = sp[39] + sp[39];
    sp[43] = w2_d11_c1 * sp[3];
    sp[44] = w2_d01_c1 * sp[4];
    sp[45] = sp[43] + sp[44];
    sp[46] = sp[45] * sp[3];
    sp[47] = w2_d01_c1 * sp[3];
    sp[48] = w2_d00_c1 * sp[4];
    sp[49] = sp[47] + sp[48];
    sp[50] = sp[49] * sp[4];
    sp[51] = sp[46] + sp[50];
    sp[52] = sp[51] + sp[51];
    sp[53] = w2_d01_c0 * sp[5];
    sp[54] = w2_d11_c0 * sp[6];
    sp[55] = sp[53] + sp[54];
    sp[56] = sp[55] * sp[3];
    sp[57] = w2_d00_c0 * sp[5];
    sp[58] = w2_d01_c0 * sp[6];
    sp[59] = sp[57] + sp[58];
    sp[60] = sp[59] * sp[4];
    sp[61] = sp[56] + sp[60];
    sp[62] = w2_d00_c1 * sp[5];
    sp[63] = w2_d01_c1 * sp[6];
    sp[64] = sp[62] + sp[63];
    sp[65] = sp[64] * sp[5];
    sp[66] = w2_d01_c1 * sp[5];
    sp[67] = w2_d11_c1 * sp[6];
    sp[68] = sp[66] + sp[67];
    sp[69] = sp[68] * sp[6];
    sp[70] = sp[65] + sp[69];
    sp[71] = sp[61] + sp[70];
    sp[72] = w2_d1_c2 * sp[3];
    sp[73] = w2_d0_c2 * sp[4];
    sp[74] = sp[72] + sp[73];
    sp[75] = sp[6] + sp[6];
    sp[76] = sp[5] + sp[5];
    sp[77] = sp[42] + sp[42];
    sp[78] = sp[41] + sp[41];
    sp[79] = sp[40] + sp[40];
    sp[80] = w2_d11_c0 * sp[3];
    sp[81] = w2_d01_c0 * sp[4];
    sp[82] = sp[80] + sp[81];
    sp[83] = sp[82] * sp[3];
    sp[84] = w2_d01_c0 * sp[3];
    sp[85] = w2_d00_c0 * sp[4];
    sp[86] = sp[84] + sp[85];
    sp[87] = sp[86] * sp[4];
    sp[88] = sp[83] + sp[87];
    sp[89] = sp[49] * sp[5];
    sp[90] = sp[45] * sp[6];
    sp[91] = sp[89] + sp[90];
    sp[92] = sp[88] + sp[91];
    sp[93] = sp[59] * sp[5];
    sp[94] = sp[55] * sp[6];
    sp[95] = sp[93] + sp[94];
    sp[96] = sp[95] + sp[95];
    sp[97] = w2_d0_c2 * sp[5];
    sp[98] = w2_d1_c2 * sp[6];
    sp[99] = sp[97] + sp[98];
    sp[100] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[101] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[102] = sp[100] + sp[101];
    sp[103] = std::sqrt(sp[102]);
    sp[104] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[105] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[106] = sp[104] + sp[105];
    sp[107] = std::sqrt(sp[106]);
    sp[108] = sp[103] * sp[107];
    sp[109] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[110] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[111] = sp[109] + sp[110];
    sp[112] = std::sqrt(sp[111]);
    sp[113] = sp[108] * sp[112];
    sp[114] = triangle_reference_cell_volume * sp[2];
    sp[115] = std::abs(sp[114]);
    sp[116] = sp[113] / (4.0 * sp[115]);
    sp[117] = sp[15] + sp[15];
    sp[118] = sp[33] + sp[33];
    sp[119] = 2.0 * sp[116] * (2.0 * sp[116]);
    sp[120] = w2_d1_c3 * sp[3];
    sp[121] = w2_d0_c3 * sp[4];
    sp[122] = sp[120] + sp[121];
    sp[123] = w2_d0_c3 * sp[5];
    sp[124] = w2_d1_c3 * sp[6];
    sp[125] = sp[123] + sp[124];
    sp[126] = w2_d1_c4 * sp[3];
    sp[127] = w2_d0_c4 * sp[4];
    sp[128] = sp[126] + sp[127];
    sp[129] = w2_d0_c4 * sp[5];
    sp[130] = w2_d1_c4 * sp[6];
    sp[131] = sp[129] + sp[130];
    sp[132] = sp[18] + sp[41];
    sp[133] = sp[19] + sp[39];
    sp[134] = sp[40] + sp[20];
    sp[135] = sp[122] * sp[3];
    sp[136] = sp[122] * sp[4];
    sp[137] = sp[125] * sp[6];
    sp[138] = sp[125] * sp[5];
    sp[139] = sp[135] + sp[137];
    sp[140] = sp[138] + sp[136];
    sp[141] = sp[128] * sp[3];
    sp[142] = sp[128] * sp[4];
    sp[143] = sp[131] * sp[6];
    sp[144] = sp[131] * sp[5];
    sp[145] = sp[141] + sp[143];
    sp[146] = sp[144] + sp[142];
    sp[147] = -1.0 * w[1][0] + w[1][0];
    sp[148] = sp[16] / 2 * (sp[16] / 2);
    sp[149] = sp[16] / 2 * (sp[17] / 2);
    sp[150] = sp[17] / 2 * (sp[17] / 2);
    sp[151] = sp[3] / 2 * (sp[6] / 2);
    sp[152] = sp[4] / 2 * (sp[6] / 2);
    sp[153] = sp[6] / 2 * (sp[6] / 2);
    sp[154] = sp[5] / 2 * (sp[6] / 2);
    sp[155] = sp[3] / 2 * (sp[5] / 2);
    sp[156] = sp[5] / 2 * (sp[4] / 2);
    sp[157] = sp[5] / 2 * (sp[5] / 2);
    sp[158] = sp[3] / 2 * (sp[3] / 2);
    sp[159] = sp[3] / 2 * (sp[4] / 2);
    sp[160] = sp[4] / 2 * (sp[4] / 2);
    sp[161] = sp[148] + sp[153];
    sp[162] = sp[149] + sp[154];
    sp[163] = sp[150] + sp[157];
    sp[164] = sp[75] / 2 * (sp[75] / 2);
    sp[165] = sp[76] / 2 * (sp[75] / 2);
    sp[166] = sp[76] / 2 * (sp[76] / 2);
    sp[167] = sp[164] + sp[158];
    sp[168] = sp[165] + sp[159];
    sp[169] = sp[166] + sp[160];
    sp[170] = sp[151] + sp[151];
    sp[171] = sp[155] + sp[155];
    sp[172] = sp[167] + sp[158];
    sp[173] = sp[168] + sp[159];
    sp[174] = sp[152] + sp[152];
    sp[175] = sp[156] + sp[156];
    sp[176] = sp[169] + sp[160];
    sp[177] = sp[161] + sp[153];
    sp[178] = sp[162] + sp[154];
    sp[179] = sp[163] + sp[157];
    sp[180] = std::abs(sp[2]);
    sp[181] = sp[6] * sp[180];
    sp[182] = sp[5] * sp[180];
    sp[183] = sp[122] * sp[180];
    sp[184] = sp[125] * sp[180];
    sp[185] = sp[3] * sp[180];
    sp[186] = sp[4] * sp[180];
    sp[187] = -1 * sp[3] * sp[180];
    sp[188] = -1 * sp[4] * sp[180];
    sp[189] = -1 * sp[6] * sp[180];
    sp[190] = -1 * sp[5] * sp[180];
    alignas(32) double BF0[6][6] = {};
    alignas(32) double BF1[6][5] = {};
    alignas(32) double BF2[6][5] = {};
    alignas(32) double BF3[6][6] = {};
    alignas(32) double BF4[5][6] = {};
    alignas(32) double BF5[5][5] = {};
    alignas(32) double TP0[5] = {};
    alignas(32) double BF6[5][5] = {};
    alignas(32) double TP1[5] = {};
    alignas(32) double TP2[5] = {};
    alignas(32) double BF7[5][6] = {};
    alignas(32) double BF8[5][5] = {};
    alignas(32) double TP3[5] = {};
    alignas(32) double BF9[5][5] = {};
    alignas(32) double TP4[5] = {};
    alignas(32) double TP5[5] = {};
    alignas(32) double TP6[5] = {};
    alignas(32) double TP7[5] = {};
    alignas(32) double TP8[5] = {};
    alignas(32) double BF10[5][3] = {};
    alignas(32) double TP9[5] = {};
    alignas(32) double TP10[5] = {};
    alignas(32) double BF11[5][3] = {};
    alignas(32) double TP11[5] = {};
    alignas(32) double TP12[6] = {};
    alignas(32) double TP13[5] = {};
    alignas(32) double TP14[3] = {};
    alignas(32) double TP15[5] = {};
    alignas(32) double TP16[3] = {};
    alignas(32) double TP17[4] = {};
    alignas(32) double TP18[6] = {};
    alignas(32) double TP19[5] = {};
    alignas(32) double TP20[3] = {};
    alignas(32) double TP21[5] = {};
    alignas(32) double TP22[3] = {};
    alignas(32) double TP23[4] = {};
    alignas(32) double TP24[2] = {};
    alignas(32) double TP25[2] = {};
    alignas(32) double TP26[2] = {};
    alignas(32) double TP27[3] = {};
    alignas(32) double TP28[2] = {};
    alignas(32) double TP29[2] = {};
    alignas(32) double TP30[3] = {};
    alignas(32) double TP31[2] = {};
    alignas(32) double BF12[5][6] = {};
    alignas(32) double BF13[5][5] = {};
    alignas(32) double TP32[5] = {};
    alignas(32) double BF14[5][5] = {};
    alignas(32) double TP33[5] = {};
    alignas(32) double TP34[5] = {};
    alignas(32) double BF15[5][6] = {};
    alignas(32) double BF16[5][5] = {};
    alignas(32) double TP35[5] = {};
    alignas(32) double BF17[5][5] = {};
    alignas(32) double TP36[5] = {};
    alignas(32) double TP37[5] = {};
    alignas(32) double TP38[5] = {};
    alignas(32) double TP39[5] = {};
    alignas(32) double TP40[5] = {};
    alignas(32) double BF18[5][3] = {};
    alignas(32) double TP41[5] = {};
    alignas(32) double TP42[5] = {};
    alignas(32) double BF19[5][3] = {};
    alignas(32) double TP43[5] = {};
    alignas(32) double TP44[6] = {};
    alignas(32) double TP45[5] = {};
    alignas(32) double TP46[5] = {};
    alignas(32) double TP47[3] = {};
    alignas(32) double TP48[4] = {};
    alignas(32) double TP49[6] = {};
    alignas(32) double TP50[5] = {};
    alignas(32) double TP51[3] = {};
    alignas(32) double TP52[5] = {};
    alignas(32) double TP53[3] = {};
    alignas(32) double TP54[4] = {};
    alignas(32) double TP55[2] = {};
    alignas(32) double TP56[2] = {};
    alignas(32) double TP57[2] = {};
    alignas(32) double TP58[3] = {};
    alignas(32) double TP59[2] = {};
    alignas(32) double TP60[2] = {};
    alignas(32) double TP61[3] = {};
    alignas(32) double TP62[2] = {};
    alignas(32) double TP63[6] = {};
    alignas(32) double TP64[5] = {};
    alignas(32) double TP65[3] = {};
    alignas(32) double TP66[5] = {};
    alignas(32) double TP67[3] = {};
    alignas(32) double TP68[4] = {};
    alignas(32) double TP69[6] = {};
    alignas(32) double TP70[5] = {};
    alignas(32) double TP71[3] = {};
    alignas(32) double TP72[5] = {};
    alignas(32) double TP73[3] = {};
    alignas(32) double TP74[4] = {};
    alignas(32) double TP75[2] = {};
    alignas(32) double TP76[2] = {};
    alignas(32) double TP77[2] = {};
    alignas(32) double TP78[3] = {};
    alignas(32) double TP79[2] = {};
    alignas(32) double TP80[2] = {};
    alignas(32) double TP81[3] = {};
    alignas(32) double TP82[2] = {};
    alignas(32) double BF20[6][6] = {};
    alignas(32) double BF21[6][6] = {};
    alignas(32) double BF22[5][6] = {};
    alignas(32) double TP83[5] = {};
    alignas(32) double BF23[5][5] = {};
    alignas(32) double TP84[5] = {};
    alignas(32) double TP85[5] = {};
    alignas(32) double BF24[5][6] = {};
    alignas(32) double BF25[5][5] = {};
    alignas(32) double TP86[5] = {};
    alignas(32) double BF26[5][5] = {};
    alignas(32) double TP87[5] = {};
    alignas(32) double TP88[5] = {};
    alignas(32) double TP89[5] = {};
    alignas(32) double TP90[5] = {};
    alignas(32) double TP91[5] = {};
    alignas(32) double BF27[5][3] = {};
    alignas(32) double TP92[5] = {};
    alignas(32) double TP93[5] = {};
    alignas(32) double BF28[5][3] = {};
    alignas(32) double TP94[5] = {};
    alignas(32) double TP95[6] = {};
    alignas(32) double TP96[5] = {};
    alignas(32) double TP97[5] = {};
    alignas(32) double TP98[4] = {};
    alignas(32) double TP99[6] = {};
    alignas(32) double TP100[5] = {};
    alignas(32) double TP101[3] = {};
    alignas(32) double TP102[5] = {};
    alignas(32) double TP103[3] = {};
    alignas(32) double TP104[4] = {};
    alignas(32) double TP105[2] = {};
    alignas(32) double TP106[2] = {};
    alignas(32) double TP107[2] = {};
    alignas(32) double TP108[3] = {};
    alignas(32) double TP109[2] = {};
    alignas(32) double TP110[2] = {};
    alignas(32) double TP111[3] = {};
    alignas(32) double TP112[2] = {};
    alignas(32) double BF29[5][6] = {};
    alignas(32) double BF30[5][5] = {};
    alignas(32) double TP113[5] = {};
    alignas(32) double TP114[5] = {};
    alignas(32) double TP115[5] = {};
    alignas(32) double BF31[5][6] = {};
    alignas(32) double BF32[5][5] = {};
    alignas(32) double TP116[5] = {};
    alignas(32) double BF33[5][5] = {};
    alignas(32) double TP117[5] = {};
    alignas(32) double TP118[5] = {};
    alignas(32) double TP119[5] = {};
    alignas(32) double TP120[5] = {};
    alignas(32) double TP121[5] = {};
    alignas(32) double BF34[5][3] = {};
    alignas(32) double TP122[5] = {};
    alignas(32) double TP123[5] = {};
    alignas(32) double BF35[5][3] = {};
    alignas(32) double TP124[5] = {};
    alignas(32) double TP125[6] = {};
    alignas(32) double TP126[5] = {};
    alignas(32) double TP127[5] = {};
    alignas(32) double TP128[4] = {};
    alignas(32) double TP129[6] = {};
    alignas(32) double TP130[5] = {};
    alignas(32) double TP131[5] = {};
    alignas(32) double TP132[3] = {};
    alignas(32) double TP133[4] = {};
    alignas(32) double TP134[2] = {};
    alignas(32) double TP135[2] = {};
    alignas(32) double TP136[2] = {};
    alignas(32) double TP137[3] = {};
    alignas(32) double TP138[2] = {};
    alignas(32) double TP139[2] = {};
    alignas(32) double TP140[3] = {};
    alignas(32) double TP141[2] = {};
    alignas(32) double TP142[6] = {};
    alignas(32) double TP143[5] = {};
    alignas(32) double TP144[3] = {};
    alignas(32) double TP145[5] = {};
    alignas(32) double TP146[3] = {};
    alignas(32) double TP147[6] = {};
    alignas(32) double TP148[5] = {};
    alignas(32) double TP149[3] = {};
    alignas(32) double TP150[5] = {};
    alignas(32) double TP151[3] = {};
    alignas(32) double TP152[4] = {};
    alignas(32) double TP153[2] = {};
    alignas(32) double TP154[2] = {};
    alignas(32) double TP155[2] = {};
    alignas(32) double TP156[3] = {};
    alignas(32) double TP157[2] = {};
    alignas(32) double TP158[2] = {};
    alignas(32) double TP159[3] = {};
    alignas(32) double TP160[2] = {};
    alignas(32) double TP161[6] = {};
    alignas(32) double TP162[5] = {};
    alignas(32) double TP163[3] = {};
    alignas(32) double TP164[5] = {};
    alignas(32) double TP165[3] = {};
    alignas(32) double TP166[4] = {};
    alignas(32) double TP167[6] = {};
    alignas(32) double TP168[5] = {};
    alignas(32) double TP169[3] = {};
    alignas(32) double TP170[5] = {};
    alignas(32) double TP171[3] = {};
    alignas(32) double TP172[4] = {};
    alignas(32) double TP173[2] = {};
    alignas(32) double TP174[2] = {};
    alignas(32) double TP175[2] = {};
    alignas(32) double TP176[3] = {};
    alignas(32) double TP177[2] = {};
    alignas(32) double TP178[2] = {};
    alignas(32) double TP179[3] = {};
    alignas(32) double TP180[2] = {};
    alignas(32) double TP181[6] = {};
    alignas(32) double TP182[5] = {};
    alignas(32) double TP183[3] = {};
    alignas(32) double TP184[5] = {};
    alignas(32) double TP185[3] = {};
    alignas(32) double TP186[4] = {};
    alignas(32) double TP187[6] = {};
    alignas(32) double TP188[5] = {};
    alignas(32) double TP189[3] = {};
    alignas(32) double TP190[5] = {};
    alignas(32) double TP191[3] = {};
    alignas(32) double TP192[4] = {};
    alignas(32) double TP193[2] = {};
    alignas(32) double TP194[2] = {};
    alignas(32) double TP195[3] = {};
    alignas(32) double TP196[2] = {};
    alignas(32) double TP197[2] = {};
    alignas(32) double TP198[3] = {};
    alignas(32) double TP199[2] = {};
    alignas(32) double TP200[6] = {};
    alignas(32) double TP201[5] = {};
    alignas(32) double TP202[5] = {};
    alignas(32) double TP203[6] = {};
    alignas(32) double TP204[5] = {};
    alignas(32) double TP205[5] = {};
    alignas(32) double TP206[2] = {};
    alignas(32) double TP207[3] = {};
    alignas(32) double TP208[2] = {};
    alignas(32) double TP209[2] = {};
    alignas(32) double TP210[3] = {};
    alignas(32) double TP211[2] = {};
    alignas(32) double BF36[3][5] = {};
    alignas(32) double BF37[3][5] = {};
    alignas(32) double BF38[3][5] = {};
    alignas(32) double BF39[3][5] = {};
    alignas(32) double TP212[3] = {};
    alignas(32) double BF40[3][3] = {};
    alignas(32) double TP213[3] = {};
    alignas(32) double BF41[3][3] = {};
    alignas(32) double TP214[6] = {};
    alignas(32) double TP215[5] = {};
    alignas(32) double TP216[5] = {};
    alignas(32) double TP217[6] = {};
    alignas(32) double TP218[5] = {};
    alignas(32) double TP219[5] = {};
    alignas(32) double TP220[2] = {};
    alignas(32) double TP221[3] = {};
    alignas(32) double TP222[2] = {};
    alignas(32) double TP223[2] = {};
    alignas(32) double TP224[3] = {};
    alignas(32) double TP225[2] = {};
    alignas(32) double TP226[6] = {};
    alignas(32) double TP227[5] = {};
    alignas(32) double TP228[5] = {};
    alignas(32) double TP229[6] = {};
    alignas(32) double TP230[5] = {};
    alignas(32) double TP231[5] = {};
    alignas(32) double TP232[2] = {};
    alignas(32) double TP233[3] = {};
    alignas(32) double TP234[2] = {};
    alignas(32) double TP235[2] = {};
    alignas(32) double TP236[3] = {};
    alignas(32) double TP237[2] = {};
    alignas(32) double BF42[3][6] = {};
    alignas(32) double BF43[3][5] = {};
    alignas(32) double BF44[3][5] = {};
    alignas(32) double BF45[3][6] = {};
    alignas(32) double BF46[3][5] = {};
    alignas(32) double BF47[3][5] = {};
    alignas(32) double TP238[3] = {};
    alignas(32) double BF48[3][3] = {};
    alignas(32) double TP239[3] = {};
    alignas(32) double TP240[3] = {};
    alignas(32) double BF49[3][3] = {};
    alignas(32) double TP241[3] = {};
    alignas(32) double TP242[6] = {};
    alignas(32) double TP243[5] = {};
    alignas(32) double TP244[5] = {};
    alignas(32) double TP245[6] = {};
    alignas(32) double TP246[5] = {};
    alignas(32) double TP247[5] = {};
    alignas(32) double TP248[2] = {};
    alignas(32) double TP249[3] = {};
    alignas(32) double TP250[2] = {};
    alignas(32) double TP251[2] = {};
    alignas(32) double TP252[3] = {};
    alignas(32) double TP253[2] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE96_C0_Q12[0][iq][ic];
        const double w2_d1_c0 = w[2][0] * FE96_C0_D01_Q12[0][iq][0] + w[2][2] * FE96_C0_D01_Q12[0][iq][1] + w[2][3] * FE96_C0_D01_Q12[0][iq][2] + w[2][4] * FE96_C0_D01_Q12[0][iq][3] + w[2][5] * FE96_C0_D01_Q12[0][iq][4];
        const double w2_d0_c0 = w[2][0] * FE96_C0_D10_Q12[0][iq][0] + w[2][1] * FE96_C0_D10_Q12[0][iq][1] + w[2][3] * FE96_C0_D10_Q12[0][iq][2] + w[2][4] * FE96_C0_D10_Q12[0][iq][3] + w[2][5] * FE96_C0_D10_Q12[0][iq][4];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE96_C0_Q12[0][iq][ic];
        const double w2_d1_c1 = w[2][6] * FE96_C0_D01_Q12[0][iq][0] + w[2][8] * FE96_C0_D01_Q12[0][iq][1] + w[2][9] * FE96_C0_D01_Q12[0][iq][2] + w[2][10] * FE96_C0_D01_Q12[0][iq][3] + w[2][11] * FE96_C0_D01_Q12[0][iq][4];
        const double w2_d0_c1 = w[2][6] * FE96_C0_D10_Q12[0][iq][0] + w[2][7] * FE96_C0_D10_Q12[0][iq][1] + w[2][9] * FE96_C0_D10_Q12[0][iq][2] + w[2][10] * FE96_C0_D10_Q12[0][iq][3] + w[2][11] * FE96_C0_D10_Q12[0][iq][4];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c1 += w[3][ic + 6] * FE96_C0_Q12[0][iq][ic];
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c0 += w[3][ic] * FE96_C0_Q12[0][iq][ic];
        double w3_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c3 += w[3][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4 += w[4][ic] * FE3_C0_Q12[0][iq][ic];
        double w3_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c4 += w[3][ic + 18] * FE3_C0_Q12[0][iq][ic];
        const double w3_d1_c1 = w[3][6] * FE96_C0_D01_Q12[0][iq][0] + w[3][8] * FE96_C0_D01_Q12[0][iq][1] + w[3][9] * FE96_C0_D01_Q12[0][iq][2] + w[3][10] * FE96_C0_D01_Q12[0][iq][3] + w[3][11] * FE96_C0_D01_Q12[0][iq][4];
        const double w3_d0_c1 = w[3][6] * FE96_C0_D10_Q12[0][iq][0] + w[3][7] * FE96_C0_D10_Q12[0][iq][1] + w[3][9] * FE96_C0_D10_Q12[0][iq][2] + w[3][10] * FE96_C0_D10_Q12[0][iq][3] + w[3][11] * FE96_C0_D10_Q12[0][iq][4];
        const double w3_d1_c0 = w[3][0] * FE96_C0_D01_Q12[0][iq][0] + w[3][2] * FE96_C0_D01_Q12[0][iq][1] + w[3][3] * FE96_C0_D01_Q12[0][iq][2] + w[3][4] * FE96_C0_D01_Q12[0][iq][3] + w[3][5] * FE96_C0_D01_Q12[0][iq][4];
        const double w3_d0_c0 = w[3][0] * FE96_C0_D10_Q12[0][iq][0] + w[3][1] * FE96_C0_D10_Q12[0][iq][1] + w[3][3] * FE96_C0_D10_Q12[0][iq][2] + w[3][4] * FE96_C0_D10_Q12[0][iq][3] + w[3][5] * FE96_C0_D10_Q12[0][iq][4];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE3_C0_Q12[0][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE3_C0_Q12[0][iq][ic];
        alignas(32) double sv12[2440];
        sv12[0] = w2_c1 * sp[3];
        sv12[1] = w2_c1 * sp[4];
        sv12[2] = w2_d1_c0 * sp[3];
        sv12[3] = w2_d0_c0 * sp[4];
        sv12[4] = sv12[2] + sv12[3];
        sv12[5] = w2_c0 * sp[6];
        sv12[6] = w2_c0 * sp[5];
        sv12[7] = w2_d0_c0 * sp[5];
        sv12[8] = w2_d1_c0 * sp[6];
        sv12[9] = sv12[7] + sv12[8];
        sv12[10] = sv12[0] + sv12[5];
        sv12[11] = sv12[6] + sv12[1];
        sv12[12] = w2_d1_c1 * sp[3];
        sv12[13] = w2_d0_c1 * sp[4];
        sv12[14] = sv12[12] + sv12[13];
        sv12[15] = w2_d0_c1 * sp[5];
        sv12[16] = w2_d1_c1 * sp[6];
        sv12[17] = sv12[15] + sv12[16];
        sv12[18] = w3_c1 * sp[3];
        sv12[19] = w3_c1 * sp[4];
        sv12[20] = w3_c0 * sp[6];
        sv12[21] = w3_c0 * sp[5];
        sv12[22] = sv12[18] + sv12[20];
        sv12[23] = sv12[21] + sv12[19];
        sv12[24] = std::exp(w4);
        sv12[25] = sp[9] * sv12[24];
        sv12[26] = w3_c3 * (0.09 * sv12[25]);
        sv12[27] = sp[12] * (0.09 * sv12[24]);
        sv12[28] = sv12[26] + sv12[27];
        sv12[29] = w3_c3 * sv12[28];
        sv12[30] = w3_c3 * (0.09 * sv12[24]);
        sv12[31] = sp[12] * sv12[30];
        sv12[32] = sv12[29] + sv12[31];
        sv12[33] = w3_c4 * sp[15];
        sv12[34] = sv12[33] + sv12[33];
        sv12[35] = w3_c4 * w3_c4;
        sv12[36] = std::sqrt(1e-8 + sv12[35]);
        sv12[37] = sv12[34] / (2 * sv12[36]);
        sv12[38] = sp[15] + sv12[37];
        sv12[39] = w3_c3 * sv12[30];
        sv12[40] = w3_c4 + sv12[36];
        sv12[41] = sv12[39] / (0.5 * sv12[40]);
        sv12[42] = 0.5 * sv12[38] * sv12[41];
        sv12[43] = sv12[32] + -1 * sv12[42];
        sv12[44] = sv12[43] / (0.5 * sv12[40]);
        sv12[45] = 2.0 * sv12[44] * (sp[16] / 2);
        sv12[46] = 2.0 * sv12[44] * (sp[17] / 2);
        sv12[47] = 2.0 * (0.0001 + sv12[41]) * (sp[22] / 2);
        sv12[48] = 2.0 * (0.0001 + sv12[41]) * (sp[23] / 2);
        sv12[49] = 2.0 * (0.0001 + sv12[41]) * (sp[24] / 2);
        sv12[50] = sp[27] * sv12[24];
        sv12[51] = w3_c3 * (0.09 * sv12[50]);
        sv12[52] = sp[30] * (0.09 * sv12[24]);
        sv12[53] = sv12[51] + sv12[52];
        sv12[54] = w3_c3 * sv12[53];
        sv12[55] = sp[30] * sv12[30];
        sv12[56] = sv12[54] + sv12[55];
        sv12[57] = w3_c4 * sp[33];
        sv12[58] = sv12[57] + sv12[57];
        sv12[59] = sv12[58] / (2 * sv12[36]);
        sv12[60] = sp[33] + sv12[59];
        sv12[61] = 0.5 * sv12[60] * sv12[41];
        sv12[62] = sv12[56] + -1 * sv12[61];
        sv12[63] = sv12[62] / (0.5 * sv12[40]);
        sv12[64] = 2.0 * sv12[63] * (sp[6] / 2);
        sv12[65] = 2.0 * sv12[63] * (sp[5] / 2);
        sv12[66] = 2.0 * sv12[63] * (sp[3] / 2);
        sv12[67] = 2.0 * sv12[63] * (sp[4] / 2);
        sv12[68] = 2.0 * (0.0001 + sv12[41]) * (sp[41] / 2);
        sv12[69] = 2.0 * (0.0001 + sv12[41]) * (sp[42] / 2);
        sv12[70] = 2.0 * (0.0001 + sv12[41]) * (sp[40] / 2);
        sv12[71] = 2.0 * (0.0001 + sv12[41]) * (sp[38] / 2);
        sv12[72] = 2.0 * (0.0001 + sv12[41]) * (sp[35] / 2);
        sv12[73] = 2.0 * (0.0001 + sv12[41]) * (sp[37] / 2);
        sv12[74] = sv12[45] + sv12[64];
        sv12[75] = sv12[46] + sv12[65];
        sv12[76] = sv12[47] + sv12[68];
        sv12[77] = sv12[48] + sv12[69];
        sv12[78] = sv12[49] + sv12[70];
        sv12[79] = sv12[22] + -1 * sv12[74];
        sv12[80] = sv12[23] + -1 * sv12[75];
        sv12[81] = w3_c1 * sv12[14];
        sv12[82] = w3_c0 * sv12[17];
        sv12[83] = sv12[81] + sv12[82];
        sv12[84] = sv12[14] + sv12[14];
        sv12[85] = 2.0 * sv12[44] * (sv12[84] / 2);
        sv12[86] = 2.0 * (0.0001 + sv12[41]) * (sp[52] / 2);
        sv12[87] = sv12[85] + sv12[86];
        sv12[88] = sv12[4] + sv12[17];
        sv12[89] = 2.0 * sv12[63] * (sv12[88] / 2);
        sv12[90] = 2.0 * (0.0001 + sv12[41]) * (sp[71] / 2);
        sv12[91] = sv12[89] + sv12[90];
        sv12[92] = sv12[87] + sv12[91];
        sv12[93] = sv12[83] + -1 * sv12[92];
        sv12[94] = sv12[93] + sp[74];
        sv12[95] = sv12[94] * sv12[79];
        sv12[96] = sv12[94] * sv12[80];
        sv12[97] = sv12[94] * (-1 * sv12[76]);
        sv12[98] = sv12[94] * (-1 * sv12[77]);
        sv12[99] = sv12[94] * (-1 * sv12[78]);
        sv12[100] = sv12[94] * (-1 * sv12[66]);
        sv12[101] = sv12[94] * (-1 * sv12[67]);
        sv12[102] = sv12[94] * (-1 * sv12[71]);
        sv12[103] = sv12[94] * (-1 * sv12[72]);
        sv12[104] = sv12[94] * (-1 * sv12[73]);
        sv12[105] = sv12[94] * sp[3];
        sv12[106] = sv12[94] * sp[4];
        sv12[107] = 2.0 * sv12[44] * (sp[6] / 2);
        sv12[108] = 2.0 * sv12[44] * (sp[5] / 2);
        sv12[109] = 2.0 * sv12[44] * (sp[3] / 2);
        sv12[110] = 2.0 * sv12[44] * (sp[4] / 2);
        sv12[111] = 2.0 * (0.0001 + sv12[41]) * (sp[21] / 2);
        sv12[112] = 2.0 * (0.0001 + sv12[41]) * (sp[18] / 2);
        sv12[113] = 2.0 * (0.0001 + sv12[41]) * (sp[20] / 2);
        sv12[114] = 2.0 * sv12[63] * (sp[75] / 2);
        sv12[115] = 2.0 * sv12[63] * (sp[76] / 2);
        sv12[116] = 2.0 * (0.0001 + sv12[41]) * (sp[77] / 2);
        sv12[117] = 2.0 * (0.0001 + sv12[41]) * (sp[78] / 2);
        sv12[118] = 2.0 * (0.0001 + sv12[41]) * (sp[79] / 2);
        sv12[119] = sv12[114] + sv12[109];
        sv12[120] = sv12[115] + sv12[110];
        sv12[121] = sv12[116] + sv12[111];
        sv12[122] = sv12[117] + sv12[112];
        sv12[123] = sv12[118] + sv12[113];
        sv12[124] = sv12[22] + -1 * sv12[119];
        sv12[125] = sv12[23] + -1 * sv12[120];
        sv12[126] = w3_c1 * sv12[4];
        sv12[127] = w3_c0 * sv12[9];
        sv12[128] = sv12[126] + sv12[127];
        sv12[129] = 2.0 * sv12[44] * (sv12[88] / 2);
        sv12[130] = 2.0 * (0.0001 + sv12[41]) * (sp[92] / 2);
        sv12[131] = sv12[129] + sv12[130];
        sv12[132] = sv12[9] + sv12[9];
        sv12[133] = 2.0 * sv12[63] * (sv12[132] / 2);
        sv12[134] = 2.0 * (0.0001 + sv12[41]) * (sp[96] / 2);
        sv12[135] = sv12[133] + sv12[134];
        sv12[136] = sv12[131] + sv12[135];
        sv12[137] = sv12[128] + -1 * sv12[136];
        sv12[138] = sv12[137] + sp[99];
        sv12[139] = sv12[138] * (-1 * sv12[107]);
        sv12[140] = sv12[138] * (-1 * sv12[108]);
        sv12[141] = sv12[138] * (-1 * sv12[72]);
        sv12[142] = sv12[138] * (-1 * sv12[71]);
        sv12[143] = sv12[138] * (-1 * sv12[73]);
        sv12[144] = sv12[138] * sv12[124];
        sv12[145] = sv12[138] * sv12[125];
        sv12[146] = sv12[138] * (-1 * sv12[121]);
        sv12[147] = sv12[138] * (-1 * sv12[122]);
        sv12[148] = sv12[138] * (-1 * sv12[123]);
        sv12[149] = sv12[138] * sp[6];
        sv12[150] = sv12[138] * sp[5];
        sv12[151] = sv12[95] + sv12[139];
        sv12[152] = sv12[96] + sv12[140];
        sv12[153] = sv12[97] + sv12[141];
        sv12[154] = sv12[98] + sv12[142];
        sv12[155] = sv12[99] + sv12[143];
        sv12[156] = sv12[144] + sv12[100];
        sv12[157] = sv12[145] + sv12[101];
        sv12[158] = sv12[146] + sv12[102];
        sv12[159] = sv12[147] + sv12[103];
        sv12[160] = sv12[148] + sv12[104];
        sv12[161] = sv12[105] + sv12[149];
        sv12[162] = sv12[150] + sv12[106];
        sv12[163] = w3_c0 * w3_c0;
        sv12[164] = w3_c1 * w3_c1;
        sv12[165] = sv12[163] + sv12[164];
        sv12[166] = std::sqrt(sv12[165]);
        sv12[167] = 0.5 * (2.0 * sp[116]) * sv12[166];
        sv12[168] = sv12[167] / (0.0001 + sv12[41]);
        sv12[169] = sv12[30] + sv12[30];
        sv12[170] = w3_c4 + w3_c4;
        sv12[171] = sv12[170] / (2 * sv12[36]);
        sv12[172] = 0.5 * (1.0 + sv12[171]) * sv12[41];
        sv12[173] = sv12[169] / (0.5 * sv12[40]);
        sv12[174] = -1 * sv12[172] / (0.5 * sv12[40]);
        sv12[175] = sv12[168] * sv12[173];
        sv12[176] = sv12[168] * sv12[174];
        sv12[177] = w3_c0 + w3_c0;
        sv12[178] = w3_c1 + w3_c1;
        sv12[179] = sv12[178] / (2 * sv12[166]);
        sv12[180] = sv12[177] / (2 * sv12[166]);
        sv12[181] = 0.5 * (2.0 * sp[116]) * sv12[179];
        sv12[182] = 0.5 * (2.0 * sp[116]) * sv12[180];
        sv12[183] = sv12[181] / (0.0001 + sv12[41]);
        sv12[184] = sv12[182] / (0.0001 + sv12[41]);
        sv12[185] = -1 * sv12[175] / (0.0001 + sv12[41]);
        sv12[186] = -1 * sv12[176] / (0.0001 + sv12[41]);
        sv12[187] = sv12[183] * (1.0 / sv12[168]);
        sv12[188] = sv12[184] * (1.0 / sv12[168]);
        sv12[189] = sv12[185] * (1.0 / sv12[168]);
        sv12[190] = sv12[186] * (1.0 / sv12[168]);
        sv12[191] = -1 * sv12[187] / sv12[168];
        sv12[192] = -1 * sv12[188] / sv12[168];
        sv12[193] = -1 * sv12[189] / sv12[168];
        sv12[194] = -1 * sv12[190] / sv12[168];
        sv12[195] = std::exp(-2.0 * sv12[168]);
        sv12[196] = -2.0 * sv12[183] * sv12[195];
        sv12[197] = -2.0 * sv12[184] * sv12[195];
        sv12[198] = -2.0 * sv12[185] * sv12[195];
        sv12[199] = -2.0 * sv12[186] * sv12[195];
        sv12[200] = (1.0 + sv12[195]) / (1.0 + -1 * sv12[195]);
        sv12[201] = -1 * sv12[196] * sv12[200];
        sv12[202] = -1 * sv12[197] * sv12[200];
        sv12[203] = -1 * sv12[198] * sv12[200];
        sv12[204] = -1 * sv12[199] * sv12[200];
        sv12[205] = -1 * sv12[201] + sv12[196];
        sv12[206] = -1 * sv12[202] + sv12[197];
        sv12[207] = -1 * sv12[203] + sv12[198];
        sv12[208] = -1 * sv12[204] + sv12[199];
        sv12[209] = sv12[205] / (1.0 + -1 * sv12[195]);
        sv12[210] = sv12[206] / (1.0 + -1 * sv12[195]);
        sv12[211] = sv12[207] / (1.0 + -1 * sv12[195]);
        sv12[212] = sv12[208] / (1.0 + -1 * sv12[195]);
        sv12[213] = -1 * sv12[191] + sv12[209];
        sv12[214] = -1 * sv12[192] + sv12[210];
        sv12[215] = -1 * sv12[193] + sv12[211];
        sv12[216] = -1 * sv12[194] + sv12[212];
        sv12[217] = sv12[213] * (2.0 * sp[116]);
        sv12[218] = sv12[214] * (2.0 * sp[116]);
        sv12[219] = sv12[215] * (2.0 * sp[116]);
        sv12[220] = sv12[216] * (2.0 * sp[116]);
        sv12[221] = -1 * (1.0 / sv12[168]) + sv12[200];
        sv12[222] = sv12[221] * (2.0 * sp[116]);
        sv12[223] = sv12[222] / sv12[166];
        sv12[224] = sv12[179] * sv12[223];
        sv12[225] = sv12[180] * sv12[223];
        sv12[226] = sv12[217] + -1 * sv12[224];
        sv12[227] = sv12[218] + -1 * sv12[225];
        sv12[228] = sv12[226] / sv12[166];
        sv12[229] = sv12[227] / sv12[166];
        sv12[230] = sv12[219] / sv12[166];
        sv12[231] = sv12[220] / sv12[166];
        sv12[232] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[168]) * (2.0 * sp[116]);
        sv12[233] = sv12[232] * (2.0 * sp[116]);
        sv12[234] = sv12[233] / (0.0001 + sv12[41]);
        sv12[235] = sv12[234] * sv12[173];
        sv12[236] = sv12[234] * sv12[174];
        sv12[237] = 0.5 * (-0.004435991517475 * sv12[183]) * (2.0 * sp[116]);
        sv12[238] = 0.5 * (-0.004435991517475 * sv12[184]) * (2.0 * sp[116]);
        sv12[239] = 0.5 * (-0.004435991517475 * sv12[185]) * (2.0 * sp[116]);
        sv12[240] = 0.5 * (-0.004435991517475 * sv12[186]) * (2.0 * sp[116]);
        sv12[241] = sv12[237] * (2.0 * sp[116]);
        sv12[242] = sv12[238] * (2.0 * sp[116]);
        sv12[243] = sv12[239] * (2.0 * sp[116]);
        sv12[244] = sv12[240] * (2.0 * sp[116]);
        sv12[245] = -1 * sv12[235] + sv12[243];
        sv12[246] = -1 * sv12[236] + sv12[244];
        sv12[247] = sv12[241] / (0.0001 + sv12[41]);
        sv12[248] = sv12[242] / (0.0001 + sv12[41]);
        sv12[249] = sv12[245] / (0.0001 + sv12[41]);
        sv12[250] = sv12[246] / (0.0001 + sv12[41]);
        sv12[251] = (sv12[168] >= 0.1 ? sv12[228] : sv12[247]);
        sv12[252] = (sv12[168] >= 0.1 ? sv12[229] : sv12[248]);
        sv12[253] = (sv12[168] >= 0.1 ? sv12[230] : sv12[249]);
        sv12[254] = (sv12[168] >= 0.1 ? sv12[231] : sv12[250]);
        sv12[255] = sv12[151] * sv12[251];
        sv12[256] = sv12[151] * sv12[252];
        sv12[257] = sv12[151] * sv12[253];
        sv12[258] = sv12[151] * sv12[254];
        sv12[259] = sv12[152] * sv12[251];
        sv12[260] = sv12[152] * sv12[252];
        sv12[261] = sv12[152] * sv12[253];
        sv12[262] = sv12[152] * sv12[254];
        sv12[263] = sv12[153] * sv12[251];
        sv12[264] = sv12[153] * sv12[252];
        sv12[265] = sv12[153] * sv12[253];
        sv12[266] = sv12[153] * sv12[254];
        sv12[267] = sv12[154] * sv12[251];
        sv12[268] = sv12[154] * sv12[252];
        sv12[269] = sv12[154] * sv12[253];
        sv12[270] = sv12[154] * sv12[254];
        sv12[271] = sv12[155] * sv12[251];
        sv12[272] = sv12[155] * sv12[252];
        sv12[273] = sv12[155] * sv12[253];
        sv12[274] = sv12[155] * sv12[254];
        sv12[275] = sv12[156] * sv12[251];
        sv12[276] = sv12[156] * sv12[252];
        sv12[277] = sv12[156] * sv12[253];
        sv12[278] = sv12[156] * sv12[254];
        sv12[279] = sv12[157] * sv12[251];
        sv12[280] = sv12[157] * sv12[252];
        sv12[281] = sv12[157] * sv12[253];
        sv12[282] = sv12[157] * sv12[254];
        sv12[283] = sv12[158] * sv12[251];
        sv12[284] = sv12[158] * sv12[252];
        sv12[285] = sv12[158] * sv12[253];
        sv12[286] = sv12[158] * sv12[254];
        sv12[287] = sv12[159] * sv12[251];
        sv12[288] = sv12[159] * sv12[252];
        sv12[289] = sv12[159] * sv12[253];
        sv12[290] = sv12[159] * sv12[254];
        sv12[291] = sv12[160] * sv12[251];
        sv12[292] = sv12[160] * sv12[252];
        sv12[293] = sv12[160] * sv12[253];
        sv12[294] = sv12[160] * sv12[254];
        sv12[295] = sv12[161] * sv12[251];
        sv12[296] = sv12[161] * sv12[252];
        sv12[297] = sv12[161] * sv12[253];
        sv12[298] = sv12[161] * sv12[254];
        sv12[299] = sv12[162] * sv12[251];
        sv12[300] = sv12[162] * sv12[252];
        sv12[301] = sv12[162] * sv12[253];
        sv12[302] = sv12[162] * sv12[254];
        sv12[303] = 0.09 * sv12[24] * sp[3];
        sv12[304] = 0.09 * sv12[24] * sp[4];
        sv12[305] = w3_c3 * sv12[303];
        sv12[306] = w3_c3 * sv12[304];
        sv12[307] = sv12[28] + sv12[26];
        sv12[308] = sv12[30] * sp[3];
        sv12[309] = sv12[30] * sp[4];
        sv12[310] = sv12[307] + sv12[27];
        sv12[311] = sv12[305] + sv12[308];
        sv12[312] = sv12[306] + sv12[309];
        sv12[313] = 0.5 * sv12[38] * sv12[173];
        sv12[314] = 0.5 * sv12[38] * sv12[174];
        sv12[315] = w3_c4 * sp[3];
        sv12[316] = w3_c4 * sp[4];
        sv12[317] = sv12[315] + sv12[315];
        sv12[318] = sv12[316] + sv12[316];
        sv12[319] = 2 * sv12[171] * sv12[37];
        sv12[320] = sp[117] + -1 * sv12[319];
        sv12[321] = sv12[320] / (2 * sv12[36]);
        sv12[322] = sv12[317] / (2 * sv12[36]);
        sv12[323] = sv12[318] / (2 * sv12[36]);
        sv12[324] = sp[3] + sv12[322];
        sv12[325] = sp[4] + sv12[323];
        sv12[326] = 0.5 * sv12[321] * sv12[41];
        sv12[327] = 0.5 * sv12[324] * sv12[41];
        sv12[328] = 0.5 * sv12[325] * sv12[41];
        sv12[329] = sv12[326] + sv12[314];
        sv12[330] = sv12[310] + -1 * sv12[313];
        sv12[331] = 0.5 * (1.0 + sv12[171]) * sv12[44];
        sv12[332] = -1 * sv12[329] + -1 * sv12[331];
        sv12[333] = sv12[330] / (0.5 * sv12[40]);
        sv12[334] = sv12[332] / (0.5 * sv12[40]);
        sv12[335] = sv12[311] / (0.5 * sv12[40]);
        sv12[336] = sv12[312] / (0.5 * sv12[40]);
        sv12[337] = -1 * sv12[327] / (0.5 * sv12[40]);
        sv12[338] = -1 * sv12[328] / (0.5 * sv12[40]);
        sv12[339] = 2.0 * sv12[333] * (sp[6] / 2);
        sv12[340] = 2.0 * sv12[333] * (sp[5] / 2);
        sv12[341] = 2.0 * sv12[333] * (sp[3] / 2);
        sv12[342] = 2.0 * sv12[333] * (sp[4] / 2);
        sv12[343] = 2.0 * sv12[334] * (sp[6] / 2);
        sv12[344] = 2.0 * sv12[334] * (sp[5] / 2);
        sv12[345] = 2.0 * sv12[334] * (sp[3] / 2);
        sv12[346] = 2.0 * sv12[334] * (sp[4] / 2);
        sv12[347] = 2.0 * sv12[335] * (sp[6] / 2);
        sv12[348] = 2.0 * sv12[335] * (sp[5] / 2);
        sv12[349] = 2.0 * sv12[335] * (sp[3] / 2);
        sv12[350] = 2.0 * sv12[335] * (sp[4] / 2);
        sv12[351] = 2.0 * sv12[336] * (sp[6] / 2);
        sv12[352] = 2.0 * sv12[336] * (sp[5] / 2);
        sv12[353] = 2.0 * sv12[336] * (sp[3] / 2);
        sv12[354] = 2.0 * sv12[336] * (sp[4] / 2);
        sv12[355] = 2.0 * sv12[337] * (sp[6] / 2);
        sv12[356] = 2.0 * sv12[337] * (sp[5] / 2);
        sv12[357] = 2.0 * sv12[337] * (sp[3] / 2);
        sv12[358] = 2.0 * sv12[337] * (sp[4] / 2);
        sv12[359] = 2.0 * sv12[338] * (sp[6] / 2);
        sv12[360] = 2.0 * sv12[338] * (sp[5] / 2);
        sv12[361] = 2.0 * sv12[338] * (sp[3] / 2);
        sv12[362] = 2.0 * sv12[338] * (sp[4] / 2);
        sv12[363] = 2.0 * sv12[173] * (sp[35] / 2);
        sv12[364] = 2.0 * sv12[173] * (sp[38] / 2);
        sv12[365] = 2.0 * sv12[173] * (sp[37] / 2);
        sv12[366] = 2.0 * sv12[173] * (sp[21] / 2);
        sv12[367] = 2.0 * sv12[173] * (sp[18] / 2);
        sv12[368] = 2.0 * sv12[173] * (sp[20] / 2);
        sv12[369] = 2.0 * sv12[174] * (sp[35] / 2);
        sv12[370] = 2.0 * sv12[174] * (sp[38] / 2);
        sv12[371] = 2.0 * sv12[174] * (sp[37] / 2);
        sv12[372] = 2.0 * sv12[174] * (sp[21] / 2);
        sv12[373] = 2.0 * sv12[174] * (sp[18] / 2);
        sv12[374] = 2.0 * sv12[174] * (sp[20] / 2);
        sv12[375] = 0.09 * sv12[24] * sp[6];
        sv12[376] = 0.09 * sv12[24] * sp[5];
        sv12[377] = w3_c3 * sv12[375];
        sv12[378] = w3_c3 * sv12[376];
        sv12[379] = sv12[53] + sv12[51];
        sv12[380] = sv12[30] * sp[6];
        sv12[381] = sv12[30] * sp[5];
        sv12[382] = sv12[379] + sv12[52];
        sv12[383] = sv12[377] + sv12[380];
        sv12[384] = sv12[378] + sv12[381];
        sv12[385] = 0.5 * sv12[60] * sv12[173];
        sv12[386] = 0.5 * sv12[60] * sv12[174];
        sv12[387] = w3_c4 * sp[6];
        sv12[388] = w3_c4 * sp[5];
        sv12[389] = sv12[387] + sv12[387];
        sv12[390] = sv12[388] + sv12[388];
        sv12[391] = 2 * sv12[171] * sv12[59];
        sv12[392] = sp[118] + -1 * sv12[391];
        sv12[393] = sv12[392] / (2 * sv12[36]);
        sv12[394] = sv12[389] / (2 * sv12[36]);
        sv12[395] = sv12[390] / (2 * sv12[36]);
        sv12[396] = sp[6] + sv12[394];
        sv12[397] = sp[5] + sv12[395];
        sv12[398] = 0.5 * sv12[393] * sv12[41];
        sv12[399] = 0.5 * sv12[396] * sv12[41];
        sv12[400] = 0.5 * sv12[397] * sv12[41];
        sv12[401] = sv12[398] + sv12[386];
        sv12[402] = sv12[382] + -1 * sv12[385];
        sv12[403] = 0.5 * (1.0 + sv12[171]) * sv12[63];
        sv12[404] = -1 * sv12[401] + -1 * sv12[403];
        sv12[405] = sv12[402] / (0.5 * sv12[40]);
        sv12[406] = sv12[404] / (0.5 * sv12[40]);
        sv12[407] = sv12[383] / (0.5 * sv12[40]);
        sv12[408] = sv12[384] / (0.5 * sv12[40]);
        sv12[409] = -1 * sv12[399] / (0.5 * sv12[40]);
        sv12[410] = -1 * sv12[400] / (0.5 * sv12[40]);
        sv12[411] = 2.0 * sv12[405] * (sp[75] / 2);
        sv12[412] = 2.0 * sv12[405] * (sp[76] / 2);
        sv12[413] = 2.0 * sv12[406] * (sp[75] / 2);
        sv12[414] = 2.0 * sv12[406] * (sp[76] / 2);
        sv12[415] = 2.0 * sv12[407] * (sp[75] / 2);
        sv12[416] = 2.0 * sv12[407] * (sp[76] / 2);
        sv12[417] = 2.0 * sv12[408] * (sp[75] / 2);
        sv12[418] = 2.0 * sv12[408] * (sp[76] / 2);
        sv12[419] = 2.0 * sv12[409] * (sp[75] / 2);
        sv12[420] = 2.0 * sv12[409] * (sp[76] / 2);
        sv12[421] = 2.0 * sv12[410] * (sp[75] / 2);
        sv12[422] = 2.0 * sv12[410] * (sp[76] / 2);
        sv12[423] = 2.0 * sv12[173] * (sp[77] / 2);
        sv12[424] = 2.0 * sv12[173] * (sp[78] / 2);
        sv12[425] = 2.0 * sv12[173] * (sp[79] / 2);
        sv12[426] = 2.0 * sv12[174] * (sp[77] / 2);
        sv12[427] = 2.0 * sv12[174] * (sp[78] / 2);
        sv12[428] = 2.0 * sv12[174] * (sp[79] / 2);
        sv12[429] = sv12[411] + sv12[341];
        sv12[430] = sv12[413] + sv12[345];
        sv12[431] = sv12[415] + sv12[349];
        sv12[432] = sv12[417] + sv12[353];
        sv12[433] = sv12[419] + sv12[357];
        sv12[434] = sv12[421] + sv12[361];
        sv12[435] = sv12[412] + sv12[342];
        sv12[436] = sv12[414] + sv12[346];
        sv12[437] = sv12[416] + sv12[350];
        sv12[438] = sv12[418] + sv12[354];
        sv12[439] = sv12[420] + sv12[358];
        sv12[440] = sv12[422] + sv12[362];
        sv12[441] = sv12[423] + sv12[366];
        sv12[442] = sv12[426] + sv12[372];
        sv12[443] = sv12[424] + sv12[367];
        sv12[444] = sv12[427] + sv12[373];
        sv12[445] = sv12[425] + sv12[368];
        sv12[446] = sv12[428] + sv12[374];
        sv12[447] = sv12[138] * sp[3];
        sv12[448] = sv12[138] * sp[4];
        sv12[449] = sv12[138] * (-1 * sv12[339]);
        sv12[450] = sv12[138] * (-1 * sv12[343]);
        sv12[451] = sv12[138] * (-1 * sv12[347]);
        sv12[452] = sv12[138] * (-1 * sv12[351]);
        sv12[453] = sv12[138] * (-1 * sv12[355]);
        sv12[454] = sv12[138] * (-1 * sv12[359]);
        sv12[455] = sv12[138] * (-1 * sv12[340]);
        sv12[456] = sv12[138] * (-1 * sv12[344]);
        sv12[457] = sv12[138] * (-1 * sv12[348]);
        sv12[458] = sv12[138] * (-1 * sv12[352]);
        sv12[459] = sv12[138] * (-1 * sv12[356]);
        sv12[460] = sv12[138] * (-1 * sv12[360]);
        sv12[461] = sv12[138] * (-1 * sv12[363]);
        sv12[462] = sv12[138] * (-1 * sv12[369]);
        sv12[463] = sv12[138] * (-1 * sv12[364]);
        sv12[464] = sv12[138] * (-1 * sv12[370]);
        sv12[465] = sv12[138] * (-1 * sv12[365]);
        sv12[466] = sv12[138] * (-1 * sv12[371]);
        sv12[467] = sv12[138] * (-1 * sv12[429]);
        sv12[468] = sv12[138] * (-1 * sv12[430]);
        sv12[469] = sv12[138] * (-1 * sv12[431]);
        sv12[470] = sv12[138] * (-1 * sv12[432]);
        sv12[471] = sv12[138] * (-1 * sv12[433]);
        sv12[472] = sv12[138] * (-1 * sv12[434]);
        sv12[473] = sv12[138] * (-1 * sv12[435]);
        sv12[474] = sv12[138] * (-1 * sv12[436]);
        sv12[475] = sv12[138] * (-1 * sv12[437]);
        sv12[476] = sv12[138] * (-1 * sv12[438]);
        sv12[477] = sv12[138] * (-1 * sv12[439]);
        sv12[478] = sv12[138] * (-1 * sv12[440]);
        sv12[479] = sv12[138] * (-1 * sv12[441]);
        sv12[480] = sv12[138] * (-1 * sv12[442]);
        sv12[481] = sv12[138] * (-1 * sv12[443]);
        sv12[482] = sv12[138] * (-1 * sv12[444]);
        sv12[483] = sv12[138] * (-1 * sv12[445]);
        sv12[484] = sv12[138] * (-1 * sv12[446]);
        sv12[485] = 2.0 * sv12[333] * (sv12[88] / 2);
        sv12[486] = 2.0 * sv12[334] * (sv12[88] / 2);
        sv12[487] = 2.0 * sv12[335] * (sv12[88] / 2);
        sv12[488] = 2.0 * sv12[336] * (sv12[88] / 2);
        sv12[489] = 2.0 * sv12[337] * (sv12[88] / 2);
        sv12[490] = 2.0 * sv12[338] * (sv12[88] / 2);
        sv12[491] = 2.0 * sv12[173] * (sp[92] / 2);
        sv12[492] = 2.0 * sv12[174] * (sp[92] / 2);
        sv12[493] = sv12[485] + sv12[491];
        sv12[494] = sv12[486] + sv12[492];
        sv12[495] = 2.0 * sv12[405] * (sv12[132] / 2);
        sv12[496] = 2.0 * sv12[406] * (sv12[132] / 2);
        sv12[497] = 2.0 * sv12[407] * (sv12[132] / 2);
        sv12[498] = 2.0 * sv12[408] * (sv12[132] / 2);
        sv12[499] = 2.0 * sv12[409] * (sv12[132] / 2);
        sv12[500] = 2.0 * sv12[410] * (sv12[132] / 2);
        sv12[501] = 2.0 * sv12[173] * (sp[96] / 2);
        sv12[502] = 2.0 * sv12[174] * (sp[96] / 2);
        sv12[503] = sv12[495] + sv12[501];
        sv12[504] = sv12[496] + sv12[502];
        sv12[505] = sv12[493] + sv12[503];
        sv12[506] = sv12[494] + sv12[504];
        sv12[507] = sv12[497] + sv12[487];
        sv12[508] = sv12[498] + sv12[488];
        sv12[509] = sv12[499] + sv12[489];
        sv12[510] = sv12[500] + sv12[490];
        sv12[511] = sv12[4] * (-1 * sv12[107]);
        sv12[512] = sv12[9] * (-1 * sv12[107]);
        sv12[513] = -1 * sv12[505] * (-1 * sv12[107]);
        sv12[514] = -1 * sv12[506] * (-1 * sv12[107]);
        sv12[515] = -1 * sv12[507] * (-1 * sv12[107]);
        sv12[516] = -1 * sv12[508] * (-1 * sv12[107]);
        sv12[517] = -1 * sv12[509] * (-1 * sv12[107]);
        sv12[518] = -1 * sv12[510] * (-1 * sv12[107]);
        sv12[519] = sv12[4] * (-1 * sv12[108]);
        sv12[520] = sv12[9] * (-1 * sv12[108]);
        sv12[521] = -1 * sv12[505] * (-1 * sv12[108]);
        sv12[522] = -1 * sv12[506] * (-1 * sv12[108]);
        sv12[523] = -1 * sv12[507] * (-1 * sv12[108]);
        sv12[524] = -1 * sv12[508] * (-1 * sv12[108]);
        sv12[525] = -1 * sv12[509] * (-1 * sv12[108]);
        sv12[526] = -1 * sv12[510] * (-1 * sv12[108]);
        sv12[527] = sv12[4] * (-1 * sv12[72]);
        sv12[528] = sv12[9] * (-1 * sv12[72]);
        sv12[529] = -1 * sv12[505] * (-1 * sv12[72]);
        sv12[530] = -1 * sv12[506] * (-1 * sv12[72]);
        sv12[531] = -1 * sv12[507] * (-1 * sv12[72]);
        sv12[532] = -1 * sv12[508] * (-1 * sv12[72]);
        sv12[533] = -1 * sv12[509] * (-1 * sv12[72]);
        sv12[534] = -1 * sv12[510] * (-1 * sv12[72]);
        sv12[535] = sv12[4] * (-1 * sv12[71]);
        sv12[536] = sv12[9] * (-1 * sv12[71]);
        sv12[537] = -1 * sv12[505] * (-1 * sv12[71]);
        sv12[538] = -1 * sv12[506] * (-1 * sv12[71]);
        sv12[539] = -1 * sv12[507] * (-1 * sv12[71]);
        sv12[540] = -1 * sv12[508] * (-1 * sv12[71]);
        sv12[541] = -1 * sv12[509] * (-1 * sv12[71]);
        sv12[542] = -1 * sv12[510] * (-1 * sv12[71]);
        sv12[543] = sv12[4] * (-1 * sv12[73]);
        sv12[544] = sv12[9] * (-1 * sv12[73]);
        sv12[545] = -1 * sv12[505] * (-1 * sv12[73]);
        sv12[546] = -1 * sv12[506] * (-1 * sv12[73]);
        sv12[547] = -1 * sv12[507] * (-1 * sv12[73]);
        sv12[548] = -1 * sv12[508] * (-1 * sv12[73]);
        sv12[549] = -1 * sv12[509] * (-1 * sv12[73]);
        sv12[550] = -1 * sv12[510] * (-1 * sv12[73]);
        sv12[551] = sv12[124] * sv12[4];
        sv12[552] = sv12[124] * sv12[9];
        sv12[553] = sv12[124] * (-1 * sv12[505]);
        sv12[554] = sv12[124] * (-1 * sv12[506]);
        sv12[555] = sv12[124] * (-1 * sv12[507]);
        sv12[556] = sv12[124] * (-1 * sv12[508]);
        sv12[557] = sv12[124] * (-1 * sv12[509]);
        sv12[558] = sv12[124] * (-1 * sv12[510]);
        sv12[559] = sv12[125] * sv12[4];
        sv12[560] = sv12[125] * sv12[9];
        sv12[561] = sv12[125] * (-1 * sv12[505]);
        sv12[562] = sv12[125] * (-1 * sv12[506]);
        sv12[563] = sv12[125] * (-1 * sv12[507]);
        sv12[564] = sv12[125] * (-1 * sv12[508]);
        sv12[565] = sv12[125] * (-1 * sv12[509]);
        sv12[566] = sv12[125] * (-1 * sv12[510]);
        sv12[567] = sv12[4] * (-1 * sv12[121]);
        sv12[568] = sv12[9] * (-1 * sv12[121]);
        sv12[569] = -1 * sv12[505] * (-1 * sv12[121]);
        sv12[570] = -1 * sv12[506] * (-1 * sv12[121]);
        sv12[571] = -1 * sv12[507] * (-1 * sv12[121]);
        sv12[572] = -1 * sv12[508] * (-1 * sv12[121]);
        sv12[573] = -1 * sv12[509] * (-1 * sv12[121]);
        sv12[574] = -1 * sv12[510] * (-1 * sv12[121]);
        sv12[575] = sv12[4] * (-1 * sv12[122]);
        sv12[576] = sv12[9] * (-1 * sv12[122]);
        sv12[577] = -1 * sv12[505] * (-1 * sv12[122]);
        sv12[578] = -1 * sv12[506] * (-1 * sv12[122]);
        sv12[579] = -1 * sv12[507] * (-1 * sv12[122]);
        sv12[580] = -1 * sv12[508] * (-1 * sv12[122]);
        sv12[581] = -1 * sv12[509] * (-1 * sv12[122]);
        sv12[582] = -1 * sv12[510] * (-1 * sv12[122]);
        sv12[583] = sv12[4] * (-1 * sv12[123]);
        sv12[584] = sv12[9] * (-1 * sv12[123]);
        sv12[585] = -1 * sv12[505] * (-1 * sv12[123]);
        sv12[586] = -1 * sv12[506] * (-1 * sv12[123]);
        sv12[587] = -1 * sv12[507] * (-1 * sv12[123]);
        sv12[588] = -1 * sv12[508] * (-1 * sv12[123]);
        sv12[589] = -1 * sv12[509] * (-1 * sv12[123]);
        sv12[590] = -1 * sv12[510] * (-1 * sv12[123]);
        sv12[591] = sv12[4] * sp[6];
        sv12[592] = sv12[9] * sp[6];
        sv12[593] = -1 * sv12[505] * sp[6];
        sv12[594] = -1 * sv12[506] * sp[6];
        sv12[595] = -1 * sv12[507] * sp[6];
        sv12[596] = -1 * sv12[508] * sp[6];
        sv12[597] = -1 * sv12[509] * sp[6];
        sv12[598] = -1 * sv12[510] * sp[6];
        sv12[599] = sv12[4] * sp[5];
        sv12[600] = sv12[9] * sp[5];
        sv12[601] = -1 * sv12[505] * sp[5];
        sv12[602] = -1 * sv12[506] * sp[5];
        sv12[603] = -1 * sv12[507] * sp[5];
        sv12[604] = -1 * sv12[508] * sp[5];
        sv12[605] = -1 * sv12[509] * sp[5];
        sv12[606] = -1 * sv12[510] * sp[5];
        sv12[607] = sv12[551] + sv12[447];
        sv12[608] = sv12[559] + sv12[448];
        sv12[609] = sv12[552] + sv12[149];
        sv12[610] = sv12[560] + sv12[150];
        sv12[611] = sv12[449] + sv12[513];
        sv12[612] = sv12[450] + sv12[514];
        sv12[613] = sv12[515] + sv12[451];
        sv12[614] = sv12[516] + sv12[452];
        sv12[615] = sv12[517] + sv12[453];
        sv12[616] = sv12[518] + sv12[454];
        sv12[617] = sv12[455] + sv12[521];
        sv12[618] = sv12[456] + sv12[522];
        sv12[619] = sv12[523] + sv12[457];
        sv12[620] = sv12[524] + sv12[458];
        sv12[621] = sv12[525] + sv12[459];
        sv12[622] = sv12[526] + sv12[460];
        sv12[623] = sv12[529] + sv12[461];
        sv12[624] = sv12[530] + sv12[462];
        sv12[625] = sv12[537] + sv12[463];
        sv12[626] = sv12[538] + sv12[464];
        sv12[627] = sv12[545] + sv12[465];
        sv12[628] = sv12[546] + sv12[466];
        sv12[629] = sv12[553] + sv12[467];
        sv12[630] = sv12[554] + sv12[468];
        sv12[631] = sv12[555] + sv12[469];
        sv12[632] = sv12[556] + sv12[470];
        sv12[633] = sv12[557] + sv12[471];
        sv12[634] = sv12[558] + sv12[472];
        sv12[635] = sv12[561] + sv12[473];
        sv12[636] = sv12[562] + sv12[474];
        sv12[637] = sv12[563] + sv12[475];
        sv12[638] = sv12[564] + sv12[476];
        sv12[639] = sv12[565] + sv12[477];
        sv12[640] = sv12[566] + sv12[478];
        sv12[641] = sv12[569] + sv12[479];
        sv12[642] = sv12[570] + sv12[480];
        sv12[643] = sv12[577] + sv12[481];
        sv12[644] = sv12[578] + sv12[482];
        sv12[645] = sv12[585] + sv12[483];
        sv12[646] = sv12[586] + sv12[484];
        sv12[647] = 2.0 * sv12[333] * (sp[16] / 2);
        sv12[648] = 2.0 * sv12[333] * (sp[17] / 2);
        sv12[649] = 2.0 * sv12[334] * (sp[16] / 2);
        sv12[650] = 2.0 * sv12[334] * (sp[17] / 2);
        sv12[651] = 2.0 * sv12[335] * (sp[16] / 2);
        sv12[652] = 2.0 * sv12[335] * (sp[17] / 2);
        sv12[653] = 2.0 * sv12[336] * (sp[16] / 2);
        sv12[654] = 2.0 * sv12[336] * (sp[17] / 2);
        sv12[655] = 2.0 * sv12[337] * (sp[16] / 2);
        sv12[656] = 2.0 * sv12[337] * (sp[17] / 2);
        sv12[657] = 2.0 * sv12[338] * (sp[16] / 2);
        sv12[658] = 2.0 * sv12[338] * (sp[17] / 2);
        sv12[659] = 2.0 * sv12[173] * (sp[22] / 2);
        sv12[660] = 2.0 * sv12[173] * (sp[23] / 2);
        sv12[661] = 2.0 * sv12[173] * (sp[24] / 2);
        sv12[662] = 2.0 * sv12[174] * (sp[22] / 2);
        sv12[663] = 2.0 * sv12[174] * (sp[23] / 2);
        sv12[664] = 2.0 * sv12[174] * (sp[24] / 2);
        sv12[665] = 2.0 * sv12[405] * (sp[6] / 2);
        sv12[666] = 2.0 * sv12[405] * (sp[5] / 2);
        sv12[667] = 2.0 * sv12[405] * (sp[3] / 2);
        sv12[668] = 2.0 * sv12[405] * (sp[4] / 2);
        sv12[669] = 2.0 * sv12[406] * (sp[6] / 2);
        sv12[670] = 2.0 * sv12[406] * (sp[5] / 2);
        sv12[671] = 2.0 * sv12[406] * (sp[3] / 2);
        sv12[672] = 2.0 * sv12[406] * (sp[4] / 2);
        sv12[673] = 2.0 * sv12[407] * (sp[6] / 2);
        sv12[674] = 2.0 * sv12[407] * (sp[5] / 2);
        sv12[675] = 2.0 * sv12[407] * (sp[3] / 2);
        sv12[676] = 2.0 * sv12[407] * (sp[4] / 2);
        sv12[677] = 2.0 * sv12[408] * (sp[6] / 2);
        sv12[678] = 2.0 * sv12[408] * (sp[5] / 2);
        sv12[679] = 2.0 * sv12[408] * (sp[3] / 2);
        sv12[680] = 2.0 * sv12[408] * (sp[4] / 2);
        sv12[681] = 2.0 * sv12[409] * (sp[6] / 2);
        sv12[682] = 2.0 * sv12[409] * (sp[5] / 2);
        sv12[683] = 2.0 * sv12[409] * (sp[3] / 2);
        sv12[684] = 2.0 * sv12[409] * (sp[4] / 2);
        sv12[685] = 2.0 * sv12[410] * (sp[6] / 2);
        sv12[686] = 2.0 * sv12[410] * (sp[5] / 2);
        sv12[687] = 2.0 * sv12[410] * (sp[3] / 2);
        sv12[688] = 2.0 * sv12[410] * (sp[4] / 2);
        sv12[689] = 2.0 * sv12[173] * (sp[41] / 2);
        sv12[690] = 2.0 * sv12[173] * (sp[42] / 2);
        sv12[691] = 2.0 * sv12[173] * (sp[40] / 2);
        sv12[692] = 2.0 * sv12[174] * (sp[41] / 2);
        sv12[693] = 2.0 * sv12[174] * (sp[42] / 2);
        sv12[694] = 2.0 * sv12[174] * (sp[40] / 2);
        sv12[695] = sv12[647] + sv12[665];
        sv12[696] = sv12[649] + sv12[669];
        sv12[697] = sv12[651] + sv12[673];
        sv12[698] = sv12[653] + sv12[677];
        sv12[699] = sv12[655] + sv12[681];
        sv12[700] = sv12[657] + sv12[685];
        sv12[701] = sv12[648] + sv12[666];
        sv12[702] = sv12[650] + sv12[670];
        sv12[703] = sv12[652] + sv12[674];
        sv12[704] = sv12[654] + sv12[678];
        sv12[705] = sv12[656] + sv12[682];
        sv12[706] = sv12[658] + sv12[686];
        sv12[707] = sv12[659] + sv12[689];
        sv12[708] = sv12[662] + sv12[692];
        sv12[709] = sv12[660] + sv12[690];
        sv12[710] = sv12[663] + sv12[693];
        sv12[711] = sv12[661] + sv12[691];
        sv12[712] = sv12[664] + sv12[694];
        sv12[713] = sv12[94] * sp[6];
        sv12[714] = sv12[94] * sp[5];
        sv12[715] = sv12[94] * (-1 * sv12[695]);
        sv12[716] = sv12[94] * (-1 * sv12[696]);
        sv12[717] = sv12[94] * (-1 * sv12[697]);
        sv12[718] = sv12[94] * (-1 * sv12[698]);
        sv12[719] = sv12[94] * (-1 * sv12[699]);
        sv12[720] = sv12[94] * (-1 * sv12[700]);
        sv12[721] = sv12[94] * (-1 * sv12[701]);
        sv12[722] = sv12[94] * (-1 * sv12[702]);
        sv12[723] = sv12[94] * (-1 * sv12[703]);
        sv12[724] = sv12[94] * (-1 * sv12[704]);
        sv12[725] = sv12[94] * (-1 * sv12[705]);
        sv12[726] = sv12[94] * (-1 * sv12[706]);
        sv12[727] = sv12[94] * (-1 * sv12[707]);
        sv12[728] = sv12[94] * (-1 * sv12[708]);
        sv12[729] = sv12[94] * (-1 * sv12[709]);
        sv12[730] = sv12[94] * (-1 * sv12[710]);
        sv12[731] = sv12[94] * (-1 * sv12[711]);
        sv12[732] = sv12[94] * (-1 * sv12[712]);
        sv12[733] = sv12[94] * (-1 * sv12[667]);
        sv12[734] = sv12[94] * (-1 * sv12[671]);
        sv12[735] = sv12[94] * (-1 * sv12[675]);
        sv12[736] = sv12[94] * (-1 * sv12[679]);
        sv12[737] = sv12[94] * (-1 * sv12[683]);
        sv12[738] = sv12[94] * (-1 * sv12[687]);
        sv12[739] = sv12[94] * (-1 * sv12[668]);
        sv12[740] = sv12[94] * (-1 * sv12[672]);
        sv12[741] = sv12[94] * (-1 * sv12[676]);
        sv12[742] = sv12[94] * (-1 * sv12[680]);
        sv12[743] = sv12[94] * (-1 * sv12[684]);
        sv12[744] = sv12[94] * (-1 * sv12[688]);
        sv12[745] = sv12[94] * (-1 * sv12[364]);
        sv12[746] = sv12[94] * (-1 * sv12[370]);
        sv12[747] = sv12[94] * (-1 * sv12[363]);
        sv12[748] = sv12[94] * (-1 * sv12[369]);
        sv12[749] = sv12[94] * (-1 * sv12[365]);
        sv12[750] = sv12[94] * (-1 * sv12[371]);
        sv12[751] = 2.0 * sv12[333] * (sv12[84] / 2);
        sv12[752] = 2.0 * sv12[334] * (sv12[84] / 2);
        sv12[753] = 2.0 * sv12[335] * (sv12[84] / 2);
        sv12[754] = 2.0 * sv12[336] * (sv12[84] / 2);
        sv12[755] = 2.0 * sv12[337] * (sv12[84] / 2);
        sv12[756] = 2.0 * sv12[338] * (sv12[84] / 2);
        sv12[757] = 2.0 * sv12[173] * (sp[52] / 2);
        sv12[758] = 2.0 * sv12[174] * (sp[52] / 2);
        sv12[759] = sv12[751] + sv12[757];
        sv12[760] = sv12[752] + sv12[758];
        sv12[761] = 2.0 * sv12[405] * (sv12[88] / 2);
        sv12[762] = 2.0 * sv12[406] * (sv12[88] / 2);
        sv12[763] = 2.0 * sv12[407] * (sv12[88] / 2);
        sv12[764] = 2.0 * sv12[408] * (sv12[88] / 2);
        sv12[765] = 2.0 * sv12[409] * (sv12[88] / 2);
        sv12[766] = 2.0 * sv12[410] * (sv12[88] / 2);
        sv12[767] = 2.0 * sv12[173] * (sp[71] / 2);
        sv12[768] = 2.0 * sv12[174] * (sp[71] / 2);
        sv12[769] = sv12[761] + sv12[767];
        sv12[770] = sv12[762] + sv12[768];
        sv12[771] = sv12[759] + sv12[769];
        sv12[772] = sv12[760] + sv12[770];
        sv12[773] = sv12[753] + sv12[763];
        sv12[774] = sv12[754] + sv12[764];
        sv12[775] = sv12[755] + sv12[765];
        sv12[776] = sv12[756] + sv12[766];
        sv12[777] = sv12[79] * sv12[14];
        sv12[778] = sv12[79] * sv12[17];
        sv12[779] = sv12[79] * (-1 * sv12[771]);
        sv12[780] = sv12[79] * (-1 * sv12[772]);
        sv12[781] = sv12[79] * (-1 * sv12[773]);
        sv12[782] = sv12[79] * (-1 * sv12[774]);
        sv12[783] = sv12[79] * (-1 * sv12[775]);
        sv12[784] = sv12[79] * (-1 * sv12[776]);
        sv12[785] = sv12[80] * sv12[14];
        sv12[786] = sv12[80] * sv12[17];
        sv12[787] = sv12[80] * (-1 * sv12[771]);
        sv12[788] = sv12[80] * (-1 * sv12[772]);
        sv12[789] = sv12[80] * (-1 * sv12[773]);
        sv12[790] = sv12[80] * (-1 * sv12[774]);
        sv12[791] = sv12[80] * (-1 * sv12[775]);
        sv12[792] = sv12[80] * (-1 * sv12[776]);
        sv12[793] = sv12[14] * (-1 * sv12[76]);
        sv12[794] = sv12[17] * (-1 * sv12[76]);
        sv12[795] = -1 * sv12[771] * (-1 * sv12[76]);
        sv12[796] = -1 * sv12[772] * (-1 * sv12[76]);
        sv12[797] = -1 * sv12[773] * (-1 * sv12[76]);
        sv12[798] = -1 * sv12[774] * (-1 * sv12[76]);
        sv12[799] = -1 * sv12[775] * (-1 * sv12[76]);
        sv12[800] = -1 * sv12[776] * (-1 * sv12[76]);
        sv12[801] = sv12[14] * (-1 * sv12[77]);
        sv12[802] = sv12[17] * (-1 * sv12[77]);
        sv12[803] = -1 * sv12[771] * (-1 * sv12[77]);
        sv12[804] = -1 * sv12[772] * (-1 * sv12[77]);
        sv12[805] = -1 * sv12[773] * (-1 * sv12[77]);
        sv12[806] = -1 * sv12[774] * (-1 * sv12[77]);
        sv12[807] = -1 * sv12[775] * (-1 * sv12[77]);
        sv12[808] = -1 * sv12[776] * (-1 * sv12[77]);
        sv12[809] = sv12[14] * (-1 * sv12[78]);
        sv12[810] = sv12[17] * (-1 * sv12[78]);
        sv12[811] = -1 * sv12[771] * (-1 * sv12[78]);
        sv12[812] = -1 * sv12[772] * (-1 * sv12[78]);
        sv12[813] = -1 * sv12[773] * (-1 * sv12[78]);
        sv12[814] = -1 * sv12[774] * (-1 * sv12[78]);
        sv12[815] = -1 * sv12[775] * (-1 * sv12[78]);
        sv12[816] = -1 * sv12[776] * (-1 * sv12[78]);
        sv12[817] = sv12[14] * (-1 * sv12[66]);
        sv12[818] = sv12[17] * (-1 * sv12[66]);
        sv12[819] = -1 * sv12[771] * (-1 * sv12[66]);
        sv12[820] = -1 * sv12[772] * (-1 * sv12[66]);
        sv12[821] = -1 * sv12[773] * (-1 * sv12[66]);
        sv12[822] = -1 * sv12[774] * (-1 * sv12[66]);
        sv12[823] = -1 * sv12[775] * (-1 * sv12[66]);
        sv12[824] = -1 * sv12[776] * (-1 * sv12[66]);
        sv12[825] = sv12[14] * (-1 * sv12[67]);
        sv12[826] = sv12[17] * (-1 * sv12[67]);
        sv12[827] = -1 * sv12[771] * (-1 * sv12[67]);
        sv12[828] = -1 * sv12[772] * (-1 * sv12[67]);
        sv12[829] = -1 * sv12[773] * (-1 * sv12[67]);
        sv12[830] = -1 * sv12[774] * (-1 * sv12[67]);
        sv12[831] = -1 * sv12[775] * (-1 * sv12[67]);
        sv12[832] = -1 * sv12[776] * (-1 * sv12[67]);
        sv12[833] = sv12[14] * (-1 * sv12[71]);
        sv12[834] = sv12[17] * (-1 * sv12[71]);
        sv12[835] = -1 * sv12[771] * (-1 * sv12[71]);
        sv12[836] = -1 * sv12[772] * (-1 * sv12[71]);
        sv12[837] = -1 * sv12[773] * (-1 * sv12[71]);
        sv12[838] = -1 * sv12[774] * (-1 * sv12[71]);
        sv12[839] = -1 * sv12[775] * (-1 * sv12[71]);
        sv12[840] = -1 * sv12[776] * (-1 * sv12[71]);
        sv12[841] = sv12[14] * (-1 * sv12[72]);
        sv12[842] = sv12[17] * (-1 * sv12[72]);
        sv12[843] = -1 * sv12[771] * (-1 * sv12[72]);
        sv12[844] = -1 * sv12[772] * (-1 * sv12[72]);
        sv12[845] = -1 * sv12[773] * (-1 * sv12[72]);
        sv12[846] = -1 * sv12[774] * (-1 * sv12[72]);
        sv12[847] = -1 * sv12[775] * (-1 * sv12[72]);
        sv12[848] = -1 * sv12[776] * (-1 * sv12[72]);
        sv12[849] = sv12[14] * (-1 * sv12[73]);
        sv12[850] = sv12[17] * (-1 * sv12[73]);
        sv12[851] = -1 * sv12[771] * (-1 * sv12[73]);
        sv12[852] = -1 * sv12[772] * (-1 * sv12[73]);
        sv12[853] = -1 * sv12[773] * (-1 * sv12[73]);
        sv12[854] = -1 * sv12[774] * (-1 * sv12[73]);
        sv12[855] = -1 * sv12[775] * (-1 * sv12[73]);
        sv12[856] = -1 * sv12[776] * (-1 * sv12[73]);
        sv12[857] = sv12[14] * sp[3];
        sv12[858] = sv12[17] * sp[3];
        sv12[859] = -1 * sv12[771] * sp[3];
        sv12[860] = -1 * sv12[772] * sp[3];
        sv12[861] = -1 * sv12[773] * sp[3];
        sv12[862] = -1 * sv12[774] * sp[3];
        sv12[863] = -1 * sv12[775] * sp[3];
        sv12[864] = -1 * sv12[776] * sp[3];
        sv12[865] = sv12[14] * sp[4];
        sv12[866] = sv12[17] * sp[4];
        sv12[867] = -1 * sv12[771] * sp[4];
        sv12[868] = -1 * sv12[772] * sp[4];
        sv12[869] = -1 * sv12[773] * sp[4];
        sv12[870] = -1 * sv12[774] * sp[4];
        sv12[871] = -1 * sv12[775] * sp[4];
        sv12[872] = -1 * sv12[776] * sp[4];
        sv12[873] = sv12[777] + sv12[105];
        sv12[874] = sv12[785] + sv12[106];
        sv12[875] = sv12[778] + sv12[713];
        sv12[876] = sv12[786] + sv12[714];
        sv12[877] = sv12[779] + sv12[715];
        sv12[878] = sv12[780] + sv12[716];
        sv12[879] = sv12[781] + sv12[717];
        sv12[880] = sv12[782] + sv12[718];
        sv12[881] = sv12[783] + sv12[719];
        sv12[882] = sv12[784] + sv12[720];
        sv12[883] = sv12[787] + sv12[721];
        sv12[884] = sv12[788] + sv12[722];
        sv12[885] = sv12[789] + sv12[723];
        sv12[886] = sv12[790] + sv12[724];
        sv12[887] = sv12[791] + sv12[725];
        sv12[888] = sv12[792] + sv12[726];
        sv12[889] = sv12[795] + sv12[727];
        sv12[890] = sv12[796] + sv12[728];
        sv12[891] = sv12[803] + sv12[729];
        sv12[892] = sv12[804] + sv12[730];
        sv12[893] = sv12[811] + sv12[731];
        sv12[894] = sv12[812] + sv12[732];
        sv12[895] = sv12[733] + sv12[819];
        sv12[896] = sv12[734] + sv12[820];
        sv12[897] = sv12[821] + sv12[735];
        sv12[898] = sv12[822] + sv12[736];
        sv12[899] = sv12[823] + sv12[737];
        sv12[900] = sv12[824] + sv12[738];
        sv12[901] = sv12[739] + sv12[827];
        sv12[902] = sv12[740] + sv12[828];
        sv12[903] = sv12[829] + sv12[741];
        sv12[904] = sv12[830] + sv12[742];
        sv12[905] = sv12[831] + sv12[743];
        sv12[906] = sv12[832] + sv12[744];
        sv12[907] = sv12[835] + sv12[745];
        sv12[908] = sv12[836] + sv12[746];
        sv12[909] = sv12[843] + sv12[747];
        sv12[910] = sv12[844] + sv12[748];
        sv12[911] = sv12[851] + sv12[749];
        sv12[912] = sv12[852] + sv12[750];
        sv12[913] = sv12[873] + sv12[511];
        sv12[914] = sv12[874] + sv12[519];
        sv12[915] = sv12[793] + sv12[527];
        sv12[916] = sv12[801] + sv12[535];
        sv12[917] = sv12[809] + sv12[543];
        sv12[918] = sv12[607] + sv12[817];
        sv12[919] = sv12[608] + sv12[825];
        sv12[920] = sv12[567] + sv12[833];
        sv12[921] = sv12[575] + sv12[841];
        sv12[922] = sv12[583] + sv12[849];
        sv12[923] = sv12[857] + sv12[591];
        sv12[924] = sv12[599] + sv12[865];
        sv12[925] = sv12[875] + sv12[512];
        sv12[926] = sv12[876] + sv12[520];
        sv12[927] = sv12[794] + sv12[528];
        sv12[928] = sv12[802] + sv12[536];
        sv12[929] = sv12[810] + sv12[544];
        sv12[930] = sv12[609] + sv12[818];
        sv12[931] = sv12[610] + sv12[826];
        sv12[932] = sv12[568] + sv12[834];
        sv12[933] = sv12[576] + sv12[842];
        sv12[934] = sv12[584] + sv12[850];
        sv12[935] = sv12[858] + sv12[592];
        sv12[936] = sv12[600] + sv12[866];
        sv12[937] = sv12[877] + sv12[611];
        sv12[938] = sv12[878] + sv12[612];
        sv12[939] = sv12[879] + sv12[613];
        sv12[940] = sv12[880] + sv12[614];
        sv12[941] = sv12[881] + sv12[615];
        sv12[942] = sv12[882] + sv12[616];
        sv12[943] = sv12[883] + sv12[617];
        sv12[944] = sv12[884] + sv12[618];
        sv12[945] = sv12[885] + sv12[619];
        sv12[946] = sv12[886] + sv12[620];
        sv12[947] = sv12[887] + sv12[621];
        sv12[948] = sv12[888] + sv12[622];
        sv12[949] = sv12[889] + sv12[623];
        sv12[950] = sv12[890] + sv12[624];
        sv12[951] = sv12[797] + sv12[531];
        sv12[952] = sv12[798] + sv12[532];
        sv12[953] = sv12[799] + sv12[533];
        sv12[954] = sv12[800] + sv12[534];
        sv12[955] = sv12[891] + sv12[625];
        sv12[956] = sv12[892] + sv12[626];
        sv12[957] = sv12[805] + sv12[539];
        sv12[958] = sv12[806] + sv12[540];
        sv12[959] = sv12[807] + sv12[541];
        sv12[960] = sv12[808] + sv12[542];
        sv12[961] = sv12[893] + sv12[627];
        sv12[962] = sv12[894] + sv12[628];
        sv12[963] = sv12[813] + sv12[547];
        sv12[964] = sv12[814] + sv12[548];
        sv12[965] = sv12[815] + sv12[549];
        sv12[966] = sv12[816] + sv12[550];
        sv12[967] = sv12[629] + sv12[895];
        sv12[968] = sv12[630] + sv12[896];
        sv12[969] = sv12[631] + sv12[897];
        sv12[970] = sv12[632] + sv12[898];
        sv12[971] = sv12[633] + sv12[899];
        sv12[972] = sv12[634] + sv12[900];
        sv12[973] = sv12[635] + sv12[901];
        sv12[974] = sv12[636] + sv12[902];
        sv12[975] = sv12[637] + sv12[903];
        sv12[976] = sv12[638] + sv12[904];
        sv12[977] = sv12[639] + sv12[905];
        sv12[978] = sv12[640] + sv12[906];
        sv12[979] = sv12[641] + sv12[907];
        sv12[980] = sv12[642] + sv12[908];
        sv12[981] = sv12[571] + sv12[837];
        sv12[982] = sv12[572] + sv12[838];
        sv12[983] = sv12[573] + sv12[839];
        sv12[984] = sv12[574] + sv12[840];
        sv12[985] = sv12[643] + sv12[909];
        sv12[986] = sv12[644] + sv12[910];
        sv12[987] = sv12[579] + sv12[845];
        sv12[988] = sv12[580] + sv12[846];
        sv12[989] = sv12[581] + sv12[847];
        sv12[990] = sv12[582] + sv12[848];
        sv12[991] = sv12[645] + sv12[911];
        sv12[992] = sv12[646] + sv12[912];
        sv12[993] = sv12[587] + sv12[853];
        sv12[994] = sv12[588] + sv12[854];
        sv12[995] = sv12[589] + sv12[855];
        sv12[996] = sv12[590] + sv12[856];
        sv12[997] = sv12[859] + sv12[593];
        sv12[998] = sv12[860] + sv12[594];
        sv12[999] = sv12[861] + sv12[595];
        sv12[1000] = sv12[862] + sv12[596];
        sv12[1001] = sv12[863] + sv12[597];
        sv12[1002] = sv12[864] + sv12[598];
        sv12[1003] = sv12[601] + sv12[867];
        sv12[1004] = sv12[602] + sv12[868];
        sv12[1005] = sv12[603] + sv12[869];
        sv12[1006] = sv12[604] + sv12[870];
        sv12[1007] = sv12[605] + sv12[871];
        sv12[1008] = sv12[606] + sv12[872];
        sv12[1009] = (sv12[168] >= 0.1 ? sv12[223] : sv12[234]);
        sv12[1010] = sv12[913] * sv12[1009];
        sv12[1011] = sv12[914] * sv12[1009];
        sv12[1012] = sv12[915] * sv12[1009];
        sv12[1013] = sv12[916] * sv12[1009];
        sv12[1014] = sv12[917] * sv12[1009];
        sv12[1015] = sv12[918] * sv12[1009];
        sv12[1016] = sv12[919] * sv12[1009];
        sv12[1017] = sv12[920] * sv12[1009];
        sv12[1018] = sv12[921] * sv12[1009];
        sv12[1019] = sv12[922] * sv12[1009];
        sv12[1020] = sv12[923] * sv12[1009];
        sv12[1021] = sv12[924] * sv12[1009];
        sv12[1022] = sv12[925] * sv12[1009];
        sv12[1023] = sv12[926] * sv12[1009];
        sv12[1024] = sv12[927] * sv12[1009];
        sv12[1025] = sv12[928] * sv12[1009];
        sv12[1026] = sv12[929] * sv12[1009];
        sv12[1027] = sv12[930] * sv12[1009];
        sv12[1028] = sv12[931] * sv12[1009];
        sv12[1029] = sv12[932] * sv12[1009];
        sv12[1030] = sv12[933] * sv12[1009];
        sv12[1031] = sv12[934] * sv12[1009];
        sv12[1032] = sv12[935] * sv12[1009];
        sv12[1033] = sv12[936] * sv12[1009];
        sv12[1034] = sv12[937] * sv12[1009];
        sv12[1035] = sv12[938] * sv12[1009];
        sv12[1036] = sv12[939] * sv12[1009];
        sv12[1037] = sv12[940] * sv12[1009];
        sv12[1038] = sv12[941] * sv12[1009];
        sv12[1039] = sv12[942] * sv12[1009];
        sv12[1040] = sv12[943] * sv12[1009];
        sv12[1041] = sv12[944] * sv12[1009];
        sv12[1042] = sv12[945] * sv12[1009];
        sv12[1043] = sv12[946] * sv12[1009];
        sv12[1044] = sv12[947] * sv12[1009];
        sv12[1045] = sv12[948] * sv12[1009];
        sv12[1046] = sv12[949] * sv12[1009];
        sv12[1047] = sv12[950] * sv12[1009];
        sv12[1048] = sv12[951] * sv12[1009];
        sv12[1049] = sv12[952] * sv12[1009];
        sv12[1050] = sv12[953] * sv12[1009];
        sv12[1051] = sv12[954] * sv12[1009];
        sv12[1052] = sv12[955] * sv12[1009];
        sv12[1053] = sv12[956] * sv12[1009];
        sv12[1054] = sv12[957] * sv12[1009];
        sv12[1055] = sv12[958] * sv12[1009];
        sv12[1056] = sv12[959] * sv12[1009];
        sv12[1057] = sv12[960] * sv12[1009];
        sv12[1058] = sv12[961] * sv12[1009];
        sv12[1059] = sv12[962] * sv12[1009];
        sv12[1060] = sv12[963] * sv12[1009];
        sv12[1061] = sv12[964] * sv12[1009];
        sv12[1062] = sv12[965] * sv12[1009];
        sv12[1063] = sv12[966] * sv12[1009];
        sv12[1064] = sv12[967] * sv12[1009];
        sv12[1065] = sv12[968] * sv12[1009];
        sv12[1066] = sv12[969] * sv12[1009];
        sv12[1067] = sv12[970] * sv12[1009];
        sv12[1068] = sv12[971] * sv12[1009];
        sv12[1069] = sv12[972] * sv12[1009];
        sv12[1070] = sv12[973] * sv12[1009];
        sv12[1071] = sv12[974] * sv12[1009];
        sv12[1072] = sv12[975] * sv12[1009];
        sv12[1073] = sv12[976] * sv12[1009];
        sv12[1074] = sv12[977] * sv12[1009];
        sv12[1075] = sv12[978] * sv12[1009];
        sv12[1076] = sv12[979] * sv12[1009];
        sv12[1077] = sv12[980] * sv12[1009];
        sv12[1078] = sv12[981] * sv12[1009];
        sv12[1079] = sv12[982] * sv12[1009];
        sv12[1080] = sv12[983] * sv12[1009];
        sv12[1081] = sv12[984] * sv12[1009];
        sv12[1082] = sv12[985] * sv12[1009];
        sv12[1083] = sv12[986] * sv12[1009];
        sv12[1084] = sv12[987] * sv12[1009];
        sv12[1085] = sv12[988] * sv12[1009];
        sv12[1086] = sv12[989] * sv12[1009];
        sv12[1087] = sv12[990] * sv12[1009];
        sv12[1088] = sv12[991] * sv12[1009];
        sv12[1089] = sv12[992] * sv12[1009];
        sv12[1090] = sv12[993] * sv12[1009];
        sv12[1091] = sv12[994] * sv12[1009];
        sv12[1092] = sv12[995] * sv12[1009];
        sv12[1093] = sv12[996] * sv12[1009];
        sv12[1094] = sv12[997] * sv12[1009];
        sv12[1095] = sv12[998] * sv12[1009];
        sv12[1096] = sv12[999] * sv12[1009];
        sv12[1097] = sv12[1000] * sv12[1009];
        sv12[1098] = sv12[1001] * sv12[1009];
        sv12[1099] = sv12[1002] * sv12[1009];
        sv12[1100] = sv12[1003] * sv12[1009];
        sv12[1101] = sv12[1004] * sv12[1009];
        sv12[1102] = sv12[1005] * sv12[1009];
        sv12[1103] = sv12[1006] * sv12[1009];
        sv12[1104] = sv12[1007] * sv12[1009];
        sv12[1105] = sv12[1008] * sv12[1009];
        sv12[1106] = sv12[1010] + sv12[255];
        sv12[1107] = sv12[1011] + sv12[259];
        sv12[1108] = sv12[1012] + sv12[263];
        sv12[1109] = sv12[1013] + sv12[267];
        sv12[1110] = sv12[1014] + sv12[271];
        sv12[1111] = sv12[1015] + sv12[275];
        sv12[1112] = sv12[1016] + sv12[279];
        sv12[1113] = sv12[1017] + sv12[283];
        sv12[1114] = sv12[1018] + sv12[287];
        sv12[1115] = sv12[1019] + sv12[291];
        sv12[1116] = sv12[1020] + sv12[295];
        sv12[1117] = sv12[1021] + sv12[299];
        sv12[1118] = sv12[1022] + sv12[256];
        sv12[1119] = sv12[1023] + sv12[260];
        sv12[1120] = sv12[1024] + sv12[264];
        sv12[1121] = sv12[1025] + sv12[268];
        sv12[1122] = sv12[1026] + sv12[272];
        sv12[1123] = sv12[1027] + sv12[276];
        sv12[1124] = sv12[1028] + sv12[280];
        sv12[1125] = sv12[1029] + sv12[284];
        sv12[1126] = sv12[1030] + sv12[288];
        sv12[1127] = sv12[1031] + sv12[292];
        sv12[1128] = sv12[1032] + sv12[296];
        sv12[1129] = sv12[1033] + sv12[300];
        sv12[1130] = sv12[257] + sv12[1034];
        sv12[1131] = sv12[258] + sv12[1035];
        sv12[1132] = sv12[261] + sv12[1040];
        sv12[1133] = sv12[262] + sv12[1041];
        sv12[1134] = sv12[265] + sv12[1046];
        sv12[1135] = sv12[266] + sv12[1047];
        sv12[1136] = sv12[269] + sv12[1052];
        sv12[1137] = sv12[270] + sv12[1053];
        sv12[1138] = sv12[273] + sv12[1058];
        sv12[1139] = sv12[274] + sv12[1059];
        sv12[1140] = sv12[277] + sv12[1064];
        sv12[1141] = sv12[278] + sv12[1065];
        sv12[1142] = sv12[281] + sv12[1070];
        sv12[1143] = sv12[282] + sv12[1071];
        sv12[1144] = sv12[285] + sv12[1076];
        sv12[1145] = sv12[286] + sv12[1077];
        sv12[1146] = sv12[289] + sv12[1082];
        sv12[1147] = sv12[290] + sv12[1083];
        sv12[1148] = sv12[293] + sv12[1088];
        sv12[1149] = sv12[294] + sv12[1089];
        sv12[1150] = sv12[297] + sv12[1094];
        sv12[1151] = sv12[298] + sv12[1095];
        sv12[1152] = sv12[301] + sv12[1100];
        sv12[1153] = sv12[302] + sv12[1101];
        sv12[1154] = sv12[14] + sv12[9];
        sv12[1155] = sv12[1154] * sp[3];
        sv12[1156] = sv12[1154] * sp[4];
        sv12[1157] = sv12[1154] * sp[6];
        sv12[1158] = sv12[1154] * sp[5];
        sv12[1159] = std::sqrt(1e-9 + sv12[165]);
        sv12[1160] = sv12[178] / (2 * sv12[1159]);
        sv12[1161] = sv12[177] / (2 * sv12[1159]);
        sv12[1162] = sp[119] * sv12[1160];
        sv12[1163] = sp[119] * sv12[1161];
        sv12[1164] = sv12[1155] * sv12[1162];
        sv12[1165] = sv12[1155] * sv12[1163];
        sv12[1166] = sv12[1156] * sv12[1162];
        sv12[1167] = sv12[1156] * sv12[1163];
        sv12[1168] = sv12[1157] * sv12[1162];
        sv12[1169] = sv12[1157] * sv12[1163];
        sv12[1170] = sv12[1158] * sv12[1162];
        sv12[1171] = sv12[1158] * sv12[1163];
        sv12[1172] = sv12[1106] + sv12[1164];
        sv12[1173] = sv12[1107] + sv12[1166];
        sv12[1174] = sv12[1111] + sv12[1168];
        sv12[1175] = sv12[1112] + sv12[1170];
        sv12[1176] = sv12[1118] + sv12[1165];
        sv12[1177] = sv12[1119] + sv12[1167];
        sv12[1178] = sv12[1123] + sv12[1169];
        sv12[1179] = sv12[1124] + sv12[1171];
        sv12[1180] = sp[3] * sv12[44];
        sv12[1181] = sp[4] * sv12[44];
        sv12[1182] = sp[6] * sv12[63];
        sv12[1183] = sp[5] * sv12[63];
        sv12[1184] = sv12[1180] + sv12[1182];
        sv12[1185] = sv12[1181] + sv12[1183];
        sv12[1186] = sv12[22] + -1 * sv12[1184];
        sv12[1187] = sv12[23] + -1 * sv12[1185];
        sv12[1188] = w3_c1 * sp[122];
        sv12[1189] = w3_c0 * sp[125];
        sv12[1190] = sv12[1188] + sv12[1189];
        sv12[1191] = sp[122] * sv12[44];
        sv12[1192] = sp[125] * sv12[63];
        sv12[1193] = sv12[1191] + sv12[1192];
        sv12[1194] = sv12[1190] + -1 * sv12[1193];
        sv12[1195] = w3_c4 + sv12[1194];
        sv12[1196] = w3_d1_c1 * sp[3];
        sv12[1197] = w3_d0_c1 * sp[4];
        sv12[1198] = sv12[1196] + sv12[1197];
        sv12[1199] = sv12[1198] + sv12[1198];
        sv12[1200] = sv12[1199] / 2 * (sv12[1199] / 2);
        sv12[1201] = w3_d1_c0 * sp[3];
        sv12[1202] = w3_d0_c0 * sp[4];
        sv12[1203] = sv12[1201] + sv12[1202];
        sv12[1204] = w3_d0_c1 * sp[5];
        sv12[1205] = w3_d1_c1 * sp[6];
        sv12[1206] = sv12[1204] + sv12[1205];
        sv12[1207] = sv12[1203] + sv12[1206];
        sv12[1208] = sv12[1207] / 2 * (sv12[1207] / 2);
        sv12[1209] = sv12[1200] + sv12[1208];
        sv12[1210] = w3_d0_c0 * sp[5];
        sv12[1211] = w3_d1_c0 * sp[6];
        sv12[1212] = sv12[1210] + sv12[1211];
        sv12[1213] = sv12[1212] + sv12[1212];
        sv12[1214] = sv12[1213] / 2 * (sv12[1213] / 2);
        sv12[1215] = sv12[1214] + sv12[1208];
        sv12[1216] = sv12[1209] + sv12[1215];
        sv12[1217] = 2.0 * sv12[1216] * sv12[41];
        sv12[1218] = sv12[1195] + -1 * sv12[1217];
        sv12[1219] = sv12[1186] * sv12[1218];
        sv12[1220] = sv12[1187] * sv12[1218];
        sv12[1221] = sv12[1219] * sv12[251];
        sv12[1222] = sv12[1219] * sv12[252];
        sv12[1223] = sv12[1219] * sv12[253];
        sv12[1224] = sv12[1219] * sv12[254];
        sv12[1225] = sv12[1220] * sv12[251];
        sv12[1226] = sv12[1220] * sv12[252];
        sv12[1227] = sv12[1220] * sv12[253];
        sv12[1228] = sv12[1220] * sv12[254];
        sv12[1229] = sp[122] * sv12[333];
        sv12[1230] = sp[122] * sv12[334];
        sv12[1231] = sp[122] * sv12[335];
        sv12[1232] = sp[122] * sv12[336];
        sv12[1233] = sp[122] * sv12[337];
        sv12[1234] = sp[122] * sv12[338];
        sv12[1235] = sp[125] * sv12[405];
        sv12[1236] = sp[125] * sv12[406];
        sv12[1237] = sp[125] * sv12[407];
        sv12[1238] = sp[125] * sv12[408];
        sv12[1239] = sp[125] * sv12[409];
        sv12[1240] = sp[125] * sv12[410];
        sv12[1241] = sv12[1229] + sv12[1235];
        sv12[1242] = sv12[1230] + sv12[1236];
        sv12[1243] = sv12[1231] + sv12[1237];
        sv12[1244] = sv12[1238] + sv12[1232];
        sv12[1245] = sv12[1233] + sv12[1239];
        sv12[1246] = sv12[1240] + sv12[1234];
        sv12[1247] = 2.0 * sv12[1216] * sv12[173];
        sv12[1248] = 2.0 * sv12[1216] * sv12[174];
        sv12[1249] = sv12[1199] / 2 * (sp[16] / 2);
        sv12[1250] = sv12[1199] / 2 * (sp[17] / 2);
        sv12[1251] = sv12[1249] + sv12[1249];
        sv12[1252] = sv12[1250] + sv12[1250];
        sv12[1253] = sv12[1207] / 2 * (sp[3] / 2);
        sv12[1254] = sv12[1207] / 2 * (sp[4] / 2);
        sv12[1255] = sv12[1207] / 2 * (sp[6] / 2);
        sv12[1256] = sv12[1207] / 2 * (sp[5] / 2);
        sv12[1257] = sv12[1253] + sv12[1253];
        sv12[1258] = sv12[1254] + sv12[1254];
        sv12[1259] = sv12[1255] + sv12[1255];
        sv12[1260] = sv12[1256] + sv12[1256];
        sv12[1261] = sv12[1251] + sv12[1259];
        sv12[1262] = sv12[1252] + sv12[1260];
        sv12[1263] = sv12[1213] / 2 * (sp[75] / 2);
        sv12[1264] = sv12[1213] / 2 * (sp[76] / 2);
        sv12[1265] = sv12[1263] + sv12[1263];
        sv12[1266] = sv12[1264] + sv12[1264];
        sv12[1267] = sv12[1265] + sv12[1257];
        sv12[1268] = sv12[1266] + sv12[1258];
        sv12[1269] = sv12[1267] + sv12[1257];
        sv12[1270] = sv12[1268] + sv12[1258];
        sv12[1271] = sv12[1261] + sv12[1259];
        sv12[1272] = sv12[1262] + sv12[1260];
        sv12[1273] = 2.0 * sv12[1269] * sv12[41];
        sv12[1274] = 2.0 * sv12[1270] * sv12[41];
        sv12[1275] = 2.0 * sv12[1271] * sv12[41];
        sv12[1276] = 2.0 * sv12[1272] * sv12[41];
        sv12[1277] = -1 * sv12[1241] + -1 * sv12[1247];
        sv12[1278] = 1.0 + -1 * sv12[1242] + -1 * sv12[1248];
        sv12[1279] = sv12[1186] * (-1 * sv12[1273]);
        sv12[1280] = sv12[1186] * (-1 * sv12[1274]);
        sv12[1281] = sv12[1186] * sp[122];
        sv12[1282] = sv12[1186] * sp[125];
        sv12[1283] = sv12[1186] * (-1 * sv12[1275]);
        sv12[1284] = sv12[1186] * (-1 * sv12[1276]);
        sv12[1285] = sv12[1186] * sv12[1277];
        sv12[1286] = sv12[1186] * sv12[1278];
        sv12[1287] = sv12[1186] * (-1 * sv12[1243]);
        sv12[1288] = sv12[1186] * (-1 * sv12[1244]);
        sv12[1289] = sv12[1186] * (-1 * sv12[1245]);
        sv12[1290] = sv12[1186] * (-1 * sv12[1246]);
        sv12[1291] = sv12[1187] * (-1 * sv12[1273]);
        sv12[1292] = sv12[1187] * (-1 * sv12[1274]);
        sv12[1293] = sv12[1187] * sp[122];
        sv12[1294] = sv12[1187] * sp[125];
        sv12[1295] = sv12[1187] * (-1 * sv12[1275]);
        sv12[1296] = sv12[1187] * (-1 * sv12[1276]);
        sv12[1297] = sv12[1187] * sv12[1277];
        sv12[1298] = sv12[1187] * sv12[1278];
        sv12[1299] = sv12[1187] * (-1 * sv12[1243]);
        sv12[1300] = sv12[1187] * (-1 * sv12[1244]);
        sv12[1301] = sv12[1187] * (-1 * sv12[1245]);
        sv12[1302] = sv12[1187] * (-1 * sv12[1246]);
        sv12[1303] = sp[3] * sv12[333];
        sv12[1304] = sp[3] * sv12[334];
        sv12[1305] = sp[3] * sv12[335];
        sv12[1306] = sp[3] * sv12[336];
        sv12[1307] = sp[3] * sv12[337];
        sv12[1308] = sp[3] * sv12[338];
        sv12[1309] = sp[4] * sv12[333];
        sv12[1310] = sp[4] * sv12[334];
        sv12[1311] = sp[4] * sv12[335];
        sv12[1312] = sp[4] * sv12[336];
        sv12[1313] = sp[4] * sv12[337];
        sv12[1314] = sp[4] * sv12[338];
        sv12[1315] = sp[6] * sv12[405];
        sv12[1316] = sp[6] * sv12[406];
        sv12[1317] = sp[6] * sv12[407];
        sv12[1318] = sp[6] * sv12[408];
        sv12[1319] = sp[6] * sv12[409];
        sv12[1320] = sp[6] * sv12[410];
        sv12[1321] = sp[5] * sv12[405];
        sv12[1322] = sp[5] * sv12[406];
        sv12[1323] = sp[5] * sv12[407];
        sv12[1324] = sp[5] * sv12[408];
        sv12[1325] = sp[5] * sv12[409];
        sv12[1326] = sp[5] * sv12[410];
        sv12[1327] = sv12[1303] + sv12[1315];
        sv12[1328] = sv12[1309] + sv12[1321];
        sv12[1329] = sv12[1304] + sv12[1316];
        sv12[1330] = sv12[1310] + sv12[1322];
        sv12[1331] = sv12[1305] + sv12[1317];
        sv12[1332] = sv12[1311] + sv12[1323];
        sv12[1333] = sv12[1318] + sv12[1306];
        sv12[1334] = sv12[1324] + sv12[1312];
        sv12[1335] = sv12[1307] + sv12[1319];
        sv12[1336] = sv12[1313] + sv12[1325];
        sv12[1337] = sv12[1320] + sv12[1308];
        sv12[1338] = sv12[1326] + sv12[1314];
        sv12[1339] = sv12[1218] * sp[3];
        sv12[1340] = sv12[1218] * sp[4];
        sv12[1341] = sv12[1218] * sp[6];
        sv12[1342] = sv12[1218] * sp[5];
        sv12[1343] = sv12[1218] * (-1 * sv12[1327]);
        sv12[1344] = sv12[1218] * (-1 * sv12[1328]);
        sv12[1345] = sv12[1218] * (-1 * sv12[1329]);
        sv12[1346] = sv12[1218] * (-1 * sv12[1330]);
        sv12[1347] = sv12[1218] * (-1 * sv12[1331]);
        sv12[1348] = sv12[1218] * (-1 * sv12[1332]);
        sv12[1349] = sv12[1218] * (-1 * sv12[1333]);
        sv12[1350] = sv12[1218] * (-1 * sv12[1334]);
        sv12[1351] = sv12[1218] * (-1 * sv12[1335]);
        sv12[1352] = sv12[1218] * (-1 * sv12[1336]);
        sv12[1353] = sv12[1218] * (-1 * sv12[1337]);
        sv12[1354] = sv12[1218] * (-1 * sv12[1338]);
        sv12[1355] = sv12[1281] + sv12[1339];
        sv12[1356] = sv12[1293] + sv12[1340];
        sv12[1357] = sv12[1282] + sv12[1341];
        sv12[1358] = sv12[1294] + sv12[1342];
        sv12[1359] = sv12[1285] + sv12[1343];
        sv12[1360] = sv12[1297] + sv12[1344];
        sv12[1361] = sv12[1286] + sv12[1345];
        sv12[1362] = sv12[1298] + sv12[1346];
        sv12[1363] = sv12[1287] + sv12[1347];
        sv12[1364] = sv12[1299] + sv12[1348];
        sv12[1365] = sv12[1288] + sv12[1349];
        sv12[1366] = sv12[1300] + sv12[1350];
        sv12[1367] = sv12[1289] + sv12[1351];
        sv12[1368] = sv12[1301] + sv12[1352];
        sv12[1369] = sv12[1290] + sv12[1353];
        sv12[1370] = sv12[1302] + sv12[1354];
        sv12[1371] = sv12[1279] * sv12[1009];
        sv12[1372] = sv12[1291] * sv12[1009];
        sv12[1373] = sv12[1280] * sv12[1009];
        sv12[1374] = sv12[1292] * sv12[1009];
        sv12[1375] = sv12[1355] * sv12[1009];
        sv12[1376] = sv12[1356] * sv12[1009];
        sv12[1377] = sv12[1357] * sv12[1009];
        sv12[1378] = sv12[1358] * sv12[1009];
        sv12[1379] = sv12[1283] * sv12[1009];
        sv12[1380] = sv12[1295] * sv12[1009];
        sv12[1381] = sv12[1284] * sv12[1009];
        sv12[1382] = sv12[1296] * sv12[1009];
        sv12[1383] = sv12[1359] * sv12[1009];
        sv12[1384] = sv12[1360] * sv12[1009];
        sv12[1385] = sv12[1361] * sv12[1009];
        sv12[1386] = sv12[1362] * sv12[1009];
        sv12[1387] = sv12[1363] * sv12[1009];
        sv12[1388] = sv12[1364] * sv12[1009];
        sv12[1389] = sv12[1365] * sv12[1009];
        sv12[1390] = sv12[1366] * sv12[1009];
        sv12[1391] = sv12[1367] * sv12[1009];
        sv12[1392] = sv12[1368] * sv12[1009];
        sv12[1393] = sv12[1369] * sv12[1009];
        sv12[1394] = sv12[1370] * sv12[1009];
        sv12[1395] = sv12[1375] + sv12[1221];
        sv12[1396] = sv12[1376] + sv12[1225];
        sv12[1397] = sv12[1377] + sv12[1222];
        sv12[1398] = sv12[1378] + sv12[1226];
        sv12[1399] = sv12[1223] + sv12[1383];
        sv12[1400] = sv12[1227] + sv12[1384];
        sv12[1401] = sv12[1224] + sv12[1385];
        sv12[1402] = sv12[1228] + sv12[1386];
        sv12[1403] = sv12[44] / 1.3 * sp[3];
        sv12[1404] = sv12[44] / 1.3 * sp[4];
        sv12[1405] = sv12[63] / 1.3 * sp[6];
        sv12[1406] = sv12[63] / 1.3 * sp[5];
        sv12[1407] = sv12[1403] + sv12[1405];
        sv12[1408] = sv12[1406] + sv12[1404];
        sv12[1409] = sv12[22] + -1 * sv12[1407];
        sv12[1410] = sv12[23] + -1 * sv12[1408];
        sv12[1411] = w3_c3 * w3_c3;
        sv12[1412] = std::sqrt(1e-8 + sv12[1411]);
        sv12[1413] = w3_c3 + sv12[1412];
        sv12[1414] = 1.92 * w2_c4 * (1.0 / (0.5 * sv12[1413]));
        sv12[1415] = w2_c4 / (0.5 * sv12[1413]);
        sv12[1416] = sv12[1414] + 1.92 * sv12[1415];
        sv12[1417] = w3_c1 * sp[128];
        sv12[1418] = w3_c0 * sp[131];
        sv12[1419] = sv12[1417] + sv12[1418];
        sv12[1420] = sp[128] * (sv12[44] / 1.3);
        sv12[1421] = sp[131] * (sv12[63] / 1.3);
        sv12[1422] = sv12[1420] + sv12[1421];
        sv12[1423] = sv12[1419] + -1 * sv12[1422];
        sv12[1424] = 1.92 * w2_c4 * sv12[1415];
        sv12[1425] = sv12[1423] + sv12[1424];
        sv12[1426] = w3_c3 * (0.09 * (1.44 * sv12[24]));
        sv12[1427] = 2.0 * sv12[1216] * sv12[1426];
        sv12[1428] = sv12[1425] + -1 * sv12[1427];
        sv12[1429] = sv12[1409] * sv12[1428];
        sv12[1430] = sv12[1410] * sv12[1428];
        sv12[1431] = sv12[1428] * sv12[1416];
        sv12[1432] = sv12[167] / (0.0001 + sv12[41] / 1.3);
        sv12[1433] = sv12[173] / 1.3 * sv12[1432];
        sv12[1434] = sv12[174] / 1.3 * sv12[1432];
        sv12[1435] = sv12[181] / (0.0001 + sv12[41] / 1.3);
        sv12[1436] = sv12[182] / (0.0001 + sv12[41] / 1.3);
        sv12[1437] = -1 * sv12[1433] / (0.0001 + sv12[41] / 1.3);
        sv12[1438] = -1 * sv12[1434] / (0.0001 + sv12[41] / 1.3);
        sv12[1439] = sv12[1435] * (1.0 / sv12[1432]);
        sv12[1440] = sv12[1436] * (1.0 / sv12[1432]);
        sv12[1441] = sv12[1437] * (1.0 / sv12[1432]);
        sv12[1442] = sv12[1438] * (1.0 / sv12[1432]);
        sv12[1443] = -1 * sv12[1439] / sv12[1432];
        sv12[1444] = -1 * sv12[1440] / sv12[1432];
        sv12[1445] = -1 * sv12[1441] / sv12[1432];
        sv12[1446] = -1 * sv12[1442] / sv12[1432];
        sv12[1447] = std::exp(-2.0 * sv12[1432]);
        sv12[1448] = -2.0 * sv12[1435] * sv12[1447];
        sv12[1449] = -2.0 * sv12[1436] * sv12[1447];
        sv12[1450] = -2.0 * sv12[1437] * sv12[1447];
        sv12[1451] = -2.0 * sv12[1438] * sv12[1447];
        sv12[1452] = (1.0 + sv12[1447]) / (1.0 + -1 * sv12[1447]);
        sv12[1453] = -1 * sv12[1448] * sv12[1452];
        sv12[1454] = -1 * sv12[1449] * sv12[1452];
        sv12[1455] = -1 * sv12[1450] * sv12[1452];
        sv12[1456] = -1 * sv12[1451] * sv12[1452];
        sv12[1457] = -1 * sv12[1453] + sv12[1448];
        sv12[1458] = -1 * sv12[1454] + sv12[1449];
        sv12[1459] = -1 * sv12[1455] + sv12[1450];
        sv12[1460] = -1 * sv12[1456] + sv12[1451];
        sv12[1461] = sv12[1457] / (1.0 + -1 * sv12[1447]);
        sv12[1462] = sv12[1458] / (1.0 + -1 * sv12[1447]);
        sv12[1463] = sv12[1459] / (1.0 + -1 * sv12[1447]);
        sv12[1464] = sv12[1460] / (1.0 + -1 * sv12[1447]);
        sv12[1465] = -1 * sv12[1443] + sv12[1461];
        sv12[1466] = -1 * sv12[1444] + sv12[1462];
        sv12[1467] = -1 * sv12[1445] + sv12[1463];
        sv12[1468] = -1 * sv12[1446] + sv12[1464];
        sv12[1469] = sv12[1465] * (2.0 * sp[116]);
        sv12[1470] = sv12[1466] * (2.0 * sp[116]);
        sv12[1471] = sv12[1467] * (2.0 * sp[116]);
        sv12[1472] = sv12[1468] * (2.0 * sp[116]);
        sv12[1473] = -1 * (1.0 / sv12[1432]) + sv12[1452];
        sv12[1474] = sv12[1473] * (2.0 * sp[116]);
        sv12[1475] = sv12[1474] / sv12[166];
        sv12[1476] = sv12[179] * sv12[1475];
        sv12[1477] = sv12[180] * sv12[1475];
        sv12[1478] = sv12[1469] + -1 * sv12[1476];
        sv12[1479] = sv12[1470] + -1 * sv12[1477];
        sv12[1480] = sv12[1478] / sv12[166];
        sv12[1481] = sv12[1479] / sv12[166];
        sv12[1482] = sv12[1471] / sv12[166];
        sv12[1483] = sv12[1472] / sv12[166];
        sv12[1484] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[1432]) * (2.0 * sp[116]);
        sv12[1485] = sv12[1484] * (2.0 * sp[116]);
        sv12[1486] = sv12[1485] / (0.0001 + sv12[41] / 1.3);
        sv12[1487] = sv12[173] / 1.3 * sv12[1486];
        sv12[1488] = sv12[174] / 1.3 * sv12[1486];
        sv12[1489] = 0.5 * (-0.004435991517475 * sv12[1435]) * (2.0 * sp[116]);
        sv12[1490] = 0.5 * (-0.004435991517475 * sv12[1436]) * (2.0 * sp[116]);
        sv12[1491] = 0.5 * (-0.004435991517475 * sv12[1437]) * (2.0 * sp[116]);
        sv12[1492] = 0.5 * (-0.004435991517475 * sv12[1438]) * (2.0 * sp[116]);
        sv12[1493] = sv12[1489] * (2.0 * sp[116]);
        sv12[1494] = sv12[1490] * (2.0 * sp[116]);
        sv12[1495] = sv12[1491] * (2.0 * sp[116]);
        sv12[1496] = sv12[1492] * (2.0 * sp[116]);
        sv12[1497] = -1 * sv12[1487] + sv12[1495];
        sv12[1498] = -1 * sv12[1488] + sv12[1496];
        sv12[1499] = sv12[1493] / (0.0001 + sv12[41] / 1.3);
        sv12[1500] = sv12[1494] / (0.0001 + sv12[41] / 1.3);
        sv12[1501] = sv12[1497] / (0.0001 + sv12[41] / 1.3);
        sv12[1502] = sv12[1498] / (0.0001 + sv12[41] / 1.3);
        sv12[1503] = (sv12[1432] >= 0.1 ? sv12[1480] : sv12[1499]);
        sv12[1504] = (sv12[1432] >= 0.1 ? sv12[1481] : sv12[1500]);
        sv12[1505] = (sv12[1432] >= 0.1 ? sv12[1482] : sv12[1501]);
        sv12[1506] = (sv12[1432] >= 0.1 ? sv12[1483] : sv12[1502]);
        sv12[1507] = sv12[1429] * sv12[1503];
        sv12[1508] = sv12[1429] * sv12[1504];
        sv12[1509] = sv12[1429] * sv12[1505];
        sv12[1510] = sv12[1429] * sv12[1506];
        sv12[1511] = sv12[1430] * sv12[1503];
        sv12[1512] = sv12[1430] * sv12[1504];
        sv12[1513] = sv12[1430] * sv12[1505];
        sv12[1514] = sv12[1430] * sv12[1506];
        sv12[1515] = sv12[1431] * sv12[1503];
        sv12[1516] = sv12[1431] * sv12[1504];
        sv12[1517] = sv12[1431] * sv12[1505];
        sv12[1518] = sv12[1431] * sv12[1506];
        sv12[1519] = sp[128] * (sv12[333] / 1.3);
        sv12[1520] = sp[128] * (sv12[334] / 1.3);
        sv12[1521] = sp[128] * (sv12[335] / 1.3);
        sv12[1522] = sp[128] * (sv12[336] / 1.3);
        sv12[1523] = sp[128] * (sv12[337] / 1.3);
        sv12[1524] = sp[128] * (sv12[338] / 1.3);
        sv12[1525] = sp[131] * (sv12[405] / 1.3);
        sv12[1526] = sp[131] * (sv12[406] / 1.3);
        sv12[1527] = sp[131] * (sv12[407] / 1.3);
        sv12[1528] = sp[131] * (sv12[408] / 1.3);
        sv12[1529] = sp[131] * (sv12[409] / 1.3);
        sv12[1530] = sp[131] * (sv12[410] / 1.3);
        sv12[1531] = sv12[1519] + sv12[1525];
        sv12[1532] = sv12[1520] + sv12[1526];
        sv12[1533] = sv12[1521] + sv12[1527];
        sv12[1534] = sv12[1528] + sv12[1522];
        sv12[1535] = sv12[1523] + sv12[1529];
        sv12[1536] = sv12[1530] + sv12[1524];
        sv12[1537] = w3_c3 + w3_c3;
        sv12[1538] = sv12[1537] / (2 * sv12[1412]);
        sv12[1539] = 0.5 * (1.0 + sv12[1538]) * sv12[1415];
        sv12[1540] = -1 * sv12[1539] / (0.5 * sv12[1413]);
        sv12[1541] = 1.92 * w2_c4 * sv12[1540];
        sv12[1542] = -1 * sv12[1531] + sv12[1541];
        sv12[1543] = 2.0 * sv12[1216] * (0.09 * (1.44 * sv12[24]));
        sv12[1544] = 2.0 * sv12[1269] * sv12[1426];
        sv12[1545] = 2.0 * sv12[1270] * sv12[1426];
        sv12[1546] = 2.0 * sv12[1271] * sv12[1426];
        sv12[1547] = 2.0 * sv12[1272] * sv12[1426];
        sv12[1548] = sv12[1542] + -1 * sv12[1543];
        sv12[1549] = sv12[1409] * (-1 * sv12[1544]);
        sv12[1550] = sv12[1409] * (-1 * sv12[1545]);
        sv12[1551] = sv12[1409] * sp[128];
        sv12[1552] = sv12[1409] * sp[131];
        sv12[1553] = sv12[1409] * (-1 * sv12[1546]);
        sv12[1554] = sv12[1409] * (-1 * sv12[1547]);
        sv12[1555] = sv12[1409] * sv12[1548];
        sv12[1556] = sv12[1409] * (-1 * sv12[1532]);
        sv12[1557] = sv12[1409] * (-1 * sv12[1533]);
        sv12[1558] = sv12[1409] * (-1 * sv12[1534]);
        sv12[1559] = sv12[1409] * (-1 * sv12[1535]);
        sv12[1560] = sv12[1409] * (-1 * sv12[1536]);
        sv12[1561] = sv12[1410] * (-1 * sv12[1544]);
        sv12[1562] = sv12[1410] * (-1 * sv12[1545]);
        sv12[1563] = sv12[1410] * sp[128];
        sv12[1564] = sv12[1410] * sp[131];
        sv12[1565] = sv12[1410] * (-1 * sv12[1546]);
        sv12[1566] = sv12[1410] * (-1 * sv12[1547]);
        sv12[1567] = sv12[1410] * sv12[1548];
        sv12[1568] = sv12[1410] * (-1 * sv12[1532]);
        sv12[1569] = sv12[1410] * (-1 * sv12[1533]);
        sv12[1570] = sv12[1410] * (-1 * sv12[1534]);
        sv12[1571] = sv12[1410] * (-1 * sv12[1535]);
        sv12[1572] = sv12[1410] * (-1 * sv12[1536]);
        sv12[1573] = sv12[1416] * (-1 * sv12[1544]);
        sv12[1574] = sv12[1416] * (-1 * sv12[1545]);
        sv12[1575] = sp[128] * sv12[1416];
        sv12[1576] = sp[131] * sv12[1416];
        sv12[1577] = sv12[1416] * (-1 * sv12[1546]);
        sv12[1578] = sv12[1416] * (-1 * sv12[1547]);
        sv12[1579] = sv12[1548] * sv12[1416];
        sv12[1580] = sv12[1416] * (-1 * sv12[1532]);
        sv12[1581] = sv12[1416] * (-1 * sv12[1533]);
        sv12[1582] = sv12[1416] * (-1 * sv12[1534]);
        sv12[1583] = sv12[1416] * (-1 * sv12[1535]);
        sv12[1584] = sv12[1416] * (-1 * sv12[1536]);
        sv12[1585] = sv12[333] / 1.3 * sp[3];
        sv12[1586] = sv12[334] / 1.3 * sp[3];
        sv12[1587] = sv12[335] / 1.3 * sp[3];
        sv12[1588] = sv12[336] / 1.3 * sp[3];
        sv12[1589] = sv12[337] / 1.3 * sp[3];
        sv12[1590] = sv12[338] / 1.3 * sp[3];
        sv12[1591] = sv12[333] / 1.3 * sp[4];
        sv12[1592] = sv12[334] / 1.3 * sp[4];
        sv12[1593] = sv12[335] / 1.3 * sp[4];
        sv12[1594] = sv12[336] / 1.3 * sp[4];
        sv12[1595] = sv12[337] / 1.3 * sp[4];
        sv12[1596] = sv12[338] / 1.3 * sp[4];
        sv12[1597] = sv12[405] / 1.3 * sp[6];
        sv12[1598] = sv12[406] / 1.3 * sp[6];
        sv12[1599] = sv12[407] / 1.3 * sp[6];
        sv12[1600] = sv12[408] / 1.3 * sp[6];
        sv12[1601] = sv12[409] / 1.3 * sp[6];
        sv12[1602] = sv12[410] / 1.3 * sp[6];
        sv12[1603] = sv12[405] / 1.3 * sp[5];
        sv12[1604] = sv12[406] / 1.3 * sp[5];
        sv12[1605] = sv12[407] / 1.3 * sp[5];
        sv12[1606] = sv12[408] / 1.3 * sp[5];
        sv12[1607] = sv12[409] / 1.3 * sp[5];
        sv12[1608] = sv12[410] / 1.3 * sp[5];
        sv12[1609] = sv12[1585] + sv12[1597];
        sv12[1610] = sv12[1603] + sv12[1591];
        sv12[1611] = sv12[1586] + sv12[1598];
        sv12[1612] = sv12[1604] + sv12[1592];
        sv12[1613] = sv12[1587] + sv12[1599];
        sv12[1614] = sv12[1605] + sv12[1593];
        sv12[1615] = sv12[1588] + sv12[1600];
        sv12[1616] = sv12[1606] + sv12[1594];
        sv12[1617] = sv12[1589] + sv12[1601];
        sv12[1618] = sv12[1607] + sv12[1595];
        sv12[1619] = sv12[1590] + sv12[1602];
        sv12[1620] = sv12[1608] + sv12[1596];
        sv12[1621] = 0.5 * (1.0 + sv12[1538]) * (1.0 / (0.5 * sv12[1413]));
        sv12[1622] = -1 * sv12[1621] / (0.5 * sv12[1413]);
        sv12[1623] = 1.92 * w2_c4 * sv12[1622];
        sv12[1624] = sv12[1623] + 1.92 * sv12[1540];
        sv12[1625] = sv12[1428] * sp[3];
        sv12[1626] = sv12[1428] * sp[4];
        sv12[1627] = sv12[1428] * sp[6];
        sv12[1628] = sv12[1428] * sp[5];
        sv12[1629] = sv12[1428] * (-1 * sv12[1609]);
        sv12[1630] = sv12[1428] * (-1 * sv12[1610]);
        sv12[1631] = sv12[1428] * sv12[1624];
        sv12[1632] = sv12[1428] * (-1 * sv12[1611]);
        sv12[1633] = sv12[1428] * (-1 * sv12[1612]);
        sv12[1634] = sv12[1428] * (-1 * sv12[1613]);
        sv12[1635] = sv12[1428] * (-1 * sv12[1614]);
        sv12[1636] = sv12[1428] * (-1 * sv12[1615]);
        sv12[1637] = sv12[1428] * (-1 * sv12[1616]);
        sv12[1638] = sv12[1428] * (-1 * sv12[1617]);
        sv12[1639] = sv12[1428] * (-1 * sv12[1618]);
        sv12[1640] = sv12[1428] * (-1 * sv12[1619]);
        sv12[1641] = sv12[1428] * (-1 * sv12[1620]);
        sv12[1642] = sv12[1551] + sv12[1625];
        sv12[1643] = sv12[1563] + sv12[1626];
        sv12[1644] = sv12[1552] + sv12[1627];
        sv12[1645] = sv12[1564] + sv12[1628];
        sv12[1646] = sv12[1555] + sv12[1629];
        sv12[1647] = sv12[1567] + sv12[1630];
        sv12[1648] = sv12[1579] + sv12[1631];
        sv12[1649] = sv12[1556] + sv12[1632];
        sv12[1650] = sv12[1568] + sv12[1633];
        sv12[1651] = sv12[1557] + sv12[1634];
        sv12[1652] = sv12[1569] + sv12[1635];
        sv12[1653] = sv12[1558] + sv12[1636];
        sv12[1654] = sv12[1570] + sv12[1637];
        sv12[1655] = sv12[1559] + sv12[1638];
        sv12[1656] = sv12[1571] + sv12[1639];
        sv12[1657] = sv12[1560] + sv12[1640];
        sv12[1658] = sv12[1572] + sv12[1641];
        sv12[1659] = (sv12[1432] >= 0.1 ? sv12[1475] : sv12[1486]);
        sv12[1660] = sv12[1549] * sv12[1659];
        sv12[1661] = sv12[1561] * sv12[1659];
        sv12[1662] = sv12[1573] * sv12[1659];
        sv12[1663] = sv12[1550] * sv12[1659];
        sv12[1664] = sv12[1562] * sv12[1659];
        sv12[1665] = sv12[1574] * sv12[1659];
        sv12[1666] = sv12[1642] * sv12[1659];
        sv12[1667] = sv12[1643] * sv12[1659];
        sv12[1668] = sv12[1575] * sv12[1659];
        sv12[1669] = sv12[1644] * sv12[1659];
        sv12[1670] = sv12[1645] * sv12[1659];
        sv12[1671] = sv12[1576] * sv12[1659];
        sv12[1672] = sv12[1553] * sv12[1659];
        sv12[1673] = sv12[1565] * sv12[1659];
        sv12[1674] = sv12[1577] * sv12[1659];
        sv12[1675] = sv12[1554] * sv12[1659];
        sv12[1676] = sv12[1566] * sv12[1659];
        sv12[1677] = sv12[1578] * sv12[1659];
        sv12[1678] = sv12[1646] * sv12[1659];
        sv12[1679] = sv12[1647] * sv12[1659];
        sv12[1680] = sv12[1648] * sv12[1659];
        sv12[1681] = sv12[1649] * sv12[1659];
        sv12[1682] = sv12[1650] * sv12[1659];
        sv12[1683] = sv12[1580] * sv12[1659];
        sv12[1684] = sv12[1651] * sv12[1659];
        sv12[1685] = sv12[1652] * sv12[1659];
        sv12[1686] = sv12[1581] * sv12[1659];
        sv12[1687] = sv12[1653] * sv12[1659];
        sv12[1688] = sv12[1654] * sv12[1659];
        sv12[1689] = sv12[1582] * sv12[1659];
        sv12[1690] = sv12[1655] * sv12[1659];
        sv12[1691] = sv12[1656] * sv12[1659];
        sv12[1692] = sv12[1583] * sv12[1659];
        sv12[1693] = sv12[1657] * sv12[1659];
        sv12[1694] = sv12[1658] * sv12[1659];
        sv12[1695] = sv12[1584] * sv12[1659];
        sv12[1696] = sv12[1666] + sv12[1507];
        sv12[1697] = sv12[1667] + sv12[1511];
        sv12[1698] = sv12[1668] + sv12[1515];
        sv12[1699] = sv12[1669] + sv12[1508];
        sv12[1700] = sv12[1670] + sv12[1512];
        sv12[1701] = sv12[1671] + sv12[1516];
        sv12[1702] = sv12[1509] + sv12[1678];
        sv12[1703] = sv12[1513] + sv12[1679];
        sv12[1704] = sv12[1517] + sv12[1680];
        sv12[1705] = sv12[1510] + sv12[1681];
        sv12[1706] = sv12[1514] + sv12[1682];
        sv12[1707] = sv12[1518] + sv12[1683];
        sv12[1708] = w2_c3 * (0.09 * sv12[24]);
        sv12[1709] = w2_c3 * sv12[1708];
        sv12[1710] = w2_c4 * w2_c4;
        sv12[1711] = std::sqrt(1e-8 + sv12[1710]);
        sv12[1712] = w2_c4 + sv12[1711];
        sv12[1713] = sv12[1709] / (0.5 * sv12[1712]);
        sv12[1714] = sp[132] * (0.0001 + sv12[1713]);
        sv12[1715] = sp[133] * (0.0001 + sv12[1713]);
        sv12[1716] = sp[134] * (0.0001 + sv12[1713]);
        sv12[1717] = sv12[1708] + sv12[1708];
        sv12[1718] = w2_c4 + w2_c4;
        sv12[1719] = sv12[1718] / (2 * sv12[1711]);
        sv12[1720] = 0.5 * (1.0 + sv12[1719]) * sv12[1713];
        sv12[1721] = sv12[1717] / (0.5 * sv12[1712]);
        sv12[1722] = -1 * sv12[1720] / (0.5 * sv12[1712]);
        sv12[1723] = sp[139] * sv12[1721];
        sv12[1724] = sp[139] * sv12[1722];
        sv12[1725] = sp[140] * sv12[1721];
        sv12[1726] = sp[140] * sv12[1722];
        sv12[1727] = sv12[1399] + sv12[1723];
        sv12[1728] = sv12[1400] + sv12[1725];
        sv12[1729] = sv12[1401] + sv12[1724];
        sv12[1730] = sv12[1402] + sv12[1726];
        sv12[1731] = sv12[1714] + sv12[1387];
        sv12[1732] = sv12[1715] + sv12[1388];
        sv12[1733] = sv12[1715] + sv12[1389];
        sv12[1734] = sv12[1716] + sv12[1390];
        sv12[1735] = sp[132] * (0.0001 + sv12[1713] / 1.3);
        sv12[1736] = sp[133] * (0.0001 + sv12[1713] / 1.3);
        sv12[1737] = sp[134] * (0.0001 + sv12[1713] / 1.3);
        sv12[1738] = sp[145] * (sv12[1721] / 1.3);
        sv12[1739] = sp[145] * (sv12[1722] / 1.3);
        sv12[1740] = sp[146] * (sv12[1721] / 1.3);
        sv12[1741] = sp[146] * (sv12[1722] / 1.3);
        sv12[1742] = sv12[1702] + sv12[1738];
        sv12[1743] = sv12[1703] + sv12[1740];
        sv12[1744] = sv12[1705] + sv12[1739];
        sv12[1745] = sv12[1706] + sv12[1741];
        sv12[1746] = sv12[1735] + sv12[1690];
        sv12[1747] = sv12[1736] + sv12[1691];
        sv12[1748] = sv12[1736] + sv12[1693];
        sv12[1749] = sv12[1737] + sv12[1694];
        sv12[1750] = sp[119] * sv12[1159];
        sv12[1751] = sp[35] * sv12[1750];
        sv12[1752] = sp[36] * sv12[1750];
        sv12[1753] = sp[41] * sv12[1750];
        sv12[1754] = sp[39] * sv12[1750];
        sv12[1755] = sp[34] * sv12[1750];
        sv12[1756] = sp[37] * sv12[1750];
        sv12[1757] = sp[40] * sv12[1750];
        sv12[1758] = sp[18] * sv12[1750];
        sv12[1759] = sp[19] * sv12[1750];
        sv12[1760] = sp[20] * sv12[1750];
        sv12[1761] = sv12[79] * (-1 * sv12[66]);
        sv12[1762] = sv12[79] * (-1 * sv12[67]);
        sv12[1763] = sv12[79] * sv12[79];
        sv12[1764] = sv12[80] * sv12[79];
        sv12[1765] = sv12[79] * (-1 * sv12[76]);
        sv12[1766] = sv12[79] * (-1 * sv12[77]);
        sv12[1767] = sv12[79] * (-1 * sv12[78]);
        sv12[1768] = sv12[79] * (-1 * sv12[71]);
        sv12[1769] = sv12[79] * (-1 * sv12[72]);
        sv12[1770] = sv12[79] * (-1 * sv12[73]);
        sv12[1771] = sv12[79] * sp[3];
        sv12[1772] = sv12[79] * sp[4];
        sv12[1773] = sv12[80] * (-1 * sv12[66]);
        sv12[1774] = sv12[80] * (-1 * sv12[67]);
        sv12[1775] = sv12[80] * sv12[80];
        sv12[1776] = sv12[80] * (-1 * sv12[76]);
        sv12[1777] = sv12[80] * (-1 * sv12[77]);
        sv12[1778] = sv12[80] * (-1 * sv12[78]);
        sv12[1779] = sv12[80] * (-1 * sv12[71]);
        sv12[1780] = sv12[80] * (-1 * sv12[72]);
        sv12[1781] = sv12[80] * (-1 * sv12[73]);
        sv12[1782] = sv12[80] * sp[3];
        sv12[1783] = sv12[80] * sp[4];
        sv12[1784] = -1 * sv12[76] * (-1 * sv12[66]);
        sv12[1785] = -1 * sv12[76] * (-1 * sv12[67]);
        sv12[1786] = -1 * sv12[76] * (-1 * sv12[76]);
        sv12[1787] = -1 * sv12[77] * (-1 * sv12[76]);
        sv12[1788] = -1 * sv12[78] * (-1 * sv12[76]);
        sv12[1789] = -1 * sv12[76] * (-1 * sv12[71]);
        sv12[1790] = -1 * sv12[76] * (-1 * sv12[72]);
        sv12[1791] = -1 * sv12[76] * (-1 * sv12[73]);
        sv12[1792] = -1 * sv12[76] * sp[3];
        sv12[1793] = -1 * sv12[76] * sp[4];
        sv12[1794] = -1 * sv12[77] * (-1 * sv12[66]);
        sv12[1795] = -1 * sv12[77] * (-1 * sv12[67]);
        sv12[1796] = -1 * sv12[77] * (-1 * sv12[77]);
        sv12[1797] = -1 * sv12[77] * (-1 * sv12[78]);
        sv12[1798] = -1 * sv12[77] * (-1 * sv12[71]);
        sv12[1799] = -1 * sv12[77] * (-1 * sv12[72]);
        sv12[1800] = -1 * sv12[77] * (-1 * sv12[73]);
        sv12[1801] = -1 * sv12[77] * sp[3];
        sv12[1802] = -1 * sv12[77] * sp[4];
        sv12[1803] = -1 * sv12[78] * (-1 * sv12[66]);
        sv12[1804] = -1 * sv12[78] * (-1 * sv12[67]);
        sv12[1805] = -1 * sv12[78] * (-1 * sv12[78]);
        sv12[1806] = -1 * sv12[78] * (-1 * sv12[71]);
        sv12[1807] = -1 * sv12[78] * (-1 * sv12[72]);
        sv12[1808] = -1 * sv12[78] * (-1 * sv12[73]);
        sv12[1809] = -1 * sv12[78] * sp[3];
        sv12[1810] = -1 * sv12[78] * sp[4];
        sv12[1811] = -1 * sv12[66] * (-1 * sv12[66]);
        sv12[1812] = -1 * sv12[66] * (-1 * sv12[67]);
        sv12[1813] = -1 * sv12[71] * (-1 * sv12[66]);
        sv12[1814] = -1 * sv12[72] * (-1 * sv12[66]);
        sv12[1815] = -1 * sv12[73] * (-1 * sv12[66]);
        sv12[1816] = -1 * sv12[66] * sp[3];
        sv12[1817] = -1 * sv12[66] * sp[4];
        sv12[1818] = -1 * sv12[67] * (-1 * sv12[67]);
        sv12[1819] = -1 * sv12[71] * (-1 * sv12[67]);
        sv12[1820] = -1 * sv12[72] * (-1 * sv12[67]);
        sv12[1821] = -1 * sv12[73] * (-1 * sv12[67]);
        sv12[1822] = -1 * sv12[67] * sp[3];
        sv12[1823] = -1 * sv12[67] * sp[4];
        sv12[1824] = -1 * sv12[71] * (-1 * sv12[71]);
        sv12[1825] = -1 * sv12[71] * (-1 * sv12[72]);
        sv12[1826] = -1 * sv12[71] * (-1 * sv12[73]);
        sv12[1827] = -1 * sv12[71] * sp[3];
        sv12[1828] = -1 * sv12[71] * sp[4];
        sv12[1829] = -1 * sv12[72] * (-1 * sv12[72]);
        sv12[1830] = -1 * sv12[73] * (-1 * sv12[72]);
        sv12[1831] = -1 * sv12[72] * sp[3];
        sv12[1832] = -1 * sv12[72] * sp[4];
        sv12[1833] = -1 * sv12[73] * (-1 * sv12[73]);
        sv12[1834] = -1 * sv12[73] * sp[3];
        sv12[1835] = -1 * sv12[73] * sp[4];
        sv12[1836] = sv12[124] * (-1 * sv12[107]);
        sv12[1837] = sv12[125] * (-1 * sv12[107]);
        sv12[1838] = -1 * sv12[107] * (-1 * sv12[107]);
        sv12[1839] = -1 * sv12[108] * (-1 * sv12[107]);
        sv12[1840] = -1 * sv12[72] * (-1 * sv12[107]);
        sv12[1841] = -1 * sv12[71] * (-1 * sv12[107]);
        sv12[1842] = -1 * sv12[73] * (-1 * sv12[107]);
        sv12[1843] = -1 * sv12[121] * (-1 * sv12[107]);
        sv12[1844] = -1 * sv12[122] * (-1 * sv12[107]);
        sv12[1845] = -1 * sv12[123] * (-1 * sv12[107]);
        sv12[1846] = -1 * sv12[107] * sp[6];
        sv12[1847] = -1 * sv12[107] * sp[5];
        sv12[1848] = sv12[124] * (-1 * sv12[108]);
        sv12[1849] = sv12[125] * (-1 * sv12[108]);
        sv12[1850] = -1 * sv12[108] * (-1 * sv12[108]);
        sv12[1851] = -1 * sv12[72] * (-1 * sv12[108]);
        sv12[1852] = -1 * sv12[71] * (-1 * sv12[108]);
        sv12[1853] = -1 * sv12[73] * (-1 * sv12[108]);
        sv12[1854] = -1 * sv12[121] * (-1 * sv12[108]);
        sv12[1855] = -1 * sv12[122] * (-1 * sv12[108]);
        sv12[1856] = -1 * sv12[123] * (-1 * sv12[108]);
        sv12[1857] = -1 * sv12[108] * sp[6];
        sv12[1858] = -1 * sv12[108] * sp[5];
        sv12[1859] = sv12[124] * (-1 * sv12[72]);
        sv12[1860] = sv12[125] * (-1 * sv12[72]);
        sv12[1861] = -1 * sv12[121] * (-1 * sv12[72]);
        sv12[1862] = -1 * sv12[122] * (-1 * sv12[72]);
        sv12[1863] = -1 * sv12[123] * (-1 * sv12[72]);
        sv12[1864] = -1 * sv12[72] * sp[6];
        sv12[1865] = -1 * sv12[72] * sp[5];
        sv12[1866] = sv12[124] * (-1 * sv12[71]);
        sv12[1867] = sv12[125] * (-1 * sv12[71]);
        sv12[1868] = -1 * sv12[121] * (-1 * sv12[71]);
        sv12[1869] = -1 * sv12[122] * (-1 * sv12[71]);
        sv12[1870] = -1 * sv12[123] * (-1 * sv12[71]);
        sv12[1871] = -1 * sv12[71] * sp[6];
        sv12[1872] = -1 * sv12[71] * sp[5];
        sv12[1873] = sv12[124] * (-1 * sv12[73]);
        sv12[1874] = sv12[125] * (-1 * sv12[73]);
        sv12[1875] = -1 * sv12[121] * (-1 * sv12[73]);
        sv12[1876] = -1 * sv12[122] * (-1 * sv12[73]);
        sv12[1877] = -1 * sv12[123] * (-1 * sv12[73]);
        sv12[1878] = -1 * sv12[73] * sp[6];
        sv12[1879] = -1 * sv12[73] * sp[5];
        sv12[1880] = sv12[124] * sv12[124];
        sv12[1881] = sv12[124] * sv12[125];
        sv12[1882] = sv12[124] * (-1 * sv12[121]);
        sv12[1883] = sv12[124] * (-1 * sv12[122]);
        sv12[1884] = sv12[124] * (-1 * sv12[123]);
        sv12[1885] = sv12[124] * sp[6];
        sv12[1886] = sv12[124] * sp[5];
        sv12[1887] = sv12[125] * sv12[125];
        sv12[1888] = sv12[125] * (-1 * sv12[121]);
        sv12[1889] = sv12[125] * (-1 * sv12[122]);
        sv12[1890] = sv12[125] * (-1 * sv12[123]);
        sv12[1891] = sv12[125] * sp[6];
        sv12[1892] = sv12[125] * sp[5];
        sv12[1893] = -1 * sv12[121] * (-1 * sv12[121]);
        sv12[1894] = -1 * sv12[121] * (-1 * sv12[122]);
        sv12[1895] = -1 * sv12[121] * (-1 * sv12[123]);
        sv12[1896] = -1 * sv12[121] * sp[6];
        sv12[1897] = -1 * sv12[121] * sp[5];
        sv12[1898] = -1 * sv12[122] * (-1 * sv12[122]);
        sv12[1899] = -1 * sv12[122] * (-1 * sv12[123]);
        sv12[1900] = -1 * sv12[122] * sp[6];
        sv12[1901] = -1 * sv12[122] * sp[5];
        sv12[1902] = -1 * sv12[123] * (-1 * sv12[123]);
        sv12[1903] = -1 * sv12[123] * sp[6];
        sv12[1904] = -1 * sv12[123] * sp[5];
        sv12[1905] = sv12[1761] + sv12[1836];
        sv12[1906] = sv12[1773] + sv12[1848];
        sv12[1907] = sv12[1859] + sv12[1784];
        sv12[1908] = sv12[1866] + sv12[1794];
        sv12[1909] = sv12[1873] + sv12[1803];
        sv12[1910] = sv12[1880] + sv12[1811];
        sv12[1911] = sv12[1881] + sv12[1812];
        sv12[1912] = sv12[1882] + sv12[1813];
        sv12[1913] = sv12[1883] + sv12[1814];
        sv12[1914] = sv12[1884] + sv12[1815];
        sv12[1915] = sv12[1816] + sv12[1885];
        sv12[1916] = sv12[1886] + sv12[1817];
        sv12[1917] = sv12[1762] + sv12[1837];
        sv12[1918] = sv12[1849] + sv12[1774];
        sv12[1919] = sv12[1860] + sv12[1785];
        sv12[1920] = sv12[1867] + sv12[1795];
        sv12[1921] = sv12[1874] + sv12[1804];
        sv12[1922] = sv12[1887] + sv12[1818];
        sv12[1923] = sv12[1888] + sv12[1819];
        sv12[1924] = sv12[1889] + sv12[1820];
        sv12[1925] = sv12[1890] + sv12[1821];
        sv12[1926] = sv12[1822] + sv12[1891];
        sv12[1927] = sv12[1892] + sv12[1823];
        sv12[1928] = sv12[1763] + sv12[1838];
        sv12[1929] = sv12[1764] + sv12[1839];
        sv12[1930] = sv12[1765] + sv12[1840];
        sv12[1931] = sv12[1766] + sv12[1841];
        sv12[1932] = sv12[1767] + sv12[1842];
        sv12[1933] = sv12[1768] + sv12[1843];
        sv12[1934] = sv12[1769] + sv12[1844];
        sv12[1935] = sv12[1770] + sv12[1845];
        sv12[1936] = sv12[1771] + sv12[1846];
        sv12[1937] = sv12[1847] + sv12[1772];
        sv12[1938] = sv12[1775] + sv12[1850];
        sv12[1939] = sv12[1776] + sv12[1851];
        sv12[1940] = sv12[1777] + sv12[1852];
        sv12[1941] = sv12[1778] + sv12[1853];
        sv12[1942] = sv12[1779] + sv12[1854];
        sv12[1943] = sv12[1780] + sv12[1855];
        sv12[1944] = sv12[1781] + sv12[1856];
        sv12[1945] = sv12[1782] + sv12[1857];
        sv12[1946] = sv12[1858] + sv12[1783];
        sv12[1947] = sv12[1786] + sv12[1829];
        sv12[1948] = sv12[1787] + sv12[1825];
        sv12[1949] = sv12[1788] + sv12[1830];
        sv12[1950] = sv12[1789] + sv12[1861];
        sv12[1951] = sv12[1862] + sv12[1790];
        sv12[1952] = sv12[1791] + sv12[1863];
        sv12[1953] = sv12[1792] + sv12[1864];
        sv12[1954] = sv12[1865] + sv12[1793];
        sv12[1955] = sv12[1796] + sv12[1824];
        sv12[1956] = sv12[1797] + sv12[1826];
        sv12[1957] = sv12[1868] + sv12[1798];
        sv12[1958] = sv12[1869] + sv12[1799];
        sv12[1959] = sv12[1870] + sv12[1800];
        sv12[1960] = sv12[1801] + sv12[1871];
        sv12[1961] = sv12[1872] + sv12[1802];
        sv12[1962] = sv12[1805] + sv12[1833];
        sv12[1963] = sv12[1806] + sv12[1875];
        sv12[1964] = sv12[1876] + sv12[1807];
        sv12[1965] = sv12[1808] + sv12[1877];
        sv12[1966] = sv12[1809] + sv12[1878];
        sv12[1967] = sv12[1879] + sv12[1810];
        sv12[1968] = sv12[1893] + sv12[1824];
        sv12[1969] = sv12[1894] + sv12[1825];
        sv12[1970] = sv12[1895] + sv12[1826];
        sv12[1971] = sv12[1827] + sv12[1896];
        sv12[1972] = sv12[1897] + sv12[1828];
        sv12[1973] = sv12[1898] + sv12[1829];
        sv12[1974] = sv12[1899] + sv12[1830];
        sv12[1975] = sv12[1831] + sv12[1900];
        sv12[1976] = sv12[1901] + sv12[1832];
        sv12[1977] = sv12[1902] + sv12[1833];
        sv12[1978] = sv12[1834] + sv12[1903];
        sv12[1979] = sv12[1904] + sv12[1835];
        sv12[1980] = sv12[1905] * sv12[1009];
        sv12[1981] = sv12[1906] * sv12[1009];
        sv12[1982] = sv12[1907] * sv12[1009];
        sv12[1983] = sv12[1908] * sv12[1009];
        sv12[1984] = sv12[1909] * sv12[1009];
        sv12[1985] = sv12[1910] * sv12[1009];
        sv12[1986] = sv12[1911] * sv12[1009];
        sv12[1987] = sv12[1912] * sv12[1009];
        sv12[1988] = sv12[1913] * sv12[1009];
        sv12[1989] = sv12[1914] * sv12[1009];
        sv12[1990] = sv12[1915] * sv12[1009];
        sv12[1991] = sv12[1916] * sv12[1009];
        sv12[1992] = sv12[1917] * sv12[1009];
        sv12[1993] = sv12[1918] * sv12[1009];
        sv12[1994] = sv12[1919] * sv12[1009];
        sv12[1995] = sv12[1920] * sv12[1009];
        sv12[1996] = sv12[1921] * sv12[1009];
        sv12[1997] = sv12[1922] * sv12[1009];
        sv12[1998] = sv12[1923] * sv12[1009];
        sv12[1999] = sv12[1924] * sv12[1009];
        sv12[2000] = sv12[1925] * sv12[1009];
        sv12[2001] = sv12[1926] * sv12[1009];
        sv12[2002] = sv12[1927] * sv12[1009];
        sv12[2003] = sv12[1928] * sv12[1009];
        sv12[2004] = sv12[1929] * sv12[1009];
        sv12[2005] = sv12[1930] * sv12[1009];
        sv12[2006] = sv12[1931] * sv12[1009];
        sv12[2007] = sv12[1932] * sv12[1009];
        sv12[2008] = sv12[1933] * sv12[1009];
        sv12[2009] = sv12[1934] * sv12[1009];
        sv12[2010] = sv12[1935] * sv12[1009];
        sv12[2011] = sv12[1936] * sv12[1009];
        sv12[2012] = sv12[1937] * sv12[1009];
        sv12[2013] = sv12[1938] * sv12[1009];
        sv12[2014] = sv12[1939] * sv12[1009];
        sv12[2015] = sv12[1940] * sv12[1009];
        sv12[2016] = sv12[1941] * sv12[1009];
        sv12[2017] = sv12[1942] * sv12[1009];
        sv12[2018] = sv12[1943] * sv12[1009];
        sv12[2019] = sv12[1944] * sv12[1009];
        sv12[2020] = sv12[1945] * sv12[1009];
        sv12[2021] = sv12[1946] * sv12[1009];
        sv12[2022] = sv12[1947] * sv12[1009];
        sv12[2023] = sv12[1948] * sv12[1009];
        sv12[2024] = sv12[1949] * sv12[1009];
        sv12[2025] = sv12[1950] * sv12[1009];
        sv12[2026] = sv12[1951] * sv12[1009];
        sv12[2027] = sv12[1952] * sv12[1009];
        sv12[2028] = sv12[1953] * sv12[1009];
        sv12[2029] = sv12[1954] * sv12[1009];
        sv12[2030] = sv12[1955] * sv12[1009];
        sv12[2031] = sv12[1956] * sv12[1009];
        sv12[2032] = sv12[1957] * sv12[1009];
        sv12[2033] = sv12[1958] * sv12[1009];
        sv12[2034] = sv12[1959] * sv12[1009];
        sv12[2035] = sv12[1960] * sv12[1009];
        sv12[2036] = sv12[1961] * sv12[1009];
        sv12[2037] = sv12[1962] * sv12[1009];
        sv12[2038] = sv12[1963] * sv12[1009];
        sv12[2039] = sv12[1964] * sv12[1009];
        sv12[2040] = sv12[1965] * sv12[1009];
        sv12[2041] = sv12[1966] * sv12[1009];
        sv12[2042] = sv12[1967] * sv12[1009];
        sv12[2043] = sv12[1968] * sv12[1009];
        sv12[2044] = sv12[1969] * sv12[1009];
        sv12[2045] = sv12[1970] * sv12[1009];
        sv12[2046] = sv12[1971] * sv12[1009];
        sv12[2047] = sv12[1972] * sv12[1009];
        sv12[2048] = sv12[1973] * sv12[1009];
        sv12[2049] = sv12[1974] * sv12[1009];
        sv12[2050] = sv12[1975] * sv12[1009];
        sv12[2051] = sv12[1976] * sv12[1009];
        sv12[2052] = sv12[1977] * sv12[1009];
        sv12[2053] = sv12[1978] * sv12[1009];
        sv12[2054] = sv12[1979] * sv12[1009];
        sv12[2055] = sp[132] * sv12[1009];
        sv12[2056] = sp[133] * sv12[1009];
        sv12[2057] = sp[134] * sv12[1009];
        sv12[2058] = sv12[1751] + sv12[1980];
        sv12[2059] = sv12[1752] + sv12[1981];
        sv12[2060] = sv12[1753] + sv12[1985];
        sv12[2061] = sv12[1754] + sv12[1986];
        sv12[2062] = sv12[1755] + sv12[1992];
        sv12[2063] = sv12[1756] + sv12[1993];
        sv12[2064] = sv12[1757] + sv12[1997];
        sv12[2065] = sv12[1758] + sv12[2003];
        sv12[2066] = sv12[1759] + sv12[2004];
        sv12[2067] = sv12[1760] + sv12[2013];
        sv12[2068] = sv12[1186] * sv12[1186];
        sv12[2069] = sv12[1187] * sv12[1186];
        sv12[2070] = sv12[1187] * sv12[1187];
        sv12[2071] = sv12[2068] * sv12[1009];
        sv12[2072] = sv12[2069] * sv12[1009];
        sv12[2073] = sv12[2070] * sv12[1009];
        sv12[2074] = sv12[1409] * sv12[1416];
        sv12[2075] = sv12[1409] * sv12[1409];
        sv12[2076] = sv12[1410] * sv12[1409];
        sv12[2077] = sv12[1410] * sv12[1416];
        sv12[2078] = sv12[1410] * sv12[1410];
        sv12[2079] = sv12[1416] * sv12[1416];
        sv12[2080] = 1.92 * (1.0 / (0.5 * sv12[1413])) + 1.92 * (1.0 / (0.5 * sv12[1413]));
        sv12[2081] = sv12[1428] * sv12[2080];
        sv12[2082] = sv12[2081] + sv12[2079];
        sv12[2083] = sv12[2074] * sv12[1659];
        sv12[2084] = sv12[2077] * sv12[1659];
        sv12[2085] = sv12[2082] * sv12[1659];
        sv12[2086] = sv12[2075] * sv12[1659];
        sv12[2087] = sv12[2076] * sv12[1659];
        sv12[2088] = sv12[2078] * sv12[1659];
        sv12[2089] = sv12[1744] + sv12[2083];
        sv12[2090] = sv12[1745] + sv12[2084];
        sv12[2091] = sv12[1707] + sv12[2085];
        sv12[2092] = sv12[1731] + sv12[2071];
        sv12[2093] = sv12[1732] + sv12[2072];
        sv12[2094] = sv12[1733] + sv12[2072];
        sv12[2095] = sv12[1734] + sv12[2073];
        sv12[2096] = sv12[1746] + sv12[2086];
        sv12[2097] = sv12[1747] + sv12[2087];
        sv12[2098] = sv12[2083] + sv12[1692];
        sv12[2099] = sv12[1748] + sv12[2087];
        sv12[2100] = sv12[1749] + sv12[2088];
        sv12[2101] = sv12[2084] + sv12[1695];
        sv12[2102] = sv12[2091] + w[1][0];
        sv12[2103] = sv12[2102] + -1.0 * w[1][0];
        sv12[2104] = w2_c3 * w2_c3;
        sv12[2105] = std::sqrt(1e-8 + sv12[2104]);
        sv12[2106] = w2_c3 + sv12[2105];
        sv12[2107] = w2_c4 / (0.5 * sv12[2106]);
        sv12[2108] = w2_c3 + w2_c3;
        sv12[2109] = sv12[2108] / (2 * sv12[2105]);
        sv12[2110] = 0.5 * (1.0 + sv12[2109]) * sv12[2107];
        sv12[2111] = -1 * sv12[2110] / (0.5 * sv12[2106]);
        sv12[2112] = 1.92 * w2_c4 * sv12[2111];
        sv12[2113] = 1.92 * w2_c4 * (1.0 / (0.5 * sv12[2106]));
        sv12[2114] = sv12[2113] + 1.92 * sv12[2107];
        sv12[2115] = sv12[1704] + sv12[2112];
        sv12[2116] = sv12[2114] + sv12[2103];
        sv12[2117] = w2_c3 * (0.09 * (1.44 * sv12[24]));
        sv12[2118] = 2.0 * sv12[1269] * sv12[2117];
        sv12[2119] = 2.0 * sv12[1270] * sv12[2117];
        sv12[2120] = 2.0 * sv12[1271] * sv12[2117];
        sv12[2121] = 2.0 * sv12[1272] * sv12[2117];
        sv12[2122] = -1 * sv12[2118] + sv12[1662];
        sv12[2123] = -1 * sv12[2119] + sv12[1665];
        sv12[2124] = -1 * sv12[2120] + sv12[1674];
        sv12[2125] = -1 * sv12[2121] + sv12[1677];
        sv12[2126] = sv12[2115] + -1 * sv12[1543];
        sv12[2127] = 2.0 * sv12[1216] * sv12[1721];
        sv12[2128] = 2.0 * sv12[1216] * sv12[1722];
        sv12[2129] = sp[147] + -1 * sv12[2127];
        sv12[2130] = 2.0 * sv12[1269] * sv12[1713];
        sv12[2131] = 2.0 * sv12[1270] * sv12[1713];
        sv12[2132] = 2.0 * sv12[1271] * sv12[1713];
        sv12[2133] = 2.0 * sv12[1272] * sv12[1713];
        sv12[2134] = sp[128] + sv12[1698];
        sv12[2135] = sp[131] + sv12[1701];
        sv12[2136] = sv12[22] + sv12[2098];
        sv12[2137] = sv12[23] + sv12[2101];
        sv12[2138] = sp[170] * (2.0 * (0.0001 + sv12[41]));
        sv12[2139] = sp[171] * (2.0 * (0.0001 + sv12[41]));
        sv12[2140] = sp[172] * (2.0 * (0.0001 + sv12[41]));
        sv12[2141] = sp[173] * (2.0 * (0.0001 + sv12[41]));
        sv12[2142] = sp[174] * (2.0 * (0.0001 + sv12[41]));
        sv12[2143] = sp[175] * (2.0 * (0.0001 + sv12[41]));
        sv12[2144] = sp[176] * (2.0 * (0.0001 + sv12[41]));
        sv12[2145] = sp[177] * (2.0 * (0.0001 + sv12[41]));
        sv12[2146] = sp[178] * (2.0 * (0.0001 + sv12[41]));
        sv12[2147] = sp[179] * (2.0 * (0.0001 + sv12[41]));
        sv12[2148] = sv12[2058] + sv12[2138];
        sv12[2149] = sv12[2059] + sv12[2139];
        sv12[2150] = sv12[2060] + sv12[2140];
        sv12[2151] = sv12[2061] + sv12[2141];
        sv12[2152] = sv12[2062] + sv12[2142];
        sv12[2153] = sv12[2063] + sv12[2143];
        sv12[2154] = sv12[2064] + sv12[2144];
        sv12[2155] = sv12[2065] + sv12[2145];
        sv12[2156] = sv12[2066] + sv12[2146];
        sv12[2157] = sv12[2067] + sv12[2147];
        sv12[2158] = sv12[84] / 2 * (sp[16] / 2);
        sv12[2159] = sv12[84] / 2 * (sp[17] / 2);
        sv12[2160] = sv12[88] / 2 * (sp[6] / 2);
        sv12[2161] = sv12[88] / 2 * (sp[5] / 2);
        sv12[2162] = sv12[88] / 2 * (sp[3] / 2);
        sv12[2163] = sv12[88] / 2 * (sp[4] / 2);
        sv12[2164] = sv12[2158] + sv12[2160];
        sv12[2165] = sv12[2159] + sv12[2161];
        sv12[2166] = sv12[132] / 2 * (sp[75] / 2);
        sv12[2167] = sv12[132] / 2 * (sp[76] / 2);
        sv12[2168] = sv12[2166] + sv12[2162];
        sv12[2169] = sv12[2167] + sv12[2163];
        sv12[2170] = sv12[2164] + sv12[2160];
        sv12[2171] = sv12[2165] + sv12[2161];
        sv12[2172] = sv12[2168] + sv12[2162];
        sv12[2173] = sv12[2169] + sv12[2163];
        sv12[2174] = sv12[2170] * (2.0 * sv12[173]);
        sv12[2175] = sv12[2170] * (2.0 * sv12[174]);
        sv12[2176] = sv12[2171] * (2.0 * sv12[173]);
        sv12[2177] = sv12[2171] * (2.0 * sv12[174]);
        sv12[2178] = sv12[2172] * (2.0 * sv12[173]);
        sv12[2179] = sv12[2172] * (2.0 * sv12[174]);
        sv12[2180] = sv12[2173] * (2.0 * sv12[173]);
        sv12[2181] = sv12[2173] * (2.0 * sv12[174]);
        sv12[2182] = sv12[1130] + sv12[2174];
        sv12[2183] = sv12[1131] + sv12[2175];
        sv12[2184] = sv12[1132] + sv12[2176];
        sv12[2185] = sv12[1133] + sv12[2177];
        sv12[2186] = sv12[1140] + sv12[2178];
        sv12[2187] = sv12[1141] + sv12[2179];
        sv12[2188] = sv12[1142] + sv12[2180];
        sv12[2189] = sv12[1143] + sv12[2181];
        sv12[2190] = sv12[9] + sp[147];
        sv12[2191] = sv12[14] + sp[147];
        sv12[2192] = sv12[10] * sp[180];
        sv12[2193] = sv12[11] * sp[180];
        sv12[2194] = sv12[4] * sp[180];
        sv12[2195] = sv12[2190] * sp[180];
        sv12[2196] = sv12[2148] * sp[180];
        sv12[2197] = sv12[2149] * sp[180];
        sv12[2198] = sv12[1982] * sp[180];
        sv12[2199] = sv12[1983] * sp[180];
        sv12[2200] = sv12[1984] * sp[180];
        sv12[2201] = sv12[2150] * sp[180];
        sv12[2202] = sv12[2151] * sp[180];
        sv12[2203] = sv12[1987] * sp[180];
        sv12[2204] = sv12[1988] * sp[180];
        sv12[2205] = sv12[1989] * sp[180];
        sv12[2206] = sv12[1990] * sp[180];
        sv12[2207] = sv12[1991] * sp[180];
        sv12[2208] = sv12[1371] * sp[180];
        sv12[2209] = sv12[1372] * sp[180];
        sv12[2210] = sv12[1660] * sp[180];
        sv12[2211] = sv12[1661] * sp[180];
        sv12[2212] = sv12[2122] * sp[180];
        sv12[2213] = -1 * sv12[2130] * sp[180];
        sv12[2214] = sv12[2152] * sp[180];
        sv12[2215] = sv12[2153] * sp[180];
        sv12[2216] = sv12[1994] * sp[180];
        sv12[2217] = sv12[1995] * sp[180];
        sv12[2218] = sv12[1996] * sp[180];
        sv12[2219] = sv12[2154] * sp[180];
        sv12[2220] = sv12[1998] * sp[180];
        sv12[2221] = sv12[1999] * sp[180];
        sv12[2222] = sv12[2000] * sp[180];
        sv12[2223] = sv12[2001] * sp[180];
        sv12[2224] = sv12[2002] * sp[180];
        sv12[2225] = sv12[1373] * sp[180];
        sv12[2226] = sv12[1374] * sp[180];
        sv12[2227] = sv12[1663] * sp[180];
        sv12[2228] = sv12[1664] * sp[180];
        sv12[2229] = sv12[2123] * sp[180];
        sv12[2230] = -1 * sv12[2131] * sp[180];
        sv12[2231] = sv12[2191] * sp[180];
        sv12[2232] = sv12[1172] * sp[180];
        sv12[2233] = sv12[1173] * sp[180];
        sv12[2234] = sv12[1108] * sp[180];
        sv12[2235] = sv12[1109] * sp[180];
        sv12[2236] = sv12[1110] * sp[180];
        sv12[2237] = sv12[1174] * sp[180];
        sv12[2238] = sv12[1175] * sp[180];
        sv12[2239] = sv12[1113] * sp[180];
        sv12[2240] = sv12[1114] * sp[180];
        sv12[2241] = sv12[1115] * sp[180];
        sv12[2242] = sv12[1116] * sp[180];
        sv12[2243] = sv12[1117] * sp[180];
        sv12[2244] = sv12[1395] * sp[180];
        sv12[2245] = sv12[1396] * sp[180];
        sv12[2246] = sv12[1696] * sp[180];
        sv12[2247] = sv12[1697] * sp[180];
        sv12[2248] = sv12[2134] * sp[180];
        sv12[2249] = sv12[17] * sp[180];
        sv12[2250] = sv12[1176] * sp[180];
        sv12[2251] = sv12[1177] * sp[180];
        sv12[2252] = sv12[1120] * sp[180];
        sv12[2253] = sv12[1121] * sp[180];
        sv12[2254] = sv12[1122] * sp[180];
        sv12[2255] = sv12[1178] * sp[180];
        sv12[2256] = sv12[1179] * sp[180];
        sv12[2257] = sv12[1125] * sp[180];
        sv12[2258] = sv12[1126] * sp[180];
        sv12[2259] = sv12[1127] * sp[180];
        sv12[2260] = sv12[1128] * sp[180];
        sv12[2261] = sv12[1129] * sp[180];
        sv12[2262] = sv12[1397] * sp[180];
        sv12[2263] = sv12[1398] * sp[180];
        sv12[2264] = sv12[1699] * sp[180];
        sv12[2265] = sv12[1700] * sp[180];
        sv12[2266] = sv12[2135] * sp[180];
        sv12[2267] = sv12[2155] * sp[180];
        sv12[2268] = sv12[2156] * sp[180];
        sv12[2269] = sv12[2005] * sp[180];
        sv12[2270] = sv12[2006] * sp[180];
        sv12[2271] = sv12[2007] * sp[180];
        sv12[2272] = sv12[2008] * sp[180];
        sv12[2273] = sv12[2009] * sp[180];
        sv12[2274] = sv12[2010] * sp[180];
        sv12[2275] = sv12[2011] * sp[180];
        sv12[2276] = sv12[2012] * sp[180];
        sv12[2277] = sv12[1379] * sp[180];
        sv12[2278] = sv12[1380] * sp[180];
        sv12[2279] = sv12[1672] * sp[180];
        sv12[2280] = sv12[1673] * sp[180];
        sv12[2281] = sv12[2124] * sp[180];
        sv12[2282] = -1 * sv12[2132] * sp[180];
        sv12[2283] = sv12[2157] * sp[180];
        sv12[2284] = sv12[2014] * sp[180];
        sv12[2285] = sv12[2015] * sp[180];
        sv12[2286] = sv12[2016] * sp[180];
        sv12[2287] = sv12[2017] * sp[180];
        sv12[2288] = sv12[2018] * sp[180];
        sv12[2289] = sv12[2019] * sp[180];
        sv12[2290] = sv12[2020] * sp[180];
        sv12[2291] = sv12[2021] * sp[180];
        sv12[2292] = sv12[1381] * sp[180];
        sv12[2293] = sv12[1382] * sp[180];
        sv12[2294] = sv12[1675] * sp[180];
        sv12[2295] = sv12[1676] * sp[180];
        sv12[2296] = sv12[2125] * sp[180];
        sv12[2297] = -1 * sv12[2133] * sp[180];
        sv12[2298] = sv12[2182] * sp[180];
        sv12[2299] = sv12[2183] * sp[180];
        sv12[2300] = sv12[1036] * sp[180];
        sv12[2301] = sv12[1037] * sp[180];
        sv12[2302] = sv12[1038] * sp[180];
        sv12[2303] = sv12[1039] * sp[180];
        sv12[2304] = sv12[2184] * sp[180];
        sv12[2305] = sv12[2185] * sp[180];
        sv12[2306] = sv12[1042] * sp[180];
        sv12[2307] = sv12[1043] * sp[180];
        sv12[2308] = sv12[1044] * sp[180];
        sv12[2309] = sv12[1045] * sp[180];
        sv12[2310] = sv12[1134] * sp[180];
        sv12[2311] = sv12[1135] * sp[180];
        sv12[2312] = sv12[1048] * sp[180];
        sv12[2313] = sv12[1049] * sp[180];
        sv12[2314] = sv12[1050] * sp[180];
        sv12[2315] = sv12[1051] * sp[180];
        sv12[2316] = sv12[2022] * sp[180];
        sv12[2317] = sv12[2023] * sp[180];
        sv12[2318] = sv12[2024] * sp[180];
        sv12[2319] = sv12[2025] * sp[180];
        sv12[2320] = sv12[2026] * sp[180];
        sv12[2321] = sv12[2027] * sp[180];
        sv12[2322] = sv12[2028] * sp[180];
        sv12[2323] = sv12[2029] * sp[180];
        sv12[2324] = sv12[1136] * sp[180];
        sv12[2325] = sv12[1137] * sp[180];
        sv12[2326] = sv12[1054] * sp[180];
        sv12[2327] = sv12[1055] * sp[180];
        sv12[2328] = sv12[1056] * sp[180];
        sv12[2329] = sv12[1057] * sp[180];
        sv12[2330] = sv12[2030] * sp[180];
        sv12[2331] = sv12[2031] * sp[180];
        sv12[2332] = sv12[2032] * sp[180];
        sv12[2333] = sv12[2033] * sp[180];
        sv12[2334] = sv12[2034] * sp[180];
        sv12[2335] = sv12[2035] * sp[180];
        sv12[2336] = sv12[2036] * sp[180];
        sv12[2337] = sv12[1138] * sp[180];
        sv12[2338] = sv12[1139] * sp[180];
        sv12[2339] = sv12[1060] * sp[180];
        sv12[2340] = sv12[1061] * sp[180];
        sv12[2341] = sv12[1062] * sp[180];
        sv12[2342] = sv12[1063] * sp[180];
        sv12[2343] = sv12[2037] * sp[180];
        sv12[2344] = sv12[2038] * sp[180];
        sv12[2345] = sv12[2039] * sp[180];
        sv12[2346] = sv12[2040] * sp[180];
        sv12[2347] = sv12[2041] * sp[180];
        sv12[2348] = sv12[2042] * sp[180];
        sv12[2349] = sv12[2186] * sp[180];
        sv12[2350] = sv12[2187] * sp[180];
        sv12[2351] = sv12[1066] * sp[180];
        sv12[2352] = sv12[1067] * sp[180];
        sv12[2353] = sv12[1068] * sp[180];
        sv12[2354] = sv12[1069] * sp[180];
        sv12[2355] = sv12[2188] * sp[180];
        sv12[2356] = sv12[2189] * sp[180];
        sv12[2357] = sv12[1072] * sp[180];
        sv12[2358] = sv12[1073] * sp[180];
        sv12[2359] = sv12[1074] * sp[180];
        sv12[2360] = sv12[1075] * sp[180];
        sv12[2361] = sv12[1144] * sp[180];
        sv12[2362] = sv12[1145] * sp[180];
        sv12[2363] = sv12[1078] * sp[180];
        sv12[2364] = sv12[1079] * sp[180];
        sv12[2365] = sv12[1080] * sp[180];
        sv12[2366] = sv12[1081] * sp[180];
        sv12[2367] = sv12[2043] * sp[180];
        sv12[2368] = sv12[2044] * sp[180];
        sv12[2369] = sv12[2045] * sp[180];
        sv12[2370] = sv12[2046] * sp[180];
        sv12[2371] = sv12[2047] * sp[180];
        sv12[2372] = sv12[1146] * sp[180];
        sv12[2373] = sv12[1147] * sp[180];
        sv12[2374] = sv12[1084] * sp[180];
        sv12[2375] = sv12[1085] * sp[180];
        sv12[2376] = sv12[1086] * sp[180];
        sv12[2377] = sv12[1087] * sp[180];
        sv12[2378] = sv12[2048] * sp[180];
        sv12[2379] = sv12[2049] * sp[180];
        sv12[2380] = sv12[2050] * sp[180];
        sv12[2381] = sv12[2051] * sp[180];
        sv12[2382] = sv12[1148] * sp[180];
        sv12[2383] = sv12[1149] * sp[180];
        sv12[2384] = sv12[1090] * sp[180];
        sv12[2385] = sv12[1091] * sp[180];
        sv12[2386] = sv12[1092] * sp[180];
        sv12[2387] = sv12[1093] * sp[180];
        sv12[2388] = sv12[2052] * sp[180];
        sv12[2389] = sv12[2053] * sp[180];
        sv12[2390] = sv12[2054] * sp[180];
        sv12[2391] = sv12[1150] * sp[180];
        sv12[2392] = sv12[1151] * sp[180];
        sv12[2393] = sv12[1096] * sp[180];
        sv12[2394] = sv12[1097] * sp[180];
        sv12[2395] = sv12[1098] * sp[180];
        sv12[2396] = sv12[1099] * sp[180];
        sv12[2397] = sv12[2055] * sp[180];
        sv12[2398] = sv12[2056] * sp[180];
        sv12[2399] = sv12[1152] * sp[180];
        sv12[2400] = sv12[1153] * sp[180];
        sv12[2401] = sv12[1102] * sp[180];
        sv12[2402] = sv12[1103] * sp[180];
        sv12[2403] = sv12[1104] * sp[180];
        sv12[2404] = sv12[1105] * sp[180];
        sv12[2405] = sv12[2057] * sp[180];
        sv12[2406] = sv12[1727] * sp[180];
        sv12[2407] = sv12[1728] * sp[180];
        sv12[2408] = sv12[1742] * sp[180];
        sv12[2409] = sv12[1743] * sp[180];
        sv12[2410] = sv12[2126] * sp[180];
        sv12[2411] = sv12[2129] * sp[180];
        sv12[2412] = sv12[1729] * sp[180];
        sv12[2413] = sv12[1730] * sp[180];
        sv12[2414] = sv12[2089] * sp[180];
        sv12[2415] = sv12[2090] * sp[180];
        sv12[2416] = sv12[2116] * sp[180];
        sv12[2417] = (1.0 + -1 * sv12[2128]) * sp[180];
        sv12[2418] = sv12[2092] * sp[180];
        sv12[2419] = sv12[2093] * sp[180];
        sv12[2420] = sv12[1684] * sp[180];
        sv12[2421] = sv12[1685] * sp[180];
        sv12[2422] = sv12[1686] * sp[180];
        sv12[2423] = sv12[22] * sp[180];
        sv12[2424] = sv12[2094] * sp[180];
        sv12[2425] = sv12[2095] * sp[180];
        sv12[2426] = sv12[1687] * sp[180];
        sv12[2427] = sv12[1688] * sp[180];
        sv12[2428] = sv12[1689] * sp[180];
        sv12[2429] = sv12[23] * sp[180];
        sv12[2430] = sv12[1391] * sp[180];
        sv12[2431] = sv12[1392] * sp[180];
        sv12[2432] = sv12[2096] * sp[180];
        sv12[2433] = sv12[2097] * sp[180];
        sv12[2434] = sv12[2136] * sp[180];
        sv12[2435] = sv12[1393] * sp[180];
        sv12[2436] = sv12[1394] * sp[180];
        sv12[2437] = sv12[2099] * sp[180];
        sv12[2438] = sv12[2100] * sp[180];
        sv12[2439] = sv12[2137] * sp[180];
        const double fw0 = sv12[2195] * weights12[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF0[i][j] += TF0[i] * FE96_C0_Q12[0][iq][j];
        const double fw1 = sv12[2193] * weights12[iq];
        alignas(32) double TF1[6];
        for (int i = 0; i < 6; ++i)
            TF1[i] = fw1 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF1[i][j] += TF1[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw2 = sv12[2192] * weights12[iq];
        alignas(32) double TF2[6];
        for (int i = 0; i < 6; ++i)
            TF2[i] = fw2 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF2[i][j] += TF2[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw3 = sv12[2194] * weights12[iq];
        alignas(32) double TF3[6];
        for (int i = 0; i < 6; ++i)
            TF3[i] = fw3 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF3[i][j] += TF3[i] * FE96_C0_Q12[0][iq][j];
        const double fw4 = sv12[2256] * weights12[iq];
        alignas(32) double TF4[5];
        for (int i = 0; i < 5; ++i)
            TF4[i] = fw4 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF4[i][j] += TF4[i] * FE96_C0_Q12[0][iq][j];
        const double fw5 = sv12[2219] * weights12[iq];
        alignas(32) double TF5[5];
        for (int i = 0; i < 5; ++i)
            TF5[i] = fw5 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF5[i][j] += TF5[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw6 = sv12[2222] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP0[i] += fw6 * FE96_C0_D10_Q12[0][iq][i];
        const double fw7 = sv12[2202] * weights12[iq];
        alignas(32) double TF6[5];
        for (int i = 0; i < 5; ++i)
            TF6[i] = fw7 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF6[i][j] += TF6[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw8 = sv12[2221] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP1[i] += fw8 * FE96_C0_D10_Q12[0][iq][i];
        const double fw9 = sv12[2220] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP2[i] += fw9 * FE96_C0_D10_Q12[0][iq][i];
        const double fw10 = sv12[2238] * weights12[iq];
        alignas(32) double TF7[5];
        for (int i = 0; i < 5; ++i)
            TF7[i] = fw10 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF7[i][j] += TF7[i] * FE96_C0_Q12[0][iq][j];
        const double fw11 = sv12[2215] * weights12[iq];
        alignas(32) double TF8[5];
        for (int i = 0; i < 5; ++i)
            TF8[i] = fw11 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF8[i][j] += TF8[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw12 = sv12[2218] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP3[i] += fw12 * FE96_C0_D10_Q12[0][iq][i];
        const double fw13 = sv12[2214] * weights12[iq];
        alignas(32) double TF9[5];
        for (int i = 0; i < 5; ++i)
            TF9[i] = fw13 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF9[i][j] += TF9[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw14 = sv12[2216] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP4[i] += fw14 * FE96_C0_D10_Q12[0][iq][i];
        const double fw15 = sv12[2217] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP5[i] += fw15 * FE96_C0_D10_Q12[0][iq][i];
        const double fw16 = sv12[2224] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP6[i] += fw16 * FE96_C0_D10_Q12[0][iq][i];
        const double fw17 = sv12[2223] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP7[i] += fw17 * FE96_C0_D10_Q12[0][iq][i];
        const double fw18 = sv12[2358] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP8[i] += fw18 * FE96_C0_D10_Q12[0][iq][i];
        const double fw19 = sv12[2355] * weights12[iq];
        alignas(32) double TF10[5];
        for (int i = 0; i < 5; ++i)
            TF10[i] = fw19 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF10[i][j] += TF10[i] * FE3_C0_Q12[0][iq][j];
        const double fw20 = sv12[2357] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP9[i] += fw20 * FE96_C0_D10_Q12[0][iq][i];
        const double fw21 = sv12[2360] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP10[i] += fw21 * FE96_C0_D10_Q12[0][iq][i];
        const double fw22 = sv12[2356] * weights12[iq];
        alignas(32) double TF11[5];
        for (int i = 0; i < 5; ++i)
            TF11[i] = fw22 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF11[i][j] += TF11[i] * FE3_C0_Q12[0][iq][j];
        const double fw23 = sv12[2359] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP11[i] += fw23 * FE96_C0_D10_Q12[0][iq][i];
        const double fw24 = sv12[2259] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP12[j] += fw24 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP13[j] += fw6 * FE96_C0_D10_Q12[0][iq][j];
        const double fw25 = sv12[2388] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP14[j] += fw25 * FE96_C0_D02_Q12[0][0][j];
        const double fw26 = sv12[2205] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP15[j] += fw26 * FE96_C0_D01_Q12[0][iq][j];
        const double fw27 = sv12[2379] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP16[j] += fw27 * FE96_C0_D02_Q12[0][0][j];
        const double fw28 = sv12[2369] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP17[j] += fw28 * FE96_C0_D11_Q12[0][0][j];
        const double fw29 = sv12[2241] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP18[j] += fw29 * FE96_C0_Q12[0][iq][j];
        const double fw30 = sv12[2289] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP19[j] += fw30 * FE96_C0_D10_Q12[0][iq][j];
        const double fw31 = sv12[2346] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP20[j] += fw31 * FE96_C0_D02_Q12[0][0][j];
        const double fw32 = sv12[2274] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP21[j] += fw32 * FE96_C0_D01_Q12[0][iq][j];
        const double fw33 = sv12[2321] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP22[j] += fw33 * FE96_C0_D02_Q12[0][0][j];
        const double fw34 = sv12[2334] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP23[j] += fw34 * FE96_C0_D11_Q12[0][0][j];
        const double fw35 = sv12[2390] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP24[j] += fw35 * FE3_C0_D01_Q12[0][0][j];
        const double fw36 = sv12[2389] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP25[j] += fw36 * FE3_C0_D01_Q12[0][0][j];
        const double fw37 = sv12[2385] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP26[j] += fw37 * FE3_C0_D01_Q12[0][0][j];
        const double fw38 = sv12[2382] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP27[j] += fw38 * FE3_C0_Q12[0][iq][j];
        const double fw39 = sv12[2384] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP28[j] += fw39 * FE3_C0_D01_Q12[0][0][j];
        const double fw40 = sv12[2387] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP29[j] += fw40 * FE3_C0_D01_Q12[0][0][j];
        const double fw41 = sv12[2383] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP30[j] += fw41 * FE3_C0_Q12[0][iq][j];
        const double fw42 = sv12[2386] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP31[j] += fw42 * FE3_C0_D01_Q12[0][0][j];
        const double fw43 = sv12[2255] * weights12[iq];
        alignas(32) double TF12[5];
        for (int i = 0; i < 5; ++i)
            TF12[i] = fw43 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF12[i][j] += TF12[i] * FE96_C0_Q12[0][iq][j];
        alignas(32) double TF13[5];
        for (int i = 0; i < 5; ++i)
            TF13[i] = fw7 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF13[i][j] += TF13[i] * FE96_C0_D10_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP32[i] += fw26 * FE96_C0_D01_Q12[0][iq][i];
        const double fw44 = sv12[2201] * weights12[iq];
        alignas(32) double TF14[5];
        for (int i = 0; i < 5; ++i)
            TF14[i] = fw44 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF14[i][j] += TF14[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw45 = sv12[2204] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP33[i] += fw45 * FE96_C0_D01_Q12[0][iq][i];
        const double fw46 = sv12[2203] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP34[i] += fw46 * FE96_C0_D01_Q12[0][iq][i];
        const double fw47 = sv12[2237] * weights12[iq];
        alignas(32) double TF15[5];
        for (int i = 0; i < 5; ++i)
            TF15[i] = fw47 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF15[i][j] += TF15[i] * FE96_C0_Q12[0][iq][j];
        const double fw48 = sv12[2197] * weights12[iq];
        alignas(32) double TF16[5];
        for (int i = 0; i < 5; ++i)
            TF16[i] = fw48 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF16[i][j] += TF16[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw49 = sv12[2200] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP35[i] += fw49 * FE96_C0_D01_Q12[0][iq][i];
        const double fw50 = sv12[2196] * weights12[iq];
        alignas(32) double TF17[5];
        for (int i = 0; i < 5; ++i)
            TF17[i] = fw50 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF17[i][j] += TF17[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw51 = sv12[2198] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP36[i] += fw51 * FE96_C0_D01_Q12[0][iq][i];
        const double fw52 = sv12[2199] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP37[i] += fw52 * FE96_C0_D01_Q12[0][iq][i];
        const double fw53 = sv12[2207] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP38[i] += fw53 * FE96_C0_D01_Q12[0][iq][i];
        const double fw54 = sv12[2206] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP39[i] += fw54 * FE96_C0_D01_Q12[0][iq][i];
        const double fw55 = sv12[2352] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP40[i] += fw55 * FE96_C0_D01_Q12[0][iq][i];
        const double fw56 = sv12[2349] * weights12[iq];
        alignas(32) double TF18[5];
        for (int i = 0; i < 5; ++i)
            TF18[i] = fw56 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF18[i][j] += TF18[i] * FE3_C0_Q12[0][iq][j];
        const double fw57 = sv12[2351] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP41[i] += fw57 * FE96_C0_D01_Q12[0][iq][i];
        const double fw58 = sv12[2354] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP42[i] += fw58 * FE96_C0_D01_Q12[0][iq][i];
        const double fw59 = sv12[2350] * weights12[iq];
        alignas(32) double TF19[5];
        for (int i = 0; i < 5; ++i)
            TF19[i] = fw59 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF19[i][j] += TF19[i] * FE3_C0_Q12[0][iq][j];
        const double fw60 = sv12[2353] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP43[i] += fw60 * FE96_C0_D01_Q12[0][iq][i];
        const double fw61 = sv12[2258] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP44[j] += fw61 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP45[j] += fw8 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP46[j] += fw45 * FE96_C0_D01_Q12[0][iq][j];
        const double fw62 = sv12[2378] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP47[j] += fw62 * FE96_C0_D02_Q12[0][0][j];
        const double fw63 = sv12[2368] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP48[j] += fw63 * FE96_C0_D11_Q12[0][0][j];
        const double fw64 = sv12[2240] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP49[j] += fw64 * FE96_C0_Q12[0][iq][j];
        const double fw65 = sv12[2288] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP50[j] += fw65 * FE96_C0_D10_Q12[0][iq][j];
        const double fw66 = sv12[2345] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP51[j] += fw66 * FE96_C0_D02_Q12[0][0][j];
        const double fw67 = sv12[2273] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP52[j] += fw67 * FE96_C0_D01_Q12[0][iq][j];
        const double fw68 = sv12[2320] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP53[j] += fw68 * FE96_C0_D02_Q12[0][0][j];
        const double fw69 = sv12[2333] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP54[j] += fw69 * FE96_C0_D11_Q12[0][0][j];
        const double fw70 = sv12[2381] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP55[j] += fw70 * FE3_C0_D01_Q12[0][0][j];
        const double fw71 = sv12[2380] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP56[j] += fw71 * FE3_C0_D01_Q12[0][0][j];
        const double fw72 = sv12[2375] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP57[j] += fw72 * FE3_C0_D01_Q12[0][0][j];
        const double fw73 = sv12[2372] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP58[j] += fw73 * FE3_C0_Q12[0][iq][j];
        const double fw74 = sv12[2374] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP59[j] += fw74 * FE3_C0_D01_Q12[0][0][j];
        const double fw75 = sv12[2377] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP60[j] += fw75 * FE3_C0_D01_Q12[0][0][j];
        const double fw76 = sv12[2373] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP61[j] += fw76 * FE3_C0_Q12[0][iq][j];
        const double fw77 = sv12[2376] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP62[j] += fw77 * FE3_C0_D01_Q12[0][0][j];
        const double fw78 = sv12[2257] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP63[j] += fw78 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP64[j] += fw9 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP65[j] += fw28 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP66[j] += fw46 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP67[j] += fw63 * FE96_C0_D02_Q12[0][0][j];
        const double fw79 = sv12[2367] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP68[j] += fw79 * FE96_C0_D11_Q12[0][0][j];
        const double fw80 = sv12[2239] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP69[j] += fw80 * FE96_C0_Q12[0][iq][j];
        const double fw81 = sv12[2287] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP70[j] += fw81 * FE96_C0_D10_Q12[0][iq][j];
        const double fw82 = sv12[2344] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP71[j] += fw82 * FE96_C0_D02_Q12[0][0][j];
        const double fw83 = sv12[2272] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP72[j] += fw83 * FE96_C0_D01_Q12[0][iq][j];
        const double fw84 = sv12[2319] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP73[j] += fw84 * FE96_C0_D02_Q12[0][0][j];
        const double fw85 = sv12[2332] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP74[j] += fw85 * FE96_C0_D11_Q12[0][0][j];
        const double fw86 = sv12[2371] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP75[j] += fw86 * FE3_C0_D01_Q12[0][0][j];
        const double fw87 = sv12[2370] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP76[j] += fw87 * FE3_C0_D01_Q12[0][0][j];
        const double fw88 = sv12[2364] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP77[j] += fw88 * FE3_C0_D01_Q12[0][0][j];
        const double fw89 = sv12[2361] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP78[j] += fw89 * FE3_C0_Q12[0][iq][j];
        const double fw90 = sv12[2363] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP79[j] += fw90 * FE3_C0_D01_Q12[0][0][j];
        const double fw91 = sv12[2366] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP80[j] += fw91 * FE3_C0_D01_Q12[0][0][j];
        const double fw92 = sv12[2362] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP81[j] += fw92 * FE3_C0_Q12[0][iq][j];
        const double fw93 = sv12[2365] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP82[j] += fw93 * FE3_C0_D01_Q12[0][0][j];
        const double fw94 = sv12[2249] * weights12[iq];
        alignas(32) double TF20[6];
        for (int i = 0; i < 6; ++i)
            TF20[i] = fw94 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF20[i][j] += TF20[i] * FE96_C0_Q12[0][iq][j];
        const double fw95 = sv12[2231] * weights12[iq];
        alignas(32) double TF21[6];
        for (int i = 0; i < 6; ++i)
            TF21[i] = fw95 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF21[i][j] += TF21[i] * FE96_C0_Q12[0][iq][j];
        const double fw96 = sv12[2251] * weights12[iq];
        alignas(32) double TF22[5];
        for (int i = 0; i < 5; ++i)
            TF22[i] = fw96 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF22[i][j] += TF22[i] * FE96_C0_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP83[i] += fw30 * FE96_C0_D10_Q12[0][iq][i];
        alignas(32) double TF23[5];
        for (int i = 0; i < 5; ++i)
            TF23[i] = fw48 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF23[i][j] += TF23[i] * FE96_C0_D01_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP84[i] += fw65 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            TP85[i] += fw81 * FE96_C0_D10_Q12[0][iq][i];
        const double fw97 = sv12[2233] * weights12[iq];
        alignas(32) double TF24[5];
        for (int i = 0; i < 5; ++i)
            TF24[i] = fw97 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF24[i][j] += TF24[i] * FE96_C0_Q12[0][iq][j];
        const double fw98 = sv12[2283] * weights12[iq];
        alignas(32) double TF25[5];
        for (int i = 0; i < 5; ++i)
            TF25[i] = fw98 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF25[i][j] += TF25[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw99 = sv12[2286] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP86[i] += fw99 * FE96_C0_D10_Q12[0][iq][i];
        const double fw100 = sv12[2268] * weights12[iq];
        alignas(32) double TF26[5];
        for (int i = 0; i < 5; ++i)
            TF26[i] = fw100 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF26[i][j] += TF26[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw101 = sv12[2284] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP87[i] += fw101 * FE96_C0_D10_Q12[0][iq][i];
        const double fw102 = sv12[2285] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP88[i] += fw102 * FE96_C0_D10_Q12[0][iq][i];
        const double fw103 = sv12[2291] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP89[i] += fw103 * FE96_C0_D10_Q12[0][iq][i];
        const double fw104 = sv12[2290] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP90[i] += fw104 * FE96_C0_D10_Q12[0][iq][i];
        const double fw105 = sv12[2307] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP91[i] += fw105 * FE96_C0_D10_Q12[0][iq][i];
        const double fw106 = sv12[2304] * weights12[iq];
        alignas(32) double TF27[5];
        for (int i = 0; i < 5; ++i)
            TF27[i] = fw106 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF27[i][j] += TF27[i] * FE3_C0_Q12[0][iq][j];
        const double fw107 = sv12[2306] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP92[i] += fw107 * FE96_C0_D10_Q12[0][iq][i];
        const double fw108 = sv12[2309] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP93[i] += fw108 * FE96_C0_D10_Q12[0][iq][i];
        const double fw109 = sv12[2305] * weights12[iq];
        alignas(32) double TF28[5];
        for (int i = 0; i < 5; ++i)
            TF28[i] = fw109 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF28[i][j] += TF28[i] * FE3_C0_Q12[0][iq][j];
        const double fw110 = sv12[2308] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP94[i] += fw110 * FE96_C0_D10_Q12[0][iq][i];
        const double fw111 = sv12[2254] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP95[j] += fw111 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP96[j] += fw12 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP97[j] += fw49 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 4; ++j)
            TP98[j] += fw82 * FE96_C0_D11_Q12[0][0][j];
        const double fw112 = sv12[2236] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP99[j] += fw112 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP100[j] += fw99 * FE96_C0_D10_Q12[0][iq][j];
        const double fw113 = sv12[2343] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP101[j] += fw113 * FE96_C0_D02_Q12[0][0][j];
        const double fw114 = sv12[2271] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP102[j] += fw114 * FE96_C0_D01_Q12[0][iq][j];
        const double fw115 = sv12[2318] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP103[j] += fw115 * FE96_C0_D02_Q12[0][0][j];
        const double fw116 = sv12[2331] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP104[j] += fw116 * FE96_C0_D11_Q12[0][0][j];
        const double fw117 = sv12[2348] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP105[j] += fw117 * FE3_C0_D01_Q12[0][0][j];
        const double fw118 = sv12[2347] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP106[j] += fw118 * FE3_C0_D01_Q12[0][0][j];
        const double fw119 = sv12[2340] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP107[j] += fw119 * FE3_C0_D01_Q12[0][0][j];
        const double fw120 = sv12[2337] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP108[j] += fw120 * FE3_C0_Q12[0][iq][j];
        const double fw121 = sv12[2339] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP109[j] += fw121 * FE3_C0_D01_Q12[0][0][j];
        const double fw122 = sv12[2342] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP110[j] += fw122 * FE3_C0_D01_Q12[0][0][j];
        const double fw123 = sv12[2338] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP111[j] += fw123 * FE3_C0_Q12[0][iq][j];
        const double fw124 = sv12[2341] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP112[j] += fw124 * FE3_C0_D01_Q12[0][0][j];
        const double fw125 = sv12[2250] * weights12[iq];
        alignas(32) double TF29[5];
        for (int i = 0; i < 5; ++i)
            TF29[i] = fw125 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF29[i][j] += TF29[i] * FE96_C0_Q12[0][iq][j];
        alignas(32) double TF30[5];
        for (int i = 0; i < 5; ++i)
            TF30[i] = fw13 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF30[i][j] += TF30[i] * FE96_C0_D10_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP113[i] += fw32 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            TP114[i] += fw67 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            TP115[i] += fw83 * FE96_C0_D01_Q12[0][iq][i];
        const double fw126 = sv12[2232] * weights12[iq];
        alignas(32) double TF31[5];
        for (int i = 0; i < 5; ++i)
            TF31[i] = fw126 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF31[i][j] += TF31[i] * FE96_C0_Q12[0][iq][j];
        alignas(32) double TF32[5];
        for (int i = 0; i < 5; ++i)
            TF32[i] = fw100 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF32[i][j] += TF32[i] * FE96_C0_D10_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP116[i] += fw114 * FE96_C0_D01_Q12[0][iq][i];
        const double fw127 = sv12[2267] * weights12[iq];
        alignas(32) double TF33[5];
        for (int i = 0; i < 5; ++i)
            TF33[i] = fw127 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF33[i][j] += TF33[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw128 = sv12[2269] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP117[i] += fw128 * FE96_C0_D01_Q12[0][iq][i];
        const double fw129 = sv12[2270] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP118[i] += fw129 * FE96_C0_D01_Q12[0][iq][i];
        const double fw130 = sv12[2276] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP119[i] += fw130 * FE96_C0_D01_Q12[0][iq][i];
        const double fw131 = sv12[2275] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP120[i] += fw131 * FE96_C0_D01_Q12[0][iq][i];
        const double fw132 = sv12[2301] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP121[i] += fw132 * FE96_C0_D01_Q12[0][iq][i];
        const double fw133 = sv12[2298] * weights12[iq];
        alignas(32) double TF34[5];
        for (int i = 0; i < 5; ++i)
            TF34[i] = fw133 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF34[i][j] += TF34[i] * FE3_C0_Q12[0][iq][j];
        const double fw134 = sv12[2300] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP122[i] += fw134 * FE96_C0_D01_Q12[0][iq][i];
        const double fw135 = sv12[2303] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP123[i] += fw135 * FE96_C0_D01_Q12[0][iq][i];
        const double fw136 = sv12[2299] * weights12[iq];
        alignas(32) double TF35[5];
        for (int i = 0; i < 5; ++i)
            TF35[i] = fw136 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF35[i][j] += TF35[i] * FE3_C0_Q12[0][iq][j];
        const double fw137 = sv12[2302] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP124[i] += fw137 * FE96_C0_D01_Q12[0][iq][i];
        const double fw138 = sv12[2252] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP125[j] += fw138 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP126[j] += fw14 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP127[j] += fw51 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 4; ++j)
            TP128[j] += fw84 * FE96_C0_D11_Q12[0][0][j];
        const double fw139 = sv12[2234] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP129[j] += fw139 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP130[j] += fw101 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP131[j] += fw128 * FE96_C0_D01_Q12[0][iq][j];
        const double fw140 = sv12[2316] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP132[j] += fw140 * FE96_C0_D02_Q12[0][0][j];
        const double fw141 = sv12[2317] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP133[j] += fw141 * FE96_C0_D11_Q12[0][0][j];
        const double fw142 = sv12[2323] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP134[j] += fw142 * FE3_C0_D01_Q12[0][0][j];
        const double fw143 = sv12[2322] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP135[j] += fw143 * FE3_C0_D01_Q12[0][0][j];
        const double fw144 = sv12[2313] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP136[j] += fw144 * FE3_C0_D01_Q12[0][0][j];
        const double fw145 = sv12[2310] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP137[j] += fw145 * FE3_C0_Q12[0][iq][j];
        const double fw146 = sv12[2312] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP138[j] += fw146 * FE3_C0_D01_Q12[0][0][j];
        const double fw147 = sv12[2315] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP139[j] += fw147 * FE3_C0_D01_Q12[0][0][j];
        const double fw148 = sv12[2311] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP140[j] += fw148 * FE3_C0_Q12[0][iq][j];
        const double fw149 = sv12[2314] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP141[j] += fw149 * FE3_C0_D01_Q12[0][0][j];
        const double fw150 = sv12[2253] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP142[j] += fw150 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP143[j] += fw15 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP144[j] += fw34 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP145[j] += fw52 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP146[j] += fw69 * FE96_C0_D02_Q12[0][0][j];
        const double fw151 = sv12[2235] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP147[j] += fw151 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP148[j] += fw102 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP149[j] += fw116 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP150[j] += fw129 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP151[j] += fw141 * FE96_C0_D02_Q12[0][0][j];
        const double fw152 = sv12[2330] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP152[j] += fw152 * FE96_C0_D11_Q12[0][0][j];
        const double fw153 = sv12[2336] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP153[j] += fw153 * FE3_C0_D01_Q12[0][0][j];
        const double fw154 = sv12[2335] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP154[j] += fw154 * FE3_C0_D01_Q12[0][0][j];
        const double fw155 = sv12[2327] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP155[j] += fw155 * FE3_C0_D01_Q12[0][0][j];
        const double fw156 = sv12[2324] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP156[j] += fw156 * FE3_C0_Q12[0][iq][j];
        const double fw157 = sv12[2326] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP157[j] += fw157 * FE3_C0_D01_Q12[0][0][j];
        const double fw158 = sv12[2329] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP158[j] += fw158 * FE3_C0_D01_Q12[0][0][j];
        const double fw159 = sv12[2325] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP159[j] += fw159 * FE3_C0_Q12[0][iq][j];
        const double fw160 = sv12[2328] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP160[j] += fw160 * FE3_C0_D01_Q12[0][0][j];
        const double fw161 = sv12[2261] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP161[j] += fw161 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP162[j] += fw16 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP163[j] += fw35 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP164[j] += fw53 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP165[j] += fw70 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP166[j] += fw86 * FE96_C0_D11_Q12[0][0][j];
        const double fw162 = sv12[2243] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP167[j] += fw162 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP168[j] += fw103 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP169[j] += fw117 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP170[j] += fw130 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP171[j] += fw142 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP172[j] += fw153 * FE96_C0_D11_Q12[0][0][j];
        const double fw163 = sv12[2405] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP173[j] += fw163 * FE3_C0_D01_Q12[0][0][j];
        const double fw164 = sv12[2398] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP174[j] += fw164 * FE3_C0_D01_Q12[0][0][j];
        const double fw165 = sv12[2402] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP175[j] += fw165 * FE3_C0_D01_Q12[0][0][j];
        const double fw166 = sv12[2399] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP176[j] += fw166 * FE3_C0_Q12[0][iq][j];
        const double fw167 = sv12[2401] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP177[j] += fw167 * FE3_C0_D01_Q12[0][0][j];
        const double fw168 = sv12[2404] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP178[j] += fw168 * FE3_C0_D01_Q12[0][0][j];
        const double fw169 = sv12[2400] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP179[j] += fw169 * FE3_C0_Q12[0][iq][j];
        const double fw170 = sv12[2403] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP180[j] += fw170 * FE3_C0_D01_Q12[0][0][j];
        const double fw171 = sv12[2260] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP181[j] += fw171 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP182[j] += fw17 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP183[j] += fw36 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP184[j] += fw54 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP185[j] += fw71 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP186[j] += fw87 * FE96_C0_D11_Q12[0][0][j];
        const double fw172 = sv12[2242] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP187[j] += fw172 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP188[j] += fw104 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP189[j] += fw118 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP190[j] += fw131 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP191[j] += fw143 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP192[j] += fw154 * FE96_C0_D11_Q12[0][0][j];
        const double fw173 = sv12[2397] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP193[j] += fw173 * FE3_C0_D01_Q12[0][0][j];
        const double fw174 = sv12[2394] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP194[j] += fw174 * FE3_C0_D01_Q12[0][0][j];
        const double fw175 = sv12[2391] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP195[j] += fw175 * FE3_C0_Q12[0][iq][j];
        const double fw176 = sv12[2393] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP196[j] += fw176 * FE3_C0_D01_Q12[0][0][j];
        const double fw177 = sv12[2396] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP197[j] += fw177 * FE3_C0_D01_Q12[0][0][j];
        const double fw178 = sv12[2392] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP198[j] += fw178 * FE3_C0_Q12[0][iq][j];
        const double fw179 = sv12[2395] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP199[j] += fw179 * FE3_C0_D01_Q12[0][0][j];
        const double fw180 = sv12[2263] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP200[j] += fw180 * FE96_C0_Q12[0][iq][j];
        const double fw181 = sv12[2226] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP201[j] += fw181 * FE96_C0_D10_Q12[0][iq][j];
        const double fw182 = sv12[2209] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP202[j] += fw182 * FE96_C0_D01_Q12[0][iq][j];
        const double fw183 = sv12[2245] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP203[j] += fw183 * FE96_C0_Q12[0][iq][j];
        const double fw184 = sv12[2293] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP204[j] += fw184 * FE96_C0_D10_Q12[0][iq][j];
        const double fw185 = sv12[2278] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP205[j] += fw185 * FE96_C0_D01_Q12[0][iq][j];
        const double fw186 = sv12[2425] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP206[j] += fw186 * FE3_C0_D01_Q12[0][0][j];
        const double fw187 = sv12[2407] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP207[j] += fw187 * FE3_C0_Q12[0][iq][j];
        const double fw188 = sv12[2419] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP208[j] += fw188 * FE3_C0_D01_Q12[0][0][j];
        const double fw189 = sv12[2436] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP209[j] += fw189 * FE3_C0_D01_Q12[0][0][j];
        const double fw190 = sv12[2413] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP210[j] += fw190 * FE3_C0_Q12[0][iq][j];
        const double fw191 = sv12[2431] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP211[j] += fw191 * FE3_C0_D01_Q12[0][0][j];
        const double fw192 = sv12[2230] * weights12[iq];
        alignas(32) double TF36[3];
        for (int i = 0; i < 3; ++i)
            TF36[i] = fw192 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF36[i][j] += TF36[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw193 = sv12[2213] * weights12[iq];
        alignas(32) double TF37[3];
        for (int i = 0; i < 3; ++i)
            TF37[i] = fw193 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF37[i][j] += TF37[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw194 = sv12[2297] * weights12[iq];
        alignas(32) double TF38[3];
        for (int i = 0; i < 3; ++i)
            TF38[i] = fw194 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF38[i][j] += TF38[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw195 = sv12[2282] * weights12[iq];
        alignas(32) double TF39[3];
        for (int i = 0; i < 3; ++i)
            TF39[i] = fw195 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF39[i][j] += TF39[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw196 = sv12[2429] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP212[i] += fw196 * FE3_C0_Q12[0][iq][i];
        const double fw197 = sv12[2411] * weights12[iq];
        alignas(32) double TF40[3];
        for (int i = 0; i < 3; ++i)
            TF40[i] = fw197 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF40[i][j] += TF40[i] * FE3_C0_Q12[0][iq][j];
        const double fw198 = sv12[2423] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP213[i] += fw198 * FE3_C0_Q12[0][iq][i];
        const double fw199 = sv12[2417] * weights12[iq];
        alignas(32) double TF41[3];
        for (int i = 0; i < 3; ++i)
            TF41[i] = fw199 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF41[i][j] += TF41[i] * FE3_C0_Q12[0][iq][j];
        const double fw200 = sv12[2262] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP214[j] += fw200 * FE96_C0_Q12[0][iq][j];
        const double fw201 = sv12[2225] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP215[j] += fw201 * FE96_C0_D10_Q12[0][iq][j];
        const double fw202 = sv12[2208] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP216[j] += fw202 * FE96_C0_D01_Q12[0][iq][j];
        const double fw203 = sv12[2244] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP217[j] += fw203 * FE96_C0_Q12[0][iq][j];
        const double fw204 = sv12[2292] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP218[j] += fw204 * FE96_C0_D10_Q12[0][iq][j];
        const double fw205 = sv12[2277] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP219[j] += fw205 * FE96_C0_D01_Q12[0][iq][j];
        const double fw206 = sv12[2424] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP220[j] += fw206 * FE3_C0_D01_Q12[0][0][j];
        const double fw207 = sv12[2406] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP221[j] += fw207 * FE3_C0_Q12[0][iq][j];
        const double fw208 = sv12[2418] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP222[j] += fw208 * FE3_C0_D01_Q12[0][0][j];
        const double fw209 = sv12[2435] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP223[j] += fw209 * FE3_C0_D01_Q12[0][0][j];
        const double fw210 = sv12[2412] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP224[j] += fw210 * FE3_C0_Q12[0][iq][j];
        const double fw211 = sv12[2430] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP225[j] += fw211 * FE3_C0_D01_Q12[0][0][j];
        const double fw212 = sv12[2265] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP226[j] += fw212 * FE96_C0_Q12[0][iq][j];
        const double fw213 = sv12[2228] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP227[j] += fw213 * FE96_C0_D10_Q12[0][iq][j];
        const double fw214 = sv12[2211] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP228[j] += fw214 * FE96_C0_D01_Q12[0][iq][j];
        const double fw215 = sv12[2247] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP229[j] += fw215 * FE96_C0_Q12[0][iq][j];
        const double fw216 = sv12[2295] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP230[j] += fw216 * FE96_C0_D10_Q12[0][iq][j];
        const double fw217 = sv12[2280] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP231[j] += fw217 * FE96_C0_D01_Q12[0][iq][j];
        const double fw218 = sv12[2427] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP232[j] += fw218 * FE3_C0_D01_Q12[0][0][j];
        const double fw219 = sv12[2409] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP233[j] += fw219 * FE3_C0_Q12[0][iq][j];
        const double fw220 = sv12[2421] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP234[j] += fw220 * FE3_C0_D01_Q12[0][0][j];
        const double fw221 = sv12[2438] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP235[j] += fw221 * FE3_C0_D01_Q12[0][0][j];
        const double fw222 = sv12[2415] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP236[j] += fw222 * FE3_C0_Q12[0][iq][j];
        const double fw223 = sv12[2433] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP237[j] += fw223 * FE3_C0_D01_Q12[0][0][j];
        const double fw224 = sv12[2266] * weights12[iq];
        alignas(32) double TF42[3];
        for (int i = 0; i < 3; ++i)
            TF42[i] = fw224 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF42[i][j] += TF42[i] * FE96_C0_Q12[0][iq][j];
        const double fw225 = sv12[2229] * weights12[iq];
        alignas(32) double TF43[3];
        for (int i = 0; i < 3; ++i)
            TF43[i] = fw225 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF43[i][j] += TF43[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw226 = sv12[2212] * weights12[iq];
        alignas(32) double TF44[3];
        for (int i = 0; i < 3; ++i)
            TF44[i] = fw226 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF44[i][j] += TF44[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw227 = sv12[2248] * weights12[iq];
        alignas(32) double TF45[3];
        for (int i = 0; i < 3; ++i)
            TF45[i] = fw227 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF45[i][j] += TF45[i] * FE96_C0_Q12[0][iq][j];
        const double fw228 = sv12[2296] * weights12[iq];
        alignas(32) double TF46[3];
        for (int i = 0; i < 3; ++i)
            TF46[i] = fw228 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF46[i][j] += TF46[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw229 = sv12[2281] * weights12[iq];
        alignas(32) double TF47[3];
        for (int i = 0; i < 3; ++i)
            TF47[i] = fw229 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF47[i][j] += TF47[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw230 = sv12[2428] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP238[i] += fw230 * FE3_C0_Q12[0][iq][i];
        const double fw231 = sv12[2410] * weights12[iq];
        alignas(32) double TF48[3];
        for (int i = 0; i < 3; ++i)
            TF48[i] = fw231 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF48[i][j] += TF48[i] * FE3_C0_Q12[0][iq][j];
        const double fw232 = sv12[2422] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP239[i] += fw232 * FE3_C0_Q12[0][iq][i];
        const double fw233 = sv12[2439] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP240[i] += fw233 * FE3_C0_Q12[0][iq][i];
        const double fw234 = sv12[2416] * weights12[iq];
        alignas(32) double TF49[3];
        for (int i = 0; i < 3; ++i)
            TF49[i] = fw234 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF49[i][j] += TF49[i] * FE3_C0_Q12[0][iq][j];
        const double fw235 = sv12[2434] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP241[i] += fw235 * FE3_C0_Q12[0][iq][i];
        const double fw236 = sv12[2264] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP242[j] += fw236 * FE96_C0_Q12[0][iq][j];
        const double fw237 = sv12[2227] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP243[j] += fw237 * FE96_C0_D10_Q12[0][iq][j];
        const double fw238 = sv12[2210] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP244[j] += fw238 * FE96_C0_D01_Q12[0][iq][j];
        const double fw239 = sv12[2246] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP245[j] += fw239 * FE96_C0_Q12[0][iq][j];
        const double fw240 = sv12[2294] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP246[j] += fw240 * FE96_C0_D10_Q12[0][iq][j];
        const double fw241 = sv12[2279] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP247[j] += fw241 * FE96_C0_D01_Q12[0][iq][j];
        const double fw242 = sv12[2426] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP248[j] += fw242 * FE3_C0_D01_Q12[0][0][j];
        const double fw243 = sv12[2408] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP249[j] += fw243 * FE3_C0_Q12[0][iq][j];
        const double fw244 = sv12[2420] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP250[j] += fw244 * FE3_C0_D01_Q12[0][0][j];
        const double fw245 = sv12[2437] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP251[j] += fw245 * FE3_C0_D01_Q12[0][0][j];
        const double fw246 = sv12[2414] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP252[j] += fw246 * FE3_C0_Q12[0][iq][j];
        const double fw247 = sv12[2432] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP253[j] += fw247 * FE3_C0_D01_Q12[0][0][j];
    }
    std::fill(A, A + 12, 0.0);
    A[12] = -0.1666666666666677 * sp[190] + -0.1666666666666685 * sp[189];
    std::fill(A + 13, A + 34, 0.0);
    A[34] = 0.1666666666666674 * sp[190];
    std::fill(A + 35, A + 56, 0.0);
    A[56] = 0.1666666666666677 * sp[189];
    std::fill(A + 57, A + 75, 0.0);
    A[75] = 0.1666666666666665 * sp[190] + 0.1666666666666648 * sp[189];
    A[76] = 0.1666666666666663 * sp[190] + 0.3333333333333322 * sp[189];
    A[77] = 0.3333333333333338 * sp[190] + 0.1666666666666643 * sp[189];
    std::fill(A + 78, A + 96, 0.0);
    A[96] = -0.1666666666666665 * sp[190] + 0.1666666666666693 * sp[189];
    A[97] = -0.1666666666666663 * sp[190];
    A[98] = -0.3333333333333338 * sp[190] + -0.1666666666666662 * sp[189];
    std::fill(A + 99, A + 117, 0.0);
    A[117] = 0.1666666666666682 * sp[190] + -0.1666666666666668 * sp[189];
    A[118] = -0.1666666666666677 * sp[190] + -0.3333333333333345 * sp[189];
    A[119] = -0.1666666666666665 * sp[189];
    std::fill(A + 120, A + 138, 0.0);
    A[138] = -0.1666666666666677 * sp[188] + -0.1666666666666685 * sp[187];
    std::fill(A + 139, A + 160, 0.0);
    A[160] = 0.1666666666666674 * sp[188];
    std::fill(A + 161, A + 182, 0.0);
    A[182] = 0.1666666666666677 * sp[187];
    std::fill(A + 183, A + 201, 0.0);
    A[201] = 0.1666666666666665 * sp[188] + 0.1666666666666648 * sp[187];
    A[202] = 0.1666666666666663 * sp[188] + 0.3333333333333322 * sp[187];
    A[203] = 0.3333333333333338 * sp[188] + 0.1666666666666643 * sp[187];
    std::fill(A + 204, A + 222, 0.0);
    A[222] = -0.1666666666666665 * sp[188] + 0.1666666666666693 * sp[187];
    A[223] = -0.1666666666666663 * sp[188];
    A[224] = -0.3333333333333338 * sp[188] + -0.1666666666666662 * sp[187];
    std::fill(A + 225, A + 243, 0.0);
    A[243] = 0.1666666666666682 * sp[188] + -0.1666666666666668 * sp[187];
    A[244] = -0.1666666666666677 * sp[188] + -0.3333333333333345 * sp[187];
    A[245] = -0.1666666666666665 * sp[187];
    std::fill(A + 246, A + 252, 0.0);
    A[252] = -0.1666666666666677 * sp[182] + -0.1666666666666685 * sp[181];
    std::fill(A + 253, A + 255, 0.0);
    A[255] = 0.1666666666666665 * sp[182] + 0.1666666666666648 * sp[181];
    A[256] = -0.1666666666666665 * sp[182] + 0.1666666666666693 * sp[181];
    A[257] = 0.1666666666666682 * sp[182] + -0.1666666666666668 * sp[181];
    A[258] = -0.1666666666666677 * sp[186] + -0.1666666666666685 * sp[185];
    std::fill(A + 259, A + 261, 0.0);
    A[261] = 0.1666666666666665 * sp[186] + 0.1666666666666648 * sp[185];
    A[262] = -0.1666666666666665 * sp[186] + 0.1666666666666693 * sp[185];
    A[263] = 0.1666666666666682 * sp[186] + -0.1666666666666668 * sp[185];
    std::fill(A + 264, A + 274, 0.0);
    A[274] = 0.1666666666666674 * sp[182];
    A[275] = 0.0;
    A[276] = 0.1666666666666663 * sp[182] + 0.3333333333333322 * sp[181];
    A[277] = -0.1666666666666663 * sp[182];
    A[278] = -0.1666666666666677 * sp[182] + -0.3333333333333345 * sp[181];
    A[279] = 0.0;
    A[280] = 0.1666666666666674 * sp[186];
    A[281] = 0.0;
    A[282] = 0.1666666666666663 * sp[186] + 0.3333333333333322 * sp[185];
    A[283] = -0.1666666666666663 * sp[186];
    A[284] = -0.1666666666666677 * sp[186] + -0.3333333333333345 * sp[185];
    std::fill(A + 285, A + 296, 0.0);
    A[296] = 0.1666666666666677 * sp[181];
    A[297] = 0.3333333333333338 * sp[182] + 0.1666666666666643 * sp[181];
    A[298] = -0.3333333333333338 * sp[182] + -0.1666666666666662 * sp[181];
    A[299] = -0.1666666666666665 * sp[181];
    std::fill(A + 300, A + 302, 0.0);
    A[302] = 0.1666666666666677 * sp[185];
    A[303] = 0.3333333333333338 * sp[186] + 0.1666666666666643 * sp[185];
    A[304] = -0.3333333333333338 * sp[186] + -0.1666666666666662 * sp[185];
    A[305] = -0.1666666666666665 * sp[185];
    std::fill(A + 306, A + 315, 0.0);
    A[315] = 0.01666666666666685 * sp[184];
    A[316] = -0.008333333333333307 * sp[184];
    A[317] = -0.008333333333333295 * sp[184];
    A[318] = 0.03333333333333315 * sp[184];
    A[319] = 0.06666666666666685 * sp[184];
    A[320] = 0.06666666666666687 * sp[184];
    A[321] = 0.01666666666666685 * sp[183];
    A[322] = -0.008333333333333307 * sp[183];
    A[323] = -0.008333333333333295 * sp[183];
    A[324] = 0.03333333333333315 * sp[183];
    A[325] = 0.06666666666666685 * sp[183];
    A[326] = 0.06666666666666687 * sp[183];
    std::fill(A + 327, A + 336, 0.0);
    A[336] = -0.008333333333333266 * sp[184];
    A[337] = 0.01666666666666684 * sp[184];
    A[338] = -0.008333333333333283 * sp[184];
    A[339] = 0.06666666666666669 * sp[184];
    A[340] = 0.03333333333333313 * sp[184];
    A[341] = 0.06666666666666683 * sp[184];
    A[342] = -0.008333333333333266 * sp[183];
    A[343] = 0.01666666666666684 * sp[183];
    A[344] = -0.008333333333333283 * sp[183];
    A[345] = 0.06666666666666669 * sp[183];
    A[346] = 0.03333333333333313 * sp[183];
    A[347] = 0.06666666666666683 * sp[183];
    std::fill(A + 348, A + 357, 0.0);
    A[357] = -0.008333333333333262 * sp[184];
    A[358] = -0.008333333333333292 * sp[184];
    A[359] = 0.01666666666666684 * sp[184];
    A[360] = 0.06666666666666671 * sp[184];
    A[361] = 0.06666666666666678 * sp[184];
    A[362] = 0.03333333333333316 * sp[184];
    A[363] = -0.008333333333333262 * sp[183];
    A[364] = -0.008333333333333292 * sp[183];
    A[365] = 0.01666666666666684 * sp[183];
    A[366] = 0.06666666666666671 * sp[183];
    A[367] = 0.06666666666666678 * sp[183];
    A[368] = 0.03333333333333316 * sp[183];
    std::fill(A + 369, A + 441, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[3] = { 0, 1, 5 };
    static const int DM3[3] = { 0, 2, 4 };
    static const int DM4[4] = { 0, 3, 4, 5 };
    static const int DM5[5] = { 6, 7, 9, 10, 11 };
    static const int DM6[3] = { 6, 7, 11 };
    static const int DM7[5] = { 6, 8, 9, 10, 11 };
    static const int DM8[3] = { 6, 8, 10 };
    static const int DM9[4] = { 6, 9, 10, 11 };
    static const int DM10[2] = { 12, 14 };
    static const int DM11[2] = { 15, 17 };
    static const int DM12[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + j] += BF0[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM0[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM1[j]] += BF2[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + (j + 6)] += BF3[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM0[i] + j] += BF4[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM0[j]] += BF5[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + DM2[j]] += FE96_C0_D02_Q12[0][0][j] * TP0[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM1[j]] += BF6[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][j] * TP1[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM0[i] + DM4[j]] += FE96_C0_D11_Q12[0][0][j] * TP2[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM0[i] + (j + 6)] += BF7[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM5[j]] += BF8[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][j] * TP3[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM7[j]] += BF9[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][j] * TP4[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM0[i] + DM9[j]] += FE96_C0_D11_Q12[0][0][j] * TP5[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP6[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP7[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP8[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + (j + 15)] += BF10[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP9[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][j] * TP10[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + (j + 18)] += BF11[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][j] * TP11[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM2[i] + j] += FE96_C0_D02_Q12[0][0][i] * TP12[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM0[j]] += FE96_C0_D02_Q12[0][0][i] * TP13[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + DM2[j]] += FE96_C0_D02_Q12[0][0][i] * TP14[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM1[j]] += FE96_C0_D02_Q12[0][0][i] * TP15[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][i] * TP16[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM2[i] + DM4[j]] += FE96_C0_D02_Q12[0][0][i] * TP17[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM2[i] + (j + 6)] += FE96_C0_D02_Q12[0][0][i] * TP18[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM5[j]] += FE96_C0_D02_Q12[0][0][i] * TP19[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][i] * TP20[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM7[j]] += FE96_C0_D02_Q12[0][0][i] * TP21[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][i] * TP22[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM2[i] + DM9[j]] += FE96_C0_D02_Q12[0][0][i] * TP23[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + (j + 12)] += FE96_C0_D02_Q12[0][0][i] * TP24[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + DM10[j]] += FE96_C0_D02_Q12[0][0][i] * TP25[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + (j + 15)] += FE96_C0_D02_Q12[0][0][i] * TP26[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + (j + 15)] += FE96_C0_D02_Q12[0][0][i] * TP27[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + DM11[j]] += FE96_C0_D02_Q12[0][0][i] * TP28[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + (j + 18)] += FE96_C0_D02_Q12[0][0][i] * TP29[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + (j + 18)] += FE96_C0_D02_Q12[0][0][i] * TP30[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + DM12[j]] += FE96_C0_D02_Q12[0][0][i] * TP31[j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM1[i] + j] += BF12[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM1[i] + DM0[j]] += BF13[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + DM2[j]] += FE96_C0_D02_Q12[0][0][j] * TP32[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM1[i] + DM1[j]] += BF14[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][j] * TP33[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM1[i] + DM4[j]] += FE96_C0_D11_Q12[0][0][j] * TP34[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM1[i] + (j + 6)] += BF15[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM1[i] + DM5[j]] += BF16[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][j] * TP35[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM1[i] + DM7[j]] += BF17[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][j] * TP36[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM1[i] + DM9[j]] += FE96_C0_D11_Q12[0][0][j] * TP37[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP38[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP39[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP40[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + (j + 15)] += BF18[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP41[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][j] * TP42[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + (j + 18)] += BF19[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][j] * TP43[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM3[i] + j] += FE96_C0_D02_Q12[0][0][i] * TP44[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM3[i] + DM0[j]] += FE96_C0_D02_Q12[0][0][i] * TP45[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + DM2[j]] += FE96_C0_D02_Q12[0][0][i] * TP16[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM3[i] + DM1[j]] += FE96_C0_D02_Q12[0][0][i] * TP46[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][i] * TP47[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM3[i] + DM4[j]] += FE96_C0_D02_Q12[0][0][i] * TP48[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM3[i] + (j + 6)] += FE96_C0_D02_Q12[0][0][i] * TP49[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM3[i] + DM5[j]] += FE96_C0_D02_Q12[0][0][i] * TP50[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][i] * TP51[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM3[i] + DM7[j]] += FE96_C0_D02_Q12[0][0][i] * TP52[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][i] * TP53[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM3[i] + DM9[j]] += FE96_C0_D02_Q12[0][0][i] * TP54[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + (j + 12)] += FE96_C0_D02_Q12[0][0][i] * TP55[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + DM10[j]] += FE96_C0_D02_Q12[0][0][i] * TP56[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + (j + 15)] += FE96_C0_D02_Q12[0][0][i] * TP57[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + (j + 15)] += FE96_C0_D02_Q12[0][0][i] * TP58[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + DM11[j]] += FE96_C0_D02_Q12[0][0][i] * TP59[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + (j + 18)] += FE96_C0_D02_Q12[0][0][i] * TP60[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + (j + 18)] += FE96_C0_D02_Q12[0][0][i] * TP61[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + DM12[j]] += FE96_C0_D02_Q12[0][0][i] * TP62[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM4[i] + j] += FE96_C0_D11_Q12[0][0][i] * TP63[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM4[i] + DM0[j]] += FE96_C0_D11_Q12[0][0][i] * TP64[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + DM2[j]] += FE96_C0_D11_Q12[0][0][i] * TP65[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM4[i] + DM1[j]] += FE96_C0_D11_Q12[0][0][i] * TP66[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + DM3[j]] += FE96_C0_D11_Q12[0][0][i] * TP67[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM4[i] + DM4[j]] += FE96_C0_D11_Q12[0][0][i] * TP68[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM4[i] + (j + 6)] += FE96_C0_D11_Q12[0][0][i] * TP69[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM4[i] + DM5[j]] += FE96_C0_D11_Q12[0][0][i] * TP70[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + DM6[j]] += FE96_C0_D11_Q12[0][0][i] * TP71[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM4[i] + DM7[j]] += FE96_C0_D11_Q12[0][0][i] * TP72[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + DM8[j]] += FE96_C0_D11_Q12[0][0][i] * TP73[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM4[i] + DM9[j]] += FE96_C0_D11_Q12[0][0][i] * TP74[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + (j + 12)] += FE96_C0_D11_Q12[0][0][i] * TP75[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + DM10[j]] += FE96_C0_D11_Q12[0][0][i] * TP76[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + (j + 15)] += FE96_C0_D11_Q12[0][0][i] * TP77[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + (j + 15)] += FE96_C0_D11_Q12[0][0][i] * TP78[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + DM11[j]] += FE96_C0_D11_Q12[0][0][i] * TP79[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + (j + 18)] += FE96_C0_D11_Q12[0][0][i] * TP80[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + (j + 18)] += FE96_C0_D11_Q12[0][0][i] * TP81[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + DM12[j]] += FE96_C0_D11_Q12[0][0][i] * TP82[j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + j] += BF20[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + (j + 6)] += BF21[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM5[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM7[j]] += BF2[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM5[i] + j] += BF22[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM0[j]] += BF8[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + DM2[j]] += FE96_C0_D02_Q12[0][0][j] * TP83[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM1[j]] += BF23[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][j] * TP84[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM5[i] + DM4[j]] += FE96_C0_D11_Q12[0][0][j] * TP85[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM5[i] + (j + 6)] += BF24[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM5[j]] += BF25[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][j] * TP86[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM7[j]] += BF26[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][j] * TP87[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM5[i] + DM9[j]] += FE96_C0_D11_Q12[0][0][j] * TP88[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP89[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP90[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP91[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 15)] += BF27[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP92[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][j] * TP93[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 18)] += BF28[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][j] * TP94[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM6[i] + j] += FE96_C0_D02_Q12[0][0][i] * TP95[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM6[i] + DM0[j]] += FE96_C0_D02_Q12[0][0][i] * TP96[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + DM2[j]] += FE96_C0_D02_Q12[0][0][i] * TP20[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM6[i] + DM1[j]] += FE96_C0_D02_Q12[0][0][i] * TP97[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][i] * TP51[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM6[i] + DM4[j]] += FE96_C0_D02_Q12[0][0][i] * TP98[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM6[i] + (j + 6)] += FE96_C0_D02_Q12[0][0][i] * TP99[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM6[i] + DM5[j]] += FE96_C0_D02_Q12[0][0][i] * TP100[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][i] * TP101[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM6[i] + DM7[j]] += FE96_C0_D02_Q12[0][0][i] * TP102[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][i] * TP103[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM6[i] + DM9[j]] += FE96_C0_D02_Q12[0][0][i] * TP104[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + (j + 12)] += FE96_C0_D02_Q12[0][0][i] * TP105[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + DM10[j]] += FE96_C0_D02_Q12[0][0][i] * TP106[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + (j + 15)] += FE96_C0_D02_Q12[0][0][i] * TP107[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + (j + 15)] += FE96_C0_D02_Q12[0][0][i] * TP108[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + DM11[j]] += FE96_C0_D02_Q12[0][0][i] * TP109[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + (j + 18)] += FE96_C0_D02_Q12[0][0][i] * TP110[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + (j + 18)] += FE96_C0_D02_Q12[0][0][i] * TP111[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + DM12[j]] += FE96_C0_D02_Q12[0][0][i] * TP112[j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM7[i] + j] += BF29[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM0[j]] += BF30[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + DM2[j]] += FE96_C0_D02_Q12[0][0][j] * TP113[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM1[j]] += BF17[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][j] * TP114[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM7[i] + DM4[j]] += FE96_C0_D11_Q12[0][0][j] * TP115[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM7[i] + (j + 6)] += BF31[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM5[j]] += BF32[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][j] * TP116[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM7[j]] += BF33[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][j] * TP117[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM7[i] + DM9[j]] += FE96_C0_D11_Q12[0][0][j] * TP118[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP119[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP120[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP121[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + (j + 15)] += BF34[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP122[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][j] * TP123[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + (j + 18)] += BF35[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][j] * TP124[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM8[i] + j] += FE96_C0_D02_Q12[0][0][i] * TP125[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM8[i] + DM0[j]] += FE96_C0_D02_Q12[0][0][i] * TP126[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + DM2[j]] += FE96_C0_D02_Q12[0][0][i] * TP22[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM8[i] + DM1[j]] += FE96_C0_D02_Q12[0][0][i] * TP127[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][i] * TP53[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM8[i] + DM4[j]] += FE96_C0_D02_Q12[0][0][i] * TP128[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM8[i] + (j + 6)] += FE96_C0_D02_Q12[0][0][i] * TP129[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM8[i] + DM5[j]] += FE96_C0_D02_Q12[0][0][i] * TP130[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][i] * TP103[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM8[i] + DM7[j]] += FE96_C0_D02_Q12[0][0][i] * TP131[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][i] * TP132[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM8[i] + DM9[j]] += FE96_C0_D02_Q12[0][0][i] * TP133[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + (j + 12)] += FE96_C0_D02_Q12[0][0][i] * TP134[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + DM10[j]] += FE96_C0_D02_Q12[0][0][i] * TP135[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + (j + 15)] += FE96_C0_D02_Q12[0][0][i] * TP136[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + (j + 15)] += FE96_C0_D02_Q12[0][0][i] * TP137[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + DM11[j]] += FE96_C0_D02_Q12[0][0][i] * TP138[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + (j + 18)] += FE96_C0_D02_Q12[0][0][i] * TP139[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + (j + 18)] += FE96_C0_D02_Q12[0][0][i] * TP140[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + DM12[j]] += FE96_C0_D02_Q12[0][0][i] * TP141[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM9[i] + j] += FE96_C0_D11_Q12[0][0][i] * TP142[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM9[i] + DM0[j]] += FE96_C0_D11_Q12[0][0][i] * TP143[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + DM2[j]] += FE96_C0_D11_Q12[0][0][i] * TP144[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM9[i] + DM1[j]] += FE96_C0_D11_Q12[0][0][i] * TP145[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + DM3[j]] += FE96_C0_D11_Q12[0][0][i] * TP146[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM9[i] + DM4[j]] += FE96_C0_D11_Q12[0][0][i] * TP74[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM9[i] + (j + 6)] += FE96_C0_D11_Q12[0][0][i] * TP147[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM9[i] + DM5[j]] += FE96_C0_D11_Q12[0][0][i] * TP148[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + DM6[j]] += FE96_C0_D11_Q12[0][0][i] * TP149[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM9[i] + DM7[j]] += FE96_C0_D11_Q12[0][0][i] * TP150[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + DM8[j]] += FE96_C0_D11_Q12[0][0][i] * TP151[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM9[i] + DM9[j]] += FE96_C0_D11_Q12[0][0][i] * TP152[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + (j + 12)] += FE96_C0_D11_Q12[0][0][i] * TP153[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + DM10[j]] += FE96_C0_D11_Q12[0][0][i] * TP154[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + (j + 15)] += FE96_C0_D11_Q12[0][0][i] * TP155[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + (j + 15)] += FE96_C0_D11_Q12[0][0][i] * TP156[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + DM11[j]] += FE96_C0_D11_Q12[0][0][i] * TP157[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + (j + 18)] += FE96_C0_D11_Q12[0][0][i] * TP158[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + (j + 18)] += FE96_C0_D11_Q12[0][0][i] * TP159[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + DM12[j]] += FE96_C0_D11_Q12[0][0][i] * TP160[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 12) + j] += FE3_C0_D01_Q12[0][0][i] * TP161[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 12) + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP162[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + DM2[j]] += FE3_C0_D01_Q12[0][0][i] * TP163[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 12) + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP164[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + DM3[j]] += FE3_C0_D01_Q12[0][0][i] * TP165[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 12) + DM4[j]] += FE3_C0_D01_Q12[0][0][i] * TP166[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 12) + (j + 6)] += FE3_C0_D01_Q12[0][0][i] * TP167[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 12) + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP168[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + DM6[j]] += FE3_C0_D01_Q12[0][0][i] * TP169[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 12) + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP170[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + DM8[j]] += FE3_C0_D01_Q12[0][0][i] * TP171[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 12) + DM9[j]] += FE3_C0_D01_Q12[0][0][i] * TP172[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + (j + 12)] += FE3_C0_D01_Q12[0][0][i] * TP173[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + DM10[j]] += FE3_C0_D01_Q12[0][0][i] * TP174[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP175[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP176[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + DM11[j]] += FE3_C0_D01_Q12[0][0][i] * TP177[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP178[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP179[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + DM12[j]] += FE3_C0_D01_Q12[0][0][i] * TP180[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM10[i] + j] += FE3_C0_D01_Q12[0][0][i] * TP181[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM10[i] + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP182[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + DM2[j]] += FE3_C0_D01_Q12[0][0][i] * TP183[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM10[i] + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP184[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + DM3[j]] += FE3_C0_D01_Q12[0][0][i] * TP185[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM10[i] + DM4[j]] += FE3_C0_D01_Q12[0][0][i] * TP186[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM10[i] + (j + 6)] += FE3_C0_D01_Q12[0][0][i] * TP187[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM10[i] + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP188[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + DM6[j]] += FE3_C0_D01_Q12[0][0][i] * TP189[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM10[i] + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP190[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + DM8[j]] += FE3_C0_D01_Q12[0][0][i] * TP191[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM10[i] + DM9[j]] += FE3_C0_D01_Q12[0][0][i] * TP192[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][i] * TP174[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][i] * TP193[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP194[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP195[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][i] * TP196[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP197[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP198[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][i] * TP199[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + j] += FE3_C0_D01_Q12[0][0][i] * TP200[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP201[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP202[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + (j + 6)] += FE3_C0_D01_Q12[0][0][i] * TP203[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP204[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP205[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP206[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP207[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM11[j]] += FE3_C0_D01_Q12[0][0][i] * TP208[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP209[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP210[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM12[j]] += FE3_C0_D01_Q12[0][0][i] * TP211[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM0[j]] += BF36[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM1[j]] += BF37[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM5[j]] += BF38[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM7[j]] += BF39[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP212[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += BF40[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP213[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += BF41[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM11[i] + j] += FE3_C0_D01_Q12[0][0][i] * TP214[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM11[i] + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP215[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM11[i] + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP216[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM11[i] + (j + 6)] += FE3_C0_D01_Q12[0][0][i] * TP217[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM11[i] + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP218[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM11[i] + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP219[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP220[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM11[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP221[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][i] * TP222[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP223[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM11[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP224[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][i] * TP225[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + j] += FE3_C0_D01_Q12[0][0][i] * TP226[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP227[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP228[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + (j + 6)] += FE3_C0_D01_Q12[0][0][i] * TP229[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP230[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP231[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP232[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP233[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM11[j]] += FE3_C0_D01_Q12[0][0][i] * TP234[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP235[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP236[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM12[j]] += FE3_C0_D01_Q12[0][0][i] * TP237[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + j] += BF42[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM0[j]] += BF43[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM1[j]] += BF44[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + (j + 6)] += BF45[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM5[j]] += BF46[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM7[j]] += BF47[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP238[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += BF48[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP239[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 18)] += FE3_C0_D01_Q12[0][0][j] * TP240[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += BF49[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM12[j]] += FE3_C0_D01_Q12[0][0][j] * TP241[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM12[i] + j] += FE3_C0_D01_Q12[0][0][i] * TP242[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM12[i] + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP243[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM12[i] + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP244[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM12[i] + (j + 6)] += FE3_C0_D01_Q12[0][0][i] * TP245[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM12[i] + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP246[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM12[i] + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP247[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP248[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM12[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP249[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][i] * TP250[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP251[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM12[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP252[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][i] * TP253[j];
  }

};


class ranspseudotimestepping_exterior_facet_integral_2_3: public ufc::exterior_facet_integral
{
public:

  ranspseudotimestepping_exterior_facet_integral_2_3() : ufc::exterior_facet_integral()
  {

  }

  ~ranspseudotimestepping_exterior_facet_integral_2_3() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, false, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 37
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.1739274225687268, 0.3260725774312731, 0.3260725774312731, 0.1739274225687268 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE47_C0_D01_F_Q4[3][4][5] =
        { { { 1.0, -0.7222726231881047, 3.722272623188091, -0.2777273768118826, -3.722272623188107 },
            { 1.0, 0.3200379128302891, 2.679962087169697, -1.320037912830275, -2.679962087169714 },
            { 1.0, 1.679962087169715, 1.320037912830271, -2.679962087169701, -1.320037912830287 },
            { 1.0, 2.722272623188108, 0.2777273768118786, -3.722272623188096, -0.2777273768118922 } },
          { { -2.72227262318811, -0.722272623188105, 0.0, 3.444545246376218, 0.0 },
            { -1.679962087169718, 0.3200379128302888, 0.0, 1.359924174339433, 0.0 },
            { -0.3200379128302928, 1.679962087169715, 0.0, -1.359924174339417, 0.0 },
            { 0.7222726231881, 2.722272623188108, 0.0, -3.444545246376202, 0.0 } },
          { { -2.72227262318811, -1.0, 0.2777273768118848, 3.722272623188112, -0.2777273768118925 },
            { -1.679962087169717, -1.0, 1.320037912830276, 2.679962087169721, -1.320037912830287 },
            { -0.3200379128302917, -1.0, 2.6799620871697, 1.320037912830298, -2.679962087169714 },
            { 0.7222726231880999, -1.0, 3.722272623188092, 0.2777273768119067, -3.722272623188106 } } };
    alignas(32) static const double FE47_C0_D10_F_Q4[3][4][5] =
        { { { 1.0, 2.722272623188104, 0.2777273768118936, -0.2777273768118936, -3.722272623188106 },
            { 1.0, 1.679962087169712, 1.320037912830285, -1.320037912830285, -2.679962087169713 },
            { 1.0, 0.3200379128302879, 2.679962087169708, -2.679962087169708, -1.320037912830288 },
            { 1.0, -0.7222726231881051, 3.722272623188099, -3.722272623188099, -0.2777273768118945 } },
          { { -2.722272623188107, -1.0, 0.277727376811893, -0.277727376811893, 3.72227262318811 },
            { -1.679962087169713, -1.0, 1.320037912830285, -1.320037912830285, 2.679962087169716 },
            { -0.3200379128302884, -1.0, 2.679962087169709, -2.679962087169709, 1.320037912830289 },
            { 0.7222726231881045, -1.0, 3.722272623188099, -3.722272623188099, 0.2777273768118963 } },
          { { -2.722272623188106, -0.7222726231881095, 0.0, 0.0, 3.444545246376216 },
            { -1.679962087169712, 0.3200379128302852, 0.0, 0.0, 1.359924174339427 },
            { -0.3200379128302857, 1.679962087169712, 0.0, 0.0, -1.359924174339426 },
            { 0.7222726231881069, 2.722272623188104, 0.0, 0.0, -3.444545246376211 } } };
    alignas(32) static const double FE47_C0_F_Q4[3][4][6] =
        { { { 0.0, 0.8013460293699309, -0.05979028222412166, 0.2584442528541909, 0.0, 0.0 },
            { 0.0, 0.2277840767909521, -0.1121969667939041, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.1121969667939041, 0.227784076790952, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.05979028222412169, 0.8013460293699309, 0.2584442528541908, 0.0, 0.0 } },
          { { 0.8013460293699309, 0.0, -0.05979028222412166, 0.0, 0.2584442528541908, 0.0 },
            { 0.2277840767909521, 0.0, -0.1121969667939041, 0.0, 0.8844128900029518, 0.0 },
            { -0.1121969667939041, 0.0, 0.2277840767909521, 0.0, 0.8844128900029519, 0.0 },
            { -0.05979028222412166, 0.0, 0.8013460293699309, 0.0, 0.2584442528541906, 0.0 } },
          { { 0.8013460293699309, -0.05979028222412169, 0.0, 0.0, 0.0, 0.2584442528541908 },
            { 0.2277840767909521, -0.1121969667939041, 0.0, 0.0, 0.0, 0.8844128900029519 },
            { -0.1121969667939041, 0.2277840767909522, 0.0, 0.0, 0.0, 0.884412890002952 },
            { -0.05979028222412169, 0.8013460293699308, 0.0, 0.0, 0.0, 0.2584442528541909 } } };
    alignas(32) static const double FE49_C2_D01_F_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE49_C2_F_Q4[3][4][3] =
        { { { 0.0, 0.9305681557970263, 0.06943184420297369 },
            { 0.0, 0.6699905217924281, 0.3300094782075718 },
            { 0.0, 0.3300094782075719, 0.6699905217924279 },
            { 0.0, 0.06943184420297382, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.0, 0.06943184420297369 },
            { 0.6699905217924281, 0.0, 0.3300094782075718 },
            { 0.3300094782075719, 0.0, 0.669990521792428 },
            { 0.06943184420297382, 0.0, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.06943184420297367, 0.0 },
            { 0.6699905217924281, 0.3300094782075718, 0.0 },
            { 0.3300094782075719, 0.6699905217924281, 0.0 },
            { 0.06943184420297374, 0.9305681557970263, 0.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE49_C2_D01_F_Q4[0][0][0] + coordinate_dofs[2] * FE49_C2_D01_F_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE49_C2_D01_F_Q4[0][0][0] + coordinate_dofs[5] * FE49_C2_D01_F_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE49_C2_D01_F_Q4[0][0][0] + coordinate_dofs[4] * FE49_C2_D01_F_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE49_C2_D01_F_Q4[0][0][0] + coordinate_dofs[3] * FE49_C2_D01_F_Q4[0][0][1];
    const double w2_d1_c3 = w[2][15] * FE49_C2_D01_F_Q4[0][0][0] + w[2][17] * FE49_C2_D01_F_Q4[0][0][1];
    double w2_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c3 += w[2][ic + 15] * FE49_C2_D01_F_Q4[0][0][ic];
    const double w2_d1_c4 = w[2][18] * FE49_C2_D01_F_Q4[0][0][0] + w[2][20] * FE49_C2_D01_F_Q4[0][0][1];
    double w2_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c4 += w[2][ic + 18] * FE49_C2_D01_F_Q4[0][0][ic];
    alignas(32) double sp[74];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = triangle_reference_facet_normals[facet][1] * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = triangle_reference_facet_normals[facet][0] * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet][0] * sp[9];
    sp[11] = -1 * J_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[20] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[21] = sp[19] + sp[20];
    sp[22] = std::sqrt(sp[21]);
    sp[23] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[24] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[25] = sp[23] + sp[24];
    sp[26] = std::sqrt(sp[25]);
    sp[27] = sp[22] * sp[26];
    sp[28] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[29] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[30] = sp[28] + sp[29];
    sp[31] = std::sqrt(sp[30]);
    sp[32] = sp[27] * sp[31];
    sp[33] = triangle_reference_cell_volume * sp[2];
    sp[34] = std::abs(sp[33]);
    sp[35] = sp[32] / (4.0 * sp[34]);
    sp[36] = sp[3] * sp[17];
    sp[37] = sp[5] * sp[17];
    sp[38] = sp[11] * sp[18];
    sp[39] = sp[9] * sp[18];
    sp[40] = sp[36] + sp[38];
    sp[41] = sp[37] + sp[39];
    sp[42] = w2_d1_c3 * sp[3];
    sp[43] = w2_d0_c3 * sp[5];
    sp[44] = sp[42] + sp[43];
    sp[45] = sp[44] * sp[17];
    sp[46] = w2_d0_c3 * sp[9];
    sp[47] = w2_d1_c3 * sp[11];
    sp[48] = sp[46] + sp[47];
    sp[49] = sp[48] * sp[18];
    sp[50] = sp[45] + sp[49];
    sp[51] = w2_d1_c4 * sp[3];
    sp[52] = w2_d0_c4 * sp[5];
    sp[53] = sp[51] + sp[52];
    sp[54] = sp[53] * sp[17];
    sp[55] = w2_d0_c4 * sp[9];
    sp[56] = w2_d1_c4 * sp[11];
    sp[57] = sp[55] + sp[56];
    sp[58] = sp[57] * sp[18];
    sp[59] = sp[54] + sp[58];
    sp[60] = sp[11] + sp[11];
    sp[61] = sp[9] + sp[9];
    sp[62] = sp[5] + sp[5];
    sp[63] = sp[3] + sp[3];
    sp[64] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[65] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[66] = sp[64] + sp[65];
    sp[67] = sp[66] * sp[66];
    sp[68] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[69] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[70] = sp[68] + sp[69];
    sp[71] = sp[70] * sp[70];
    sp[72] = sp[67] + sp[71];
    sp[73] = std::sqrt(sp[72]);
    alignas(32) double BF0[6][6] = {};
    alignas(32) double BF1[6][5] = {};
    alignas(32) double BF2[6][5] = {};
    alignas(32) double BF3[6][6] = {};
    alignas(32) double BF4[6][5] = {};
    alignas(32) double BF5[6][5] = {};
    alignas(32) double BF6[6][3] = {};
    alignas(32) double BF7[6][3] = {};
    alignas(32) double BF8[5][6] = {};
    alignas(32) double BF9[5][6] = {};
    alignas(32) double BF10[5][3] = {};
    alignas(32) double BF11[5][3] = {};
    alignas(32) double BF12[5][6] = {};
    alignas(32) double BF13[5][6] = {};
    alignas(32) double BF14[5][3] = {};
    alignas(32) double BF15[5][3] = {};
    alignas(32) double BF16[6][6] = {};
    alignas(32) double BF17[6][5] = {};
    alignas(32) double BF18[6][5] = {};
    alignas(32) double BF19[6][6] = {};
    alignas(32) double BF20[6][5] = {};
    alignas(32) double BF21[6][5] = {};
    alignas(32) double BF22[6][3] = {};
    alignas(32) double BF23[6][3] = {};
    alignas(32) double BF24[5][6] = {};
    alignas(32) double BF25[5][6] = {};
    alignas(32) double BF26[5][3] = {};
    alignas(32) double BF27[5][3] = {};
    alignas(32) double BF28[5][6] = {};
    alignas(32) double BF29[5][6] = {};
    alignas(32) double BF30[5][3] = {};
    alignas(32) double BF31[5][3] = {};
    alignas(32) double TP0[6] = {};
    alignas(32) double TP1[6] = {};
    alignas(32) double TP2[3] = {};
    alignas(32) double TP3[3] = {};
    alignas(32) double BF32[3][6] = {};
    alignas(32) double BF33[3][6] = {};
    alignas(32) double TP4[3] = {};
    alignas(32) double BF34[3][3] = {};
    alignas(32) double TP5[3] = {};
    alignas(32) double TP6[3] = {};
    alignas(32) double BF35[3][3] = {};
    alignas(32) double TP7[3] = {};
    alignas(32) double TP8[6] = {};
    alignas(32) double TP9[6] = {};
    alignas(32) double TP10[3] = {};
    alignas(32) double TP11[3] = {};
    alignas(32) double TP12[6] = {};
    alignas(32) double TP13[6] = {};
    alignas(32) double TP14[3] = {};
    alignas(32) double TP15[3] = {};
    alignas(32) double BF36[3][6] = {};
    alignas(32) double BF37[3][6] = {};
    alignas(32) double BF38[3][3] = {};
    alignas(32) double BF39[3][3] = {};
    alignas(32) double TP16[6] = {};
    alignas(32) double TP17[6] = {};
    alignas(32) double TP18[3] = {};
    alignas(32) double TP19[3] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE49_C2_F_Q4[facet][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4 += w[4][ic] * FE49_C2_F_Q4[facet][iq][ic];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE49_C2_F_Q4[facet][iq][ic];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c1 += w[3][ic + 6] * FE47_C0_F_Q4[facet][iq][ic];
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c0 += w[3][ic] * FE47_C0_F_Q4[facet][iq][ic];
        double w3_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c3 += w[3][ic + 15] * FE49_C2_F_Q4[facet][iq][ic];
        double w3_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c4 += w[3][ic + 18] * FE49_C2_F_Q4[facet][iq][ic];
        const double w2_d1_c0 = w[2][0] * FE47_C0_D01_F_Q4[facet][iq][0] + w[2][2] * FE47_C0_D01_F_Q4[facet][iq][1] + w[2][3] * FE47_C0_D01_F_Q4[facet][iq][2] + w[2][4] * FE47_C0_D01_F_Q4[facet][iq][3] + w[2][5] * FE47_C0_D01_F_Q4[facet][iq][4];
        const double w2_d0_c0 = w[2][0] * FE47_C0_D10_F_Q4[facet][iq][0] + w[2][1] * FE47_C0_D10_F_Q4[facet][iq][1] + w[2][3] * FE47_C0_D10_F_Q4[facet][iq][2] + w[2][4] * FE47_C0_D10_F_Q4[facet][iq][3] + w[2][5] * FE47_C0_D10_F_Q4[facet][iq][4];
        const double w2_d0_c1 = w[2][6] * FE47_C0_D10_F_Q4[facet][iq][0] + w[2][7] * FE47_C0_D10_F_Q4[facet][iq][1] + w[2][9] * FE47_C0_D10_F_Q4[facet][iq][2] + w[2][10] * FE47_C0_D10_F_Q4[facet][iq][3] + w[2][11] * FE47_C0_D10_F_Q4[facet][iq][4];
        const double w2_d1_c1 = w[2][6] * FE47_C0_D01_F_Q4[facet][iq][0] + w[2][8] * FE47_C0_D01_F_Q4[facet][iq][1] + w[2][9] * FE47_C0_D01_F_Q4[facet][iq][2] + w[2][10] * FE47_C0_D01_F_Q4[facet][iq][3] + w[2][11] * FE47_C0_D01_F_Q4[facet][iq][4];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE47_C0_F_Q4[facet][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE47_C0_F_Q4[facet][iq][ic];
        alignas(32) double sv4[373];
        sv4[0] = std::exp(w4);
        sv4[1] = w2_c3 * (0.09 * sv4[0]);
        sv4[2] = w2_c3 * sv4[1];
        sv4[3] = w2_c4 * w2_c4;
        sv4[4] = std::sqrt(1e-8 + sv4[3]);
        sv4[5] = w2_c4 + sv4[4];
        sv4[6] = sv4[2] / (0.5 * sv4[5]);
        sv4[7] = w3_c1 * sp[17];
        sv4[8] = w3_c0 * sp[18];
        sv4[9] = sv4[7] + sv4[8];
        sv4[10] = std::tanh(100.0 * sv4[9]);
        sv4[11] = (0.0001 + sv4[6] / 1.3) * (100000.0 * (0.5 + -1 * (0.5 * sv4[10])));
        sv4[12] = sv4[11] * (1.0 / (2.0 * sp[35]));
        sv4[13] = sv4[1] + sv4[1];
        sv4[14] = w2_c4 + w2_c4;
        sv4[15] = sv4[14] / (2 * sv4[4]);
        sv4[16] = 0.5 * (1.0 + sv4[15]) * sv4[6];
        sv4[17] = -1 * sv4[16] / (0.5 * sv4[5]);
        sv4[18] = sv4[13] / (0.5 * sv4[5]);
        sv4[19] = 100000.0 * (0.5 + -1 * (0.5 * sv4[10])) * (sv4[17] / 1.3);
        sv4[20] = 100000.0 * (0.5 + -1 * (0.5 * sv4[10])) * (sv4[18] / 1.3);
        sv4[21] = sv4[19] * (1.0 / (2.0 * sp[35]));
        sv4[22] = sv4[20] * (1.0 / (2.0 * sp[35]));
        sv4[23] = w2_c4 * sv4[21];
        sv4[24] = w2_c4 * sv4[22];
        sv4[25] = sv4[23] + sv4[12];
        sv4[26] = (0.0001 + sv4[6]) * (100000.0 * (0.5 + -1 * (0.5 * sv4[10])));
        sv4[27] = sv4[26] * (1.0 / (2.0 * sp[35]));
        sv4[28] = 100000.0 * (0.5 + -1 * (0.5 * sv4[10])) * sv4[17];
        sv4[29] = 100000.0 * (0.5 + -1 * (0.5 * sv4[10])) * sv4[18];
        sv4[30] = sv4[28] * (1.0 / (2.0 * sp[35]));
        sv4[31] = sv4[29] * (1.0 / (2.0 * sp[35]));
        sv4[32] = w2_c3 * sv4[30];
        sv4[33] = w2_c3 * sv4[31];
        sv4[34] = sv4[33] + sv4[27];
        sv4[35] = (0.5 + -1 * (0.5 * sv4[10])) * (0.0001 + sv4[6]);
        sv4[36] = sp[40] * sv4[35];
        sv4[37] = sp[41] * sv4[35];
        sv4[38] = (0.5 + -1 * (0.5 * sv4[10])) * sv4[17];
        sv4[39] = (0.5 + -1 * (0.5 * sv4[10])) * sv4[18];
        sv4[40] = sp[40] * sv4[38];
        sv4[41] = sp[40] * sv4[39];
        sv4[42] = sp[41] * sv4[38];
        sv4[43] = sp[41] * sv4[39];
        sv4[44] = w2_c3 * sv4[40];
        sv4[45] = w2_c3 * sv4[42];
        sv4[46] = w2_c3 * sv4[41];
        sv4[47] = w2_c3 * sv4[43];
        sv4[48] = sv4[36] + sv4[46];
        sv4[49] = sv4[37] + sv4[47];
        sv4[50] = (0.5 + -1 * (0.5 * sv4[10])) * (0.0001 + sv4[6] / 1.3);
        sv4[51] = sp[40] * sv4[50];
        sv4[52] = sp[41] * sv4[50];
        sv4[53] = (0.5 + -1 * (0.5 * sv4[10])) * (sv4[17] / 1.3);
        sv4[54] = (0.5 + -1 * (0.5 * sv4[10])) * (sv4[18] / 1.3);
        sv4[55] = sp[40] * sv4[53];
        sv4[56] = sp[40] * sv4[54];
        sv4[57] = sp[41] * sv4[53];
        sv4[58] = sp[41] * sv4[54];
        sv4[59] = w2_c4 * sv4[55];
        sv4[60] = w2_c4 * sv4[57];
        sv4[61] = w2_c4 * sv4[56];
        sv4[62] = w2_c4 * sv4[58];
        sv4[63] = sv4[51] + sv4[59];
        sv4[64] = sv4[52] + sv4[60];
        sv4[65] = sp[50] * sv4[38];
        sv4[66] = sp[50] * sv4[39];
        sv4[67] = -1 * sv4[65] + sv4[32];
        sv4[68] = sv4[34] + -1 * sv4[66];
        sv4[69] = sp[59] * sv4[53];
        sv4[70] = sp[59] * sv4[54];
        sv4[71] = sv4[67] + -1 * sv4[69];
        sv4[72] = sv4[68] + -1 * sv4[70];
        sv4[73] = std::cosh(100.0 * sv4[9]);
        sv4[74] = std::cosh(2.0 * (100.0 * sv4[9]));
        sv4[75] = 2.0 * sv4[73] / (1.0 + sv4[74]);
        sv4[76] = 100.0 * sp[17] * std::pow(sv4[75], 2);
        sv4[77] = 100.0 * sp[18] * std::pow(sv4[75], 2);
        sv4[78] = (0.0001 + sv4[6] / 1.3) * (100000.0 * (-1 * (0.5 * sv4[76])));
        sv4[79] = (0.0001 + sv4[6] / 1.3) * (100000.0 * (-1 * (0.5 * sv4[77])));
        sv4[80] = sv4[78] * (1.0 / (2.0 * sp[35]));
        sv4[81] = sv4[79] * (1.0 / (2.0 * sp[35]));
        sv4[82] = w2_c4 * sv4[80];
        sv4[83] = w2_c4 * sv4[81];
        sv4[84] = (0.0001 + sv4[6]) * (100000.0 * (-1 * (0.5 * sv4[76])));
        sv4[85] = (0.0001 + sv4[6]) * (100000.0 * (-1 * (0.5 * sv4[77])));
        sv4[86] = sv4[84] * (1.0 / (2.0 * sp[35]));
        sv4[87] = sv4[85] * (1.0 / (2.0 * sp[35]));
        sv4[88] = w2_c3 * sv4[86];
        sv4[89] = w2_c3 * sv4[87];
        sv4[90] = (0.0001 + sv4[6]) * (-1 * (0.5 * sv4[76]));
        sv4[91] = (0.0001 + sv4[6]) * (-1 * (0.5 * sv4[77]));
        sv4[92] = sp[40] * sv4[90];
        sv4[93] = sp[40] * sv4[91];
        sv4[94] = sp[41] * sv4[90];
        sv4[95] = sp[41] * sv4[91];
        sv4[96] = w2_c3 * sv4[92];
        sv4[97] = w2_c3 * sv4[93];
        sv4[98] = w2_c3 * sv4[94];
        sv4[99] = w2_c3 * sv4[95];
        sv4[100] = sp[50] * sv4[90];
        sv4[101] = sp[50] * sv4[91];
        sv4[102] = -1 * sv4[100] + sv4[88];
        sv4[103] = -1 * sv4[101] + sv4[89];
        sv4[104] = (0.0001 + sv4[6] / 1.3) * (-1 * (0.5 * sv4[76]));
        sv4[105] = (0.0001 + sv4[6] / 1.3) * (-1 * (0.5 * sv4[77]));
        sv4[106] = sp[40] * sv4[104];
        sv4[107] = sp[40] * sv4[105];
        sv4[108] = sp[41] * sv4[104];
        sv4[109] = sp[41] * sv4[105];
        sv4[110] = w2_c4 * sv4[106];
        sv4[111] = w2_c4 * sv4[107];
        sv4[112] = w2_c4 * sv4[108];
        sv4[113] = w2_c4 * sv4[109];
        sv4[114] = sp[59] * sv4[104];
        sv4[115] = sp[59] * sv4[105];
        sv4[116] = sv4[102] + -1 * sv4[114];
        sv4[117] = sv4[103] + -1 * sv4[115];
        sv4[118] = w3_c3 * (0.09 * sv4[0]);
        sv4[119] = w3_c3 * sv4[118];
        sv4[120] = w3_c4 * w3_c4;
        sv4[121] = std::sqrt(1e-8 + sv4[120]);
        sv4[122] = w3_c4 + sv4[121];
        sv4[123] = sv4[119] / (0.5 * sv4[122]);
        sv4[124] = 2.0 * (0.0001 + sv4[123]) * (sp[3] / 2);
        sv4[125] = 2.0 * (0.0001 + sv4[123]) * (sp[5] / 2);
        sv4[126] = 2.0 * (0.0001 + sv4[123]) * (sp[9] / 2);
        sv4[127] = 2.0 * (0.0001 + sv4[123]) * (sp[11] / 2);
        sv4[128] = sv4[124] * sp[17];
        sv4[129] = sv4[125] * sp[17];
        sv4[130] = sv4[126] * sp[17];
        sv4[131] = sv4[127] * sp[17];
        sv4[132] = 2.0 * (0.0001 + sv4[123]) * (sp[60] / 2);
        sv4[133] = 2.0 * (0.0001 + sv4[123]) * (sp[61] / 2);
        sv4[134] = sv4[132] * sp[18];
        sv4[135] = sv4[133] * sp[18];
        sv4[136] = sv4[128] + sv4[134];
        sv4[137] = sv4[129] + sv4[135];
        sv4[138] = sv4[136] * (-1 * sp[17]);
        sv4[139] = sv4[137] * (-1 * sp[17]);
        sv4[140] = -1 * sp[17] * sv4[130];
        sv4[141] = -1 * sp[17] * sv4[131];
        sv4[142] = 2.0 * (0.0001 + sv4[123]) * (sp[62] / 2);
        sv4[143] = 2.0 * (0.0001 + sv4[123]) * (sp[63] / 2);
        sv4[144] = sv4[142] * sp[17];
        sv4[145] = sv4[143] * sp[17];
        sv4[146] = sv4[124] * sp[18];
        sv4[147] = sv4[125] * sp[18];
        sv4[148] = sv4[126] * sp[18];
        sv4[149] = sv4[127] * sp[18];
        sv4[150] = sv4[144] + sv4[148];
        sv4[151] = sv4[145] + sv4[149];
        sv4[152] = sv4[146] * sp[18];
        sv4[153] = sv4[147] * sp[18];
        sv4[154] = sv4[150] * sp[18];
        sv4[155] = sv4[151] * sp[18];
        sv4[156] = sv4[138] + sv4[152];
        sv4[157] = sv4[139] + sv4[153];
        sv4[158] = sv4[140] + sv4[154];
        sv4[159] = sv4[141] + sv4[155];
        sv4[160] = sv4[156] * sp[18];
        sv4[161] = sv4[157] * sp[18];
        sv4[162] = sv4[158] * sp[18];
        sv4[163] = sv4[159] * sp[18];
        sv4[164] = sv4[156] * (-1 * sp[17]);
        sv4[165] = sv4[157] * (-1 * sp[17]);
        sv4[166] = sv4[158] * (-1 * sp[17]);
        sv4[167] = sv4[159] * (-1 * sp[17]);
        sv4[168] = sv4[118] + sv4[118];
        sv4[169] = w3_c4 + w3_c4;
        sv4[170] = sv4[169] / (2 * sv4[121]);
        sv4[171] = 0.5 * (1.0 + sv4[170]) * sv4[123];
        sv4[172] = -1 * sv4[171] / (0.5 * sv4[122]);
        sv4[173] = sv4[168] / (0.5 * sv4[122]);
        sv4[174] = w2_d1_c0 * sp[3];
        sv4[175] = w2_d0_c0 * sp[5];
        sv4[176] = sv4[174] + sv4[175];
        sv4[177] = w2_d0_c1 * sp[9];
        sv4[178] = w2_d1_c1 * sp[11];
        sv4[179] = sv4[177] + sv4[178];
        sv4[180] = sv4[176] + sv4[179];
        sv4[181] = 2.0 * sv4[172] * (sv4[180] / 2);
        sv4[182] = 2.0 * sv4[173] * (sv4[180] / 2);
        sv4[183] = sv4[181] * sp[17];
        sv4[184] = sv4[182] * sp[17];
        sv4[185] = w2_d0_c0 * sp[9];
        sv4[186] = w2_d1_c0 * sp[11];
        sv4[187] = sv4[185] + sv4[186];
        sv4[188] = sv4[187] + sv4[187];
        sv4[189] = 2.0 * sv4[172] * (sv4[188] / 2);
        sv4[190] = 2.0 * sv4[173] * (sv4[188] / 2);
        sv4[191] = sv4[189] * sp[18];
        sv4[192] = sv4[190] * sp[18];
        sv4[193] = sv4[183] + sv4[191];
        sv4[194] = sv4[184] + sv4[192];
        sv4[195] = sv4[193] * (-1 * sp[17]);
        sv4[196] = sv4[194] * (-1 * sp[17]);
        sv4[197] = w2_d1_c1 * sp[3];
        sv4[198] = w2_d0_c1 * sp[5];
        sv4[199] = sv4[197] + sv4[198];
        sv4[200] = sv4[199] + sv4[199];
        sv4[201] = 2.0 * sv4[172] * (sv4[200] / 2);
        sv4[202] = 2.0 * sv4[173] * (sv4[200] / 2);
        sv4[203] = sv4[201] * sp[17];
        sv4[204] = sv4[202] * sp[17];
        sv4[205] = sv4[181] * sp[18];
        sv4[206] = sv4[182] * sp[18];
        sv4[207] = sv4[203] + sv4[205];
        sv4[208] = sv4[204] + sv4[206];
        sv4[209] = sv4[207] * sp[18];
        sv4[210] = sv4[208] * sp[18];
        sv4[211] = sv4[195] + sv4[209];
        sv4[212] = sv4[196] + sv4[210];
        sv4[213] = sv4[211] * (-1 * sp[17]);
        sv4[214] = sv4[212] * (-1 * sp[17]);
        sv4[215] = sv4[211] * sp[18];
        sv4[216] = sv4[212] * sp[18];
        sv4[217] = w2_c0 + -1 * w[0][0];
        sv4[218] = sv4[217] * (-1 * sp[17]);
        sv4[219] = w2_c1 + -1 * w[0][1];
        sv4[220] = sv4[219] * sp[18];
        sv4[221] = sv4[218] + sv4[220];
        sv4[222] = 2.0 * sv4[172] * (sp[3] / 2);
        sv4[223] = 2.0 * sv4[172] * (sp[5] / 2);
        sv4[224] = 2.0 * sv4[172] * (sp[9] / 2);
        sv4[225] = 2.0 * sv4[172] * (sp[11] / 2);
        sv4[226] = 2.0 * sv4[173] * (sp[3] / 2);
        sv4[227] = 2.0 * sv4[173] * (sp[5] / 2);
        sv4[228] = 2.0 * sv4[173] * (sp[9] / 2);
        sv4[229] = 2.0 * sv4[173] * (sp[11] / 2);
        sv4[230] = sv4[222] * sp[17];
        sv4[231] = sv4[223] * sp[17];
        sv4[232] = sv4[224] * sp[17];
        sv4[233] = sv4[225] * sp[17];
        sv4[234] = sv4[226] * sp[17];
        sv4[235] = sv4[227] * sp[17];
        sv4[236] = sv4[228] * sp[17];
        sv4[237] = sv4[229] * sp[17];
        sv4[238] = 2.0 * sv4[172] * (sp[60] / 2);
        sv4[239] = 2.0 * sv4[172] * (sp[61] / 2);
        sv4[240] = 2.0 * sv4[173] * (sp[60] / 2);
        sv4[241] = 2.0 * sv4[173] * (sp[61] / 2);
        sv4[242] = sv4[238] * sp[18];
        sv4[243] = sv4[239] * sp[18];
        sv4[244] = sv4[240] * sp[18];
        sv4[245] = sv4[241] * sp[18];
        sv4[246] = sv4[230] + sv4[242];
        sv4[247] = sv4[231] + sv4[243];
        sv4[248] = sv4[234] + sv4[244];
        sv4[249] = sv4[235] + sv4[245];
        sv4[250] = sv4[246] * (-1 * sp[17]);
        sv4[251] = sv4[247] * (-1 * sp[17]);
        sv4[252] = -1 * sp[17] * sv4[232];
        sv4[253] = -1 * sp[17] * sv4[233];
        sv4[254] = sv4[248] * (-1 * sp[17]);
        sv4[255] = sv4[249] * (-1 * sp[17]);
        sv4[256] = -1 * sp[17] * sv4[236];
        sv4[257] = -1 * sp[17] * sv4[237];
        sv4[258] = 2.0 * sv4[172] * (sp[62] / 2);
        sv4[259] = 2.0 * sv4[172] * (sp[63] / 2);
        sv4[260] = 2.0 * sv4[173] * (sp[62] / 2);
        sv4[261] = 2.0 * sv4[173] * (sp[63] / 2);
        sv4[262] = sv4[258] * sp[17];
        sv4[263] = sv4[259] * sp[17];
        sv4[264] = sv4[260] * sp[17];
        sv4[265] = sv4[261] * sp[17];
        sv4[266] = sv4[222] * sp[18];
        sv4[267] = sv4[223] * sp[18];
        sv4[268] = sv4[224] * sp[18];
        sv4[269] = sv4[225] * sp[18];
        sv4[270] = sv4[226] * sp[18];
        sv4[271] = sv4[227] * sp[18];
        sv4[272] = sv4[228] * sp[18];
        sv4[273] = sv4[229] * sp[18];
        sv4[274] = sv4[262] + sv4[268];
        sv4[275] = sv4[263] + sv4[269];
        sv4[276] = sv4[264] + sv4[272];
        sv4[277] = sv4[265] + sv4[273];
        sv4[278] = sv4[266] * sp[18];
        sv4[279] = sv4[267] * sp[18];
        sv4[280] = sv4[274] * sp[18];
        sv4[281] = sv4[275] * sp[18];
        sv4[282] = sv4[270] * sp[18];
        sv4[283] = sv4[271] * sp[18];
        sv4[284] = sv4[276] * sp[18];
        sv4[285] = sv4[277] * sp[18];
        sv4[286] = sv4[250] + sv4[278];
        sv4[287] = sv4[251] + sv4[279];
        sv4[288] = sv4[252] + sv4[280];
        sv4[289] = sv4[253] + sv4[281];
        sv4[290] = sv4[254] + sv4[282];
        sv4[291] = sv4[255] + sv4[283];
        sv4[292] = sv4[256] + sv4[284];
        sv4[293] = sv4[257] + sv4[285];
        sv4[294] = sv4[221] * sv4[286];
        sv4[295] = sv4[221] * sv4[287];
        sv4[296] = sv4[221] * sv4[288];
        sv4[297] = sv4[221] * sv4[289];
        sv4[298] = sv4[221] * sv4[290];
        sv4[299] = sv4[221] * sv4[291];
        sv4[300] = sv4[221] * sv4[292];
        sv4[301] = sv4[221] * sv4[293];
        sv4[302] = 100000.0 * (0.0001 + sv4[123]) * (1.0 / (2.0 * sp[35]));
        sv4[303] = sv4[302] * sp[18];
        sv4[304] = sv4[302] * (-1 * sp[17]);
        sv4[305] = -1 * sp[17] * sv4[303];
        sv4[306] = sv4[304] * (-1 * sp[17]);
        sv4[307] = sv4[303] * sp[18];
        sv4[308] = sv4[304] * sp[18];
        sv4[309] = 100000.0 * sv4[172] * (1.0 / (2.0 * sp[35]));
        sv4[310] = 100000.0 * sv4[173] * (1.0 / (2.0 * sp[35]));
        sv4[311] = sv4[221] * sv4[309];
        sv4[312] = sv4[221] * sv4[310];
        sv4[313] = sv4[311] * (-1 * sp[17]);
        sv4[314] = sv4[312] * (-1 * sp[17]);
        sv4[315] = sv4[311] * sp[18];
        sv4[316] = sv4[312] * sp[18];
        sv4[317] = -1 * sv4[213] + sv4[313];
        sv4[318] = -1 * sv4[215] + sv4[315];
        sv4[319] = -1 * sv4[214] + sv4[314];
        sv4[320] = -1 * sv4[216] + sv4[316];
        sv4[321] = sv4[25] * sp[73];
        sv4[322] = sv4[24] * sp[73];
        sv4[323] = sv4[82] * sp[73];
        sv4[324] = sv4[83] * sp[73];
        sv4[325] = sv4[71] * sp[73];
        sv4[326] = -1 * sv4[44] * sp[73];
        sv4[327] = -1 * sv4[45] * sp[73];
        sv4[328] = -1 * sv4[63] * sp[73];
        sv4[329] = -1 * sv4[64] * sp[73];
        sv4[330] = -1 * sv4[294] * sp[73];
        sv4[331] = -1 * sv4[295] * sp[73];
        sv4[332] = -1 * sv4[296] * sp[73];
        sv4[333] = -1 * sv4[297] * sp[73];
        sv4[334] = sv4[317] * sp[73];
        sv4[335] = sv4[318] * sp[73];
        sv4[336] = sv4[72] * sp[73];
        sv4[337] = -1 * sv4[48] * sp[73];
        sv4[338] = -1 * sv4[49] * sp[73];
        sv4[339] = -1 * sv4[61] * sp[73];
        sv4[340] = -1 * sv4[62] * sp[73];
        sv4[341] = -1 * sv4[298] * sp[73];
        sv4[342] = -1 * sv4[299] * sp[73];
        sv4[343] = -1 * sv4[300] * sp[73];
        sv4[344] = -1 * sv4[301] * sp[73];
        sv4[345] = sv4[319] * sp[73];
        sv4[346] = sv4[320] * sp[73];
        sv4[347] = -1 * sv4[36] * sp[73];
        sv4[348] = -1 * sv4[37] * sp[73];
        sv4[349] = -1 * sv4[51] * sp[73];
        sv4[350] = -1 * sv4[52] * sp[73];
        sv4[351] = sv4[116] * sp[73];
        sv4[352] = sv4[117] * sp[73];
        sv4[353] = -1 * sv4[96] * sp[73];
        sv4[354] = -1 * sv4[97] * sp[73];
        sv4[355] = -1 * sv4[98] * sp[73];
        sv4[356] = -1 * sv4[99] * sp[73];
        sv4[357] = -1 * sv4[110] * sp[73];
        sv4[358] = -1 * sv4[111] * sp[73];
        sv4[359] = -1 * sv4[112] * sp[73];
        sv4[360] = -1 * sv4[113] * sp[73];
        sv4[361] = -1 * sv4[160] * sp[73];
        sv4[362] = -1 * sv4[161] * sp[73];
        sv4[363] = -1 * sv4[162] * sp[73];
        sv4[364] = -1 * sv4[163] * sp[73];
        sv4[365] = sv4[305] * sp[73];
        sv4[366] = sv4[307] * sp[73];
        sv4[367] = -1 * sv4[164] * sp[73];
        sv4[368] = -1 * sv4[165] * sp[73];
        sv4[369] = -1 * sv4[166] * sp[73];
        sv4[370] = -1 * sv4[167] * sp[73];
        sv4[371] = sv4[306] * sp[73];
        sv4[372] = sv4[308] * sp[73];
        const double fw0 = sv4[371] * weights4[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF0[i][j] += TF0[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw1 = sv4[368] * weights4[iq];
        alignas(32) double TF1[6];
        for (int i = 0; i < 6; ++i)
            TF1[i] = fw1 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF1[i][j] += TF1[i] * FE47_C0_D10_F_Q4[facet][iq][j];
        const double fw2 = sv4[367] * weights4[iq];
        alignas(32) double TF2[6];
        for (int i = 0; i < 6; ++i)
            TF2[i] = fw2 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF2[i][j] += TF2[i] * FE47_C0_D01_F_Q4[facet][iq][j];
        const double fw3 = sv4[365] * weights4[iq];
        alignas(32) double TF3[6];
        for (int i = 0; i < 6; ++i)
            TF3[i] = fw3 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF3[i][j] += TF3[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw4 = sv4[369] * weights4[iq];
        alignas(32) double TF4[6];
        for (int i = 0; i < 6; ++i)
            TF4[i] = fw4 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF4[i][j] += TF4[i] * FE47_C0_D10_F_Q4[facet][iq][j];
        const double fw5 = sv4[370] * weights4[iq];
        alignas(32) double TF5[6];
        for (int i = 0; i < 6; ++i)
            TF5[i] = fw5 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF5[i][j] += TF5[i] * FE47_C0_D01_F_Q4[facet][iq][j];
        const double fw6 = sv4[345] * weights4[iq];
        alignas(32) double TF6[6];
        for (int i = 0; i < 6; ++i)
            TF6[i] = fw6 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF6[i][j] += TF6[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw7 = sv4[334] * weights4[iq];
        alignas(32) double TF7[6];
        for (int i = 0; i < 6; ++i)
            TF7[i] = fw7 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF7[i][j] += TF7[i] * FE49_C2_F_Q4[facet][iq][j];
        alignas(32) double TF8[5];
        for (int i = 0; i < 5; ++i)
            TF8[i] = fw1 * FE47_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF8[i][j] += TF8[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw8 = sv4[362] * weights4[iq];
        alignas(32) double TF9[5];
        for (int i = 0; i < 5; ++i)
            TF9[i] = fw8 * FE47_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF9[i][j] += TF9[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw9 = sv4[342] * weights4[iq];
        alignas(32) double TF10[5];
        for (int i = 0; i < 5; ++i)
            TF10[i] = fw9 * FE47_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF10[i][j] += TF10[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw10 = sv4[331] * weights4[iq];
        alignas(32) double TF11[5];
        for (int i = 0; i < 5; ++i)
            TF11[i] = fw10 * FE47_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF11[i][j] += TF11[i] * FE49_C2_F_Q4[facet][iq][j];
        alignas(32) double TF12[5];
        for (int i = 0; i < 5; ++i)
            TF12[i] = fw2 * FE47_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF12[i][j] += TF12[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw11 = sv4[361] * weights4[iq];
        alignas(32) double TF13[5];
        for (int i = 0; i < 5; ++i)
            TF13[i] = fw11 * FE47_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF13[i][j] += TF13[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw12 = sv4[341] * weights4[iq];
        alignas(32) double TF14[5];
        for (int i = 0; i < 5; ++i)
            TF14[i] = fw12 * FE47_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF14[i][j] += TF14[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw13 = sv4[330] * weights4[iq];
        alignas(32) double TF15[5];
        for (int i = 0; i < 5; ++i)
            TF15[i] = fw13 * FE47_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF15[i][j] += TF15[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw14 = sv4[372] * weights4[iq];
        alignas(32) double TF16[6];
        for (int i = 0; i < 6; ++i)
            TF16[i] = fw14 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF16[i][j] += TF16[i] * FE47_C0_F_Q4[facet][iq][j];
        alignas(32) double TF17[6];
        for (int i = 0; i < 6; ++i)
            TF17[i] = fw8 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF17[i][j] += TF17[i] * FE47_C0_D10_F_Q4[facet][iq][j];
        alignas(32) double TF18[6];
        for (int i = 0; i < 6; ++i)
            TF18[i] = fw11 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF18[i][j] += TF18[i] * FE47_C0_D01_F_Q4[facet][iq][j];
        const double fw15 = sv4[366] * weights4[iq];
        alignas(32) double TF19[6];
        for (int i = 0; i < 6; ++i)
            TF19[i] = fw15 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF19[i][j] += TF19[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw16 = sv4[363] * weights4[iq];
        alignas(32) double TF20[6];
        for (int i = 0; i < 6; ++i)
            TF20[i] = fw16 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF20[i][j] += TF20[i] * FE47_C0_D10_F_Q4[facet][iq][j];
        const double fw17 = sv4[364] * weights4[iq];
        alignas(32) double TF21[6];
        for (int i = 0; i < 6; ++i)
            TF21[i] = fw17 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF21[i][j] += TF21[i] * FE47_C0_D01_F_Q4[facet][iq][j];
        const double fw18 = sv4[346] * weights4[iq];
        alignas(32) double TF22[6];
        for (int i = 0; i < 6; ++i)
            TF22[i] = fw18 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF22[i][j] += TF22[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw19 = sv4[335] * weights4[iq];
        alignas(32) double TF23[6];
        for (int i = 0; i < 6; ++i)
            TF23[i] = fw19 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF23[i][j] += TF23[i] * FE49_C2_F_Q4[facet][iq][j];
        alignas(32) double TF24[5];
        for (int i = 0; i < 5; ++i)
            TF24[i] = fw4 * FE47_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF24[i][j] += TF24[i] * FE47_C0_F_Q4[facet][iq][j];
        alignas(32) double TF25[5];
        for (int i = 0; i < 5; ++i)
            TF25[i] = fw16 * FE47_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF25[i][j] += TF25[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw20 = sv4[343] * weights4[iq];
        alignas(32) double TF26[5];
        for (int i = 0; i < 5; ++i)
            TF26[i] = fw20 * FE47_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF26[i][j] += TF26[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw21 = sv4[332] * weights4[iq];
        alignas(32) double TF27[5];
        for (int i = 0; i < 5; ++i)
            TF27[i] = fw21 * FE47_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF27[i][j] += TF27[i] * FE49_C2_F_Q4[facet][iq][j];
        alignas(32) double TF28[5];
        for (int i = 0; i < 5; ++i)
            TF28[i] = fw5 * FE47_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF28[i][j] += TF28[i] * FE47_C0_F_Q4[facet][iq][j];
        alignas(32) double TF29[5];
        for (int i = 0; i < 5; ++i)
            TF29[i] = fw17 * FE47_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF29[i][j] += TF29[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw22 = sv4[344] * weights4[iq];
        alignas(32) double TF30[5];
        for (int i = 0; i < 5; ++i)
            TF30[i] = fw22 * FE47_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF30[i][j] += TF30[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw23 = sv4[333] * weights4[iq];
        alignas(32) double TF31[5];
        for (int i = 0; i < 5; ++i)
            TF31[i] = fw23 * FE47_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF31[i][j] += TF31[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw24 = sv4[356] * weights4[iq];
        for (int j = 0; j < 6; ++j)
            TP0[j] += fw24 * FE47_C0_F_Q4[facet][iq][j];
        const double fw25 = sv4[355] * weights4[iq];
        for (int j = 0; j < 6; ++j)
            TP1[j] += fw25 * FE47_C0_F_Q4[facet][iq][j];
        const double fw26 = sv4[338] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP2[j] += fw26 * FE49_C2_F_Q4[facet][iq][j];
        const double fw27 = sv4[327] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP3[j] += fw27 * FE49_C2_F_Q4[facet][iq][j];
        const double fw28 = sv4[352] * weights4[iq];
        alignas(32) double TF32[3];
        for (int i = 0; i < 3; ++i)
            TF32[i] = fw28 * FE49_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF32[i][j] += TF32[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw29 = sv4[351] * weights4[iq];
        alignas(32) double TF33[3];
        for (int i = 0; i < 3; ++i)
            TF33[i] = fw29 * FE49_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF33[i][j] += TF33[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw30 = sv4[348] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP4[i] += fw30 * FE49_C2_F_Q4[facet][iq][i];
        const double fw31 = sv4[336] * weights4[iq];
        alignas(32) double TF34[3];
        for (int i = 0; i < 3; ++i)
            TF34[i] = fw31 * FE49_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF34[i][j] += TF34[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw32 = sv4[347] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP5[i] += fw32 * FE49_C2_F_Q4[facet][iq][i];
        const double fw33 = sv4[350] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP6[i] += fw33 * FE49_C2_F_Q4[facet][iq][i];
        const double fw34 = sv4[325] * weights4[iq];
        alignas(32) double TF35[3];
        for (int i = 0; i < 3; ++i)
            TF35[i] = fw34 * FE49_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF35[i][j] += TF35[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw35 = sv4[349] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP7[i] += fw35 * FE49_C2_F_Q4[facet][iq][i];
        const double fw36 = sv4[354] * weights4[iq];
        for (int j = 0; j < 6; ++j)
            TP8[j] += fw36 * FE47_C0_F_Q4[facet][iq][j];
        const double fw37 = sv4[353] * weights4[iq];
        for (int j = 0; j < 6; ++j)
            TP9[j] += fw37 * FE47_C0_F_Q4[facet][iq][j];
        const double fw38 = sv4[337] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP10[j] += fw38 * FE49_C2_F_Q4[facet][iq][j];
        const double fw39 = sv4[326] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP11[j] += fw39 * FE49_C2_F_Q4[facet][iq][j];
        const double fw40 = sv4[360] * weights4[iq];
        for (int j = 0; j < 6; ++j)
            TP12[j] += fw40 * FE47_C0_F_Q4[facet][iq][j];
        const double fw41 = sv4[359] * weights4[iq];
        for (int j = 0; j < 6; ++j)
            TP13[j] += fw41 * FE47_C0_F_Q4[facet][iq][j];
        const double fw42 = sv4[340] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP14[j] += fw42 * FE49_C2_F_Q4[facet][iq][j];
        const double fw43 = sv4[329] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP15[j] += fw43 * FE49_C2_F_Q4[facet][iq][j];
        const double fw44 = sv4[324] * weights4[iq];
        alignas(32) double TF36[3];
        for (int i = 0; i < 3; ++i)
            TF36[i] = fw44 * FE49_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF36[i][j] += TF36[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw45 = sv4[323] * weights4[iq];
        alignas(32) double TF37[3];
        for (int i = 0; i < 3; ++i)
            TF37[i] = fw45 * FE49_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF37[i][j] += TF37[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw46 = sv4[322] * weights4[iq];
        alignas(32) double TF38[3];
        for (int i = 0; i < 3; ++i)
            TF38[i] = fw46 * FE49_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF38[i][j] += TF38[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw47 = sv4[321] * weights4[iq];
        alignas(32) double TF39[3];
        for (int i = 0; i < 3; ++i)
            TF39[i] = fw47 * FE49_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF39[i][j] += TF39[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw48 = sv4[358] * weights4[iq];
        for (int j = 0; j < 6; ++j)
            TP16[j] += fw48 * FE47_C0_F_Q4[facet][iq][j];
        const double fw49 = sv4[357] * weights4[iq];
        for (int j = 0; j < 6; ++j)
            TP17[j] += fw49 * FE47_C0_F_Q4[facet][iq][j];
        const double fw50 = sv4[339] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP18[j] += fw50 * FE49_C2_F_Q4[facet][iq][j];
        const double fw51 = sv4[328] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP19[j] += fw51 * FE49_C2_F_Q4[facet][iq][j];
    }
    std::fill(A, A + 441, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    static const int DM4[2] = { 15, 17 };
    static const int DM5[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + j] += BF0[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM0[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM1[j]] += BF2[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + (j + 6)] += BF3[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM2[j]] += BF4[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM3[j]] += BF5[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + (j + 15)] += BF6[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + (j + 18)] += BF7[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM0[i] + j] += BF8[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM0[i] + (j + 6)] += BF9[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + (j + 15)] += BF10[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + (j + 18)] += BF11[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM1[i] + j] += BF12[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM1[i] + (j + 6)] += BF13[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + (j + 15)] += BF14[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + (j + 18)] += BF15[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + j] += BF16[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM0[j]] += BF17[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM1[j]] += BF18[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + (j + 6)] += BF19[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM2[j]] += BF20[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM3[j]] += BF21[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + (j + 15)] += BF22[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + (j + 18)] += BF23[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM2[i] + j] += BF24[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM2[i] + (j + 6)] += BF25[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + (j + 15)] += BF26[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + (j + 18)] += BF27[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM3[i] + j] += BF28[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM3[i] + (j + 6)] += BF29[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + (j + 15)] += BF30[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + (j + 18)] += BF31[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + j] += FE49_C2_D01_F_Q4[0][0][i] * TP0[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + (j + 6)] += FE49_C2_D01_F_Q4[0][0][i] * TP1[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += FE49_C2_D01_F_Q4[0][0][i] * TP2[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += FE49_C2_D01_F_Q4[0][0][i] * TP3[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + j] += BF32[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + (j + 6)] += BF33[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 15)] += FE49_C2_D01_F_Q4[0][0][j] * TP4[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += BF34[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM4[j]] += FE49_C2_D01_F_Q4[0][0][j] * TP5[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 18)] += FE49_C2_D01_F_Q4[0][0][j] * TP6[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += BF35[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM5[j]] += FE49_C2_D01_F_Q4[0][0][j] * TP7[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM4[i] + j] += FE49_C2_D01_F_Q4[0][0][i] * TP8[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM4[i] + (j + 6)] += FE49_C2_D01_F_Q4[0][0][i] * TP9[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + (j + 15)] += FE49_C2_D01_F_Q4[0][0][i] * TP10[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + (j + 18)] += FE49_C2_D01_F_Q4[0][0][i] * TP11[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + j] += FE49_C2_D01_F_Q4[0][0][i] * TP12[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + (j + 6)] += FE49_C2_D01_F_Q4[0][0][i] * TP13[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += FE49_C2_D01_F_Q4[0][0][i] * TP14[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += FE49_C2_D01_F_Q4[0][0][i] * TP15[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + j] += BF36[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + (j + 6)] += BF37[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += BF38[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += BF39[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM5[i] + j] += FE49_C2_D01_F_Q4[0][0][i] * TP16[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM5[i] + (j + 6)] += FE49_C2_D01_F_Q4[0][0][i] * TP17[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 15)] += FE49_C2_D01_F_Q4[0][0][i] * TP18[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 18)] += FE49_C2_D01_F_Q4[0][0][i] * TP19[j];
  }

};


class ranspseudotimestepping_cell_integral_3_otherwise: public ufc::cell_integral
{
public:

  ranspseudotimestepping_cell_integral_3_otherwise() : ufc::cell_integral()
  {

  }

  ~ranspseudotimestepping_cell_integral_3_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({false, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 194
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    alignas(32) static const double FE64_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE64_C0_D02_Q12[1][1][3] = { { { 3.999999999999998, 4.000000000000004, -7.999999999999995 } } };
    alignas(32) static const double FE64_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE64_C0_D11_Q12[1][1][4] = { { { 4.0, 3.999999999999997, -3.999999999999997, -4.000000000000005 } } };
    alignas(32) static const double FE64_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803568, 0.2205142679699366 },
            { -0.05512856699248404, -0.05512856699248409, 0.6533077030470597, 0.2205142679699364, 0.2205142679699362, 0.01592089499803596 },
            { 0.6533077030470594, -0.05512856699248415, -0.05512856699248411, 0.01592089499803581, 0.2205142679699364, 0.2205142679699366 },
            { -0.1249989825350975, 0.001430579517788794, -0.1249989825350975, 0.4999959301403892, 0.2485755252716258, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788821, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880001, 0.173768363654174, -0.1177151633084292, 0.790160442765823, 0.06597478591860526, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880001, 0.1353078281686267, 0.06597478591860512, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860538 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880001, 0.06597478591860524, 0.1353078281686266, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860538 },
            { 0.1737683636541741, -0.04749625719880015, -0.1177151633084292, 0.06597478591860535, 0.7901604427658229, 0.1353078281686269 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q12[0][0][1];
    const double w4_d1 = w[4][0] * FE3_C0_D01_Q12[0][0][0] + w[4][2] * FE3_C0_D01_Q12[0][0][1];
    double w4_d0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w4_d0 += w[4][ic] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c3 = w[2][15] * FE3_C0_D01_Q12[0][0][0] + w[2][17] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c3 += w[2][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c4 = w[2][18] * FE3_C0_D01_Q12[0][0][0] + w[2][20] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c4 += w[2][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    const double w1_d11_c1 = w[1][6] * FE64_C0_D02_Q12[0][0][0] + w[1][8] * FE64_C0_D02_Q12[0][0][1] + w[1][10] * FE64_C0_D02_Q12[0][0][2];
    const double w1_d01_c1 = w[1][6] * FE64_C0_D11_Q12[0][0][0] + w[1][9] * FE64_C0_D11_Q12[0][0][1] + w[1][10] * FE64_C0_D11_Q12[0][0][2] + w[1][11] * FE64_C0_D11_Q12[0][0][3];
    const double w1_d00_c1 = w[1][6] * FE64_C0_D02_Q12[0][0][0] + w[1][7] * FE64_C0_D02_Q12[0][0][1] + w[1][11] * FE64_C0_D02_Q12[0][0][2];
    const double w1_d01_c0 = w[1][0] * FE64_C0_D11_Q12[0][0][0] + w[1][3] * FE64_C0_D11_Q12[0][0][1] + w[1][4] * FE64_C0_D11_Q12[0][0][2] + w[1][5] * FE64_C0_D11_Q12[0][0][3];
    const double w1_d11_c0 = w[1][0] * FE64_C0_D02_Q12[0][0][0] + w[1][2] * FE64_C0_D02_Q12[0][0][1] + w[1][4] * FE64_C0_D02_Q12[0][0][2];
    const double w1_d00_c0 = w[1][0] * FE64_C0_D02_Q12[0][0][0] + w[1][1] * FE64_C0_D02_Q12[0][0][1] + w[1][5] * FE64_C0_D02_Q12[0][0][2];
    const double w1_d1_c2 = w[1][12] * FE3_C0_D01_Q12[0][0][0] + w[1][14] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c2 += w[1][ic + 12] * FE3_C0_D01_Q12[0][0][ic];
    const double w3_d11_c1 = w[3][6] * FE64_C0_D02_Q12[0][0][0] + w[3][8] * FE64_C0_D02_Q12[0][0][1] + w[3][10] * FE64_C0_D02_Q12[0][0][2];
    const double w3_d01_c1 = w[3][6] * FE64_C0_D11_Q12[0][0][0] + w[3][9] * FE64_C0_D11_Q12[0][0][1] + w[3][10] * FE64_C0_D11_Q12[0][0][2] + w[3][11] * FE64_C0_D11_Q12[0][0][3];
    const double w3_d00_c1 = w[3][6] * FE64_C0_D02_Q12[0][0][0] + w[3][7] * FE64_C0_D02_Q12[0][0][1] + w[3][11] * FE64_C0_D02_Q12[0][0][2];
    const double w3_d01_c0 = w[3][0] * FE64_C0_D11_Q12[0][0][0] + w[3][3] * FE64_C0_D11_Q12[0][0][1] + w[3][4] * FE64_C0_D11_Q12[0][0][2] + w[3][5] * FE64_C0_D11_Q12[0][0][3];
    const double w3_d11_c0 = w[3][0] * FE64_C0_D02_Q12[0][0][0] + w[3][2] * FE64_C0_D02_Q12[0][0][1] + w[3][4] * FE64_C0_D02_Q12[0][0][2];
    const double w3_d00_c0 = w[3][0] * FE64_C0_D02_Q12[0][0][0] + w[3][1] * FE64_C0_D02_Q12[0][0][1] + w[3][5] * FE64_C0_D02_Q12[0][0][2];
    const double w3_d1_c2 = w[3][12] * FE3_C0_D01_Q12[0][0][0] + w[3][14] * FE3_C0_D01_Q12[0][0][1];
    double w3_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c2 += w[3][ic + 12] * FE3_C0_D01_Q12[0][0][ic];
    const double w3_d1_c3 = w[3][15] * FE3_C0_D01_Q12[0][0][0] + w[3][17] * FE3_C0_D01_Q12[0][0][1];
    double w3_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c3 += w[3][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w1_d1_c3 = w[1][15] * FE3_C0_D01_Q12[0][0][0] + w[1][17] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c3 += w[1][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w3_d1_c4 = w[3][18] * FE3_C0_D01_Q12[0][0][0] + w[3][20] * FE3_C0_D01_Q12[0][0][1];
    double w3_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c4 += w[3][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    const double w1_d1_c4 = w[1][18] * FE3_C0_D01_Q12[0][0][0] + w[1][20] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c4 += w[1][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    alignas(32) double sp[177];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = w4_d1 * sp[3];
    sp[8] = w4_d0 * sp[4];
    sp[9] = sp[7] + sp[8];
    sp[10] = w2_d1_c3 * sp[3];
    sp[11] = w2_d0_c3 * sp[4];
    sp[12] = sp[10] + sp[11];
    sp[13] = w2_d1_c4 * sp[3];
    sp[14] = w2_d0_c4 * sp[4];
    sp[15] = sp[13] + sp[14];
    sp[16] = w1_d11_c1 * sp[3];
    sp[17] = w1_d01_c1 * sp[4];
    sp[18] = sp[16] + sp[17];
    sp[19] = sp[18] * sp[3];
    sp[20] = w1_d01_c1 * sp[3];
    sp[21] = w1_d00_c1 * sp[4];
    sp[22] = sp[20] + sp[21];
    sp[23] = sp[22] * sp[4];
    sp[24] = sp[19] + sp[23];
    sp[25] = sp[24] + sp[24];
    sp[26] = w4_d0 * sp[5];
    sp[27] = w4_d1 * sp[6];
    sp[28] = sp[26] + sp[27];
    sp[29] = w2_d0_c3 * sp[5];
    sp[30] = w2_d1_c3 * sp[6];
    sp[31] = sp[29] + sp[30];
    sp[32] = w2_d0_c4 * sp[5];
    sp[33] = w2_d1_c4 * sp[6];
    sp[34] = sp[32] + sp[33];
    sp[35] = w1_d01_c0 * sp[5];
    sp[36] = w1_d11_c0 * sp[6];
    sp[37] = sp[35] + sp[36];
    sp[38] = sp[37] * sp[3];
    sp[39] = w1_d00_c0 * sp[5];
    sp[40] = w1_d01_c0 * sp[6];
    sp[41] = sp[39] + sp[40];
    sp[42] = sp[41] * sp[4];
    sp[43] = sp[38] + sp[42];
    sp[44] = w1_d00_c1 * sp[5];
    sp[45] = w1_d01_c1 * sp[6];
    sp[46] = sp[44] + sp[45];
    sp[47] = sp[46] * sp[5];
    sp[48] = w1_d01_c1 * sp[5];
    sp[49] = w1_d11_c1 * sp[6];
    sp[50] = sp[48] + sp[49];
    sp[51] = sp[50] * sp[6];
    sp[52] = sp[47] + sp[51];
    sp[53] = sp[43] + sp[52];
    sp[54] = w1_d1_c2 * sp[3];
    sp[55] = w1_d0_c2 * sp[4];
    sp[56] = sp[54] + sp[55];
    sp[57] = w3_d11_c1 * sp[3];
    sp[58] = w3_d01_c1 * sp[4];
    sp[59] = sp[57] + sp[58];
    sp[60] = sp[59] * sp[3];
    sp[61] = w3_d01_c1 * sp[3];
    sp[62] = w3_d00_c1 * sp[4];
    sp[63] = sp[61] + sp[62];
    sp[64] = sp[63] * sp[4];
    sp[65] = sp[60] + sp[64];
    sp[66] = sp[65] + sp[65];
    sp[67] = w3_d01_c0 * sp[5];
    sp[68] = w3_d11_c0 * sp[6];
    sp[69] = sp[67] + sp[68];
    sp[70] = sp[69] * sp[3];
    sp[71] = w3_d00_c0 * sp[5];
    sp[72] = w3_d01_c0 * sp[6];
    sp[73] = sp[71] + sp[72];
    sp[74] = sp[73] * sp[4];
    sp[75] = sp[70] + sp[74];
    sp[76] = w3_d00_c1 * sp[5];
    sp[77] = w3_d01_c1 * sp[6];
    sp[78] = sp[76] + sp[77];
    sp[79] = sp[78] * sp[5];
    sp[80] = w3_d01_c1 * sp[5];
    sp[81] = w3_d11_c1 * sp[6];
    sp[82] = sp[80] + sp[81];
    sp[83] = sp[82] * sp[6];
    sp[84] = sp[79] + sp[83];
    sp[85] = sp[75] + sp[84];
    sp[86] = w3_d1_c2 * sp[3];
    sp[87] = w3_d0_c2 * sp[4];
    sp[88] = sp[86] + sp[87];
    sp[89] = w1_d11_c0 * sp[3];
    sp[90] = w1_d01_c0 * sp[4];
    sp[91] = sp[89] + sp[90];
    sp[92] = sp[91] * sp[3];
    sp[93] = w1_d01_c0 * sp[3];
    sp[94] = w1_d00_c0 * sp[4];
    sp[95] = sp[93] + sp[94];
    sp[96] = sp[95] * sp[4];
    sp[97] = sp[92] + sp[96];
    sp[98] = sp[22] * sp[5];
    sp[99] = sp[18] * sp[6];
    sp[100] = sp[98] + sp[99];
    sp[101] = sp[97] + sp[100];
    sp[102] = sp[41] * sp[5];
    sp[103] = sp[37] * sp[6];
    sp[104] = sp[102] + sp[103];
    sp[105] = sp[104] + sp[104];
    sp[106] = w1_d0_c2 * sp[5];
    sp[107] = w1_d1_c2 * sp[6];
    sp[108] = sp[106] + sp[107];
    sp[109] = w3_d11_c0 * sp[3];
    sp[110] = w3_d01_c0 * sp[4];
    sp[111] = sp[109] + sp[110];
    sp[112] = sp[111] * sp[3];
    sp[113] = w3_d01_c0 * sp[3];
    sp[114] = w3_d00_c0 * sp[4];
    sp[115] = sp[113] + sp[114];
    sp[116] = sp[115] * sp[4];
    sp[117] = sp[112] + sp[116];
    sp[118] = sp[63] * sp[5];
    sp[119] = sp[59] * sp[6];
    sp[120] = sp[118] + sp[119];
    sp[121] = sp[117] + sp[120];
    sp[122] = sp[73] * sp[5];
    sp[123] = sp[69] * sp[6];
    sp[124] = sp[122] + sp[123];
    sp[125] = sp[124] + sp[124];
    sp[126] = w3_d0_c2 * sp[5];
    sp[127] = w3_d1_c2 * sp[6];
    sp[128] = sp[126] + sp[127];
    sp[129] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[130] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[131] = sp[129] + sp[130];
    sp[132] = std::sqrt(sp[131]);
    sp[133] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[134] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[135] = sp[133] + sp[134];
    sp[136] = std::sqrt(sp[135]);
    sp[137] = sp[132] * sp[136];
    sp[138] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[139] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[140] = sp[138] + sp[139];
    sp[141] = std::sqrt(sp[140]);
    sp[142] = sp[137] * sp[141];
    sp[143] = triangle_reference_cell_volume * sp[2];
    sp[144] = std::abs(sp[143]);
    sp[145] = sp[142] / (4.0 * sp[144]);
    sp[146] = w3_d1_c3 * sp[3];
    sp[147] = w3_d0_c3 * sp[4];
    sp[148] = sp[146] + sp[147];
    sp[149] = w3_d0_c3 * sp[5];
    sp[150] = w3_d1_c3 * sp[6];
    sp[151] = sp[149] + sp[150];
    sp[152] = w1_d1_c3 * sp[3];
    sp[153] = w1_d0_c3 * sp[4];
    sp[154] = sp[152] + sp[153];
    sp[155] = w1_d0_c3 * sp[5];
    sp[156] = w1_d1_c3 * sp[6];
    sp[157] = sp[155] + sp[156];
    sp[158] = w3_d1_c4 * sp[3];
    sp[159] = w3_d0_c4 * sp[4];
    sp[160] = sp[158] + sp[159];
    sp[161] = w3_d0_c4 * sp[5];
    sp[162] = w3_d1_c4 * sp[6];
    sp[163] = sp[161] + sp[162];
    sp[164] = w1_d1_c4 * sp[3];
    sp[165] = w1_d0_c4 * sp[4];
    sp[166] = sp[164] + sp[165];
    sp[167] = w1_d0_c4 * sp[5];
    sp[168] = w1_d1_c4 * sp[6];
    sp[169] = sp[167] + sp[168];
    sp[170] = sp[154] * sp[148];
    sp[171] = sp[157] * sp[151];
    sp[172] = sp[170] + sp[171];
    sp[173] = sp[166] * sp[160];
    sp[174] = sp[169] * sp[163];
    sp[175] = sp[173] + sp[174];
    sp[176] = std::abs(sp[2]);
    alignas(32) double BF0[2] = {};
    alignas(32) double BF1[3] = {};
    alignas(32) double BF2[2] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE64_C0_Q12[0][iq][ic];
        const double w1_d1_c1 = w[1][6] * FE64_C0_D01_Q12[0][iq][0] + w[1][8] * FE64_C0_D01_Q12[0][iq][1] + w[1][9] * FE64_C0_D01_Q12[0][iq][2] + w[1][10] * FE64_C0_D01_Q12[0][iq][3] + w[1][11] * FE64_C0_D01_Q12[0][iq][4];
        const double w1_d0_c1 = w[1][6] * FE64_C0_D10_Q12[0][iq][0] + w[1][7] * FE64_C0_D10_Q12[0][iq][1] + w[1][9] * FE64_C0_D10_Q12[0][iq][2] + w[1][10] * FE64_C0_D10_Q12[0][iq][3] + w[1][11] * FE64_C0_D10_Q12[0][iq][4];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE64_C0_Q12[0][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4 += w[4][ic] * FE3_C0_Q12[0][iq][ic];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE3_C0_Q12[0][iq][ic];
        const double w1_d1_c0 = w[1][0] * FE64_C0_D01_Q12[0][iq][0] + w[1][2] * FE64_C0_D01_Q12[0][iq][1] + w[1][3] * FE64_C0_D01_Q12[0][iq][2] + w[1][4] * FE64_C0_D01_Q12[0][iq][3] + w[1][5] * FE64_C0_D01_Q12[0][iq][4];
        const double w1_d0_c0 = w[1][0] * FE64_C0_D10_Q12[0][iq][0] + w[1][1] * FE64_C0_D10_Q12[0][iq][1] + w[1][3] * FE64_C0_D10_Q12[0][iq][2] + w[1][4] * FE64_C0_D10_Q12[0][iq][3] + w[1][5] * FE64_C0_D10_Q12[0][iq][4];
        const double w3_d1_c1 = w[3][6] * FE64_C0_D01_Q12[0][iq][0] + w[3][8] * FE64_C0_D01_Q12[0][iq][1] + w[3][9] * FE64_C0_D01_Q12[0][iq][2] + w[3][10] * FE64_C0_D01_Q12[0][iq][3] + w[3][11] * FE64_C0_D01_Q12[0][iq][4];
        const double w3_d0_c1 = w[3][6] * FE64_C0_D10_Q12[0][iq][0] + w[3][7] * FE64_C0_D10_Q12[0][iq][1] + w[3][9] * FE64_C0_D10_Q12[0][iq][2] + w[3][10] * FE64_C0_D10_Q12[0][iq][3] + w[3][11] * FE64_C0_D10_Q12[0][iq][4];
        const double w3_d1_c0 = w[3][0] * FE64_C0_D01_Q12[0][iq][0] + w[3][2] * FE64_C0_D01_Q12[0][iq][1] + w[3][3] * FE64_C0_D01_Q12[0][iq][2] + w[3][4] * FE64_C0_D01_Q12[0][iq][3] + w[3][5] * FE64_C0_D01_Q12[0][iq][4];
        const double w3_d0_c0 = w[3][0] * FE64_C0_D10_Q12[0][iq][0] + w[3][1] * FE64_C0_D10_Q12[0][iq][1] + w[3][3] * FE64_C0_D10_Q12[0][iq][2] + w[3][4] * FE64_C0_D10_Q12[0][iq][3] + w[3][5] * FE64_C0_D10_Q12[0][iq][4];
        const double w2_d1_c1 = w[2][6] * FE64_C0_D01_Q12[0][iq][0] + w[2][8] * FE64_C0_D01_Q12[0][iq][1] + w[2][9] * FE64_C0_D01_Q12[0][iq][2] + w[2][10] * FE64_C0_D01_Q12[0][iq][3] + w[2][11] * FE64_C0_D01_Q12[0][iq][4];
        const double w2_d0_c1 = w[2][6] * FE64_C0_D10_Q12[0][iq][0] + w[2][7] * FE64_C0_D10_Q12[0][iq][1] + w[2][9] * FE64_C0_D10_Q12[0][iq][2] + w[2][10] * FE64_C0_D10_Q12[0][iq][3] + w[2][11] * FE64_C0_D10_Q12[0][iq][4];
        const double w2_d1_c0 = w[2][0] * FE64_C0_D01_Q12[0][iq][0] + w[2][2] * FE64_C0_D01_Q12[0][iq][1] + w[2][3] * FE64_C0_D01_Q12[0][iq][2] + w[2][4] * FE64_C0_D01_Q12[0][iq][3] + w[2][5] * FE64_C0_D01_Q12[0][iq][4];
        const double w2_d0_c0 = w[2][0] * FE64_C0_D10_Q12[0][iq][0] + w[2][1] * FE64_C0_D10_Q12[0][iq][1] + w[2][3] * FE64_C0_D10_Q12[0][iq][2] + w[2][4] * FE64_C0_D10_Q12[0][iq][3] + w[2][5] * FE64_C0_D10_Q12[0][iq][4];
        double w3_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c4 += w[3][ic + 18] * FE3_C0_Q12[0][iq][ic];
        double w1_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c4 += w[1][ic + 18] * FE3_C0_Q12[0][iq][ic];
        double w1_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c3 += w[1][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w3_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c3 += w[3][ic + 15] * FE3_C0_Q12[0][iq][ic];
        alignas(32) double sv12[417];
        sv12[0] = w1_d1_c1 * sp[3];
        sv12[1] = w1_d0_c1 * sp[4];
        sv12[2] = sv12[0] + sv12[1];
        sv12[3] = w2_c1 * sv12[2];
        sv12[4] = w1_d0_c1 * sp[5];
        sv12[5] = w1_d1_c1 * sp[6];
        sv12[6] = sv12[4] + sv12[5];
        sv12[7] = w2_c0 * sv12[6];
        sv12[8] = sv12[3] + sv12[7];
        sv12[9] = std::exp(w4);
        sv12[10] = sp[9] * sv12[9];
        sv12[11] = w2_c3 * (0.09 * sv12[10]);
        sv12[12] = sp[12] * (0.09 * sv12[9]);
        sv12[13] = sv12[11] + sv12[12];
        sv12[14] = w2_c3 * sv12[13];
        sv12[15] = w2_c3 * (0.09 * sv12[9]);
        sv12[16] = sp[12] * sv12[15];
        sv12[17] = sv12[14] + sv12[16];
        sv12[18] = w2_c4 * sp[15];
        sv12[19] = sv12[18] + sv12[18];
        sv12[20] = w2_c4 * w2_c4;
        sv12[21] = std::sqrt(1e-8 + sv12[20]);
        sv12[22] = sv12[19] / (2 * sv12[21]);
        sv12[23] = sp[15] + sv12[22];
        sv12[24] = w2_c3 * sv12[15];
        sv12[25] = w2_c4 + sv12[21];
        sv12[26] = sv12[24] / (0.5 * sv12[25]);
        sv12[27] = 0.5 * sv12[23] * sv12[26];
        sv12[28] = sv12[17] + -1 * sv12[27];
        sv12[29] = sv12[28] / (0.5 * sv12[25]);
        sv12[30] = sv12[2] + sv12[2];
        sv12[31] = 2.0 * sv12[29] * (sv12[30] / 2);
        sv12[32] = 2.0 * (0.0001 + sv12[26]) * (sp[25] / 2);
        sv12[33] = sv12[31] + sv12[32];
        sv12[34] = sp[28] * sv12[9];
        sv12[35] = w2_c3 * (0.09 * sv12[34]);
        sv12[36] = sp[31] * (0.09 * sv12[9]);
        sv12[37] = sv12[35] + sv12[36];
        sv12[38] = w2_c3 * sv12[37];
        sv12[39] = sp[31] * sv12[15];
        sv12[40] = sv12[38] + sv12[39];
        sv12[41] = w2_c4 * sp[34];
        sv12[42] = sv12[41] + sv12[41];
        sv12[43] = sv12[42] / (2 * sv12[21]);
        sv12[44] = sp[34] + sv12[43];
        sv12[45] = 0.5 * sv12[44] * sv12[26];
        sv12[46] = sv12[40] + -1 * sv12[45];
        sv12[47] = sv12[46] / (0.5 * sv12[25]);
        sv12[48] = w1_d1_c0 * sp[3];
        sv12[49] = w1_d0_c0 * sp[4];
        sv12[50] = sv12[48] + sv12[49];
        sv12[51] = sv12[50] + sv12[6];
        sv12[52] = 2.0 * sv12[47] * (sv12[51] / 2);
        sv12[53] = 2.0 * (0.0001 + sv12[26]) * (sp[53] / 2);
        sv12[54] = sv12[52] + sv12[53];
        sv12[55] = sv12[33] + sv12[54];
        sv12[56] = sv12[8] + -1 * sv12[55];
        sv12[57] = sv12[56] + sp[56];
        sv12[58] = w3_d1_c1 * sp[3];
        sv12[59] = w3_d0_c1 * sp[4];
        sv12[60] = sv12[58] + sv12[59];
        sv12[61] = w2_c1 * sv12[60];
        sv12[62] = w3_d0_c1 * sp[5];
        sv12[63] = w3_d1_c1 * sp[6];
        sv12[64] = sv12[62] + sv12[63];
        sv12[65] = w2_c0 * sv12[64];
        sv12[66] = sv12[61] + sv12[65];
        sv12[67] = sv12[60] + sv12[60];
        sv12[68] = 2.0 * sv12[29] * (sv12[67] / 2);
        sv12[69] = 2.0 * (0.0001 + sv12[26]) * (sp[66] / 2);
        sv12[70] = sv12[68] + sv12[69];
        sv12[71] = w3_d1_c0 * sp[3];
        sv12[72] = w3_d0_c0 * sp[4];
        sv12[73] = sv12[71] + sv12[72];
        sv12[74] = sv12[73] + sv12[64];
        sv12[75] = 2.0 * sv12[47] * (sv12[74] / 2);
        sv12[76] = 2.0 * (0.0001 + sv12[26]) * (sp[85] / 2);
        sv12[77] = sv12[75] + sv12[76];
        sv12[78] = sv12[70] + sv12[77];
        sv12[79] = sv12[66] + -1 * sv12[78];
        sv12[80] = sv12[79] + sp[88];
        sv12[81] = sv12[57] * sv12[80];
        sv12[82] = w2_c1 * sv12[50];
        sv12[83] = w1_d0_c0 * sp[5];
        sv12[84] = w1_d1_c0 * sp[6];
        sv12[85] = sv12[83] + sv12[84];
        sv12[86] = w2_c0 * sv12[85];
        sv12[87] = sv12[82] + sv12[86];
        sv12[88] = 2.0 * sv12[29] * (sv12[51] / 2);
        sv12[89] = 2.0 * (0.0001 + sv12[26]) * (sp[101] / 2);
        sv12[90] = sv12[88] + sv12[89];
        sv12[91] = sv12[85] + sv12[85];
        sv12[92] = 2.0 * sv12[47] * (sv12[91] / 2);
        sv12[93] = 2.0 * (0.0001 + sv12[26]) * (sp[105] / 2);
        sv12[94] = sv12[92] + sv12[93];
        sv12[95] = sv12[90] + sv12[94];
        sv12[96] = sv12[87] + -1 * sv12[95];
        sv12[97] = sv12[96] + sp[108];
        sv12[98] = w2_c1 * sv12[73];
        sv12[99] = w3_d0_c0 * sp[5];
        sv12[100] = w3_d1_c0 * sp[6];
        sv12[101] = sv12[99] + sv12[100];
        sv12[102] = w2_c0 * sv12[101];
        sv12[103] = sv12[98] + sv12[102];
        sv12[104] = 2.0 * sv12[29] * (sv12[74] / 2);
        sv12[105] = 2.0 * (0.0001 + sv12[26]) * (sp[121] / 2);
        sv12[106] = sv12[104] + sv12[105];
        sv12[107] = sv12[101] + sv12[101];
        sv12[108] = 2.0 * sv12[47] * (sv12[107] / 2);
        sv12[109] = 2.0 * (0.0001 + sv12[26]) * (sp[125] / 2);
        sv12[110] = sv12[108] + sv12[109];
        sv12[111] = sv12[106] + sv12[110];
        sv12[112] = sv12[103] + -1 * sv12[111];
        sv12[113] = sv12[112] + sp[128];
        sv12[114] = sv12[97] * sv12[113];
        sv12[115] = sv12[81] + sv12[114];
        sv12[116] = w2_c0 * w2_c0;
        sv12[117] = w2_c1 * w2_c1;
        sv12[118] = sv12[116] + sv12[117];
        sv12[119] = std::sqrt(sv12[118]);
        sv12[120] = 0.5 * (2.0 * sp[145]) * sv12[119];
        sv12[121] = sv12[120] / (0.0001 + sv12[26]);
        sv12[122] = sv12[121] * sv12[26];
        sv12[123] = -1 * sv12[122] / (0.0001 + sv12[26]);
        sv12[124] = sv12[123] * (1.0 / sv12[121]);
        sv12[125] = -1 * sv12[124] / sv12[121];
        sv12[126] = std::exp(-2.0 * sv12[121]);
        sv12[127] = -2.0 * sv12[123] * sv12[126];
        sv12[128] = (1.0 + sv12[126]) / (1.0 + -1 * sv12[126]);
        sv12[129] = -1 * sv12[127] * sv12[128];
        sv12[130] = -1 * sv12[129] + sv12[127];
        sv12[131] = sv12[130] / (1.0 + -1 * sv12[126]);
        sv12[132] = -1 * sv12[125] + sv12[131];
        sv12[133] = sv12[132] * (2.0 * sp[145]);
        sv12[134] = sv12[133] / sv12[119];
        sv12[135] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[121]) * (2.0 * sp[145]);
        sv12[136] = sv12[135] * (2.0 * sp[145]);
        sv12[137] = sv12[136] / (0.0001 + sv12[26]);
        sv12[138] = sv12[137] * sv12[26];
        sv12[139] = 0.5 * (-0.004435991517475 * sv12[123]) * (2.0 * sp[145]);
        sv12[140] = sv12[139] * (2.0 * sp[145]);
        sv12[141] = -1 * sv12[138] + sv12[140];
        sv12[142] = sv12[141] / (0.0001 + sv12[26]);
        sv12[143] = (sv12[121] >= 0.1 ? sv12[134] : sv12[142]);
        sv12[144] = sv12[115] * sv12[143];
        sv12[145] = sp[3] * sv12[9];
        sv12[146] = sp[4] * sv12[9];
        sv12[147] = w2_c3 * (0.09 * sv12[145]);
        sv12[148] = w2_c3 * (0.09 * sv12[146]);
        sv12[149] = w2_c3 * sv12[147];
        sv12[150] = w2_c3 * sv12[148];
        sv12[151] = sv12[149] / (0.5 * sv12[25]);
        sv12[152] = sv12[150] / (0.5 * sv12[25]);
        sv12[153] = 2.0 * sv12[151] * (sv12[51] / 2);
        sv12[154] = 2.0 * sv12[152] * (sv12[51] / 2);
        sv12[155] = 2.0 * sv12[26] * (sp[101] / 2);
        sv12[156] = sv12[88] + sv12[155];
        sv12[157] = sp[6] * sv12[9];
        sv12[158] = sp[5] * sv12[9];
        sv12[159] = w2_c3 * (0.09 * sv12[157]);
        sv12[160] = w2_c3 * (0.09 * sv12[158]);
        sv12[161] = w2_c3 * sv12[159];
        sv12[162] = w2_c3 * sv12[160];
        sv12[163] = sv12[161] / (0.5 * sv12[25]);
        sv12[164] = sv12[162] / (0.5 * sv12[25]);
        sv12[165] = 2.0 * sv12[163] * (sv12[91] / 2);
        sv12[166] = 2.0 * sv12[164] * (sv12[91] / 2);
        sv12[167] = 2.0 * sv12[26] * (sp[105] / 2);
        sv12[168] = sv12[92] + sv12[167];
        sv12[169] = sv12[156] + sv12[168];
        sv12[170] = sv12[165] + sv12[153];
        sv12[171] = sv12[166] + sv12[154];
        sv12[172] = sv12[113] * (-1 * sv12[169]);
        sv12[173] = sv12[113] * (-1 * sv12[170]);
        sv12[174] = sv12[113] * (-1 * sv12[171]);
        sv12[175] = 2.0 * sv12[151] * (sv12[74] / 2);
        sv12[176] = 2.0 * sv12[152] * (sv12[74] / 2);
        sv12[177] = 2.0 * sv12[26] * (sp[121] / 2);
        sv12[178] = sv12[104] + sv12[177];
        sv12[179] = 2.0 * sv12[163] * (sv12[107] / 2);
        sv12[180] = 2.0 * sv12[164] * (sv12[107] / 2);
        sv12[181] = 2.0 * sv12[26] * (sp[125] / 2);
        sv12[182] = sv12[108] + sv12[181];
        sv12[183] = sv12[178] + sv12[182];
        sv12[184] = sv12[179] + sv12[175];
        sv12[185] = sv12[180] + sv12[176];
        sv12[186] = sv12[97] * (-1 * sv12[183]);
        sv12[187] = sv12[97] * (-1 * sv12[184]);
        sv12[188] = sv12[97] * (-1 * sv12[185]);
        sv12[189] = sv12[172] + sv12[186];
        sv12[190] = sv12[173] + sv12[187];
        sv12[191] = sv12[174] + sv12[188];
        sv12[192] = 2.0 * sv12[151] * (sv12[30] / 2);
        sv12[193] = 2.0 * sv12[152] * (sv12[30] / 2);
        sv12[194] = 2.0 * sv12[26] * (sp[25] / 2);
        sv12[195] = sv12[31] + sv12[194];
        sv12[196] = 2.0 * sv12[163] * (sv12[51] / 2);
        sv12[197] = 2.0 * sv12[164] * (sv12[51] / 2);
        sv12[198] = 2.0 * sv12[26] * (sp[53] / 2);
        sv12[199] = sv12[52] + sv12[198];
        sv12[200] = sv12[195] + sv12[199];
        sv12[201] = sv12[192] + sv12[196];
        sv12[202] = sv12[193] + sv12[197];
        sv12[203] = sv12[80] * (-1 * sv12[200]);
        sv12[204] = sv12[80] * (-1 * sv12[201]);
        sv12[205] = sv12[80] * (-1 * sv12[202]);
        sv12[206] = 2.0 * sv12[151] * (sv12[67] / 2);
        sv12[207] = 2.0 * sv12[152] * (sv12[67] / 2);
        sv12[208] = 2.0 * sv12[26] * (sp[66] / 2);
        sv12[209] = sv12[68] + sv12[208];
        sv12[210] = 2.0 * sv12[163] * (sv12[74] / 2);
        sv12[211] = 2.0 * sv12[164] * (sv12[74] / 2);
        sv12[212] = 2.0 * sv12[26] * (sp[85] / 2);
        sv12[213] = sv12[75] + sv12[212];
        sv12[214] = sv12[209] + sv12[213];
        sv12[215] = sv12[206] + sv12[210];
        sv12[216] = sv12[207] + sv12[211];
        sv12[217] = sv12[57] * (-1 * sv12[214]);
        sv12[218] = sv12[57] * (-1 * sv12[215]);
        sv12[219] = sv12[57] * (-1 * sv12[216]);
        sv12[220] = sv12[203] + sv12[217];
        sv12[221] = sv12[204] + sv12[218];
        sv12[222] = sv12[205] + sv12[219];
        sv12[223] = sv12[189] + sv12[220];
        sv12[224] = sv12[190] + sv12[221];
        sv12[225] = sv12[222] + sv12[191];
        sv12[226] = -1 * (1.0 / sv12[121]) + sv12[128];
        sv12[227] = sv12[226] * (2.0 * sp[145]);
        sv12[228] = sv12[227] / sv12[119];
        sv12[229] = (sv12[121] >= 0.1 ? sv12[228] : sv12[137]);
        sv12[230] = sv12[223] * sv12[229];
        sv12[231] = sv12[224] * sv12[229];
        sv12[232] = sv12[225] * sv12[229];
        sv12[233] = sv12[144] + sv12[230];
        sv12[234] = w2_c1 * sp[148];
        sv12[235] = w2_c0 * sp[151];
        sv12[236] = sv12[234] + sv12[235];
        sv12[237] = sp[148] * sv12[29];
        sv12[238] = sp[151] * sv12[47];
        sv12[239] = sv12[237] + sv12[238];
        sv12[240] = sv12[236] + -1 * sv12[239];
        sv12[241] = w2_c1 * sp[154];
        sv12[242] = w2_c0 * sp[157];
        sv12[243] = sv12[241] + sv12[242];
        sv12[244] = sp[154] * sv12[29];
        sv12[245] = sp[157] * sv12[47];
        sv12[246] = sv12[244] + sv12[245];
        sv12[247] = sv12[243] + -1 * sv12[246];
        sv12[248] = w2_c4 + sv12[247];
        sv12[249] = w2_d1_c1 * sp[3];
        sv12[250] = w2_d0_c1 * sp[4];
        sv12[251] = sv12[249] + sv12[250];
        sv12[252] = sv12[251] + sv12[251];
        sv12[253] = sv12[252] / 2 * (sv12[252] / 2);
        sv12[254] = w2_d1_c0 * sp[3];
        sv12[255] = w2_d0_c0 * sp[4];
        sv12[256] = sv12[254] + sv12[255];
        sv12[257] = w2_d0_c1 * sp[5];
        sv12[258] = w2_d1_c1 * sp[6];
        sv12[259] = sv12[257] + sv12[258];
        sv12[260] = sv12[256] + sv12[259];
        sv12[261] = sv12[260] / 2 * (sv12[260] / 2);
        sv12[262] = sv12[253] + sv12[261];
        sv12[263] = w2_d0_c0 * sp[5];
        sv12[264] = w2_d1_c0 * sp[6];
        sv12[265] = sv12[263] + sv12[264];
        sv12[266] = sv12[265] + sv12[265];
        sv12[267] = sv12[266] / 2 * (sv12[266] / 2);
        sv12[268] = sv12[267] + sv12[261];
        sv12[269] = sv12[262] + sv12[268];
        sv12[270] = 2.0 * sv12[269] * sv12[26];
        sv12[271] = sv12[248] + -1 * sv12[270];
        sv12[272] = sv12[240] * sv12[271];
        sv12[273] = sv12[272] * sv12[143];
        sv12[274] = sp[154] * sv12[151];
        sv12[275] = sp[154] * sv12[152];
        sv12[276] = sp[157] * sv12[163];
        sv12[277] = sp[157] * sv12[164];
        sv12[278] = sv12[274] + sv12[276];
        sv12[279] = sv12[277] + sv12[275];
        sv12[280] = -1 * sv12[246] + -1 * sv12[270];
        sv12[281] = sv12[240] * sv12[280];
        sv12[282] = sv12[240] * (-1 * sv12[278]);
        sv12[283] = sv12[240] * (-1 * sv12[279]);
        sv12[284] = sp[148] * sv12[151];
        sv12[285] = sp[148] * sv12[152];
        sv12[286] = sp[151] * sv12[163];
        sv12[287] = sp[151] * sv12[164];
        sv12[288] = sv12[284] + sv12[286];
        sv12[289] = sv12[287] + sv12[285];
        sv12[290] = sv12[271] * (-1 * sv12[239]);
        sv12[291] = sv12[271] * (-1 * sv12[288]);
        sv12[292] = sv12[271] * (-1 * sv12[289]);
        sv12[293] = sv12[281] + sv12[290];
        sv12[294] = sv12[282] + sv12[291];
        sv12[295] = sv12[283] + sv12[292];
        sv12[296] = sv12[293] * sv12[229];
        sv12[297] = sv12[294] * sv12[229];
        sv12[298] = sv12[295] * sv12[229];
        sv12[299] = sv12[273] + sv12[296];
        sv12[300] = sv12[233] + sv12[299];
        sv12[301] = sv12[231] + sv12[297];
        sv12[302] = sv12[232] + sv12[298];
        sv12[303] = w2_c1 * sp[160];
        sv12[304] = w2_c0 * sp[163];
        sv12[305] = sv12[303] + sv12[304];
        sv12[306] = sp[160] * (sv12[29] / 1.3);
        sv12[307] = sp[163] * (sv12[47] / 1.3);
        sv12[308] = sv12[306] + sv12[307];
        sv12[309] = sv12[305] + -1 * sv12[308];
        sv12[310] = w2_c3 * w2_c3;
        sv12[311] = std::sqrt(1e-8 + sv12[310]);
        sv12[312] = w2_c3 + sv12[311];
        sv12[313] = w1_c4 / (0.5 * sv12[312]);
        sv12[314] = 1.92 * w3_c4 * sv12[313];
        sv12[315] = w3_c4 / (0.5 * sv12[312]);
        sv12[316] = 1.92 * w1_c4 * sv12[315];
        sv12[317] = sv12[314] + sv12[316];
        sv12[318] = sv12[309] + sv12[317];
        sv12[319] = w2_c1 * sp[166];
        sv12[320] = w2_c0 * sp[169];
        sv12[321] = sv12[319] + sv12[320];
        sv12[322] = sp[166] * (sv12[29] / 1.3);
        sv12[323] = sp[169] * (sv12[47] / 1.3);
        sv12[324] = sv12[322] + sv12[323];
        sv12[325] = sv12[321] + -1 * sv12[324];
        sv12[326] = 1.92 * w1_c4 * sv12[313];
        sv12[327] = sv12[325] + sv12[326];
        sv12[328] = w2_c3 * (0.09 * (1.44 * sv12[9]));
        sv12[329] = 2.0 * sv12[269] * sv12[328];
        sv12[330] = sv12[327] + -1 * sv12[329];
        sv12[331] = sv12[318] * sv12[330];
        sv12[332] = sv12[120] / (0.0001 + sv12[26] / 1.3);
        sv12[333] = sv12[26] / 1.3 * sv12[332];
        sv12[334] = -1 * sv12[333] / (0.0001 + sv12[26] / 1.3);
        sv12[335] = sv12[334] * (1.0 / sv12[332]);
        sv12[336] = -1 * sv12[335] / sv12[332];
        sv12[337] = std::exp(-2.0 * sv12[332]);
        sv12[338] = -2.0 * sv12[334] * sv12[337];
        sv12[339] = (1.0 + sv12[337]) / (1.0 + -1 * sv12[337]);
        sv12[340] = -1 * sv12[338] * sv12[339];
        sv12[341] = -1 * sv12[340] + sv12[338];
        sv12[342] = sv12[341] / (1.0 + -1 * sv12[337]);
        sv12[343] = -1 * sv12[336] + sv12[342];
        sv12[344] = sv12[343] * (2.0 * sp[145]);
        sv12[345] = sv12[344] / sv12[119];
        sv12[346] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[332]) * (2.0 * sp[145]);
        sv12[347] = sv12[346] * (2.0 * sp[145]);
        sv12[348] = sv12[347] / (0.0001 + sv12[26] / 1.3);
        sv12[349] = sv12[26] / 1.3 * sv12[348];
        sv12[350] = 0.5 * (-0.004435991517475 * sv12[334]) * (2.0 * sp[145]);
        sv12[351] = sv12[350] * (2.0 * sp[145]);
        sv12[352] = -1 * sv12[349] + sv12[351];
        sv12[353] = sv12[352] / (0.0001 + sv12[26] / 1.3);
        sv12[354] = (sv12[332] >= 0.1 ? sv12[345] : sv12[353]);
        sv12[355] = sv12[331] * sv12[354];
        sv12[356] = sp[166] * (sv12[151] / 1.3);
        sv12[357] = sp[166] * (sv12[152] / 1.3);
        sv12[358] = sp[169] * (sv12[163] / 1.3);
        sv12[359] = sp[169] * (sv12[164] / 1.3);
        sv12[360] = sv12[356] + sv12[358];
        sv12[361] = sv12[359] + sv12[357];
        sv12[362] = -1 * sv12[324] + -1 * sv12[329];
        sv12[363] = sv12[318] * sv12[362];
        sv12[364] = sv12[318] * (-1 * sv12[360]);
        sv12[365] = sv12[318] * (-1 * sv12[361]);
        sv12[366] = sp[160] * (sv12[151] / 1.3);
        sv12[367] = sp[160] * (sv12[152] / 1.3);
        sv12[368] = sp[163] * (sv12[163] / 1.3);
        sv12[369] = sp[163] * (sv12[164] / 1.3);
        sv12[370] = sv12[366] + sv12[368];
        sv12[371] = sv12[369] + sv12[367];
        sv12[372] = sv12[330] * (-1 * sv12[308]);
        sv12[373] = sv12[330] * (-1 * sv12[370]);
        sv12[374] = sv12[330] * (-1 * sv12[371]);
        sv12[375] = sv12[363] + sv12[372];
        sv12[376] = sv12[364] + sv12[373];
        sv12[377] = sv12[365] + sv12[374];
        sv12[378] = -1 * (1.0 / sv12[332]) + sv12[339];
        sv12[379] = sv12[378] * (2.0 * sp[145]);
        sv12[380] = sv12[379] / sv12[119];
        sv12[381] = (sv12[332] >= 0.1 ? sv12[380] : sv12[348]);
        sv12[382] = sv12[375] * sv12[381];
        sv12[383] = sv12[376] * sv12[381];
        sv12[384] = sv12[377] * sv12[381];
        sv12[385] = sv12[355] + sv12[382];
        sv12[386] = sv12[300] + sv12[385];
        sv12[387] = sv12[301] + sv12[383];
        sv12[388] = sv12[302] + sv12[384];
        sv12[389] = w1_c3 * (0.09 * (1.44 * sv12[9]));
        sv12[390] = 2.0 * sv12[269] * sv12[389];
        sv12[391] = w3_c4 * sv12[390];
        sv12[392] = sv12[386] + -1 * sv12[391];
        sv12[393] = w1_c3 * (0.09 * sv12[9]);
        sv12[394] = w1_c3 * sv12[393];
        sv12[395] = w1_c4 * w1_c4;
        sv12[396] = std::sqrt(1e-8 + sv12[395]);
        sv12[397] = w1_c4 + sv12[396];
        sv12[398] = sv12[394] / (0.5 * sv12[397]);
        sv12[399] = 2.0 * sv12[269] * sv12[398];
        sv12[400] = w3_c3 * sv12[399];
        sv12[401] = sv12[392] + -1 * sv12[400];
        sv12[402] = sp[172] * sv12[398];
        sv12[403] = sv12[401] + sv12[402];
        sv12[404] = sp[175] * (sv12[398] / 1.3);
        sv12[405] = sv12[403] + sv12[404];
        sv12[406] = sv12[30] / 2 * (sv12[67] / 2);
        sv12[407] = sv12[51] / 2 * (sv12[74] / 2);
        sv12[408] = sv12[406] + sv12[407];
        sv12[409] = sv12[91] / 2 * (sv12[107] / 2);
        sv12[410] = sv12[409] + sv12[407];
        sv12[411] = sv12[408] + sv12[410];
        sv12[412] = sv12[411] * (2.0 * sv12[26]);
        sv12[413] = sv12[405] + sv12[412];
        sv12[414] = sv12[413] * sp[176];
        sv12[415] = sv12[387] * sp[176];
        sv12[416] = sv12[388] * sp[176];
        const double fw0 = sv12[416] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF0[i] += fw0 * FE3_C0_D01_Q12[0][0][i];
        const double fw1 = sv12[414] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF1[i] += fw1 * FE3_C0_Q12[0][iq][i];
        const double fw2 = sv12[415] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF2[i] += fw2 * FE3_C0_D01_Q12[0][0][i];
    }
    std::fill(A, A + 3, 0.0);
    static const int DM0[2] = { 0, 2 };
    for (int i = 0; i < 2; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 3; ++i)
        A[i] += BF1[i];
    for (int i = 0; i < 2; ++i)
        A[DM0[i]] += BF2[i];
  }

};


class ranspseudotimestepping_exterior_facet_integral_3_3: public ufc::exterior_facet_integral
{
public:

  ranspseudotimestepping_exterior_facet_integral_3_3() : ufc::exterior_facet_integral()
  {

  }

  ~ranspseudotimestepping_exterior_facet_integral_3_3() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 22
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.1739274225687268, 0.3260725774312731, 0.3260725774312731, 0.1739274225687268 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE35_C0_D01_F_Q4[3][4][5] =
        { { { 1.0, -0.7222726231881047, 3.722272623188091, -0.2777273768118826, -3.722272623188107 },
            { 1.0, 0.3200379128302891, 2.679962087169697, -1.320037912830275, -2.679962087169714 },
            { 1.0, 1.679962087169715, 1.320037912830271, -2.679962087169701, -1.320037912830287 },
            { 1.0, 2.722272623188108, 0.2777273768118786, -3.722272623188096, -0.2777273768118922 } },
          { { -2.72227262318811, -0.722272623188105, 0.0, 3.444545246376218, 0.0 },
            { -1.679962087169718, 0.3200379128302888, 0.0, 1.359924174339433, 0.0 },
            { -0.3200379128302928, 1.679962087169715, 0.0, -1.359924174339417, 0.0 },
            { 0.7222726231881, 2.722272623188108, 0.0, -3.444545246376202, 0.0 } },
          { { -2.72227262318811, -1.0, 0.2777273768118848, 3.722272623188112, -0.2777273768118925 },
            { -1.679962087169717, -1.0, 1.320037912830276, 2.679962087169721, -1.320037912830287 },
            { -0.3200379128302917, -1.0, 2.6799620871697, 1.320037912830298, -2.679962087169714 },
            { 0.7222726231880999, -1.0, 3.722272623188092, 0.2777273768119067, -3.722272623188106 } } };
    alignas(32) static const double FE35_C0_D10_F_Q4[3][4][5] =
        { { { 1.0, 2.722272623188104, 0.2777273768118936, -0.2777273768118936, -3.722272623188106 },
            { 1.0, 1.679962087169712, 1.320037912830285, -1.320037912830285, -2.679962087169713 },
            { 1.0, 0.3200379128302879, 2.679962087169708, -2.679962087169708, -1.320037912830288 },
            { 1.0, -0.7222726231881051, 3.722272623188099, -3.722272623188099, -0.2777273768118945 } },
          { { -2.722272623188107, -1.0, 0.277727376811893, -0.277727376811893, 3.72227262318811 },
            { -1.679962087169713, -1.0, 1.320037912830285, -1.320037912830285, 2.679962087169716 },
            { -0.3200379128302884, -1.0, 2.679962087169709, -2.679962087169709, 1.320037912830289 },
            { 0.7222726231881045, -1.0, 3.722272623188099, -3.722272623188099, 0.2777273768118963 } },
          { { -2.722272623188106, -0.7222726231881095, 0.0, 0.0, 3.444545246376216 },
            { -1.679962087169712, 0.3200379128302852, 0.0, 0.0, 1.359924174339427 },
            { -0.3200379128302857, 1.679962087169712, 0.0, 0.0, -1.359924174339426 },
            { 0.7222726231881069, 2.722272623188104, 0.0, 0.0, -3.444545246376211 } } };
    alignas(32) static const double FE35_C0_F_Q4[3][4][6] =
        { { { 0.0, 0.8013460293699309, -0.05979028222412166, 0.2584442528541909, 0.0, 0.0 },
            { 0.0, 0.2277840767909521, -0.1121969667939041, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.1121969667939041, 0.227784076790952, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.05979028222412169, 0.8013460293699309, 0.2584442528541908, 0.0, 0.0 } },
          { { 0.8013460293699309, 0.0, -0.05979028222412166, 0.0, 0.2584442528541908, 0.0 },
            { 0.2277840767909521, 0.0, -0.1121969667939041, 0.0, 0.8844128900029518, 0.0 },
            { -0.1121969667939041, 0.0, 0.2277840767909521, 0.0, 0.8844128900029519, 0.0 },
            { -0.05979028222412166, 0.0, 0.8013460293699309, 0.0, 0.2584442528541906, 0.0 } },
          { { 0.8013460293699309, -0.05979028222412169, 0.0, 0.0, 0.0, 0.2584442528541908 },
            { 0.2277840767909521, -0.1121969667939041, 0.0, 0.0, 0.0, 0.8844128900029519 },
            { -0.1121969667939041, 0.2277840767909522, 0.0, 0.0, 0.0, 0.884412890002952 },
            { -0.05979028222412169, 0.8013460293699308, 0.0, 0.0, 0.0, 0.2584442528541909 } } };
    alignas(32) static const double FE37_C2_D01_F_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE37_C2_F_Q4[3][4][3] =
        { { { 0.0, 0.9305681557970263, 0.06943184420297369 },
            { 0.0, 0.6699905217924281, 0.3300094782075718 },
            { 0.0, 0.3300094782075719, 0.6699905217924279 },
            { 0.0, 0.06943184420297382, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.0, 0.06943184420297369 },
            { 0.6699905217924281, 0.0, 0.3300094782075718 },
            { 0.3300094782075719, 0.0, 0.669990521792428 },
            { 0.06943184420297382, 0.0, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.06943184420297367, 0.0 },
            { 0.6699905217924281, 0.3300094782075718, 0.0 },
            { 0.3300094782075719, 0.6699905217924281, 0.0 },
            { 0.06943184420297374, 0.9305681557970263, 0.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE37_C2_D01_F_Q4[0][0][0] + coordinate_dofs[2] * FE37_C2_D01_F_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE37_C2_D01_F_Q4[0][0][0] + coordinate_dofs[5] * FE37_C2_D01_F_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE37_C2_D01_F_Q4[0][0][0] + coordinate_dofs[4] * FE37_C2_D01_F_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE37_C2_D01_F_Q4[0][0][0] + coordinate_dofs[3] * FE37_C2_D01_F_Q4[0][0][1];
    const double w1_d1_c3 = w[1][15] * FE37_C2_D01_F_Q4[0][0][0] + w[1][17] * FE37_C2_D01_F_Q4[0][0][1];
    double w1_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c3 += w[1][ic + 15] * FE37_C2_D01_F_Q4[0][0][ic];
    const double w3_d1_c3 = w[3][15] * FE37_C2_D01_F_Q4[0][0][0] + w[3][17] * FE37_C2_D01_F_Q4[0][0][1];
    double w3_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c3 += w[3][ic + 15] * FE37_C2_D01_F_Q4[0][0][ic];
    const double w1_d1_c4 = w[1][18] * FE37_C2_D01_F_Q4[0][0][0] + w[1][20] * FE37_C2_D01_F_Q4[0][0][1];
    double w1_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c4 += w[1][ic + 18] * FE37_C2_D01_F_Q4[0][0][ic];
    const double w3_d1_c4 = w[3][18] * FE37_C2_D01_F_Q4[0][0][0] + w[3][20] * FE37_C2_D01_F_Q4[0][0][1];
    double w3_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c4 += w[3][ic + 18] * FE37_C2_D01_F_Q4[0][0][ic];
    alignas(32) double sp[82];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = triangle_reference_facet_normals[facet][1] * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = triangle_reference_facet_normals[facet][0] * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet][0] * sp[9];
    sp[11] = -1 * J_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[20] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[21] = sp[19] + sp[20];
    sp[22] = std::sqrt(sp[21]);
    sp[23] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[24] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[25] = sp[23] + sp[24];
    sp[26] = std::sqrt(sp[25]);
    sp[27] = sp[22] * sp[26];
    sp[28] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[29] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[30] = sp[28] + sp[29];
    sp[31] = std::sqrt(sp[30]);
    sp[32] = sp[27] * sp[31];
    sp[33] = triangle_reference_cell_volume * sp[2];
    sp[34] = std::abs(sp[33]);
    sp[35] = sp[32] / (4.0 * sp[34]);
    sp[36] = w1_d1_c3 * sp[3];
    sp[37] = w1_d0_c3 * sp[5];
    sp[38] = sp[36] + sp[37];
    sp[39] = sp[38] * sp[17];
    sp[40] = w1_d0_c3 * sp[9];
    sp[41] = w1_d1_c3 * sp[11];
    sp[42] = sp[40] + sp[41];
    sp[43] = sp[42] * sp[18];
    sp[44] = sp[39] + sp[43];
    sp[45] = w3_d1_c3 * sp[3];
    sp[46] = w3_d0_c3 * sp[5];
    sp[47] = sp[45] + sp[46];
    sp[48] = sp[47] * sp[17];
    sp[49] = w3_d0_c3 * sp[9];
    sp[50] = w3_d1_c3 * sp[11];
    sp[51] = sp[49] + sp[50];
    sp[52] = sp[51] * sp[18];
    sp[53] = sp[48] + sp[52];
    sp[54] = w1_d1_c4 * sp[3];
    sp[55] = w1_d0_c4 * sp[5];
    sp[56] = sp[54] + sp[55];
    sp[57] = sp[56] * sp[17];
    sp[58] = w1_d0_c4 * sp[9];
    sp[59] = w1_d1_c4 * sp[11];
    sp[60] = sp[58] + sp[59];
    sp[61] = sp[60] * sp[18];
    sp[62] = sp[57] + sp[61];
    sp[63] = w3_d1_c4 * sp[3];
    sp[64] = w3_d0_c4 * sp[5];
    sp[65] = sp[63] + sp[64];
    sp[66] = sp[65] * sp[17];
    sp[67] = w3_d0_c4 * sp[9];
    sp[68] = w3_d1_c4 * sp[11];
    sp[69] = sp[67] + sp[68];
    sp[70] = sp[69] * sp[18];
    sp[71] = sp[66] + sp[70];
    sp[72] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[73] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[74] = sp[72] + sp[73];
    sp[75] = sp[74] * sp[74];
    sp[76] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[77] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[78] = sp[76] + sp[77];
    sp[79] = sp[78] * sp[78];
    sp[80] = sp[75] + sp[79];
    sp[81] = std::sqrt(sp[80]);
    alignas(32) double BF0[3] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w3_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c4 += w[3][ic + 18] * FE37_C2_F_Q4[facet][iq][ic];
        double w1_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c4 += w[1][ic + 18] * FE37_C2_F_Q4[facet][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE35_C0_F_Q4[facet][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE35_C0_F_Q4[facet][iq][ic];
        double w1_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c3 += w[1][ic + 15] * FE37_C2_F_Q4[facet][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4 += w[4][ic] * FE37_C2_F_Q4[facet][iq][ic];
        double w3_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c3 += w[3][ic + 15] * FE37_C2_F_Q4[facet][iq][ic];
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c0 += w[3][ic] * FE35_C0_F_Q4[facet][iq][ic];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c1 += w[3][ic + 6] * FE35_C0_F_Q4[facet][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE37_C2_F_Q4[facet][iq][ic];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE37_C2_F_Q4[facet][iq][ic];
        const double w1_d1_c0 = w[1][0] * FE35_C0_D01_F_Q4[facet][iq][0] + w[1][2] * FE35_C0_D01_F_Q4[facet][iq][1] + w[1][3] * FE35_C0_D01_F_Q4[facet][iq][2] + w[1][4] * FE35_C0_D01_F_Q4[facet][iq][3] + w[1][5] * FE35_C0_D01_F_Q4[facet][iq][4];
        const double w1_d0_c0 = w[1][0] * FE35_C0_D10_F_Q4[facet][iq][0] + w[1][1] * FE35_C0_D10_F_Q4[facet][iq][1] + w[1][3] * FE35_C0_D10_F_Q4[facet][iq][2] + w[1][4] * FE35_C0_D10_F_Q4[facet][iq][3] + w[1][5] * FE35_C0_D10_F_Q4[facet][iq][4];
        const double w1_d0_c1 = w[1][6] * FE35_C0_D10_F_Q4[facet][iq][0] + w[1][7] * FE35_C0_D10_F_Q4[facet][iq][1] + w[1][9] * FE35_C0_D10_F_Q4[facet][iq][2] + w[1][10] * FE35_C0_D10_F_Q4[facet][iq][3] + w[1][11] * FE35_C0_D10_F_Q4[facet][iq][4];
        const double w1_d1_c1 = w[1][6] * FE35_C0_D01_F_Q4[facet][iq][0] + w[1][8] * FE35_C0_D01_F_Q4[facet][iq][1] + w[1][9] * FE35_C0_D01_F_Q4[facet][iq][2] + w[1][10] * FE35_C0_D01_F_Q4[facet][iq][3] + w[1][11] * FE35_C0_D01_F_Q4[facet][iq][4];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c0 += w[1][ic] * FE35_C0_F_Q4[facet][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c1 += w[1][ic + 6] * FE35_C0_F_Q4[facet][iq][ic];
        const double w3_d1_c0 = w[3][0] * FE35_C0_D01_F_Q4[facet][iq][0] + w[3][2] * FE35_C0_D01_F_Q4[facet][iq][1] + w[3][3] * FE35_C0_D01_F_Q4[facet][iq][2] + w[3][4] * FE35_C0_D01_F_Q4[facet][iq][3] + w[3][5] * FE35_C0_D01_F_Q4[facet][iq][4];
        const double w3_d0_c0 = w[3][0] * FE35_C0_D10_F_Q4[facet][iq][0] + w[3][1] * FE35_C0_D10_F_Q4[facet][iq][1] + w[3][3] * FE35_C0_D10_F_Q4[facet][iq][2] + w[3][4] * FE35_C0_D10_F_Q4[facet][iq][3] + w[3][5] * FE35_C0_D10_F_Q4[facet][iq][4];
        const double w3_d0_c1 = w[3][6] * FE35_C0_D10_F_Q4[facet][iq][0] + w[3][7] * FE35_C0_D10_F_Q4[facet][iq][1] + w[3][9] * FE35_C0_D10_F_Q4[facet][iq][2] + w[3][10] * FE35_C0_D10_F_Q4[facet][iq][3] + w[3][11] * FE35_C0_D10_F_Q4[facet][iq][4];
        const double w3_d1_c1 = w[3][6] * FE35_C0_D01_F_Q4[facet][iq][0] + w[3][8] * FE35_C0_D01_F_Q4[facet][iq][1] + w[3][9] * FE35_C0_D01_F_Q4[facet][iq][2] + w[3][10] * FE35_C0_D01_F_Q4[facet][iq][3] + w[3][11] * FE35_C0_D01_F_Q4[facet][iq][4];
        alignas(32) double sv4[111];
        sv4[0] = w2_c1 * sp[17];
        sv4[1] = w2_c0 * sp[18];
        sv4[2] = sv4[0] + sv4[1];
        sv4[3] = std::tanh(100.0 * sv4[2]);
        sv4[4] = std::exp(w4);
        sv4[5] = w1_c3 * (0.09 * sv4[4]);
        sv4[6] = w1_c3 * sv4[5];
        sv4[7] = w1_c4 * w1_c4;
        sv4[8] = std::sqrt(1e-8 + sv4[7]);
        sv4[9] = w1_c4 + sv4[8];
        sv4[10] = sv4[6] / (0.5 * sv4[9]);
        sv4[11] = 100000.0 * (0.5 + -1 * (0.5 * sv4[3])) * (sv4[10] / 1.3);
        sv4[12] = sv4[11] * (1.0 / (2.0 * sp[35]));
        sv4[13] = w1_c4 * sv4[12];
        sv4[14] = w3_c4 * sv4[13];
        sv4[15] = 100000.0 * (0.5 + -1 * (0.5 * sv4[3])) * sv4[10];
        sv4[16] = sv4[15] * (1.0 / (2.0 * sp[35]));
        sv4[17] = w1_c3 * sv4[16];
        sv4[18] = w3_c3 * sv4[17];
        sv4[19] = sv4[14] + sv4[18];
        sv4[20] = (0.5 + -1 * (0.5 * sv4[3])) * sv4[10];
        sv4[21] = sp[44] * sv4[20];
        sv4[22] = w3_c3 * sv4[21];
        sv4[23] = sv4[19] + -1 * sv4[22];
        sv4[24] = sp[53] * sv4[20];
        sv4[25] = w1_c3 * sv4[24];
        sv4[26] = sv4[23] + -1 * sv4[25];
        sv4[27] = (0.5 + -1 * (0.5 * sv4[3])) * (sv4[10] / 1.3);
        sv4[28] = sp[62] * sv4[27];
        sv4[29] = w3_c3 * sv4[28];
        sv4[30] = sv4[26] + -1 * sv4[29];
        sv4[31] = sp[71] * sv4[27];
        sv4[32] = w1_c4 * sv4[31];
        sv4[33] = sv4[30] + -1 * sv4[32];
        sv4[34] = w3_c0 * (-1 * sp[17]);
        sv4[35] = w3_c1 * sp[18];
        sv4[36] = sv4[34] + sv4[35];
        sv4[37] = w2_c3 * (0.09 * sv4[4]);
        sv4[38] = w2_c3 * sv4[37];
        sv4[39] = w2_c4 * w2_c4;
        sv4[40] = std::sqrt(1e-8 + sv4[39]);
        sv4[41] = w2_c4 + sv4[40];
        sv4[42] = sv4[38] / (0.5 * sv4[41]);
        sv4[43] = w1_d1_c0 * sp[3];
        sv4[44] = w1_d0_c0 * sp[5];
        sv4[45] = sv4[43] + sv4[44];
        sv4[46] = w1_d0_c1 * sp[9];
        sv4[47] = w1_d1_c1 * sp[11];
        sv4[48] = sv4[46] + sv4[47];
        sv4[49] = sv4[45] + sv4[48];
        sv4[50] = 2.0 * sv4[42] * (sv4[49] / 2);
        sv4[51] = sv4[50] * sp[17];
        sv4[52] = w1_d0_c0 * sp[9];
        sv4[53] = w1_d1_c0 * sp[11];
        sv4[54] = sv4[52] + sv4[53];
        sv4[55] = sv4[54] + sv4[54];
        sv4[56] = 2.0 * sv4[42] * (sv4[55] / 2);
        sv4[57] = sv4[56] * sp[18];
        sv4[58] = sv4[51] + sv4[57];
        sv4[59] = sv4[58] * (-1 * sp[17]);
        sv4[60] = w1_d1_c1 * sp[3];
        sv4[61] = w1_d0_c1 * sp[5];
        sv4[62] = sv4[60] + sv4[61];
        sv4[63] = sv4[62] + sv4[62];
        sv4[64] = 2.0 * sv4[42] * (sv4[63] / 2);
        sv4[65] = sv4[64] * sp[17];
        sv4[66] = sv4[50] * sp[18];
        sv4[67] = sv4[65] + sv4[66];
        sv4[68] = sv4[67] * sp[18];
        sv4[69] = sv4[59] + sv4[68];
        sv4[70] = sv4[36] * sv4[69];
        sv4[71] = sv4[33] + -1 * sv4[70];
        sv4[72] = w1_c0 + -1 * w[0][0];
        sv4[73] = sv4[72] * (-1 * sp[17]);
        sv4[74] = w1_c1 + -1 * w[0][1];
        sv4[75] = sv4[74] * sp[18];
        sv4[76] = sv4[73] + sv4[75];
        sv4[77] = w3_d1_c0 * sp[3];
        sv4[78] = w3_d0_c0 * sp[5];
        sv4[79] = sv4[77] + sv4[78];
        sv4[80] = w3_d0_c1 * sp[9];
        sv4[81] = w3_d1_c1 * sp[11];
        sv4[82] = sv4[80] + sv4[81];
        sv4[83] = sv4[79] + sv4[82];
        sv4[84] = 2.0 * sv4[42] * (sv4[83] / 2);
        sv4[85] = sv4[84] * sp[17];
        sv4[86] = w3_d0_c0 * sp[9];
        sv4[87] = w3_d1_c0 * sp[11];
        sv4[88] = sv4[86] + sv4[87];
        sv4[89] = sv4[88] + sv4[88];
        sv4[90] = 2.0 * sv4[42] * (sv4[89] / 2);
        sv4[91] = sv4[90] * sp[18];
        sv4[92] = sv4[85] + sv4[91];
        sv4[93] = sv4[92] * (-1 * sp[17]);
        sv4[94] = w3_d1_c1 * sp[3];
        sv4[95] = w3_d0_c1 * sp[5];
        sv4[96] = sv4[94] + sv4[95];
        sv4[97] = sv4[96] + sv4[96];
        sv4[98] = 2.0 * sv4[42] * (sv4[97] / 2);
        sv4[99] = sv4[98] * sp[17];
        sv4[100] = sv4[84] * sp[18];
        sv4[101] = sv4[99] + sv4[100];
        sv4[102] = sv4[101] * sp[18];
        sv4[103] = sv4[93] + sv4[102];
        sv4[104] = sv4[76] * sv4[103];
        sv4[105] = sv4[71] + -1 * sv4[104];
        sv4[106] = 100000.0 * sv4[42] * (1.0 / (2.0 * sp[35]));
        sv4[107] = sv4[76] * sv4[106];
        sv4[108] = sv4[36] * sv4[107];
        sv4[109] = sv4[105] + sv4[108];
        sv4[110] = sv4[109] * sp[81];
        const double fw0 = sv4[110] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            BF0[i] += fw0 * FE37_C2_F_Q4[facet][iq][i];
    }
    std::fill(A, A + 3, 0.0);
    for (int i = 0; i < 3; ++i)
        A[i] += BF0[i];
  }

};


class ranspseudotimestepping_cell_integral_4_otherwise: public ufc::cell_integral
{
public:

  ranspseudotimestepping_cell_integral_4_otherwise() : ufc::cell_integral()
  {

  }

  ~ranspseudotimestepping_cell_integral_4_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({false, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 209
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    alignas(32) static const double FE96_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE96_C0_D02_Q12[1][1][3] = { { { 3.999999999999998, 4.000000000000004, -7.999999999999995 } } };
    alignas(32) static const double FE96_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE96_C0_D11_Q12[1][1][4] = { { { 4.0, 3.999999999999997, -3.999999999999997, -4.000000000000005 } } };
    alignas(32) static const double FE96_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803568, 0.2205142679699366 },
            { -0.05512856699248404, -0.05512856699248409, 0.6533077030470597, 0.2205142679699364, 0.2205142679699362, 0.01592089499803596 },
            { 0.6533077030470594, -0.05512856699248415, -0.05512856699248411, 0.01592089499803581, 0.2205142679699364, 0.2205142679699366 },
            { -0.1249989825350975, 0.001430579517788794, -0.1249989825350975, 0.4999959301403892, 0.2485755252716258, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788821, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880001, 0.173768363654174, -0.1177151633084292, 0.790160442765823, 0.06597478591860526, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880001, 0.1353078281686267, 0.06597478591860512, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860538 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880001, 0.06597478591860524, 0.1353078281686266, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860538 },
            { 0.1737683636541741, -0.04749625719880015, -0.1177151633084292, 0.06597478591860535, 0.7901604427658229, 0.1353078281686269 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q12[0][0][1];
    const double w5_d1 = w[5][0] * FE3_C0_D01_Q12[0][0][0] + w[5][2] * FE3_C0_D01_Q12[0][0][1];
    double w5_d0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w5_d0 += w[5][ic] * FE3_C0_D01_Q12[0][0][ic];
    const double w3_d1_c3 = w[3][15] * FE3_C0_D01_Q12[0][0][0] + w[3][17] * FE3_C0_D01_Q12[0][0][1];
    double w3_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c3 += w[3][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w3_d1_c4 = w[3][18] * FE3_C0_D01_Q12[0][0][0] + w[3][20] * FE3_C0_D01_Q12[0][0][1];
    double w3_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c4 += w[3][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d11_c1 = w[2][6] * FE96_C0_D02_Q12[0][0][0] + w[2][8] * FE96_C0_D02_Q12[0][0][1] + w[2][10] * FE96_C0_D02_Q12[0][0][2];
    const double w2_d01_c1 = w[2][6] * FE96_C0_D11_Q12[0][0][0] + w[2][9] * FE96_C0_D11_Q12[0][0][1] + w[2][10] * FE96_C0_D11_Q12[0][0][2] + w[2][11] * FE96_C0_D11_Q12[0][0][3];
    const double w2_d00_c1 = w[2][6] * FE96_C0_D02_Q12[0][0][0] + w[2][7] * FE96_C0_D02_Q12[0][0][1] + w[2][11] * FE96_C0_D02_Q12[0][0][2];
    const double w2_d01_c0 = w[2][0] * FE96_C0_D11_Q12[0][0][0] + w[2][3] * FE96_C0_D11_Q12[0][0][1] + w[2][4] * FE96_C0_D11_Q12[0][0][2] + w[2][5] * FE96_C0_D11_Q12[0][0][3];
    const double w2_d11_c0 = w[2][0] * FE96_C0_D02_Q12[0][0][0] + w[2][2] * FE96_C0_D02_Q12[0][0][1] + w[2][4] * FE96_C0_D02_Q12[0][0][2];
    const double w2_d00_c0 = w[2][0] * FE96_C0_D02_Q12[0][0][0] + w[2][1] * FE96_C0_D02_Q12[0][0][1] + w[2][5] * FE96_C0_D02_Q12[0][0][2];
    const double w2_d1_c2 = w[2][12] * FE3_C0_D01_Q12[0][0][0] + w[2][14] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c2 += w[2][ic + 12] * FE3_C0_D01_Q12[0][0][ic];
    const double w4_d11_c1 = w[4][6] * FE96_C0_D02_Q12[0][0][0] + w[4][8] * FE96_C0_D02_Q12[0][0][1] + w[4][10] * FE96_C0_D02_Q12[0][0][2];
    const double w4_d01_c1 = w[4][6] * FE96_C0_D11_Q12[0][0][0] + w[4][9] * FE96_C0_D11_Q12[0][0][1] + w[4][10] * FE96_C0_D11_Q12[0][0][2] + w[4][11] * FE96_C0_D11_Q12[0][0][3];
    const double w4_d00_c1 = w[4][6] * FE96_C0_D02_Q12[0][0][0] + w[4][7] * FE96_C0_D02_Q12[0][0][1] + w[4][11] * FE96_C0_D02_Q12[0][0][2];
    const double w4_d01_c0 = w[4][0] * FE96_C0_D11_Q12[0][0][0] + w[4][3] * FE96_C0_D11_Q12[0][0][1] + w[4][4] * FE96_C0_D11_Q12[0][0][2] + w[4][5] * FE96_C0_D11_Q12[0][0][3];
    const double w4_d11_c0 = w[4][0] * FE96_C0_D02_Q12[0][0][0] + w[4][2] * FE96_C0_D02_Q12[0][0][1] + w[4][4] * FE96_C0_D02_Q12[0][0][2];
    const double w4_d00_c0 = w[4][0] * FE96_C0_D02_Q12[0][0][0] + w[4][1] * FE96_C0_D02_Q12[0][0][1] + w[4][5] * FE96_C0_D02_Q12[0][0][2];
    const double w4_d1_c2 = w[4][12] * FE3_C0_D01_Q12[0][0][0] + w[4][14] * FE3_C0_D01_Q12[0][0][1];
    double w4_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w4_d0_c2 += w[4][ic + 12] * FE3_C0_D01_Q12[0][0][ic];
    const double w4_d1_c3 = w[4][15] * FE3_C0_D01_Q12[0][0][0] + w[4][17] * FE3_C0_D01_Q12[0][0][1];
    double w4_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w4_d0_c3 += w[4][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c3 = w[2][15] * FE3_C0_D01_Q12[0][0][0] + w[2][17] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c3 += w[2][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w4_d1_c4 = w[4][18] * FE3_C0_D01_Q12[0][0][0] + w[4][20] * FE3_C0_D01_Q12[0][0][1];
    double w4_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w4_d0_c4 += w[4][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c4 = w[2][18] * FE3_C0_D01_Q12[0][0][0] + w[2][20] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c4 += w[2][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    alignas(32) double sp[215];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = w5_d1 * sp[3];
    sp[8] = w5_d0 * sp[4];
    sp[9] = sp[7] + sp[8];
    sp[10] = w3_d1_c3 * sp[3];
    sp[11] = w3_d0_c3 * sp[4];
    sp[12] = sp[10] + sp[11];
    sp[13] = w3_d1_c4 * sp[3];
    sp[14] = w3_d0_c4 * sp[4];
    sp[15] = sp[13] + sp[14];
    sp[16] = w2_d11_c1 * sp[3];
    sp[17] = w2_d01_c1 * sp[4];
    sp[18] = sp[16] + sp[17];
    sp[19] = sp[18] * sp[3];
    sp[20] = w2_d01_c1 * sp[3];
    sp[21] = w2_d00_c1 * sp[4];
    sp[22] = sp[20] + sp[21];
    sp[23] = sp[22] * sp[4];
    sp[24] = sp[19] + sp[23];
    sp[25] = sp[24] + sp[24];
    sp[26] = w5_d0 * sp[5];
    sp[27] = w5_d1 * sp[6];
    sp[28] = sp[26] + sp[27];
    sp[29] = w3_d0_c3 * sp[5];
    sp[30] = w3_d1_c3 * sp[6];
    sp[31] = sp[29] + sp[30];
    sp[32] = w3_d0_c4 * sp[5];
    sp[33] = w3_d1_c4 * sp[6];
    sp[34] = sp[32] + sp[33];
    sp[35] = w2_d01_c0 * sp[5];
    sp[36] = w2_d11_c0 * sp[6];
    sp[37] = sp[35] + sp[36];
    sp[38] = sp[37] * sp[3];
    sp[39] = w2_d00_c0 * sp[5];
    sp[40] = w2_d01_c0 * sp[6];
    sp[41] = sp[39] + sp[40];
    sp[42] = sp[41] * sp[4];
    sp[43] = sp[38] + sp[42];
    sp[44] = w2_d00_c1 * sp[5];
    sp[45] = w2_d01_c1 * sp[6];
    sp[46] = sp[44] + sp[45];
    sp[47] = sp[46] * sp[5];
    sp[48] = w2_d01_c1 * sp[5];
    sp[49] = w2_d11_c1 * sp[6];
    sp[50] = sp[48] + sp[49];
    sp[51] = sp[50] * sp[6];
    sp[52] = sp[47] + sp[51];
    sp[53] = sp[43] + sp[52];
    sp[54] = w2_d1_c2 * sp[3];
    sp[55] = w2_d0_c2 * sp[4];
    sp[56] = sp[54] + sp[55];
    sp[57] = w4_d11_c1 * sp[3];
    sp[58] = w4_d01_c1 * sp[4];
    sp[59] = sp[57] + sp[58];
    sp[60] = sp[59] * sp[3];
    sp[61] = w4_d01_c1 * sp[3];
    sp[62] = w4_d00_c1 * sp[4];
    sp[63] = sp[61] + sp[62];
    sp[64] = sp[63] * sp[4];
    sp[65] = sp[60] + sp[64];
    sp[66] = sp[65] + sp[65];
    sp[67] = w4_d01_c0 * sp[5];
    sp[68] = w4_d11_c0 * sp[6];
    sp[69] = sp[67] + sp[68];
    sp[70] = sp[69] * sp[3];
    sp[71] = w4_d00_c0 * sp[5];
    sp[72] = w4_d01_c0 * sp[6];
    sp[73] = sp[71] + sp[72];
    sp[74] = sp[73] * sp[4];
    sp[75] = sp[70] + sp[74];
    sp[76] = w4_d00_c1 * sp[5];
    sp[77] = w4_d01_c1 * sp[6];
    sp[78] = sp[76] + sp[77];
    sp[79] = sp[78] * sp[5];
    sp[80] = w4_d01_c1 * sp[5];
    sp[81] = w4_d11_c1 * sp[6];
    sp[82] = sp[80] + sp[81];
    sp[83] = sp[82] * sp[6];
    sp[84] = sp[79] + sp[83];
    sp[85] = sp[75] + sp[84];
    sp[86] = w4_d1_c2 * sp[3];
    sp[87] = w4_d0_c2 * sp[4];
    sp[88] = sp[86] + sp[87];
    sp[89] = w2_d11_c0 * sp[3];
    sp[90] = w2_d01_c0 * sp[4];
    sp[91] = sp[89] + sp[90];
    sp[92] = sp[91] * sp[3];
    sp[93] = w2_d01_c0 * sp[3];
    sp[94] = w2_d00_c0 * sp[4];
    sp[95] = sp[93] + sp[94];
    sp[96] = sp[95] * sp[4];
    sp[97] = sp[92] + sp[96];
    sp[98] = sp[22] * sp[5];
    sp[99] = sp[18] * sp[6];
    sp[100] = sp[98] + sp[99];
    sp[101] = sp[97] + sp[100];
    sp[102] = sp[41] * sp[5];
    sp[103] = sp[37] * sp[6];
    sp[104] = sp[102] + sp[103];
    sp[105] = sp[104] + sp[104];
    sp[106] = w2_d0_c2 * sp[5];
    sp[107] = w2_d1_c2 * sp[6];
    sp[108] = sp[106] + sp[107];
    sp[109] = w4_d11_c0 * sp[3];
    sp[110] = w4_d01_c0 * sp[4];
    sp[111] = sp[109] + sp[110];
    sp[112] = sp[111] * sp[3];
    sp[113] = w4_d01_c0 * sp[3];
    sp[114] = w4_d00_c0 * sp[4];
    sp[115] = sp[113] + sp[114];
    sp[116] = sp[115] * sp[4];
    sp[117] = sp[112] + sp[116];
    sp[118] = sp[63] * sp[5];
    sp[119] = sp[59] * sp[6];
    sp[120] = sp[118] + sp[119];
    sp[121] = sp[117] + sp[120];
    sp[122] = sp[73] * sp[5];
    sp[123] = sp[69] * sp[6];
    sp[124] = sp[122] + sp[123];
    sp[125] = sp[124] + sp[124];
    sp[126] = w4_d0_c2 * sp[5];
    sp[127] = w4_d1_c2 * sp[6];
    sp[128] = sp[126] + sp[127];
    sp[129] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[130] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[131] = sp[129] + sp[130];
    sp[132] = std::sqrt(sp[131]);
    sp[133] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[134] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[135] = sp[133] + sp[134];
    sp[136] = std::sqrt(sp[135]);
    sp[137] = sp[132] * sp[136];
    sp[138] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[139] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[140] = sp[138] + sp[139];
    sp[141] = std::sqrt(sp[140]);
    sp[142] = sp[137] * sp[141];
    sp[143] = triangle_reference_cell_volume * sp[2];
    sp[144] = std::abs(sp[143]);
    sp[145] = sp[142] / (4.0 * sp[144]);
    sp[146] = sp[15] + sp[15];
    sp[147] = sp[34] + sp[34];
    sp[148] = 2.0 * sp[145] * (2.0 * sp[145]);
    sp[149] = w4_d1_c3 * sp[3];
    sp[150] = w4_d0_c3 * sp[4];
    sp[151] = sp[149] + sp[150];
    sp[152] = w4_d0_c3 * sp[5];
    sp[153] = w4_d1_c3 * sp[6];
    sp[154] = sp[152] + sp[153];
    sp[155] = w2_d1_c3 * sp[3];
    sp[156] = w2_d0_c3 * sp[4];
    sp[157] = sp[155] + sp[156];
    sp[158] = w2_d0_c3 * sp[5];
    sp[159] = w2_d1_c3 * sp[6];
    sp[160] = sp[158] + sp[159];
    sp[161] = sp[3] + sp[3];
    sp[162] = sp[4] + sp[4];
    sp[163] = sp[6] + sp[6];
    sp[164] = sp[5] + sp[5];
    sp[165] = w4_d1_c4 * sp[3];
    sp[166] = w4_d0_c4 * sp[4];
    sp[167] = sp[165] + sp[166];
    sp[168] = w4_d0_c4 * sp[5];
    sp[169] = w4_d1_c4 * sp[6];
    sp[170] = sp[168] + sp[169];
    sp[171] = w2_d1_c4 * sp[3];
    sp[172] = w2_d0_c4 * sp[4];
    sp[173] = sp[171] + sp[172];
    sp[174] = w2_d0_c4 * sp[5];
    sp[175] = w2_d1_c4 * sp[6];
    sp[176] = sp[174] + sp[175];
    sp[177] = sp[151] * sp[3];
    sp[178] = sp[151] * sp[4];
    sp[179] = sp[154] * sp[6];
    sp[180] = sp[154] * sp[5];
    sp[181] = sp[177] + sp[179];
    sp[182] = sp[180] + sp[178];
    sp[183] = sp[157] * sp[151];
    sp[184] = sp[160] * sp[154];
    sp[185] = sp[183] + sp[184];
    sp[186] = sp[167] * sp[3];
    sp[187] = sp[167] * sp[4];
    sp[188] = sp[170] * sp[6];
    sp[189] = sp[170] * sp[5];
    sp[190] = sp[186] + sp[188];
    sp[191] = sp[189] + sp[187];
    sp[192] = sp[173] * sp[167];
    sp[193] = sp[176] * sp[170];
    sp[194] = sp[192] + sp[193];
    sp[195] = sp[3] * sp[3];
    sp[196] = sp[3] * sp[4];
    sp[197] = sp[4] * sp[4];
    sp[198] = sp[196] + sp[196];
    sp[199] = sp[195] + sp[195];
    sp[200] = sp[198] + sp[198];
    sp[201] = sp[197] + sp[197];
    sp[202] = sp[3] * sp[5];
    sp[203] = sp[3] * sp[6];
    sp[204] = sp[4] * sp[6];
    sp[205] = sp[5] * sp[4];
    sp[206] = sp[202] + sp[204];
    sp[207] = sp[5] * sp[6];
    sp[208] = sp[5] * sp[5];
    sp[209] = sp[6] * sp[6];
    sp[210] = sp[207] + sp[207];
    sp[211] = sp[210] + sp[210];
    sp[212] = sp[209] + sp[209];
    sp[213] = sp[208] + sp[208];
    sp[214] = std::abs(sp[2]);
    alignas(32) double BF0[6] = {};
    alignas(32) double BF1[5] = {};
    alignas(32) double BF2[3] = {};
    alignas(32) double BF3[5] = {};
    alignas(32) double BF4[3] = {};
    alignas(32) double BF5[4] = {};
    alignas(32) double BF6[6] = {};
    alignas(32) double BF7[5] = {};
    alignas(32) double BF8[3] = {};
    alignas(32) double BF9[5] = {};
    alignas(32) double BF10[3] = {};
    alignas(32) double BF11[4] = {};
    alignas(32) double BF12[2] = {};
    alignas(32) double BF13[3] = {};
    alignas(32) double BF14[2] = {};
    alignas(32) double BF15[2] = {};
    alignas(32) double BF16[3] = {};
    alignas(32) double BF17[2] = {};
    alignas(32) double BF18[2] = {};
    alignas(32) double BF19[3] = {};
    alignas(32) double BF20[2] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w4_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w4_c0 += w[4][ic] * FE96_C0_Q12[0][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE96_C0_Q12[0][iq][ic];
        const double w2_d1_c0 = w[2][0] * FE96_C0_D01_Q12[0][iq][0] + w[2][2] * FE96_C0_D01_Q12[0][iq][1] + w[2][3] * FE96_C0_D01_Q12[0][iq][2] + w[2][4] * FE96_C0_D01_Q12[0][iq][3] + w[2][5] * FE96_C0_D01_Q12[0][iq][4];
        const double w2_d0_c0 = w[2][0] * FE96_C0_D10_Q12[0][iq][0] + w[2][1] * FE96_C0_D10_Q12[0][iq][1] + w[2][3] * FE96_C0_D10_Q12[0][iq][2] + w[2][4] * FE96_C0_D10_Q12[0][iq][3] + w[2][5] * FE96_C0_D10_Q12[0][iq][4];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE96_C0_Q12[0][iq][ic];
        double w4_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w4_c1 += w[4][ic + 6] * FE96_C0_Q12[0][iq][ic];
        const double w2_d1_c1 = w[2][6] * FE96_C0_D01_Q12[0][iq][0] + w[2][8] * FE96_C0_D01_Q12[0][iq][1] + w[2][9] * FE96_C0_D01_Q12[0][iq][2] + w[2][10] * FE96_C0_D01_Q12[0][iq][3] + w[2][11] * FE96_C0_D01_Q12[0][iq][4];
        const double w2_d0_c1 = w[2][6] * FE96_C0_D10_Q12[0][iq][0] + w[2][7] * FE96_C0_D10_Q12[0][iq][1] + w[2][9] * FE96_C0_D10_Q12[0][iq][2] + w[2][10] * FE96_C0_D10_Q12[0][iq][3] + w[2][11] * FE96_C0_D10_Q12[0][iq][4];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c1 += w[3][ic + 6] * FE96_C0_Q12[0][iq][ic];
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c0 += w[3][ic] * FE96_C0_Q12[0][iq][ic];
        double w3_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c3 += w[3][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w5 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w5 += w[5][ic] * FE3_C0_Q12[0][iq][ic];
        double w3_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c4 += w[3][ic + 18] * FE3_C0_Q12[0][iq][ic];
        const double w4_d1_c1 = w[4][6] * FE96_C0_D01_Q12[0][iq][0] + w[4][8] * FE96_C0_D01_Q12[0][iq][1] + w[4][9] * FE96_C0_D01_Q12[0][iq][2] + w[4][10] * FE96_C0_D01_Q12[0][iq][3] + w[4][11] * FE96_C0_D01_Q12[0][iq][4];
        const double w4_d0_c1 = w[4][6] * FE96_C0_D10_Q12[0][iq][0] + w[4][7] * FE96_C0_D10_Q12[0][iq][1] + w[4][9] * FE96_C0_D10_Q12[0][iq][2] + w[4][10] * FE96_C0_D10_Q12[0][iq][3] + w[4][11] * FE96_C0_D10_Q12[0][iq][4];
        const double w4_d1_c0 = w[4][0] * FE96_C0_D01_Q12[0][iq][0] + w[4][2] * FE96_C0_D01_Q12[0][iq][1] + w[4][3] * FE96_C0_D01_Q12[0][iq][2] + w[4][4] * FE96_C0_D01_Q12[0][iq][3] + w[4][5] * FE96_C0_D01_Q12[0][iq][4];
        const double w4_d0_c0 = w[4][0] * FE96_C0_D10_Q12[0][iq][0] + w[4][1] * FE96_C0_D10_Q12[0][iq][1] + w[4][3] * FE96_C0_D10_Q12[0][iq][2] + w[4][4] * FE96_C0_D10_Q12[0][iq][3] + w[4][5] * FE96_C0_D10_Q12[0][iq][4];
        const double w3_d1_c1 = w[3][6] * FE96_C0_D01_Q12[0][iq][0] + w[3][8] * FE96_C0_D01_Q12[0][iq][1] + w[3][9] * FE96_C0_D01_Q12[0][iq][2] + w[3][10] * FE96_C0_D01_Q12[0][iq][3] + w[3][11] * FE96_C0_D01_Q12[0][iq][4];
        const double w3_d0_c1 = w[3][6] * FE96_C0_D10_Q12[0][iq][0] + w[3][7] * FE96_C0_D10_Q12[0][iq][1] + w[3][9] * FE96_C0_D10_Q12[0][iq][2] + w[3][10] * FE96_C0_D10_Q12[0][iq][3] + w[3][11] * FE96_C0_D10_Q12[0][iq][4];
        const double w3_d1_c0 = w[3][0] * FE96_C0_D01_Q12[0][iq][0] + w[3][2] * FE96_C0_D01_Q12[0][iq][1] + w[3][3] * FE96_C0_D01_Q12[0][iq][2] + w[3][4] * FE96_C0_D01_Q12[0][iq][3] + w[3][5] * FE96_C0_D01_Q12[0][iq][4];
        const double w3_d0_c0 = w[3][0] * FE96_C0_D10_Q12[0][iq][0] + w[3][1] * FE96_C0_D10_Q12[0][iq][1] + w[3][3] * FE96_C0_D10_Q12[0][iq][2] + w[3][4] * FE96_C0_D10_Q12[0][iq][3] + w[3][5] * FE96_C0_D10_Q12[0][iq][4];
        double w4_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4_c4 += w[4][ic + 18] * FE3_C0_Q12[0][iq][ic];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE3_C0_Q12[0][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w4_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4_c3 += w[4][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w4_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4_c2 += w[4][ic + 12] * FE3_C0_Q12[0][iq][ic];
        alignas(32) double sv12[1194];
        sv12[0] = w2_c1 * sp[3];
        sv12[1] = w2_c1 * sp[4];
        sv12[2] = w2_d1_c0 * sp[3];
        sv12[3] = w2_d0_c0 * sp[4];
        sv12[4] = sv12[2] + sv12[3];
        sv12[5] = w2_c0 * sp[6];
        sv12[6] = w2_c0 * sp[5];
        sv12[7] = w2_d0_c0 * sp[5];
        sv12[8] = w2_d1_c0 * sp[6];
        sv12[9] = sv12[7] + sv12[8];
        sv12[10] = sv12[0] + sv12[5];
        sv12[11] = sv12[6] + sv12[1];
        sv12[12] = w4_c0 * sv12[10];
        sv12[13] = w4_c0 * sv12[11];
        sv12[14] = w4_c0 * sv12[4];
        sv12[15] = w4_c0 * sv12[9];
        sv12[16] = w2_d1_c1 * sp[3];
        sv12[17] = w2_d0_c1 * sp[4];
        sv12[18] = sv12[16] + sv12[17];
        sv12[19] = w2_d0_c1 * sp[5];
        sv12[20] = w2_d1_c1 * sp[6];
        sv12[21] = sv12[19] + sv12[20];
        sv12[22] = w4_c1 * sv12[18];
        sv12[23] = w4_c1 * sv12[21];
        sv12[24] = w4_c1 * sv12[10];
        sv12[25] = w4_c1 * sv12[11];
        sv12[26] = sv12[14] + sv12[22];
        sv12[27] = sv12[15] + sv12[23];
        sv12[28] = w3_c1 * sv12[18];
        sv12[29] = w3_c0 * sv12[21];
        sv12[30] = sv12[28] + sv12[29];
        sv12[31] = std::exp(w5);
        sv12[32] = sp[9] * sv12[31];
        sv12[33] = w3_c3 * (0.09 * sv12[32]);
        sv12[34] = sp[12] * (0.09 * sv12[31]);
        sv12[35] = sv12[33] + sv12[34];
        sv12[36] = w3_c3 * sv12[35];
        sv12[37] = w3_c3 * (0.09 * sv12[31]);
        sv12[38] = sp[12] * sv12[37];
        sv12[39] = sv12[36] + sv12[38];
        sv12[40] = w3_c4 * sp[15];
        sv12[41] = sv12[40] + sv12[40];
        sv12[42] = w3_c4 * w3_c4;
        sv12[43] = std::sqrt(1e-8 + sv12[42]);
        sv12[44] = sv12[41] / (2 * sv12[43]);
        sv12[45] = sp[15] + sv12[44];
        sv12[46] = w3_c3 * sv12[37];
        sv12[47] = w3_c4 + sv12[43];
        sv12[48] = sv12[46] / (0.5 * sv12[47]);
        sv12[49] = 0.5 * sv12[45] * sv12[48];
        sv12[50] = sv12[39] + -1 * sv12[49];
        sv12[51] = sv12[50] / (0.5 * sv12[47]);
        sv12[52] = sv12[18] + sv12[18];
        sv12[53] = 2.0 * sv12[51] * (sv12[52] / 2);
        sv12[54] = 2.0 * (0.0001 + sv12[48]) * (sp[25] / 2);
        sv12[55] = sv12[53] + sv12[54];
        sv12[56] = sp[28] * sv12[31];
        sv12[57] = w3_c3 * (0.09 * sv12[56]);
        sv12[58] = sp[31] * (0.09 * sv12[31]);
        sv12[59] = sv12[57] + sv12[58];
        sv12[60] = w3_c3 * sv12[59];
        sv12[61] = sp[31] * sv12[37];
        sv12[62] = sv12[60] + sv12[61];
        sv12[63] = w3_c4 * sp[34];
        sv12[64] = sv12[63] + sv12[63];
        sv12[65] = sv12[64] / (2 * sv12[43]);
        sv12[66] = sp[34] + sv12[65];
        sv12[67] = 0.5 * sv12[66] * sv12[48];
        sv12[68] = sv12[62] + -1 * sv12[67];
        sv12[69] = sv12[68] / (0.5 * sv12[47]);
        sv12[70] = sv12[4] + sv12[21];
        sv12[71] = 2.0 * sv12[69] * (sv12[70] / 2);
        sv12[72] = 2.0 * (0.0001 + sv12[48]) * (sp[53] / 2);
        sv12[73] = sv12[71] + sv12[72];
        sv12[74] = sv12[55] + sv12[73];
        sv12[75] = sv12[30] + -1 * sv12[74];
        sv12[76] = sv12[75] + sp[56];
        sv12[77] = w4_d1_c1 * sp[3];
        sv12[78] = w4_d0_c1 * sp[4];
        sv12[79] = sv12[77] + sv12[78];
        sv12[80] = w3_c1 * sv12[79];
        sv12[81] = w4_d0_c1 * sp[5];
        sv12[82] = w4_d1_c1 * sp[6];
        sv12[83] = sv12[81] + sv12[82];
        sv12[84] = w3_c0 * sv12[83];
        sv12[85] = sv12[80] + sv12[84];
        sv12[86] = sv12[79] + sv12[79];
        sv12[87] = 2.0 * sv12[51] * (sv12[86] / 2);
        sv12[88] = 2.0 * (0.0001 + sv12[48]) * (sp[66] / 2);
        sv12[89] = sv12[87] + sv12[88];
        sv12[90] = w4_d1_c0 * sp[3];
        sv12[91] = w4_d0_c0 * sp[4];
        sv12[92] = sv12[90] + sv12[91];
        sv12[93] = sv12[92] + sv12[83];
        sv12[94] = 2.0 * sv12[69] * (sv12[93] / 2);
        sv12[95] = 2.0 * (0.0001 + sv12[48]) * (sp[85] / 2);
        sv12[96] = sv12[94] + sv12[95];
        sv12[97] = sv12[89] + sv12[96];
        sv12[98] = sv12[85] + -1 * sv12[97];
        sv12[99] = sv12[98] + sp[88];
        sv12[100] = sv12[76] * sv12[99];
        sv12[101] = w3_c1 * sv12[4];
        sv12[102] = w3_c0 * sv12[9];
        sv12[103] = sv12[101] + sv12[102];
        sv12[104] = 2.0 * sv12[51] * (sv12[70] / 2);
        sv12[105] = 2.0 * (0.0001 + sv12[48]) * (sp[101] / 2);
        sv12[106] = sv12[104] + sv12[105];
        sv12[107] = sv12[9] + sv12[9];
        sv12[108] = 2.0 * sv12[69] * (sv12[107] / 2);
        sv12[109] = 2.0 * (0.0001 + sv12[48]) * (sp[105] / 2);
        sv12[110] = sv12[108] + sv12[109];
        sv12[111] = sv12[106] + sv12[110];
        sv12[112] = sv12[103] + -1 * sv12[111];
        sv12[113] = sv12[112] + sp[108];
        sv12[114] = w3_c1 * sv12[92];
        sv12[115] = w4_d0_c0 * sp[5];
        sv12[116] = w4_d1_c0 * sp[6];
        sv12[117] = sv12[115] + sv12[116];
        sv12[118] = w3_c0 * sv12[117];
        sv12[119] = sv12[114] + sv12[118];
        sv12[120] = 2.0 * sv12[51] * (sv12[93] / 2);
        sv12[121] = 2.0 * (0.0001 + sv12[48]) * (sp[121] / 2);
        sv12[122] = sv12[120] + sv12[121];
        sv12[123] = sv12[117] + sv12[117];
        sv12[124] = 2.0 * sv12[69] * (sv12[123] / 2);
        sv12[125] = 2.0 * (0.0001 + sv12[48]) * (sp[125] / 2);
        sv12[126] = sv12[124] + sv12[125];
        sv12[127] = sv12[122] + sv12[126];
        sv12[128] = sv12[119] + -1 * sv12[127];
        sv12[129] = sv12[128] + sp[128];
        sv12[130] = sv12[113] * sv12[129];
        sv12[131] = sv12[100] + sv12[130];
        sv12[132] = w3_c0 * w3_c0;
        sv12[133] = w3_c1 * w3_c1;
        sv12[134] = sv12[132] + sv12[133];
        sv12[135] = std::sqrt(sv12[134]);
        sv12[136] = 0.5 * (2.0 * sp[145]) * sv12[135];
        sv12[137] = sv12[136] / (0.0001 + sv12[48]);
        sv12[138] = sv12[37] + sv12[37];
        sv12[139] = w3_c4 + w3_c4;
        sv12[140] = sv12[139] / (2 * sv12[43]);
        sv12[141] = 0.5 * (1.0 + sv12[140]) * sv12[48];
        sv12[142] = sv12[138] / (0.5 * sv12[47]);
        sv12[143] = -1 * sv12[141] / (0.5 * sv12[47]);
        sv12[144] = sv12[137] * sv12[142];
        sv12[145] = sv12[137] * sv12[143];
        sv12[146] = w3_c0 + w3_c0;
        sv12[147] = w3_c1 + w3_c1;
        sv12[148] = sv12[147] / (2 * sv12[135]);
        sv12[149] = sv12[146] / (2 * sv12[135]);
        sv12[150] = 0.5 * (2.0 * sp[145]) * sv12[148];
        sv12[151] = 0.5 * (2.0 * sp[145]) * sv12[149];
        sv12[152] = sv12[150] / (0.0001 + sv12[48]);
        sv12[153] = sv12[151] / (0.0001 + sv12[48]);
        sv12[154] = -1 * sv12[144] / (0.0001 + sv12[48]);
        sv12[155] = -1 * sv12[145] / (0.0001 + sv12[48]);
        sv12[156] = sv12[152] * (1.0 / sv12[137]);
        sv12[157] = sv12[153] * (1.0 / sv12[137]);
        sv12[158] = sv12[154] * (1.0 / sv12[137]);
        sv12[159] = sv12[155] * (1.0 / sv12[137]);
        sv12[160] = -1 * sv12[156] / sv12[137];
        sv12[161] = -1 * sv12[157] / sv12[137];
        sv12[162] = -1 * sv12[158] / sv12[137];
        sv12[163] = -1 * sv12[159] / sv12[137];
        sv12[164] = std::exp(-2.0 * sv12[137]);
        sv12[165] = -2.0 * sv12[152] * sv12[164];
        sv12[166] = -2.0 * sv12[153] * sv12[164];
        sv12[167] = -2.0 * sv12[154] * sv12[164];
        sv12[168] = -2.0 * sv12[155] * sv12[164];
        sv12[169] = (1.0 + sv12[164]) / (1.0 + -1 * sv12[164]);
        sv12[170] = -1 * sv12[165] * sv12[169];
        sv12[171] = -1 * sv12[166] * sv12[169];
        sv12[172] = -1 * sv12[167] * sv12[169];
        sv12[173] = -1 * sv12[168] * sv12[169];
        sv12[174] = -1 * sv12[170] + sv12[165];
        sv12[175] = -1 * sv12[171] + sv12[166];
        sv12[176] = -1 * sv12[172] + sv12[167];
        sv12[177] = -1 * sv12[173] + sv12[168];
        sv12[178] = sv12[174] / (1.0 + -1 * sv12[164]);
        sv12[179] = sv12[175] / (1.0 + -1 * sv12[164]);
        sv12[180] = sv12[176] / (1.0 + -1 * sv12[164]);
        sv12[181] = sv12[177] / (1.0 + -1 * sv12[164]);
        sv12[182] = -1 * sv12[160] + sv12[178];
        sv12[183] = -1 * sv12[161] + sv12[179];
        sv12[184] = -1 * sv12[162] + sv12[180];
        sv12[185] = -1 * sv12[163] + sv12[181];
        sv12[186] = sv12[182] * (2.0 * sp[145]);
        sv12[187] = sv12[183] * (2.0 * sp[145]);
        sv12[188] = sv12[184] * (2.0 * sp[145]);
        sv12[189] = sv12[185] * (2.0 * sp[145]);
        sv12[190] = -1 * (1.0 / sv12[137]) + sv12[169];
        sv12[191] = sv12[190] * (2.0 * sp[145]);
        sv12[192] = sv12[191] / sv12[135];
        sv12[193] = sv12[148] * sv12[192];
        sv12[194] = sv12[149] * sv12[192];
        sv12[195] = sv12[186] + -1 * sv12[193];
        sv12[196] = sv12[187] + -1 * sv12[194];
        sv12[197] = sv12[195] / sv12[135];
        sv12[198] = sv12[196] / sv12[135];
        sv12[199] = sv12[188] / sv12[135];
        sv12[200] = sv12[189] / sv12[135];
        sv12[201] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[137]) * (2.0 * sp[145]);
        sv12[202] = sv12[201] * (2.0 * sp[145]);
        sv12[203] = sv12[202] / (0.0001 + sv12[48]);
        sv12[204] = sv12[203] * sv12[142];
        sv12[205] = sv12[203] * sv12[143];
        sv12[206] = 0.5 * (-0.004435991517475 * sv12[152]) * (2.0 * sp[145]);
        sv12[207] = 0.5 * (-0.004435991517475 * sv12[153]) * (2.0 * sp[145]);
        sv12[208] = 0.5 * (-0.004435991517475 * sv12[154]) * (2.0 * sp[145]);
        sv12[209] = 0.5 * (-0.004435991517475 * sv12[155]) * (2.0 * sp[145]);
        sv12[210] = sv12[206] * (2.0 * sp[145]);
        sv12[211] = sv12[207] * (2.0 * sp[145]);
        sv12[212] = sv12[208] * (2.0 * sp[145]);
        sv12[213] = sv12[209] * (2.0 * sp[145]);
        sv12[214] = -1 * sv12[204] + sv12[212];
        sv12[215] = -1 * sv12[205] + sv12[213];
        sv12[216] = sv12[210] / (0.0001 + sv12[48]);
        sv12[217] = sv12[211] / (0.0001 + sv12[48]);
        sv12[218] = sv12[214] / (0.0001 + sv12[48]);
        sv12[219] = sv12[215] / (0.0001 + sv12[48]);
        sv12[220] = (sv12[137] >= 0.1 ? sv12[197] : sv12[216]);
        sv12[221] = (sv12[137] >= 0.1 ? sv12[198] : sv12[217]);
        sv12[222] = (sv12[137] >= 0.1 ? sv12[199] : sv12[218]);
        sv12[223] = (sv12[137] >= 0.1 ? sv12[200] : sv12[219]);
        sv12[224] = sv12[131] * sv12[220];
        sv12[225] = sv12[131] * sv12[221];
        sv12[226] = sv12[131] * sv12[222];
        sv12[227] = sv12[131] * sv12[223];
        sv12[228] = 0.09 * sv12[31] * sp[3];
        sv12[229] = 0.09 * sv12[31] * sp[4];
        sv12[230] = w3_c3 * sv12[228];
        sv12[231] = w3_c3 * sv12[229];
        sv12[232] = sv12[35] + sv12[33];
        sv12[233] = sv12[37] * sp[3];
        sv12[234] = sv12[37] * sp[4];
        sv12[235] = sv12[232] + sv12[34];
        sv12[236] = sv12[230] + sv12[233];
        sv12[237] = sv12[231] + sv12[234];
        sv12[238] = 0.5 * sv12[45] * sv12[142];
        sv12[239] = 0.5 * sv12[45] * sv12[143];
        sv12[240] = w3_c4 * sp[3];
        sv12[241] = w3_c4 * sp[4];
        sv12[242] = sv12[240] + sv12[240];
        sv12[243] = sv12[241] + sv12[241];
        sv12[244] = 2 * sv12[140] * sv12[44];
        sv12[245] = sp[146] + -1 * sv12[244];
        sv12[246] = sv12[245] / (2 * sv12[43]);
        sv12[247] = sv12[242] / (2 * sv12[43]);
        sv12[248] = sv12[243] / (2 * sv12[43]);
        sv12[249] = sp[3] + sv12[247];
        sv12[250] = sp[4] + sv12[248];
        sv12[251] = 0.5 * sv12[246] * sv12[48];
        sv12[252] = 0.5 * sv12[249] * sv12[48];
        sv12[253] = 0.5 * sv12[250] * sv12[48];
        sv12[254] = sv12[251] + sv12[239];
        sv12[255] = sv12[235] + -1 * sv12[238];
        sv12[256] = 0.5 * (1.0 + sv12[140]) * sv12[51];
        sv12[257] = -1 * sv12[254] + -1 * sv12[256];
        sv12[258] = sv12[255] / (0.5 * sv12[47]);
        sv12[259] = sv12[257] / (0.5 * sv12[47]);
        sv12[260] = sv12[236] / (0.5 * sv12[47]);
        sv12[261] = sv12[237] / (0.5 * sv12[47]);
        sv12[262] = -1 * sv12[252] / (0.5 * sv12[47]);
        sv12[263] = -1 * sv12[253] / (0.5 * sv12[47]);
        sv12[264] = 2.0 * sv12[258] * (sv12[70] / 2);
        sv12[265] = 2.0 * sv12[259] * (sv12[70] / 2);
        sv12[266] = 2.0 * sv12[260] * (sv12[70] / 2);
        sv12[267] = 2.0 * sv12[261] * (sv12[70] / 2);
        sv12[268] = 2.0 * sv12[262] * (sv12[70] / 2);
        sv12[269] = 2.0 * sv12[263] * (sv12[70] / 2);
        sv12[270] = 2.0 * sv12[142] * (sp[101] / 2);
        sv12[271] = 2.0 * sv12[143] * (sp[101] / 2);
        sv12[272] = sv12[264] + sv12[270];
        sv12[273] = sv12[265] + sv12[271];
        sv12[274] = 0.09 * sv12[31] * sp[6];
        sv12[275] = 0.09 * sv12[31] * sp[5];
        sv12[276] = w3_c3 * sv12[274];
        sv12[277] = w3_c3 * sv12[275];
        sv12[278] = sv12[59] + sv12[57];
        sv12[279] = sv12[37] * sp[6];
        sv12[280] = sv12[37] * sp[5];
        sv12[281] = sv12[278] + sv12[58];
        sv12[282] = sv12[276] + sv12[279];
        sv12[283] = sv12[277] + sv12[280];
        sv12[284] = 0.5 * sv12[66] * sv12[142];
        sv12[285] = 0.5 * sv12[66] * sv12[143];
        sv12[286] = w3_c4 * sp[6];
        sv12[287] = w3_c4 * sp[5];
        sv12[288] = sv12[286] + sv12[286];
        sv12[289] = sv12[287] + sv12[287];
        sv12[290] = 2 * sv12[140] * sv12[65];
        sv12[291] = sp[147] + -1 * sv12[290];
        sv12[292] = sv12[291] / (2 * sv12[43]);
        sv12[293] = sv12[288] / (2 * sv12[43]);
        sv12[294] = sv12[289] / (2 * sv12[43]);
        sv12[295] = sp[6] + sv12[293];
        sv12[296] = sp[5] + sv12[294];
        sv12[297] = 0.5 * sv12[292] * sv12[48];
        sv12[298] = 0.5 * sv12[295] * sv12[48];
        sv12[299] = 0.5 * sv12[296] * sv12[48];
        sv12[300] = sv12[297] + sv12[285];
        sv12[301] = sv12[281] + -1 * sv12[284];
        sv12[302] = 0.5 * (1.0 + sv12[140]) * sv12[69];
        sv12[303] = -1 * sv12[300] + -1 * sv12[302];
        sv12[304] = sv12[301] / (0.5 * sv12[47]);
        sv12[305] = sv12[303] / (0.5 * sv12[47]);
        sv12[306] = sv12[282] / (0.5 * sv12[47]);
        sv12[307] = sv12[283] / (0.5 * sv12[47]);
        sv12[308] = -1 * sv12[298] / (0.5 * sv12[47]);
        sv12[309] = -1 * sv12[299] / (0.5 * sv12[47]);
        sv12[310] = 2.0 * sv12[304] * (sv12[107] / 2);
        sv12[311] = 2.0 * sv12[305] * (sv12[107] / 2);
        sv12[312] = 2.0 * sv12[306] * (sv12[107] / 2);
        sv12[313] = 2.0 * sv12[307] * (sv12[107] / 2);
        sv12[314] = 2.0 * sv12[308] * (sv12[107] / 2);
        sv12[315] = 2.0 * sv12[309] * (sv12[107] / 2);
        sv12[316] = 2.0 * sv12[142] * (sp[105] / 2);
        sv12[317] = 2.0 * sv12[143] * (sp[105] / 2);
        sv12[318] = sv12[310] + sv12[316];
        sv12[319] = sv12[311] + sv12[317];
        sv12[320] = sv12[272] + sv12[318];
        sv12[321] = sv12[273] + sv12[319];
        sv12[322] = sv12[312] + sv12[266];
        sv12[323] = sv12[313] + sv12[267];
        sv12[324] = sv12[314] + sv12[268];
        sv12[325] = sv12[315] + sv12[269];
        sv12[326] = sv12[129] * sv12[4];
        sv12[327] = sv12[129] * sv12[9];
        sv12[328] = sv12[129] * (-1 * sv12[320]);
        sv12[329] = sv12[129] * (-1 * sv12[321]);
        sv12[330] = sv12[129] * (-1 * sv12[322]);
        sv12[331] = sv12[129] * (-1 * sv12[323]);
        sv12[332] = sv12[129] * (-1 * sv12[324]);
        sv12[333] = sv12[129] * (-1 * sv12[325]);
        sv12[334] = 2.0 * sv12[258] * (sv12[93] / 2);
        sv12[335] = 2.0 * sv12[259] * (sv12[93] / 2);
        sv12[336] = 2.0 * sv12[260] * (sv12[93] / 2);
        sv12[337] = 2.0 * sv12[261] * (sv12[93] / 2);
        sv12[338] = 2.0 * sv12[262] * (sv12[93] / 2);
        sv12[339] = 2.0 * sv12[263] * (sv12[93] / 2);
        sv12[340] = 2.0 * sv12[142] * (sp[121] / 2);
        sv12[341] = 2.0 * sv12[143] * (sp[121] / 2);
        sv12[342] = sv12[334] + sv12[340];
        sv12[343] = sv12[335] + sv12[341];
        sv12[344] = 2.0 * sv12[304] * (sv12[123] / 2);
        sv12[345] = 2.0 * sv12[305] * (sv12[123] / 2);
        sv12[346] = 2.0 * sv12[306] * (sv12[123] / 2);
        sv12[347] = 2.0 * sv12[307] * (sv12[123] / 2);
        sv12[348] = 2.0 * sv12[308] * (sv12[123] / 2);
        sv12[349] = 2.0 * sv12[309] * (sv12[123] / 2);
        sv12[350] = 2.0 * sv12[142] * (sp[125] / 2);
        sv12[351] = 2.0 * sv12[143] * (sp[125] / 2);
        sv12[352] = sv12[344] + sv12[350];
        sv12[353] = sv12[345] + sv12[351];
        sv12[354] = sv12[342] + sv12[352];
        sv12[355] = sv12[343] + sv12[353];
        sv12[356] = sv12[346] + sv12[336];
        sv12[357] = sv12[347] + sv12[337];
        sv12[358] = sv12[348] + sv12[338];
        sv12[359] = sv12[349] + sv12[339];
        sv12[360] = sv12[113] * sv12[92];
        sv12[361] = sv12[113] * sv12[117];
        sv12[362] = sv12[113] * (-1 * sv12[354]);
        sv12[363] = sv12[113] * (-1 * sv12[355]);
        sv12[364] = sv12[113] * (-1 * sv12[356]);
        sv12[365] = sv12[113] * (-1 * sv12[357]);
        sv12[366] = sv12[113] * (-1 * sv12[358]);
        sv12[367] = sv12[113] * (-1 * sv12[359]);
        sv12[368] = sv12[326] + sv12[360];
        sv12[369] = sv12[327] + sv12[361];
        sv12[370] = sv12[328] + sv12[362];
        sv12[371] = sv12[329] + sv12[363];
        sv12[372] = sv12[330] + sv12[364];
        sv12[373] = sv12[331] + sv12[365];
        sv12[374] = sv12[332] + sv12[366];
        sv12[375] = sv12[333] + sv12[367];
        sv12[376] = 2.0 * sv12[258] * (sv12[52] / 2);
        sv12[377] = 2.0 * sv12[259] * (sv12[52] / 2);
        sv12[378] = 2.0 * sv12[260] * (sv12[52] / 2);
        sv12[379] = 2.0 * sv12[261] * (sv12[52] / 2);
        sv12[380] = 2.0 * sv12[262] * (sv12[52] / 2);
        sv12[381] = 2.0 * sv12[263] * (sv12[52] / 2);
        sv12[382] = 2.0 * sv12[142] * (sp[25] / 2);
        sv12[383] = 2.0 * sv12[143] * (sp[25] / 2);
        sv12[384] = sv12[376] + sv12[382];
        sv12[385] = sv12[377] + sv12[383];
        sv12[386] = 2.0 * sv12[304] * (sv12[70] / 2);
        sv12[387] = 2.0 * sv12[305] * (sv12[70] / 2);
        sv12[388] = 2.0 * sv12[306] * (sv12[70] / 2);
        sv12[389] = 2.0 * sv12[307] * (sv12[70] / 2);
        sv12[390] = 2.0 * sv12[308] * (sv12[70] / 2);
        sv12[391] = 2.0 * sv12[309] * (sv12[70] / 2);
        sv12[392] = 2.0 * sv12[142] * (sp[53] / 2);
        sv12[393] = 2.0 * sv12[143] * (sp[53] / 2);
        sv12[394] = sv12[386] + sv12[392];
        sv12[395] = sv12[387] + sv12[393];
        sv12[396] = sv12[384] + sv12[394];
        sv12[397] = sv12[385] + sv12[395];
        sv12[398] = sv12[378] + sv12[388];
        sv12[399] = sv12[379] + sv12[389];
        sv12[400] = sv12[380] + sv12[390];
        sv12[401] = sv12[381] + sv12[391];
        sv12[402] = sv12[99] * sv12[18];
        sv12[403] = sv12[99] * sv12[21];
        sv12[404] = sv12[99] * (-1 * sv12[396]);
        sv12[405] = sv12[99] * (-1 * sv12[397]);
        sv12[406] = sv12[99] * (-1 * sv12[398]);
        sv12[407] = sv12[99] * (-1 * sv12[399]);
        sv12[408] = sv12[99] * (-1 * sv12[400]);
        sv12[409] = sv12[99] * (-1 * sv12[401]);
        sv12[410] = 2.0 * sv12[258] * (sv12[86] / 2);
        sv12[411] = 2.0 * sv12[259] * (sv12[86] / 2);
        sv12[412] = 2.0 * sv12[260] * (sv12[86] / 2);
        sv12[413] = 2.0 * sv12[261] * (sv12[86] / 2);
        sv12[414] = 2.0 * sv12[262] * (sv12[86] / 2);
        sv12[415] = 2.0 * sv12[263] * (sv12[86] / 2);
        sv12[416] = 2.0 * sv12[142] * (sp[66] / 2);
        sv12[417] = 2.0 * sv12[143] * (sp[66] / 2);
        sv12[418] = sv12[410] + sv12[416];
        sv12[419] = sv12[411] + sv12[417];
        sv12[420] = 2.0 * sv12[304] * (sv12[93] / 2);
        sv12[421] = 2.0 * sv12[305] * (sv12[93] / 2);
        sv12[422] = 2.0 * sv12[306] * (sv12[93] / 2);
        sv12[423] = 2.0 * sv12[307] * (sv12[93] / 2);
        sv12[424] = 2.0 * sv12[308] * (sv12[93] / 2);
        sv12[425] = 2.0 * sv12[309] * (sv12[93] / 2);
        sv12[426] = 2.0 * sv12[142] * (sp[85] / 2);
        sv12[427] = 2.0 * sv12[143] * (sp[85] / 2);
        sv12[428] = sv12[420] + sv12[426];
        sv12[429] = sv12[421] + sv12[427];
        sv12[430] = sv12[418] + sv12[428];
        sv12[431] = sv12[419] + sv12[429];
        sv12[432] = sv12[412] + sv12[422];
        sv12[433] = sv12[413] + sv12[423];
        sv12[434] = sv12[414] + sv12[424];
        sv12[435] = sv12[415] + sv12[425];
        sv12[436] = sv12[76] * sv12[79];
        sv12[437] = sv12[76] * sv12[83];
        sv12[438] = sv12[76] * (-1 * sv12[430]);
        sv12[439] = sv12[76] * (-1 * sv12[431]);
        sv12[440] = sv12[76] * (-1 * sv12[432]);
        sv12[441] = sv12[76] * (-1 * sv12[433]);
        sv12[442] = sv12[76] * (-1 * sv12[434]);
        sv12[443] = sv12[76] * (-1 * sv12[435]);
        sv12[444] = sv12[402] + sv12[436];
        sv12[445] = sv12[403] + sv12[437];
        sv12[446] = sv12[404] + sv12[438];
        sv12[447] = sv12[405] + sv12[439];
        sv12[448] = sv12[406] + sv12[440];
        sv12[449] = sv12[407] + sv12[441];
        sv12[450] = sv12[408] + sv12[442];
        sv12[451] = sv12[409] + sv12[443];
        sv12[452] = sv12[368] + sv12[444];
        sv12[453] = sv12[369] + sv12[445];
        sv12[454] = sv12[370] + sv12[446];
        sv12[455] = sv12[371] + sv12[447];
        sv12[456] = sv12[372] + sv12[448];
        sv12[457] = sv12[449] + sv12[373];
        sv12[458] = sv12[374] + sv12[450];
        sv12[459] = sv12[451] + sv12[375];
        sv12[460] = (sv12[137] >= 0.1 ? sv12[192] : sv12[203]);
        sv12[461] = sv12[452] * sv12[460];
        sv12[462] = sv12[453] * sv12[460];
        sv12[463] = sv12[454] * sv12[460];
        sv12[464] = sv12[455] * sv12[460];
        sv12[465] = sv12[456] * sv12[460];
        sv12[466] = sv12[457] * sv12[460];
        sv12[467] = sv12[458] * sv12[460];
        sv12[468] = sv12[459] * sv12[460];
        sv12[469] = sv12[461] + sv12[224];
        sv12[470] = sv12[462] + sv12[225];
        sv12[471] = sv12[226] + sv12[463];
        sv12[472] = sv12[227] + sv12[464];
        sv12[473] = sv12[18] + sv12[9];
        sv12[474] = sv12[79] + sv12[117];
        sv12[475] = sv12[473] * sv12[474];
        sv12[476] = std::sqrt(1e-9 + sv12[134]);
        sv12[477] = sv12[147] / (2 * sv12[476]);
        sv12[478] = sv12[146] / (2 * sv12[476]);
        sv12[479] = sp[148] * sv12[477];
        sv12[480] = sp[148] * sv12[478];
        sv12[481] = sv12[475] * sv12[479];
        sv12[482] = sv12[475] * sv12[480];
        sv12[483] = sv12[469] + sv12[481];
        sv12[484] = sv12[470] + sv12[482];
        sv12[485] = w3_c1 * sp[151];
        sv12[486] = w3_c0 * sp[154];
        sv12[487] = sv12[485] + sv12[486];
        sv12[488] = sp[151] * sv12[51];
        sv12[489] = sp[154] * sv12[69];
        sv12[490] = sv12[488] + sv12[489];
        sv12[491] = sv12[487] + -1 * sv12[490];
        sv12[492] = w3_c1 * sp[157];
        sv12[493] = w3_c0 * sp[160];
        sv12[494] = sv12[492] + sv12[493];
        sv12[495] = sp[157] * sv12[51];
        sv12[496] = sp[160] * sv12[69];
        sv12[497] = sv12[495] + sv12[496];
        sv12[498] = sv12[494] + -1 * sv12[497];
        sv12[499] = w3_c4 + sv12[498];
        sv12[500] = w3_d1_c1 * sp[3];
        sv12[501] = w3_d0_c1 * sp[4];
        sv12[502] = sv12[500] + sv12[501];
        sv12[503] = sv12[502] + sv12[502];
        sv12[504] = sv12[503] / 2 * (sv12[503] / 2);
        sv12[505] = w3_d1_c0 * sp[3];
        sv12[506] = w3_d0_c0 * sp[4];
        sv12[507] = sv12[505] + sv12[506];
        sv12[508] = w3_d0_c1 * sp[5];
        sv12[509] = w3_d1_c1 * sp[6];
        sv12[510] = sv12[508] + sv12[509];
        sv12[511] = sv12[507] + sv12[510];
        sv12[512] = sv12[511] / 2 * (sv12[511] / 2);
        sv12[513] = sv12[504] + sv12[512];
        sv12[514] = w3_d0_c0 * sp[5];
        sv12[515] = w3_d1_c0 * sp[6];
        sv12[516] = sv12[514] + sv12[515];
        sv12[517] = sv12[516] + sv12[516];
        sv12[518] = sv12[517] / 2 * (sv12[517] / 2);
        sv12[519] = sv12[518] + sv12[512];
        sv12[520] = sv12[513] + sv12[519];
        sv12[521] = 2.0 * sv12[520] * sv12[48];
        sv12[522] = sv12[499] + -1 * sv12[521];
        sv12[523] = sv12[491] * sv12[522];
        sv12[524] = sv12[523] * sv12[220];
        sv12[525] = sv12[523] * sv12[221];
        sv12[526] = sv12[523] * sv12[222];
        sv12[527] = sv12[523] * sv12[223];
        sv12[528] = sp[157] * sv12[258];
        sv12[529] = sp[157] * sv12[259];
        sv12[530] = sp[157] * sv12[260];
        sv12[531] = sp[157] * sv12[261];
        sv12[532] = sp[157] * sv12[262];
        sv12[533] = sp[157] * sv12[263];
        sv12[534] = sp[160] * sv12[304];
        sv12[535] = sp[160] * sv12[305];
        sv12[536] = sp[160] * sv12[306];
        sv12[537] = sp[160] * sv12[307];
        sv12[538] = sp[160] * sv12[308];
        sv12[539] = sp[160] * sv12[309];
        sv12[540] = sv12[528] + sv12[534];
        sv12[541] = sv12[529] + sv12[535];
        sv12[542] = sv12[530] + sv12[536];
        sv12[543] = sv12[537] + sv12[531];
        sv12[544] = sv12[532] + sv12[538];
        sv12[545] = sv12[539] + sv12[533];
        sv12[546] = 2.0 * sv12[520] * sv12[142];
        sv12[547] = 2.0 * sv12[520] * sv12[143];
        sv12[548] = sv12[503] / 2 * (sp[161] / 2);
        sv12[549] = sv12[503] / 2 * (sp[162] / 2);
        sv12[550] = sv12[548] + sv12[548];
        sv12[551] = sv12[549] + sv12[549];
        sv12[552] = sv12[511] / 2 * (sp[3] / 2);
        sv12[553] = sv12[511] / 2 * (sp[4] / 2);
        sv12[554] = sv12[511] / 2 * (sp[6] / 2);
        sv12[555] = sv12[511] / 2 * (sp[5] / 2);
        sv12[556] = sv12[552] + sv12[552];
        sv12[557] = sv12[553] + sv12[553];
        sv12[558] = sv12[554] + sv12[554];
        sv12[559] = sv12[555] + sv12[555];
        sv12[560] = sv12[550] + sv12[558];
        sv12[561] = sv12[551] + sv12[559];
        sv12[562] = sv12[517] / 2 * (sp[163] / 2);
        sv12[563] = sv12[517] / 2 * (sp[164] / 2);
        sv12[564] = sv12[562] + sv12[562];
        sv12[565] = sv12[563] + sv12[563];
        sv12[566] = sv12[564] + sv12[556];
        sv12[567] = sv12[565] + sv12[557];
        sv12[568] = sv12[566] + sv12[556];
        sv12[569] = sv12[567] + sv12[557];
        sv12[570] = sv12[560] + sv12[558];
        sv12[571] = sv12[561] + sv12[559];
        sv12[572] = 2.0 * sv12[568] * sv12[48];
        sv12[573] = 2.0 * sv12[569] * sv12[48];
        sv12[574] = 2.0 * sv12[570] * sv12[48];
        sv12[575] = 2.0 * sv12[571] * sv12[48];
        sv12[576] = -1 * sv12[540] + -1 * sv12[546];
        sv12[577] = 1.0 + -1 * sv12[541] + -1 * sv12[547];
        sv12[578] = sv12[491] * (-1 * sv12[572]);
        sv12[579] = sv12[491] * (-1 * sv12[573]);
        sv12[580] = sv12[491] * sp[157];
        sv12[581] = sv12[491] * sp[160];
        sv12[582] = sv12[491] * (-1 * sv12[574]);
        sv12[583] = sv12[491] * (-1 * sv12[575]);
        sv12[584] = sv12[491] * sv12[576];
        sv12[585] = sv12[491] * sv12[577];
        sv12[586] = sv12[491] * (-1 * sv12[542]);
        sv12[587] = sv12[491] * (-1 * sv12[543]);
        sv12[588] = sv12[491] * (-1 * sv12[544]);
        sv12[589] = sv12[491] * (-1 * sv12[545]);
        sv12[590] = sp[151] * sv12[258];
        sv12[591] = sp[151] * sv12[259];
        sv12[592] = sp[151] * sv12[260];
        sv12[593] = sp[151] * sv12[261];
        sv12[594] = sp[151] * sv12[262];
        sv12[595] = sp[151] * sv12[263];
        sv12[596] = sp[154] * sv12[304];
        sv12[597] = sp[154] * sv12[305];
        sv12[598] = sp[154] * sv12[306];
        sv12[599] = sp[154] * sv12[307];
        sv12[600] = sp[154] * sv12[308];
        sv12[601] = sp[154] * sv12[309];
        sv12[602] = sv12[590] + sv12[596];
        sv12[603] = sv12[591] + sv12[597];
        sv12[604] = sv12[592] + sv12[598];
        sv12[605] = sv12[599] + sv12[593];
        sv12[606] = sv12[594] + sv12[600];
        sv12[607] = sv12[601] + sv12[595];
        sv12[608] = sv12[522] * sp[151];
        sv12[609] = sv12[522] * sp[154];
        sv12[610] = sv12[522] * (-1 * sv12[602]);
        sv12[611] = sv12[522] * (-1 * sv12[603]);
        sv12[612] = sv12[522] * (-1 * sv12[604]);
        sv12[613] = sv12[522] * (-1 * sv12[605]);
        sv12[614] = sv12[522] * (-1 * sv12[606]);
        sv12[615] = sv12[522] * (-1 * sv12[607]);
        sv12[616] = sv12[580] + sv12[608];
        sv12[617] = sv12[581] + sv12[609];
        sv12[618] = sv12[584] + sv12[610];
        sv12[619] = sv12[585] + sv12[611];
        sv12[620] = sv12[586] + sv12[612];
        sv12[621] = sv12[587] + sv12[613];
        sv12[622] = sv12[588] + sv12[614];
        sv12[623] = sv12[589] + sv12[615];
        sv12[624] = sv12[578] * sv12[460];
        sv12[625] = sv12[579] * sv12[460];
        sv12[626] = sv12[616] * sv12[460];
        sv12[627] = sv12[617] * sv12[460];
        sv12[628] = sv12[582] * sv12[460];
        sv12[629] = sv12[583] * sv12[460];
        sv12[630] = sv12[618] * sv12[460];
        sv12[631] = sv12[619] * sv12[460];
        sv12[632] = sv12[620] * sv12[460];
        sv12[633] = sv12[621] * sv12[460];
        sv12[634] = sv12[622] * sv12[460];
        sv12[635] = sv12[623] * sv12[460];
        sv12[636] = sv12[626] + sv12[524];
        sv12[637] = sv12[627] + sv12[525];
        sv12[638] = sv12[526] + sv12[630];
        sv12[639] = sv12[527] + sv12[631];
        sv12[640] = sv12[483] + sv12[636];
        sv12[641] = sv12[484] + sv12[637];
        sv12[642] = sv12[471] + sv12[638];
        sv12[643] = sv12[472] + sv12[639];
        sv12[644] = sv12[465] + sv12[632];
        sv12[645] = sv12[466] + sv12[633];
        sv12[646] = sv12[467] + sv12[634];
        sv12[647] = sv12[468] + sv12[635];
        sv12[648] = w3_c1 * sp[167];
        sv12[649] = w3_c0 * sp[170];
        sv12[650] = sv12[648] + sv12[649];
        sv12[651] = sp[167] * (sv12[51] / 1.3);
        sv12[652] = sp[170] * (sv12[69] / 1.3);
        sv12[653] = sv12[651] + sv12[652];
        sv12[654] = sv12[650] + -1 * sv12[653];
        sv12[655] = w3_c3 * w3_c3;
        sv12[656] = std::sqrt(1e-8 + sv12[655]);
        sv12[657] = w3_c3 + sv12[656];
        sv12[658] = w2_c4 / (0.5 * sv12[657]);
        sv12[659] = 1.92 * w4_c4 * sv12[658];
        sv12[660] = w4_c4 / (0.5 * sv12[657]);
        sv12[661] = 1.92 * w2_c4 * sv12[660];
        sv12[662] = sv12[659] + sv12[661];
        sv12[663] = sv12[654] + sv12[662];
        sv12[664] = w3_c1 * sp[173];
        sv12[665] = w3_c0 * sp[176];
        sv12[666] = sv12[664] + sv12[665];
        sv12[667] = sp[173] * (sv12[51] / 1.3);
        sv12[668] = sp[176] * (sv12[69] / 1.3);
        sv12[669] = sv12[667] + sv12[668];
        sv12[670] = sv12[666] + -1 * sv12[669];
        sv12[671] = 1.92 * w2_c4 * sv12[658];
        sv12[672] = sv12[670] + sv12[671];
        sv12[673] = w3_c3 * (0.09 * (1.44 * sv12[31]));
        sv12[674] = 2.0 * sv12[520] * sv12[673];
        sv12[675] = sv12[672] + -1 * sv12[674];
        sv12[676] = sv12[663] * sv12[675];
        sv12[677] = sv12[136] / (0.0001 + sv12[48] / 1.3);
        sv12[678] = sv12[142] / 1.3 * sv12[677];
        sv12[679] = sv12[143] / 1.3 * sv12[677];
        sv12[680] = sv12[150] / (0.0001 + sv12[48] / 1.3);
        sv12[681] = sv12[151] / (0.0001 + sv12[48] / 1.3);
        sv12[682] = -1 * sv12[678] / (0.0001 + sv12[48] / 1.3);
        sv12[683] = -1 * sv12[679] / (0.0001 + sv12[48] / 1.3);
        sv12[684] = sv12[680] * (1.0 / sv12[677]);
        sv12[685] = sv12[681] * (1.0 / sv12[677]);
        sv12[686] = sv12[682] * (1.0 / sv12[677]);
        sv12[687] = sv12[683] * (1.0 / sv12[677]);
        sv12[688] = -1 * sv12[684] / sv12[677];
        sv12[689] = -1 * sv12[685] / sv12[677];
        sv12[690] = -1 * sv12[686] / sv12[677];
        sv12[691] = -1 * sv12[687] / sv12[677];
        sv12[692] = std::exp(-2.0 * sv12[677]);
        sv12[693] = -2.0 * sv12[680] * sv12[692];
        sv12[694] = -2.0 * sv12[681] * sv12[692];
        sv12[695] = -2.0 * sv12[682] * sv12[692];
        sv12[696] = -2.0 * sv12[683] * sv12[692];
        sv12[697] = (1.0 + sv12[692]) / (1.0 + -1 * sv12[692]);
        sv12[698] = -1 * sv12[693] * sv12[697];
        sv12[699] = -1 * sv12[694] * sv12[697];
        sv12[700] = -1 * sv12[695] * sv12[697];
        sv12[701] = -1 * sv12[696] * sv12[697];
        sv12[702] = -1 * sv12[698] + sv12[693];
        sv12[703] = -1 * sv12[699] + sv12[694];
        sv12[704] = -1 * sv12[700] + sv12[695];
        sv12[705] = -1 * sv12[701] + sv12[696];
        sv12[706] = sv12[702] / (1.0 + -1 * sv12[692]);
        sv12[707] = sv12[703] / (1.0 + -1 * sv12[692]);
        sv12[708] = sv12[704] / (1.0 + -1 * sv12[692]);
        sv12[709] = sv12[705] / (1.0 + -1 * sv12[692]);
        sv12[710] = -1 * sv12[688] + sv12[706];
        sv12[711] = -1 * sv12[689] + sv12[707];
        sv12[712] = -1 * sv12[690] + sv12[708];
        sv12[713] = -1 * sv12[691] + sv12[709];
        sv12[714] = sv12[710] * (2.0 * sp[145]);
        sv12[715] = sv12[711] * (2.0 * sp[145]);
        sv12[716] = sv12[712] * (2.0 * sp[145]);
        sv12[717] = sv12[713] * (2.0 * sp[145]);
        sv12[718] = -1 * (1.0 / sv12[677]) + sv12[697];
        sv12[719] = sv12[718] * (2.0 * sp[145]);
        sv12[720] = sv12[719] / sv12[135];
        sv12[721] = sv12[148] * sv12[720];
        sv12[722] = sv12[149] * sv12[720];
        sv12[723] = sv12[714] + -1 * sv12[721];
        sv12[724] = sv12[715] + -1 * sv12[722];
        sv12[725] = sv12[723] / sv12[135];
        sv12[726] = sv12[724] / sv12[135];
        sv12[727] = sv12[716] / sv12[135];
        sv12[728] = sv12[717] / sv12[135];
        sv12[729] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[677]) * (2.0 * sp[145]);
        sv12[730] = sv12[729] * (2.0 * sp[145]);
        sv12[731] = sv12[730] / (0.0001 + sv12[48] / 1.3);
        sv12[732] = sv12[142] / 1.3 * sv12[731];
        sv12[733] = sv12[143] / 1.3 * sv12[731];
        sv12[734] = 0.5 * (-0.004435991517475 * sv12[680]) * (2.0 * sp[145]);
        sv12[735] = 0.5 * (-0.004435991517475 * sv12[681]) * (2.0 * sp[145]);
        sv12[736] = 0.5 * (-0.004435991517475 * sv12[682]) * (2.0 * sp[145]);
        sv12[737] = 0.5 * (-0.004435991517475 * sv12[683]) * (2.0 * sp[145]);
        sv12[738] = sv12[734] * (2.0 * sp[145]);
        sv12[739] = sv12[735] * (2.0 * sp[145]);
        sv12[740] = sv12[736] * (2.0 * sp[145]);
        sv12[741] = sv12[737] * (2.0 * sp[145]);
        sv12[742] = -1 * sv12[732] + sv12[740];
        sv12[743] = -1 * sv12[733] + sv12[741];
        sv12[744] = sv12[738] / (0.0001 + sv12[48] / 1.3);
        sv12[745] = sv12[739] / (0.0001 + sv12[48] / 1.3);
        sv12[746] = sv12[742] / (0.0001 + sv12[48] / 1.3);
        sv12[747] = sv12[743] / (0.0001 + sv12[48] / 1.3);
        sv12[748] = (sv12[677] >= 0.1 ? sv12[725] : sv12[744]);
        sv12[749] = (sv12[677] >= 0.1 ? sv12[726] : sv12[745]);
        sv12[750] = (sv12[677] >= 0.1 ? sv12[727] : sv12[746]);
        sv12[751] = (sv12[677] >= 0.1 ? sv12[728] : sv12[747]);
        sv12[752] = sv12[676] * sv12[748];
        sv12[753] = sv12[676] * sv12[749];
        sv12[754] = sv12[676] * sv12[750];
        sv12[755] = sv12[676] * sv12[751];
        sv12[756] = sp[173] * (sv12[258] / 1.3);
        sv12[757] = sp[173] * (sv12[259] / 1.3);
        sv12[758] = sp[173] * (sv12[260] / 1.3);
        sv12[759] = sp[173] * (sv12[261] / 1.3);
        sv12[760] = sp[173] * (sv12[262] / 1.3);
        sv12[761] = sp[173] * (sv12[263] / 1.3);
        sv12[762] = sp[176] * (sv12[304] / 1.3);
        sv12[763] = sp[176] * (sv12[305] / 1.3);
        sv12[764] = sp[176] * (sv12[306] / 1.3);
        sv12[765] = sp[176] * (sv12[307] / 1.3);
        sv12[766] = sp[176] * (sv12[308] / 1.3);
        sv12[767] = sp[176] * (sv12[309] / 1.3);
        sv12[768] = sv12[756] + sv12[762];
        sv12[769] = sv12[757] + sv12[763];
        sv12[770] = sv12[758] + sv12[764];
        sv12[771] = sv12[765] + sv12[759];
        sv12[772] = sv12[760] + sv12[766];
        sv12[773] = sv12[767] + sv12[761];
        sv12[774] = w3_c3 + w3_c3;
        sv12[775] = sv12[774] / (2 * sv12[656]);
        sv12[776] = 0.5 * (1.0 + sv12[775]) * sv12[658];
        sv12[777] = -1 * sv12[776] / (0.5 * sv12[657]);
        sv12[778] = 1.92 * w2_c4 * sv12[777];
        sv12[779] = -1 * sv12[768] + sv12[778];
        sv12[780] = 2.0 * sv12[520] * (0.09 * (1.44 * sv12[31]));
        sv12[781] = 2.0 * sv12[568] * sv12[673];
        sv12[782] = 2.0 * sv12[569] * sv12[673];
        sv12[783] = 2.0 * sv12[570] * sv12[673];
        sv12[784] = 2.0 * sv12[571] * sv12[673];
        sv12[785] = sv12[779] + -1 * sv12[780];
        sv12[786] = sv12[663] * (-1 * sv12[781]);
        sv12[787] = sv12[663] * (-1 * sv12[782]);
        sv12[788] = sv12[663] * sp[173];
        sv12[789] = sv12[663] * sp[176];
        sv12[790] = sv12[663] * (-1 * sv12[783]);
        sv12[791] = sv12[663] * (-1 * sv12[784]);
        sv12[792] = sv12[663] * sv12[785];
        sv12[793] = sv12[663] * (-1 * sv12[769]);
        sv12[794] = sv12[663] * (-1 * sv12[770]);
        sv12[795] = sv12[663] * (-1 * sv12[771]);
        sv12[796] = sv12[663] * (-1 * sv12[772]);
        sv12[797] = sv12[663] * (-1 * sv12[773]);
        sv12[798] = sp[167] * (sv12[258] / 1.3);
        sv12[799] = sp[167] * (sv12[259] / 1.3);
        sv12[800] = sp[167] * (sv12[260] / 1.3);
        sv12[801] = sp[167] * (sv12[261] / 1.3);
        sv12[802] = sp[167] * (sv12[262] / 1.3);
        sv12[803] = sp[167] * (sv12[263] / 1.3);
        sv12[804] = sp[170] * (sv12[304] / 1.3);
        sv12[805] = sp[170] * (sv12[305] / 1.3);
        sv12[806] = sp[170] * (sv12[306] / 1.3);
        sv12[807] = sp[170] * (sv12[307] / 1.3);
        sv12[808] = sp[170] * (sv12[308] / 1.3);
        sv12[809] = sp[170] * (sv12[309] / 1.3);
        sv12[810] = sv12[798] + sv12[804];
        sv12[811] = sv12[799] + sv12[805];
        sv12[812] = sv12[800] + sv12[806];
        sv12[813] = sv12[807] + sv12[801];
        sv12[814] = sv12[802] + sv12[808];
        sv12[815] = sv12[809] + sv12[803];
        sv12[816] = 1.92 * w4_c4 * sv12[777];
        sv12[817] = 0.5 * (1.0 + sv12[775]) * sv12[660];
        sv12[818] = -1 * sv12[817] / (0.5 * sv12[657]);
        sv12[819] = 1.92 * w2_c4 * sv12[818];
        sv12[820] = sv12[816] + sv12[819];
        sv12[821] = sv12[820] + -1 * sv12[810];
        sv12[822] = sv12[675] * sp[167];
        sv12[823] = sv12[675] * sp[170];
        sv12[824] = sv12[821] * sv12[675];
        sv12[825] = sv12[675] * (-1 * sv12[811]);
        sv12[826] = sv12[675] * (-1 * sv12[812]);
        sv12[827] = sv12[675] * (-1 * sv12[813]);
        sv12[828] = sv12[675] * (-1 * sv12[814]);
        sv12[829] = sv12[675] * (-1 * sv12[815]);
        sv12[830] = sv12[788] + sv12[822];
        sv12[831] = sv12[789] + sv12[823];
        sv12[832] = sv12[824] + sv12[792];
        sv12[833] = sv12[793] + sv12[825];
        sv12[834] = sv12[794] + sv12[826];
        sv12[835] = sv12[795] + sv12[827];
        sv12[836] = sv12[796] + sv12[828];
        sv12[837] = sv12[797] + sv12[829];
        sv12[838] = (sv12[677] >= 0.1 ? sv12[720] : sv12[731]);
        sv12[839] = sv12[786] * sv12[838];
        sv12[840] = sv12[787] * sv12[838];
        sv12[841] = sv12[830] * sv12[838];
        sv12[842] = sv12[831] * sv12[838];
        sv12[843] = sv12[790] * sv12[838];
        sv12[844] = sv12[791] * sv12[838];
        sv12[845] = sv12[832] * sv12[838];
        sv12[846] = sv12[833] * sv12[838];
        sv12[847] = sv12[834] * sv12[838];
        sv12[848] = sv12[835] * sv12[838];
        sv12[849] = sv12[836] * sv12[838];
        sv12[850] = sv12[837] * sv12[838];
        sv12[851] = sv12[841] + sv12[752];
        sv12[852] = sv12[842] + sv12[753];
        sv12[853] = sv12[754] + sv12[845];
        sv12[854] = sv12[755] + sv12[846];
        sv12[855] = sv12[839] + sv12[624];
        sv12[856] = sv12[840] + sv12[625];
        sv12[857] = sv12[640] + sv12[851];
        sv12[858] = sv12[641] + sv12[852];
        sv12[859] = sv12[843] + sv12[628];
        sv12[860] = sv12[844] + sv12[629];
        sv12[861] = sv12[642] + sv12[853];
        sv12[862] = sv12[643] + sv12[854];
        sv12[863] = sv12[644] + sv12[847];
        sv12[864] = sv12[645] + sv12[848];
        sv12[865] = sv12[646] + sv12[849];
        sv12[866] = sv12[647] + sv12[850];
        sv12[867] = w2_c3 * (0.09 * sv12[31]);
        sv12[868] = w2_c3 * sv12[867];
        sv12[869] = w2_c4 * w2_c4;
        sv12[870] = std::sqrt(1e-8 + sv12[869]);
        sv12[871] = w2_c4 + sv12[870];
        sv12[872] = sv12[868] / (0.5 * sv12[871]);
        sv12[873] = sp[181] * (0.0001 + sv12[872]);
        sv12[874] = sp[182] * (0.0001 + sv12[872]);
        sv12[875] = sv12[867] + sv12[867];
        sv12[876] = w2_c4 + w2_c4;
        sv12[877] = sv12[876] / (2 * sv12[870]);
        sv12[878] = 0.5 * (1.0 + sv12[877]) * sv12[872];
        sv12[879] = sv12[875] / (0.5 * sv12[871]);
        sv12[880] = -1 * sv12[878] / (0.5 * sv12[871]);
        sv12[881] = sp[185] * sv12[879];
        sv12[882] = sp[185] * sv12[880];
        sv12[883] = sv12[861] + sv12[881];
        sv12[884] = sv12[862] + sv12[882];
        sv12[885] = sv12[863] + sv12[873];
        sv12[886] = sv12[864] + sv12[874];
        sv12[887] = sp[190] * (0.0001 + sv12[872] / 1.3);
        sv12[888] = sp[191] * (0.0001 + sv12[872] / 1.3);
        sv12[889] = sp[194] * (sv12[879] / 1.3);
        sv12[890] = sp[194] * (sv12[880] / 1.3);
        sv12[891] = sv12[883] + sv12[889];
        sv12[892] = sv12[884] + sv12[890];
        sv12[893] = sv12[865] + sv12[887];
        sv12[894] = sv12[866] + sv12[888];
        sv12[895] = sv12[474] * sp[6];
        sv12[896] = sv12[474] * sp[5];
        sv12[897] = sv12[474] * sp[3];
        sv12[898] = sv12[474] * sp[4];
        sv12[899] = sp[148] * sv12[476];
        sv12[900] = sv12[895] * sv12[899];
        sv12[901] = sv12[896] * sv12[899];
        sv12[902] = sv12[897] * sv12[899];
        sv12[903] = sv12[898] * sv12[899];
        sv12[904] = w3_c1 * sp[3];
        sv12[905] = w3_c1 * sp[4];
        sv12[906] = w3_c0 * sp[6];
        sv12[907] = w3_c0 * sp[5];
        sv12[908] = sv12[904] + sv12[906];
        sv12[909] = sv12[907] + sv12[905];
        sv12[910] = 2.0 * sv12[51] * (sp[161] / 2);
        sv12[911] = 2.0 * sv12[51] * (sp[162] / 2);
        sv12[912] = 2.0 * (0.0001 + sv12[48]) * (sp[199] / 2);
        sv12[913] = 2.0 * (0.0001 + sv12[48]) * (sp[200] / 2);
        sv12[914] = 2.0 * (0.0001 + sv12[48]) * (sp[201] / 2);
        sv12[915] = 2.0 * sv12[69] * (sp[3] / 2);
        sv12[916] = 2.0 * sv12[69] * (sp[4] / 2);
        sv12[917] = 2.0 * sv12[69] * (sp[6] / 2);
        sv12[918] = 2.0 * sv12[69] * (sp[5] / 2);
        sv12[919] = 2.0 * (0.0001 + sv12[48]) * (sp[209] / 2);
        sv12[920] = 2.0 * (0.0001 + sv12[48]) * (sp[210] / 2);
        sv12[921] = 2.0 * (0.0001 + sv12[48]) * (sp[208] / 2);
        sv12[922] = 2.0 * (0.0001 + sv12[48]) * (sp[206] / 2);
        sv12[923] = 2.0 * (0.0001 + sv12[48]) * (sp[203] / 2);
        sv12[924] = 2.0 * (0.0001 + sv12[48]) * (sp[205] / 2);
        sv12[925] = sv12[910] + sv12[917];
        sv12[926] = sv12[911] + sv12[918];
        sv12[927] = sv12[912] + sv12[919];
        sv12[928] = sv12[913] + sv12[920];
        sv12[929] = sv12[914] + sv12[921];
        sv12[930] = sv12[908] + -1 * sv12[925];
        sv12[931] = sv12[909] + -1 * sv12[926];
        sv12[932] = sv12[99] * (-1 * sv12[915]);
        sv12[933] = sv12[99] * (-1 * sv12[916]);
        sv12[934] = sv12[99] * sv12[930];
        sv12[935] = sv12[99] * sv12[931];
        sv12[936] = sv12[99] * (-1 * sv12[927]);
        sv12[937] = sv12[99] * (-1 * sv12[928]);
        sv12[938] = sv12[99] * (-1 * sv12[929]);
        sv12[939] = sv12[99] * (-1 * sv12[922]);
        sv12[940] = sv12[99] * (-1 * sv12[923]);
        sv12[941] = sv12[99] * (-1 * sv12[924]);
        sv12[942] = sv12[99] * sp[3];
        sv12[943] = sv12[99] * sp[4];
        sv12[944] = 2.0 * sv12[51] * (sp[3] / 2);
        sv12[945] = 2.0 * sv12[51] * (sp[4] / 2);
        sv12[946] = 2.0 * sv12[51] * (sp[6] / 2);
        sv12[947] = 2.0 * sv12[51] * (sp[5] / 2);
        sv12[948] = 2.0 * (0.0001 + sv12[48]) * (sp[198] / 2);
        sv12[949] = 2.0 * (0.0001 + sv12[48]) * (sp[195] / 2);
        sv12[950] = 2.0 * (0.0001 + sv12[48]) * (sp[197] / 2);
        sv12[951] = 2.0 * sv12[69] * (sp[163] / 2);
        sv12[952] = 2.0 * sv12[69] * (sp[164] / 2);
        sv12[953] = 2.0 * (0.0001 + sv12[48]) * (sp[211] / 2);
        sv12[954] = 2.0 * (0.0001 + sv12[48]) * (sp[212] / 2);
        sv12[955] = 2.0 * (0.0001 + sv12[48]) * (sp[213] / 2);
        sv12[956] = sv12[951] + sv12[944];
        sv12[957] = sv12[952] + sv12[945];
        sv12[958] = sv12[953] + sv12[948];
        sv12[959] = sv12[954] + sv12[949];
        sv12[960] = sv12[955] + sv12[950];
        sv12[961] = sv12[908] + -1 * sv12[956];
        sv12[962] = sv12[909] + -1 * sv12[957];
        sv12[963] = sv12[129] * sv12[961];
        sv12[964] = sv12[129] * sv12[962];
        sv12[965] = sv12[129] * (-1 * sv12[946]);
        sv12[966] = sv12[129] * (-1 * sv12[947]);
        sv12[967] = sv12[129] * (-1 * sv12[923]);
        sv12[968] = sv12[129] * (-1 * sv12[922]);
        sv12[969] = sv12[129] * (-1 * sv12[924]);
        sv12[970] = sv12[129] * (-1 * sv12[958]);
        sv12[971] = sv12[129] * (-1 * sv12[959]);
        sv12[972] = sv12[129] * (-1 * sv12[960]);
        sv12[973] = sv12[129] * sp[6];
        sv12[974] = sv12[129] * sp[5];
        sv12[975] = sv12[963] + sv12[932];
        sv12[976] = sv12[964] + sv12[933];
        sv12[977] = sv12[934] + sv12[965];
        sv12[978] = sv12[935] + sv12[966];
        sv12[979] = sv12[936] + sv12[967];
        sv12[980] = sv12[937] + sv12[968];
        sv12[981] = sv12[938] + sv12[969];
        sv12[982] = sv12[970] + sv12[939];
        sv12[983] = sv12[971] + sv12[940];
        sv12[984] = sv12[972] + sv12[941];
        sv12[985] = sv12[942] + sv12[973];
        sv12[986] = sv12[974] + sv12[943];
        sv12[987] = sv12[975] * sv12[460];
        sv12[988] = sv12[976] * sv12[460];
        sv12[989] = sv12[977] * sv12[460];
        sv12[990] = sv12[978] * sv12[460];
        sv12[991] = sv12[979] * sv12[460];
        sv12[992] = sv12[980] * sv12[460];
        sv12[993] = sv12[981] * sv12[460];
        sv12[994] = sv12[982] * sv12[460];
        sv12[995] = sv12[983] * sv12[460];
        sv12[996] = sv12[984] * sv12[460];
        sv12[997] = sv12[985] * sv12[460];
        sv12[998] = sv12[986] * sv12[460];
        sv12[999] = sv12[900] + sv12[987];
        sv12[1000] = sv12[901] + sv12[988];
        sv12[1001] = sv12[902] + sv12[989];
        sv12[1002] = sv12[903] + sv12[990];
        sv12[1003] = sp[3] * sv12[51];
        sv12[1004] = sp[4] * sv12[51];
        sv12[1005] = sp[6] * sv12[69];
        sv12[1006] = sp[5] * sv12[69];
        sv12[1007] = sv12[1003] + sv12[1005];
        sv12[1008] = sv12[1004] + sv12[1006];
        sv12[1009] = sv12[908] + -1 * sv12[1007];
        sv12[1010] = sv12[909] + -1 * sv12[1008];
        sv12[1011] = sv12[491] * sv12[1009];
        sv12[1012] = sv12[491] * sv12[1010];
        sv12[1013] = sv12[1011] * sv12[460];
        sv12[1014] = sv12[1012] * sv12[460];
        sv12[1015] = sv12[51] / 1.3 * sp[3];
        sv12[1016] = sv12[51] / 1.3 * sp[4];
        sv12[1017] = sv12[69] / 1.3 * sp[6];
        sv12[1018] = sv12[69] / 1.3 * sp[5];
        sv12[1019] = sv12[1015] + sv12[1017];
        sv12[1020] = sv12[1018] + sv12[1016];
        sv12[1021] = sv12[908] + -1 * sv12[1019];
        sv12[1022] = sv12[909] + -1 * sv12[1020];
        sv12[1023] = 1.92 * w2_c4 * (1.0 / (0.5 * sv12[657]));
        sv12[1024] = sv12[1023] + 1.92 * sv12[658];
        sv12[1025] = sv12[663] * sv12[1024];
        sv12[1026] = sv12[663] * sv12[1021];
        sv12[1027] = sv12[663] * sv12[1022];
        sv12[1028] = 1.92 * w4_c4 * (1.0 / (0.5 * sv12[657]));
        sv12[1029] = sv12[1028] + 1.92 * sv12[660];
        sv12[1030] = sv12[675] * sv12[1029];
        sv12[1031] = sv12[1025] + sv12[1030];
        sv12[1032] = sv12[1031] * sv12[838];
        sv12[1033] = sv12[1026] * sv12[838];
        sv12[1034] = sv12[1027] * sv12[838];
        sv12[1035] = sv12[999] + sv12[855];
        sv12[1036] = sv12[1000] + sv12[856];
        sv12[1037] = sv12[1001] + sv12[859];
        sv12[1038] = sv12[1002] + sv12[860];
        sv12[1039] = sv12[892] + sv12[1032];
        sv12[1040] = sv12[885] + sv12[1013];
        sv12[1041] = sv12[886] + sv12[1014];
        sv12[1042] = sv12[893] + sv12[1033];
        sv12[1043] = sv12[894] + sv12[1034];
        sv12[1044] = w4_c3 + sv12[1039];
        sv12[1045] = w4_c1 * w[1][0];
        sv12[1046] = w4_c0 * w[1][0];
        sv12[1047] = w4_c3 * w[1][0];
        sv12[1048] = w4_c4 * w[1][0];
        sv12[1049] = sv12[857] + sv12[1045];
        sv12[1050] = sv12[858] + sv12[1046];
        sv12[1051] = sv12[891] + sv12[1047];
        sv12[1052] = sv12[1044] + sv12[1048];
        sv12[1053] = -1.0 * w4_c1 * w[1][0];
        sv12[1054] = -1.0 * w4_c0 * w[1][0];
        sv12[1055] = -1.0 * w4_c3 * w[1][0];
        sv12[1056] = -1.0 * w4_c4 * w[1][0];
        sv12[1057] = sv12[1049] + sv12[1053];
        sv12[1058] = sv12[1050] + sv12[1054];
        sv12[1059] = sv12[1051] + sv12[1055];
        sv12[1060] = sv12[1052] + sv12[1056];
        sv12[1061] = w2_c3 * w2_c3;
        sv12[1062] = std::sqrt(1e-8 + sv12[1061]);
        sv12[1063] = w2_c3 + sv12[1062];
        sv12[1064] = w2_c4 / (0.5 * sv12[1063]);
        sv12[1065] = w2_c3 + w2_c3;
        sv12[1066] = sv12[1065] / (2 * sv12[1062]);
        sv12[1067] = 0.5 * (1.0 + sv12[1066]) * sv12[1064];
        sv12[1068] = -1 * sv12[1067] / (0.5 * sv12[1063]);
        sv12[1069] = 1.92 * w2_c4 * sv12[1068];
        sv12[1070] = 1.92 * w2_c4 * (1.0 / (0.5 * sv12[1063]));
        sv12[1071] = sv12[1070] + 1.92 * sv12[1064];
        sv12[1072] = w4_c4 * sv12[1069];
        sv12[1073] = w4_c4 * sv12[1071];
        sv12[1074] = sv12[1059] + sv12[1072];
        sv12[1075] = sv12[1060] + sv12[1073];
        sv12[1076] = w2_c3 * (0.09 * (1.44 * sv12[31]));
        sv12[1077] = 2.0 * sv12[568] * sv12[1076];
        sv12[1078] = 2.0 * sv12[569] * sv12[1076];
        sv12[1079] = 2.0 * sv12[570] * sv12[1076];
        sv12[1080] = 2.0 * sv12[571] * sv12[1076];
        sv12[1081] = w4_c4 * sv12[1077];
        sv12[1082] = w4_c4 * sv12[1078];
        sv12[1083] = w4_c4 * sv12[1079];
        sv12[1084] = w4_c4 * sv12[1080];
        sv12[1085] = sv12[1035] + -1 * sv12[1081];
        sv12[1086] = sv12[1036] + -1 * sv12[1082];
        sv12[1087] = sv12[1037] + -1 * sv12[1083];
        sv12[1088] = sv12[1038] + -1 * sv12[1084];
        sv12[1089] = w4_c4 * sv12[780];
        sv12[1090] = sv12[1074] + -1 * sv12[1089];
        sv12[1091] = 2.0 * sv12[520] * sv12[879];
        sv12[1092] = 2.0 * sv12[520] * sv12[880];
        sv12[1093] = w4_c3 * sv12[1091];
        sv12[1094] = w4_c3 * sv12[1092];
        sv12[1095] = sv12[1090] + -1 * sv12[1093];
        sv12[1096] = sv12[1075] + -1 * sv12[1094];
        sv12[1097] = 2.0 * sv12[568] * sv12[872];
        sv12[1098] = 2.0 * sv12[569] * sv12[872];
        sv12[1099] = 2.0 * sv12[570] * sv12[872];
        sv12[1100] = 2.0 * sv12[571] * sv12[872];
        sv12[1101] = w4_c3 * sv12[1097];
        sv12[1102] = w4_c3 * sv12[1098];
        sv12[1103] = w4_c3 * sv12[1099];
        sv12[1104] = w4_c3 * sv12[1100];
        sv12[1105] = sv12[1085] + -1 * sv12[1101];
        sv12[1106] = sv12[1086] + -1 * sv12[1102];
        sv12[1107] = sv12[1087] + -1 * sv12[1103];
        sv12[1108] = sv12[1088] + -1 * sv12[1104];
        sv12[1109] = w4_c2 * sp[6];
        sv12[1110] = w4_c2 * sp[5];
        sv12[1111] = w4_c2 * sp[3];
        sv12[1112] = w4_c2 * sp[4];
        sv12[1113] = sv12[1105] + sv12[1109];
        sv12[1114] = sv12[1106] + sv12[1110];
        sv12[1115] = sv12[1107] + sv12[1111];
        sv12[1116] = sv12[1108] + sv12[1112];
        sv12[1117] = w4_c3 * sp[157];
        sv12[1118] = w4_c3 * sp[160];
        sv12[1119] = sv12[1057] + sv12[1117];
        sv12[1120] = sv12[1058] + sv12[1118];
        sv12[1121] = w4_c4 * sp[173];
        sv12[1122] = w4_c4 * sp[176];
        sv12[1123] = sv12[1119] + sv12[1121];
        sv12[1124] = sv12[1120] + sv12[1122];
        sv12[1125] = w4_c3 * sv12[908];
        sv12[1126] = w4_c3 * sv12[909];
        sv12[1127] = sv12[1040] + sv12[1125];
        sv12[1128] = sv12[1041] + sv12[1126];
        sv12[1129] = w4_c4 * sv12[908];
        sv12[1130] = w4_c4 * sv12[909];
        sv12[1131] = sv12[1042] + sv12[1129];
        sv12[1132] = sv12[1043] + sv12[1130];
        sv12[1133] = sv12[86] / 2 * (sp[161] / 2);
        sv12[1134] = sv12[86] / 2 * (sp[162] / 2);
        sv12[1135] = sv12[93] / 2 * (sp[3] / 2);
        sv12[1136] = sv12[93] / 2 * (sp[4] / 2);
        sv12[1137] = sv12[93] / 2 * (sp[6] / 2);
        sv12[1138] = sv12[93] / 2 * (sp[5] / 2);
        sv12[1139] = sv12[1133] + sv12[1137];
        sv12[1140] = sv12[1134] + sv12[1138];
        sv12[1141] = sv12[123] / 2 * (sp[163] / 2);
        sv12[1142] = sv12[123] / 2 * (sp[164] / 2);
        sv12[1143] = sv12[1141] + sv12[1135];
        sv12[1144] = sv12[1142] + sv12[1136];
        sv12[1145] = sv12[1143] + sv12[1135];
        sv12[1146] = sv12[1144] + sv12[1136];
        sv12[1147] = sv12[1139] + sv12[1137];
        sv12[1148] = sv12[1140] + sv12[1138];
        sv12[1149] = sv12[1145] * (2.0 * (0.0001 + sv12[48]));
        sv12[1150] = sv12[1146] * (2.0 * (0.0001 + sv12[48]));
        sv12[1151] = sv12[1147] * (2.0 * (0.0001 + sv12[48]));
        sv12[1152] = sv12[1148] * (2.0 * (0.0001 + sv12[48]));
        sv12[1153] = sv12[1113] + sv12[1149];
        sv12[1154] = sv12[1114] + sv12[1150];
        sv12[1155] = sv12[1115] + sv12[1151];
        sv12[1156] = sv12[1116] + sv12[1152];
        sv12[1157] = sv12[52] / 2 * (sv12[86] / 2);
        sv12[1158] = sv12[70] / 2 * (sv12[93] / 2);
        sv12[1159] = sv12[1157] + sv12[1158];
        sv12[1160] = sv12[107] / 2 * (sv12[123] / 2);
        sv12[1161] = sv12[1160] + sv12[1158];
        sv12[1162] = sv12[1159] + sv12[1161];
        sv12[1163] = sv12[1162] * (2.0 * sv12[142]);
        sv12[1164] = sv12[1162] * (2.0 * sv12[143]);
        sv12[1165] = sv12[1095] + sv12[1163];
        sv12[1166] = sv12[1096] + sv12[1164];
        sv12[1167] = sv12[1153] + sv12[12];
        sv12[1168] = sv12[1154] + sv12[13];
        sv12[1169] = sv12[26] + sv12[1123];
        sv12[1170] = sv12[27] + sv12[1124];
        sv12[1171] = sv12[1155] + sv12[24];
        sv12[1172] = sv12[1156] + sv12[25];
        sv12[1173] = sv12[1167] * sp[214];
        sv12[1174] = sv12[1168] * sp[214];
        sv12[1175] = sv12[1169] * sp[214];
        sv12[1176] = sv12[1170] * sp[214];
        sv12[1177] = sv12[1171] * sp[214];
        sv12[1178] = sv12[1172] * sp[214];
        sv12[1179] = sv12[1165] * sp[214];
        sv12[1180] = sv12[1166] * sp[214];
        sv12[1181] = sv12[1127] * sp[214];
        sv12[1182] = sv12[1128] * sp[214];
        sv12[1183] = sv12[1131] * sp[214];
        sv12[1184] = sv12[1132] * sp[214];
        sv12[1185] = sv12[991] * sp[214];
        sv12[1186] = sv12[992] * sp[214];
        sv12[1187] = sv12[993] * sp[214];
        sv12[1188] = sv12[994] * sp[214];
        sv12[1189] = sv12[995] * sp[214];
        sv12[1190] = sv12[996] * sp[214];
        sv12[1191] = sv12[997] * sp[214];
        sv12[1192] = sv12[998] * sp[214];
        sv12[1193] = -1 * sv12[474] * sp[214];
        const double fw0 = sv12[1176] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            BF0[i] += fw0 * FE96_C0_Q12[0][iq][i];
        const double fw1 = sv12[1174] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF1[i] += fw1 * FE96_C0_D10_Q12[0][iq][i];
        const double fw2 = sv12[1190] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF2[i] += fw2 * FE96_C0_D02_Q12[0][0][i];
        const double fw3 = sv12[1173] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF3[i] += fw3 * FE96_C0_D01_Q12[0][iq][i];
        const double fw4 = sv12[1189] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF4[i] += fw4 * FE96_C0_D02_Q12[0][0][i];
        const double fw5 = sv12[1188] * weights12[iq];
        for (int i = 0; i < 4; ++i)
            BF5[i] += fw5 * FE96_C0_D11_Q12[0][0][i];
        const double fw6 = sv12[1175] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            BF6[i] += fw6 * FE96_C0_Q12[0][iq][i];
        const double fw7 = sv12[1178] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF7[i] += fw7 * FE96_C0_D10_Q12[0][iq][i];
        const double fw8 = sv12[1187] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF8[i] += fw8 * FE96_C0_D02_Q12[0][0][i];
        const double fw9 = sv12[1177] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF9[i] += fw9 * FE96_C0_D01_Q12[0][iq][i];
        const double fw10 = sv12[1185] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF10[i] += fw10 * FE96_C0_D02_Q12[0][0][i];
        const double fw11 = sv12[1186] * weights12[iq];
        for (int i = 0; i < 4; ++i)
            BF11[i] += fw11 * FE96_C0_D11_Q12[0][0][i];
        const double fw12 = sv12[1192] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF12[i] += fw12 * FE3_C0_D01_Q12[0][0][i];
        const double fw13 = sv12[1193] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF13[i] += fw13 * FE3_C0_Q12[0][iq][i];
        const double fw14 = sv12[1191] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF14[i] += fw14 * FE3_C0_D01_Q12[0][0][i];
        const double fw15 = sv12[1182] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF15[i] += fw15 * FE3_C0_D01_Q12[0][0][i];
        const double fw16 = sv12[1179] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF16[i] += fw16 * FE3_C0_Q12[0][iq][i];
        const double fw17 = sv12[1181] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF17[i] += fw17 * FE3_C0_D01_Q12[0][0][i];
        const double fw18 = sv12[1184] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF18[i] += fw18 * FE3_C0_D01_Q12[0][0][i];
        const double fw19 = sv12[1180] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF19[i] += fw19 * FE3_C0_Q12[0][iq][i];
        const double fw20 = sv12[1183] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF20[i] += fw20 * FE3_C0_D01_Q12[0][0][i];
    }
    std::fill(A, A + 21, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[3] = { 0, 1, 5 };
    static const int DM2[5] = { 0, 2, 3, 4, 5 };
    static const int DM3[3] = { 0, 2, 4 };
    static const int DM4[4] = { 0, 3, 4, 5 };
    static const int DM5[5] = { 6, 7, 9, 10, 11 };
    static const int DM6[3] = { 6, 7, 11 };
    static const int DM7[5] = { 6, 8, 9, 10, 11 };
    static const int DM8[3] = { 6, 8, 10 };
    static const int DM9[4] = { 6, 9, 10, 11 };
    static const int DM10[2] = { 12, 14 };
    static const int DM11[2] = { 15, 17 };
    static const int DM12[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 5; ++i)
        A[DM0[i]] += BF1[i];
    for (int i = 0; i < 3; ++i)
        A[DM1[i]] += BF2[i];
    for (int i = 0; i < 5; ++i)
        A[DM2[i]] += BF3[i];
    for (int i = 0; i < 3; ++i)
        A[DM3[i]] += BF4[i];
    for (int i = 0; i < 4; ++i)
        A[DM4[i]] += BF5[i];
    for (int i = 0; i < 6; ++i)
        A[i + 6] += BF6[i];
    for (int i = 0; i < 5; ++i)
        A[DM5[i]] += BF7[i];
    for (int i = 0; i < 3; ++i)
        A[DM6[i]] += BF8[i];
    for (int i = 0; i < 5; ++i)
        A[DM7[i]] += BF9[i];
    for (int i = 0; i < 3; ++i)
        A[DM8[i]] += BF10[i];
    for (int i = 0; i < 4; ++i)
        A[DM9[i]] += BF11[i];
    for (int i = 0; i < 2; ++i)
        A[i + 12] += BF12[i];
    for (int i = 0; i < 3; ++i)
        A[i + 12] += BF13[i];
    for (int i = 0; i < 2; ++i)
        A[DM10[i]] += BF14[i];
    for (int i = 0; i < 2; ++i)
        A[i + 15] += BF15[i];
    for (int i = 0; i < 3; ++i)
        A[i + 15] += BF16[i];
    for (int i = 0; i < 2; ++i)
        A[DM11[i]] += BF17[i];
    for (int i = 0; i < 2; ++i)
        A[i + 18] += BF18[i];
    for (int i = 0; i < 3; ++i)
        A[i + 18] += BF19[i];
    for (int i = 0; i < 2; ++i)
        A[DM12[i]] += BF20[i];
  }

};


class ranspseudotimestepping_exterior_facet_integral_4_3: public ufc::exterior_facet_integral
{
public:

  ranspseudotimestepping_exterior_facet_integral_4_3() : ufc::exterior_facet_integral()
  {

  }

  ~ranspseudotimestepping_exterior_facet_integral_4_3() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, false, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 37
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.1739274225687268, 0.3260725774312731, 0.3260725774312731, 0.1739274225687268 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE47_C0_D01_F_Q4[3][4][5] =
        { { { 1.0, -0.7222726231881047, 3.722272623188091, -0.2777273768118826, -3.722272623188107 },
            { 1.0, 0.3200379128302891, 2.679962087169697, -1.320037912830275, -2.679962087169714 },
            { 1.0, 1.679962087169715, 1.320037912830271, -2.679962087169701, -1.320037912830287 },
            { 1.0, 2.722272623188108, 0.2777273768118786, -3.722272623188096, -0.2777273768118922 } },
          { { -2.72227262318811, -0.722272623188105, 0.0, 3.444545246376218, 0.0 },
            { -1.679962087169718, 0.3200379128302888, 0.0, 1.359924174339433, 0.0 },
            { -0.3200379128302928, 1.679962087169715, 0.0, -1.359924174339417, 0.0 },
            { 0.7222726231881, 2.722272623188108, 0.0, -3.444545246376202, 0.0 } },
          { { -2.72227262318811, -1.0, 0.2777273768118848, 3.722272623188112, -0.2777273768118925 },
            { -1.679962087169717, -1.0, 1.320037912830276, 2.679962087169721, -1.320037912830287 },
            { -0.3200379128302917, -1.0, 2.6799620871697, 1.320037912830298, -2.679962087169714 },
            { 0.7222726231880999, -1.0, 3.722272623188092, 0.2777273768119067, -3.722272623188106 } } };
    alignas(32) static const double FE47_C0_D10_F_Q4[3][4][5] =
        { { { 1.0, 2.722272623188104, 0.2777273768118936, -0.2777273768118936, -3.722272623188106 },
            { 1.0, 1.679962087169712, 1.320037912830285, -1.320037912830285, -2.679962087169713 },
            { 1.0, 0.3200379128302879, 2.679962087169708, -2.679962087169708, -1.320037912830288 },
            { 1.0, -0.7222726231881051, 3.722272623188099, -3.722272623188099, -0.2777273768118945 } },
          { { -2.722272623188107, -1.0, 0.277727376811893, -0.277727376811893, 3.72227262318811 },
            { -1.679962087169713, -1.0, 1.320037912830285, -1.320037912830285, 2.679962087169716 },
            { -0.3200379128302884, -1.0, 2.679962087169709, -2.679962087169709, 1.320037912830289 },
            { 0.7222726231881045, -1.0, 3.722272623188099, -3.722272623188099, 0.2777273768118963 } },
          { { -2.722272623188106, -0.7222726231881095, 0.0, 0.0, 3.444545246376216 },
            { -1.679962087169712, 0.3200379128302852, 0.0, 0.0, 1.359924174339427 },
            { -0.3200379128302857, 1.679962087169712, 0.0, 0.0, -1.359924174339426 },
            { 0.7222726231881069, 2.722272623188104, 0.0, 0.0, -3.444545246376211 } } };
    alignas(32) static const double FE47_C0_F_Q4[3][4][6] =
        { { { 0.0, 0.8013460293699309, -0.05979028222412166, 0.2584442528541909, 0.0, 0.0 },
            { 0.0, 0.2277840767909521, -0.1121969667939041, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.1121969667939041, 0.227784076790952, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.05979028222412169, 0.8013460293699309, 0.2584442528541908, 0.0, 0.0 } },
          { { 0.8013460293699309, 0.0, -0.05979028222412166, 0.0, 0.2584442528541908, 0.0 },
            { 0.2277840767909521, 0.0, -0.1121969667939041, 0.0, 0.8844128900029518, 0.0 },
            { -0.1121969667939041, 0.0, 0.2277840767909521, 0.0, 0.8844128900029519, 0.0 },
            { -0.05979028222412166, 0.0, 0.8013460293699309, 0.0, 0.2584442528541906, 0.0 } },
          { { 0.8013460293699309, -0.05979028222412169, 0.0, 0.0, 0.0, 0.2584442528541908 },
            { 0.2277840767909521, -0.1121969667939041, 0.0, 0.0, 0.0, 0.8844128900029519 },
            { -0.1121969667939041, 0.2277840767909522, 0.0, 0.0, 0.0, 0.884412890002952 },
            { -0.05979028222412169, 0.8013460293699308, 0.0, 0.0, 0.0, 0.2584442528541909 } } };
    alignas(32) static const double FE49_C2_D01_F_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE49_C2_F_Q4[3][4][3] =
        { { { 0.0, 0.9305681557970263, 0.06943184420297369 },
            { 0.0, 0.6699905217924281, 0.3300094782075718 },
            { 0.0, 0.3300094782075719, 0.6699905217924279 },
            { 0.0, 0.06943184420297382, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.0, 0.06943184420297369 },
            { 0.6699905217924281, 0.0, 0.3300094782075718 },
            { 0.3300094782075719, 0.0, 0.669990521792428 },
            { 0.06943184420297382, 0.0, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.06943184420297367, 0.0 },
            { 0.6699905217924281, 0.3300094782075718, 0.0 },
            { 0.3300094782075719, 0.6699905217924281, 0.0 },
            { 0.06943184420297374, 0.9305681557970263, 0.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE49_C2_D01_F_Q4[0][0][0] + coordinate_dofs[2] * FE49_C2_D01_F_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE49_C2_D01_F_Q4[0][0][0] + coordinate_dofs[5] * FE49_C2_D01_F_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE49_C2_D01_F_Q4[0][0][0] + coordinate_dofs[4] * FE49_C2_D01_F_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE49_C2_D01_F_Q4[0][0][0] + coordinate_dofs[3] * FE49_C2_D01_F_Q4[0][0][1];
    const double w4_d1_c3 = w[4][15] * FE49_C2_D01_F_Q4[0][0][0] + w[4][17] * FE49_C2_D01_F_Q4[0][0][1];
    double w4_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w4_d0_c3 += w[4][ic + 15] * FE49_C2_D01_F_Q4[0][0][ic];
    const double w4_d1_c4 = w[4][18] * FE49_C2_D01_F_Q4[0][0][0] + w[4][20] * FE49_C2_D01_F_Q4[0][0][1];
    double w4_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w4_d0_c4 += w[4][ic + 18] * FE49_C2_D01_F_Q4[0][0][ic];
    const double w2_d1_c3 = w[2][15] * FE49_C2_D01_F_Q4[0][0][0] + w[2][17] * FE49_C2_D01_F_Q4[0][0][1];
    double w2_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c3 += w[2][ic + 15] * FE49_C2_D01_F_Q4[0][0][ic];
    const double w2_d1_c4 = w[2][18] * FE49_C2_D01_F_Q4[0][0][0] + w[2][20] * FE49_C2_D01_F_Q4[0][0][1];
    double w2_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c4 += w[2][ic + 18] * FE49_C2_D01_F_Q4[0][0][ic];
    alignas(32) double sp[92];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = triangle_reference_facet_normals[facet][1] * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = triangle_reference_facet_normals[facet][0] * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet][0] * sp[9];
    sp[11] = -1 * J_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[20] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[21] = sp[19] + sp[20];
    sp[22] = std::sqrt(sp[21]);
    sp[23] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[24] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[25] = sp[23] + sp[24];
    sp[26] = std::sqrt(sp[25]);
    sp[27] = sp[22] * sp[26];
    sp[28] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[29] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[30] = sp[28] + sp[29];
    sp[31] = std::sqrt(sp[30]);
    sp[32] = sp[27] * sp[31];
    sp[33] = triangle_reference_cell_volume * sp[2];
    sp[34] = std::abs(sp[33]);
    sp[35] = sp[32] / (4.0 * sp[34]);
    sp[36] = w4_d1_c3 * sp[3];
    sp[37] = w4_d0_c3 * sp[5];
    sp[38] = sp[36] + sp[37];
    sp[39] = sp[38] * sp[17];
    sp[40] = w4_d0_c3 * sp[9];
    sp[41] = w4_d1_c3 * sp[11];
    sp[42] = sp[40] + sp[41];
    sp[43] = sp[42] * sp[18];
    sp[44] = sp[39] + sp[43];
    sp[45] = w4_d1_c4 * sp[3];
    sp[46] = w4_d0_c4 * sp[5];
    sp[47] = sp[45] + sp[46];
    sp[48] = sp[47] * sp[17];
    sp[49] = w4_d0_c4 * sp[9];
    sp[50] = w4_d1_c4 * sp[11];
    sp[51] = sp[49] + sp[50];
    sp[52] = sp[51] * sp[18];
    sp[53] = sp[48] + sp[52];
    sp[54] = sp[3] * sp[17];
    sp[55] = sp[5] * sp[17];
    sp[56] = sp[11] * sp[18];
    sp[57] = sp[9] * sp[18];
    sp[58] = sp[54] + sp[56];
    sp[59] = sp[55] + sp[57];
    sp[60] = w2_d1_c3 * sp[3];
    sp[61] = w2_d0_c3 * sp[5];
    sp[62] = sp[60] + sp[61];
    sp[63] = sp[62] * sp[17];
    sp[64] = w2_d0_c3 * sp[9];
    sp[65] = w2_d1_c3 * sp[11];
    sp[66] = sp[64] + sp[65];
    sp[67] = sp[66] * sp[18];
    sp[68] = sp[63] + sp[67];
    sp[69] = w2_d1_c4 * sp[3];
    sp[70] = w2_d0_c4 * sp[5];
    sp[71] = sp[69] + sp[70];
    sp[72] = sp[71] * sp[17];
    sp[73] = w2_d0_c4 * sp[9];
    sp[74] = w2_d1_c4 * sp[11];
    sp[75] = sp[73] + sp[74];
    sp[76] = sp[75] * sp[18];
    sp[77] = sp[72] + sp[76];
    sp[78] = sp[11] + sp[11];
    sp[79] = sp[9] + sp[9];
    sp[80] = sp[5] + sp[5];
    sp[81] = sp[3] + sp[3];
    sp[82] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[83] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[84] = sp[82] + sp[83];
    sp[85] = sp[84] * sp[84];
    sp[86] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[87] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[88] = sp[86] + sp[87];
    sp[89] = sp[88] * sp[88];
    sp[90] = sp[85] + sp[89];
    sp[91] = std::sqrt(sp[90]);
    alignas(32) double BF0[6] = {};
    alignas(32) double BF1[5] = {};
    alignas(32) double BF2[5] = {};
    alignas(32) double BF3[6] = {};
    alignas(32) double BF4[5] = {};
    alignas(32) double BF5[5] = {};
    alignas(32) double BF6[2] = {};
    alignas(32) double BF7[3] = {};
    alignas(32) double BF8[2] = {};
    alignas(32) double BF9[2] = {};
    alignas(32) double BF10[3] = {};
    alignas(32) double BF11[2] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w4_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4_c4 += w[4][ic + 18] * FE49_C2_F_Q4[facet][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE49_C2_F_Q4[facet][iq][ic];
        double w5 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w5 += w[5][ic] * FE49_C2_F_Q4[facet][iq][ic];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE49_C2_F_Q4[facet][iq][ic];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c1 += w[3][ic + 6] * FE47_C0_F_Q4[facet][iq][ic];
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c0 += w[3][ic] * FE47_C0_F_Q4[facet][iq][ic];
        double w4_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4_c3 += w[4][ic + 15] * FE49_C2_F_Q4[facet][iq][ic];
        double w4_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w4_c0 += w[4][ic] * FE47_C0_F_Q4[facet][iq][ic];
        double w4_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w4_c1 += w[4][ic + 6] * FE47_C0_F_Q4[facet][iq][ic];
        double w3_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c3 += w[3][ic + 15] * FE49_C2_F_Q4[facet][iq][ic];
        double w3_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c4 += w[3][ic + 18] * FE49_C2_F_Q4[facet][iq][ic];
        const double w4_d1_c0 = w[4][0] * FE47_C0_D01_F_Q4[facet][iq][0] + w[4][2] * FE47_C0_D01_F_Q4[facet][iq][1] + w[4][3] * FE47_C0_D01_F_Q4[facet][iq][2] + w[4][4] * FE47_C0_D01_F_Q4[facet][iq][3] + w[4][5] * FE47_C0_D01_F_Q4[facet][iq][4];
        const double w4_d0_c0 = w[4][0] * FE47_C0_D10_F_Q4[facet][iq][0] + w[4][1] * FE47_C0_D10_F_Q4[facet][iq][1] + w[4][3] * FE47_C0_D10_F_Q4[facet][iq][2] + w[4][4] * FE47_C0_D10_F_Q4[facet][iq][3] + w[4][5] * FE47_C0_D10_F_Q4[facet][iq][4];
        const double w4_d0_c1 = w[4][6] * FE47_C0_D10_F_Q4[facet][iq][0] + w[4][7] * FE47_C0_D10_F_Q4[facet][iq][1] + w[4][9] * FE47_C0_D10_F_Q4[facet][iq][2] + w[4][10] * FE47_C0_D10_F_Q4[facet][iq][3] + w[4][11] * FE47_C0_D10_F_Q4[facet][iq][4];
        const double w4_d1_c1 = w[4][6] * FE47_C0_D01_F_Q4[facet][iq][0] + w[4][8] * FE47_C0_D01_F_Q4[facet][iq][1] + w[4][9] * FE47_C0_D01_F_Q4[facet][iq][2] + w[4][10] * FE47_C0_D01_F_Q4[facet][iq][3] + w[4][11] * FE47_C0_D01_F_Q4[facet][iq][4];
        const double w2_d1_c0 = w[2][0] * FE47_C0_D01_F_Q4[facet][iq][0] + w[2][2] * FE47_C0_D01_F_Q4[facet][iq][1] + w[2][3] * FE47_C0_D01_F_Q4[facet][iq][2] + w[2][4] * FE47_C0_D01_F_Q4[facet][iq][3] + w[2][5] * FE47_C0_D01_F_Q4[facet][iq][4];
        const double w2_d0_c0 = w[2][0] * FE47_C0_D10_F_Q4[facet][iq][0] + w[2][1] * FE47_C0_D10_F_Q4[facet][iq][1] + w[2][3] * FE47_C0_D10_F_Q4[facet][iq][2] + w[2][4] * FE47_C0_D10_F_Q4[facet][iq][3] + w[2][5] * FE47_C0_D10_F_Q4[facet][iq][4];
        const double w2_d0_c1 = w[2][6] * FE47_C0_D10_F_Q4[facet][iq][0] + w[2][7] * FE47_C0_D10_F_Q4[facet][iq][1] + w[2][9] * FE47_C0_D10_F_Q4[facet][iq][2] + w[2][10] * FE47_C0_D10_F_Q4[facet][iq][3] + w[2][11] * FE47_C0_D10_F_Q4[facet][iq][4];
        const double w2_d1_c1 = w[2][6] * FE47_C0_D01_F_Q4[facet][iq][0] + w[2][8] * FE47_C0_D01_F_Q4[facet][iq][1] + w[2][9] * FE47_C0_D01_F_Q4[facet][iq][2] + w[2][10] * FE47_C0_D01_F_Q4[facet][iq][3] + w[2][11] * FE47_C0_D01_F_Q4[facet][iq][4];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE47_C0_F_Q4[facet][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE47_C0_F_Q4[facet][iq][ic];
        alignas(32) double sv4[323];
        sv4[0] = std::exp(w5);
        sv4[1] = w2_c3 * (0.09 * sv4[0]);
        sv4[2] = w2_c3 * sv4[1];
        sv4[3] = w2_c4 * w2_c4;
        sv4[4] = std::sqrt(1e-8 + sv4[3]);
        sv4[5] = w2_c4 + sv4[4];
        sv4[6] = sv4[2] / (0.5 * sv4[5]);
        sv4[7] = w3_c1 * sp[17];
        sv4[8] = w3_c0 * sp[18];
        sv4[9] = sv4[7] + sv4[8];
        sv4[10] = std::tanh(100.0 * sv4[9]);
        sv4[11] = (0.0001 + sv4[6] / 1.3) * (100000.0 * (0.5 + -1 * (0.5 * sv4[10])));
        sv4[12] = sv4[11] * (1.0 / (2.0 * sp[35]));
        sv4[13] = sv4[1] + sv4[1];
        sv4[14] = w2_c4 + w2_c4;
        sv4[15] = sv4[14] / (2 * sv4[4]);
        sv4[16] = 0.5 * (1.0 + sv4[15]) * sv4[6];
        sv4[17] = -1 * sv4[16] / (0.5 * sv4[5]);
        sv4[18] = sv4[13] / (0.5 * sv4[5]);
        sv4[19] = 100000.0 * (0.5 + -1 * (0.5 * sv4[10])) * (sv4[17] / 1.3);
        sv4[20] = 100000.0 * (0.5 + -1 * (0.5 * sv4[10])) * (sv4[18] / 1.3);
        sv4[21] = sv4[19] * (1.0 / (2.0 * sp[35]));
        sv4[22] = sv4[20] * (1.0 / (2.0 * sp[35]));
        sv4[23] = w2_c4 * sv4[21];
        sv4[24] = w2_c4 * sv4[22];
        sv4[25] = sv4[23] + sv4[12];
        sv4[26] = w4_c4 * sv4[25];
        sv4[27] = w4_c4 * sv4[24];
        sv4[28] = (0.0001 + sv4[6]) * (100000.0 * (0.5 + -1 * (0.5 * sv4[10])));
        sv4[29] = sv4[28] * (1.0 / (2.0 * sp[35]));
        sv4[30] = 100000.0 * (0.5 + -1 * (0.5 * sv4[10])) * sv4[17];
        sv4[31] = 100000.0 * (0.5 + -1 * (0.5 * sv4[10])) * sv4[18];
        sv4[32] = sv4[30] * (1.0 / (2.0 * sp[35]));
        sv4[33] = sv4[31] * (1.0 / (2.0 * sp[35]));
        sv4[34] = w2_c3 * sv4[32];
        sv4[35] = w2_c3 * sv4[33];
        sv4[36] = sv4[35] + sv4[29];
        sv4[37] = w4_c3 * sv4[34];
        sv4[38] = w4_c3 * sv4[36];
        sv4[39] = sv4[26] + sv4[37];
        sv4[40] = sv4[38] + sv4[27];
        sv4[41] = (0.5 + -1 * (0.5 * sv4[10])) * (0.0001 + sv4[6]);
        sv4[42] = sp[44] * sv4[41];
        sv4[43] = (0.5 + -1 * (0.5 * sv4[10])) * sv4[17];
        sv4[44] = (0.5 + -1 * (0.5 * sv4[10])) * sv4[18];
        sv4[45] = sp[44] * sv4[43];
        sv4[46] = sp[44] * sv4[44];
        sv4[47] = w2_c3 * sv4[45];
        sv4[48] = w2_c3 * sv4[46];
        sv4[49] = sv4[42] + sv4[48];
        sv4[50] = sv4[39] + -1 * sv4[47];
        sv4[51] = sv4[40] + -1 * sv4[49];
        sv4[52] = (0.5 + -1 * (0.5 * sv4[10])) * (0.0001 + sv4[6] / 1.3);
        sv4[53] = sp[53] * sv4[52];
        sv4[54] = (0.5 + -1 * (0.5 * sv4[10])) * (sv4[17] / 1.3);
        sv4[55] = (0.5 + -1 * (0.5 * sv4[10])) * (sv4[18] / 1.3);
        sv4[56] = sp[53] * sv4[54];
        sv4[57] = sp[53] * sv4[55];
        sv4[58] = w2_c4 * sv4[56];
        sv4[59] = w2_c4 * sv4[57];
        sv4[60] = sv4[53] + sv4[58];
        sv4[61] = sv4[50] + -1 * sv4[60];
        sv4[62] = sv4[51] + -1 * sv4[59];
        sv4[63] = sp[58] * sv4[41];
        sv4[64] = sp[59] * sv4[41];
        sv4[65] = sp[68] * sv4[43];
        sv4[66] = sp[68] * sv4[44];
        sv4[67] = w4_c3 * sv4[65];
        sv4[68] = w4_c3 * sv4[66];
        sv4[69] = w4_c3 * sv4[63];
        sv4[70] = w4_c3 * sv4[64];
        sv4[71] = sv4[61] + -1 * sv4[67];
        sv4[72] = sv4[62] + -1 * sv4[68];
        sv4[73] = sp[58] * sv4[52];
        sv4[74] = sp[59] * sv4[52];
        sv4[75] = sp[77] * sv4[54];
        sv4[76] = sp[77] * sv4[55];
        sv4[77] = w4_c3 * sv4[75];
        sv4[78] = w4_c3 * sv4[76];
        sv4[79] = w4_c3 * sv4[73];
        sv4[80] = w4_c3 * sv4[74];
        sv4[81] = sv4[71] + -1 * sv4[77];
        sv4[82] = sv4[72] + -1 * sv4[78];
        sv4[83] = std::cosh(100.0 * sv4[9]);
        sv4[84] = std::cosh(2.0 * (100.0 * sv4[9]));
        sv4[85] = 2.0 * sv4[83] / (1.0 + sv4[84]);
        sv4[86] = 100.0 * sp[17] * std::pow(sv4[85], 2);
        sv4[87] = 100.0 * sp[18] * std::pow(sv4[85], 2);
        sv4[88] = (0.0001 + sv4[6] / 1.3) * (100000.0 * (-1 * (0.5 * sv4[86])));
        sv4[89] = (0.0001 + sv4[6] / 1.3) * (100000.0 * (-1 * (0.5 * sv4[87])));
        sv4[90] = sv4[88] * (1.0 / (2.0 * sp[35]));
        sv4[91] = sv4[89] * (1.0 / (2.0 * sp[35]));
        sv4[92] = w2_c4 * sv4[90];
        sv4[93] = w2_c4 * sv4[91];
        sv4[94] = w4_c4 * sv4[92];
        sv4[95] = w4_c4 * sv4[93];
        sv4[96] = (0.0001 + sv4[6]) * (100000.0 * (-1 * (0.5 * sv4[86])));
        sv4[97] = (0.0001 + sv4[6]) * (100000.0 * (-1 * (0.5 * sv4[87])));
        sv4[98] = sv4[96] * (1.0 / (2.0 * sp[35]));
        sv4[99] = sv4[97] * (1.0 / (2.0 * sp[35]));
        sv4[100] = w2_c3 * sv4[98];
        sv4[101] = w2_c3 * sv4[99];
        sv4[102] = w4_c3 * sv4[100];
        sv4[103] = w4_c3 * sv4[101];
        sv4[104] = sv4[94] + sv4[102];
        sv4[105] = sv4[95] + sv4[103];
        sv4[106] = (0.0001 + sv4[6]) * (-1 * (0.5 * sv4[86]));
        sv4[107] = (0.0001 + sv4[6]) * (-1 * (0.5 * sv4[87]));
        sv4[108] = sp[68] * sv4[106];
        sv4[109] = sp[68] * sv4[107];
        sv4[110] = w4_c3 * sv4[108];
        sv4[111] = w4_c3 * sv4[109];
        sv4[112] = sv4[104] + -1 * sv4[110];
        sv4[113] = sv4[105] + -1 * sv4[111];
        sv4[114] = sp[44] * sv4[106];
        sv4[115] = sp[44] * sv4[107];
        sv4[116] = w2_c3 * sv4[114];
        sv4[117] = w2_c3 * sv4[115];
        sv4[118] = sv4[112] + -1 * sv4[116];
        sv4[119] = sv4[113] + -1 * sv4[117];
        sv4[120] = (0.0001 + sv4[6] / 1.3) * (-1 * (0.5 * sv4[86]));
        sv4[121] = (0.0001 + sv4[6] / 1.3) * (-1 * (0.5 * sv4[87]));
        sv4[122] = sp[77] * sv4[120];
        sv4[123] = sp[77] * sv4[121];
        sv4[124] = w4_c3 * sv4[122];
        sv4[125] = w4_c3 * sv4[123];
        sv4[126] = sv4[118] + -1 * sv4[124];
        sv4[127] = sv4[119] + -1 * sv4[125];
        sv4[128] = sp[53] * sv4[120];
        sv4[129] = sp[53] * sv4[121];
        sv4[130] = w2_c4 * sv4[128];
        sv4[131] = w2_c4 * sv4[129];
        sv4[132] = sv4[126] + -1 * sv4[130];
        sv4[133] = sv4[127] + -1 * sv4[131];
        sv4[134] = w4_c0 * (-1 * sp[17]);
        sv4[135] = w4_c1 * sp[18];
        sv4[136] = sv4[134] + sv4[135];
        sv4[137] = w3_c3 * (0.09 * sv4[0]);
        sv4[138] = w3_c3 * sv4[137];
        sv4[139] = w3_c4 * w3_c4;
        sv4[140] = std::sqrt(1e-8 + sv4[139]);
        sv4[141] = w3_c4 + sv4[140];
        sv4[142] = sv4[138] / (0.5 * sv4[141]);
        sv4[143] = 2.0 * (0.0001 + sv4[142]) * (sp[3] / 2);
        sv4[144] = 2.0 * (0.0001 + sv4[142]) * (sp[5] / 2);
        sv4[145] = 2.0 * (0.0001 + sv4[142]) * (sp[9] / 2);
        sv4[146] = 2.0 * (0.0001 + sv4[142]) * (sp[11] / 2);
        sv4[147] = sv4[143] * sp[17];
        sv4[148] = sv4[144] * sp[17];
        sv4[149] = sv4[145] * sp[17];
        sv4[150] = sv4[146] * sp[17];
        sv4[151] = 2.0 * (0.0001 + sv4[142]) * (sp[78] / 2);
        sv4[152] = 2.0 * (0.0001 + sv4[142]) * (sp[79] / 2);
        sv4[153] = sv4[151] * sp[18];
        sv4[154] = sv4[152] * sp[18];
        sv4[155] = sv4[147] + sv4[153];
        sv4[156] = sv4[148] + sv4[154];
        sv4[157] = sv4[155] * (-1 * sp[17]);
        sv4[158] = sv4[156] * (-1 * sp[17]);
        sv4[159] = -1 * sp[17] * sv4[149];
        sv4[160] = -1 * sp[17] * sv4[150];
        sv4[161] = 2.0 * (0.0001 + sv4[142]) * (sp[80] / 2);
        sv4[162] = 2.0 * (0.0001 + sv4[142]) * (sp[81] / 2);
        sv4[163] = sv4[161] * sp[17];
        sv4[164] = sv4[162] * sp[17];
        sv4[165] = sv4[143] * sp[18];
        sv4[166] = sv4[144] * sp[18];
        sv4[167] = sv4[145] * sp[18];
        sv4[168] = sv4[146] * sp[18];
        sv4[169] = sv4[163] + sv4[167];
        sv4[170] = sv4[164] + sv4[168];
        sv4[171] = sv4[165] * sp[18];
        sv4[172] = sv4[166] * sp[18];
        sv4[173] = sv4[169] * sp[18];
        sv4[174] = sv4[170] * sp[18];
        sv4[175] = sv4[157] + sv4[171];
        sv4[176] = sv4[158] + sv4[172];
        sv4[177] = sv4[159] + sv4[173];
        sv4[178] = sv4[160] + sv4[174];
        sv4[179] = sv4[136] * sv4[175];
        sv4[180] = sv4[136] * sv4[176];
        sv4[181] = sv4[136] * sv4[177];
        sv4[182] = sv4[136] * sv4[178];
        sv4[183] = w4_d1_c0 * sp[3];
        sv4[184] = w4_d0_c0 * sp[5];
        sv4[185] = sv4[183] + sv4[184];
        sv4[186] = w4_d0_c1 * sp[9];
        sv4[187] = w4_d1_c1 * sp[11];
        sv4[188] = sv4[186] + sv4[187];
        sv4[189] = sv4[185] + sv4[188];
        sv4[190] = 2.0 * (0.0001 + sv4[142]) * (sv4[189] / 2);
        sv4[191] = sv4[190] * sp[17];
        sv4[192] = w4_d0_c0 * sp[9];
        sv4[193] = w4_d1_c0 * sp[11];
        sv4[194] = sv4[192] + sv4[193];
        sv4[195] = sv4[194] + sv4[194];
        sv4[196] = 2.0 * (0.0001 + sv4[142]) * (sv4[195] / 2);
        sv4[197] = sv4[196] * sp[18];
        sv4[198] = sv4[191] + sv4[197];
        sv4[199] = sv4[198] * (-1 * sp[17]);
        sv4[200] = w4_d1_c1 * sp[3];
        sv4[201] = w4_d0_c1 * sp[5];
        sv4[202] = sv4[200] + sv4[201];
        sv4[203] = sv4[202] + sv4[202];
        sv4[204] = 2.0 * (0.0001 + sv4[142]) * (sv4[203] / 2);
        sv4[205] = sv4[204] * sp[17];
        sv4[206] = sv4[190] * sp[18];
        sv4[207] = sv4[205] + sv4[206];
        sv4[208] = sv4[207] * sp[18];
        sv4[209] = sv4[199] + sv4[208];
        sv4[210] = sv4[209] * sp[18];
        sv4[211] = sv4[209] * (-1 * sp[17]);
        sv4[212] = sv4[132] + -1 * sv4[210];
        sv4[213] = sv4[133] + -1 * sv4[211];
        sv4[214] = sv4[137] + sv4[137];
        sv4[215] = w3_c4 + w3_c4;
        sv4[216] = sv4[215] / (2 * sv4[140]);
        sv4[217] = 0.5 * (1.0 + sv4[216]) * sv4[142];
        sv4[218] = -1 * sv4[217] / (0.5 * sv4[141]);
        sv4[219] = sv4[214] / (0.5 * sv4[141]);
        sv4[220] = w2_d1_c0 * sp[3];
        sv4[221] = w2_d0_c0 * sp[5];
        sv4[222] = sv4[220] + sv4[221];
        sv4[223] = w2_d0_c1 * sp[9];
        sv4[224] = w2_d1_c1 * sp[11];
        sv4[225] = sv4[223] + sv4[224];
        sv4[226] = sv4[222] + sv4[225];
        sv4[227] = 2.0 * sv4[218] * (sv4[226] / 2);
        sv4[228] = 2.0 * sv4[219] * (sv4[226] / 2);
        sv4[229] = sv4[227] * sp[17];
        sv4[230] = sv4[228] * sp[17];
        sv4[231] = w2_d0_c0 * sp[9];
        sv4[232] = w2_d1_c0 * sp[11];
        sv4[233] = sv4[231] + sv4[232];
        sv4[234] = sv4[233] + sv4[233];
        sv4[235] = 2.0 * sv4[218] * (sv4[234] / 2);
        sv4[236] = 2.0 * sv4[219] * (sv4[234] / 2);
        sv4[237] = sv4[235] * sp[18];
        sv4[238] = sv4[236] * sp[18];
        sv4[239] = sv4[229] + sv4[237];
        sv4[240] = sv4[230] + sv4[238];
        sv4[241] = sv4[239] * (-1 * sp[17]);
        sv4[242] = sv4[240] * (-1 * sp[17]);
        sv4[243] = w2_d1_c1 * sp[3];
        sv4[244] = w2_d0_c1 * sp[5];
        sv4[245] = sv4[243] + sv4[244];
        sv4[246] = sv4[245] + sv4[245];
        sv4[247] = 2.0 * sv4[218] * (sv4[246] / 2);
        sv4[248] = 2.0 * sv4[219] * (sv4[246] / 2);
        sv4[249] = sv4[247] * sp[17];
        sv4[250] = sv4[248] * sp[17];
        sv4[251] = sv4[227] * sp[18];
        sv4[252] = sv4[228] * sp[18];
        sv4[253] = sv4[249] + sv4[251];
        sv4[254] = sv4[250] + sv4[252];
        sv4[255] = sv4[253] * sp[18];
        sv4[256] = sv4[254] * sp[18];
        sv4[257] = sv4[241] + sv4[255];
        sv4[258] = sv4[242] + sv4[256];
        sv4[259] = sv4[136] * sv4[257];
        sv4[260] = sv4[136] * sv4[258];
        sv4[261] = sv4[81] + -1 * sv4[259];
        sv4[262] = sv4[82] + -1 * sv4[260];
        sv4[263] = w2_c0 + -1 * w[0][0];
        sv4[264] = sv4[263] * (-1 * sp[17]);
        sv4[265] = w2_c1 + -1 * w[0][1];
        sv4[266] = sv4[265] * sp[18];
        sv4[267] = sv4[264] + sv4[266];
        sv4[268] = 2.0 * sv4[218] * (sv4[189] / 2);
        sv4[269] = 2.0 * sv4[219] * (sv4[189] / 2);
        sv4[270] = sv4[268] * sp[17];
        sv4[271] = sv4[269] * sp[17];
        sv4[272] = 2.0 * sv4[218] * (sv4[195] / 2);
        sv4[273] = 2.0 * sv4[219] * (sv4[195] / 2);
        sv4[274] = sv4[272] * sp[18];
        sv4[275] = sv4[273] * sp[18];
        sv4[276] = sv4[270] + sv4[274];
        sv4[277] = sv4[271] + sv4[275];
        sv4[278] = sv4[276] * (-1 * sp[17]);
        sv4[279] = sv4[277] * (-1 * sp[17]);
        sv4[280] = 2.0 * sv4[218] * (sv4[203] / 2);
        sv4[281] = 2.0 * sv4[219] * (sv4[203] / 2);
        sv4[282] = sv4[280] * sp[17];
        sv4[283] = sv4[281] * sp[17];
        sv4[284] = sv4[268] * sp[18];
        sv4[285] = sv4[269] * sp[18];
        sv4[286] = sv4[282] + sv4[284];
        sv4[287] = sv4[283] + sv4[285];
        sv4[288] = sv4[286] * sp[18];
        sv4[289] = sv4[287] * sp[18];
        sv4[290] = sv4[278] + sv4[288];
        sv4[291] = sv4[279] + sv4[289];
        sv4[292] = sv4[267] * sv4[290];
        sv4[293] = sv4[267] * sv4[291];
        sv4[294] = sv4[261] + -1 * sv4[292];
        sv4[295] = sv4[262] + -1 * sv4[293];
        sv4[296] = 100000.0 * (0.0001 + sv4[142]) * (1.0 / (2.0 * sp[35]));
        sv4[297] = sv4[296] * sp[18];
        sv4[298] = sv4[296] * (-1 * sp[17]);
        sv4[299] = sv4[136] * sv4[297];
        sv4[300] = sv4[136] * sv4[298];
        sv4[301] = sv4[212] + sv4[299];
        sv4[302] = sv4[213] + sv4[300];
        sv4[303] = 100000.0 * sv4[218] * (1.0 / (2.0 * sp[35]));
        sv4[304] = 100000.0 * sv4[219] * (1.0 / (2.0 * sp[35]));
        sv4[305] = sv4[267] * sv4[303];
        sv4[306] = sv4[267] * sv4[304];
        sv4[307] = sv4[136] * sv4[305];
        sv4[308] = sv4[136] * sv4[306];
        sv4[309] = sv4[294] + sv4[307];
        sv4[310] = sv4[295] + sv4[308];
        sv4[311] = sv4[309] * sp[91];
        sv4[312] = sv4[310] * sp[91];
        sv4[313] = -1 * sv4[69] * sp[91];
        sv4[314] = -1 * sv4[70] * sp[91];
        sv4[315] = -1 * sv4[79] * sp[91];
        sv4[316] = -1 * sv4[80] * sp[91];
        sv4[317] = sv4[301] * sp[91];
        sv4[318] = sv4[302] * sp[91];
        sv4[319] = -1 * sv4[179] * sp[91];
        sv4[320] = -1 * sv4[180] * sp[91];
        sv4[321] = -1 * sv4[181] * sp[91];
        sv4[322] = -1 * sv4[182] * sp[91];
        const double fw0 = sv4[318] * weights4[iq];
        for (int i = 0; i < 6; ++i)
            BF0[i] += fw0 * FE47_C0_F_Q4[facet][iq][i];
        const double fw1 = sv4[320] * weights4[iq];
        for (int i = 0; i < 5; ++i)
            BF1[i] += fw1 * FE47_C0_D10_F_Q4[facet][iq][i];
        const double fw2 = sv4[319] * weights4[iq];
        for (int i = 0; i < 5; ++i)
            BF2[i] += fw2 * FE47_C0_D01_F_Q4[facet][iq][i];
        const double fw3 = sv4[317] * weights4[iq];
        for (int i = 0; i < 6; ++i)
            BF3[i] += fw3 * FE47_C0_F_Q4[facet][iq][i];
        const double fw4 = sv4[321] * weights4[iq];
        for (int i = 0; i < 5; ++i)
            BF4[i] += fw4 * FE47_C0_D10_F_Q4[facet][iq][i];
        const double fw5 = sv4[322] * weights4[iq];
        for (int i = 0; i < 5; ++i)
            BF5[i] += fw5 * FE47_C0_D01_F_Q4[facet][iq][i];
        const double fw6 = sv4[314] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF6[i] += fw6 * FE49_C2_D01_F_Q4[0][0][i];
        const double fw7 = sv4[312] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            BF7[i] += fw7 * FE49_C2_F_Q4[facet][iq][i];
        const double fw8 = sv4[313] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF8[i] += fw8 * FE49_C2_D01_F_Q4[0][0][i];
        const double fw9 = sv4[316] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF9[i] += fw9 * FE49_C2_D01_F_Q4[0][0][i];
        const double fw10 = sv4[311] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            BF10[i] += fw10 * FE49_C2_F_Q4[facet][iq][i];
        const double fw11 = sv4[315] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF11[i] += fw11 * FE49_C2_D01_F_Q4[0][0][i];
    }
    std::fill(A, A + 21, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    static const int DM4[2] = { 15, 17 };
    static const int DM5[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 5; ++i)
        A[DM0[i]] += BF1[i];
    for (int i = 0; i < 5; ++i)
        A[DM1[i]] += BF2[i];
    for (int i = 0; i < 6; ++i)
        A[i + 6] += BF3[i];
    for (int i = 0; i < 5; ++i)
        A[DM2[i]] += BF4[i];
    for (int i = 0; i < 5; ++i)
        A[DM3[i]] += BF5[i];
    for (int i = 0; i < 2; ++i)
        A[i + 15] += BF6[i];
    for (int i = 0; i < 3; ++i)
        A[i + 15] += BF7[i];
    for (int i = 0; i < 2; ++i)
        A[DM4[i]] += BF8[i];
    for (int i = 0; i < 2; ++i)
        A[i + 18] += BF9[i];
    for (int i = 0; i < 3; ++i)
        A[i + 18] += BF10[i];
    for (int i = 0; i < 2; ++i)
        A[DM5[i]] += BF11[i];
  }

};


class ranspseudotimestepping_cell_integral_5_otherwise: public ufc::cell_integral
{
public:

  ranspseudotimestepping_cell_integral_5_otherwise() : ufc::cell_integral()
  {

  }

  ~ranspseudotimestepping_cell_integral_5_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({false, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 106
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    alignas(32) static const double FE70_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE70_C0_D02_Q12[1][1][3] = { { { 3.999999999999998, 4.000000000000004, -7.999999999999995 } } };
    alignas(32) static const double FE70_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE70_C0_D11_Q12[1][1][4] = { { { 4.0, 3.999999999999997, -3.999999999999997, -4.000000000000005 } } };
    alignas(32) static const double FE70_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803568, 0.2205142679699366 },
            { -0.05512856699248404, -0.05512856699248409, 0.6533077030470597, 0.2205142679699364, 0.2205142679699362, 0.01592089499803596 },
            { 0.6533077030470594, -0.05512856699248415, -0.05512856699248411, 0.01592089499803581, 0.2205142679699364, 0.2205142679699366 },
            { -0.1249989825350975, 0.001430579517788794, -0.1249989825350975, 0.4999959301403892, 0.2485755252716258, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788821, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880001, 0.173768363654174, -0.1177151633084292, 0.790160442765823, 0.06597478591860526, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880001, 0.1353078281686267, 0.06597478591860512, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860538 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880001, 0.06597478591860524, 0.1353078281686266, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860538 },
            { 0.1737683636541741, -0.04749625719880015, -0.1177151633084292, 0.06597478591860535, 0.7901604427658229, 0.1353078281686269 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q12[0][0][1];
    const double w4_d1 = w[4][0] * FE3_C0_D01_Q12[0][0][0] + w[4][2] * FE3_C0_D01_Q12[0][0][1];
    double w4_d0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w4_d0 += w[4][ic] * FE3_C0_D01_Q12[0][0][ic];
    const double w3_d1_c3 = w[3][15] * FE3_C0_D01_Q12[0][0][0] + w[3][17] * FE3_C0_D01_Q12[0][0][1];
    double w3_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c3 += w[3][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w3_d1_c4 = w[3][18] * FE3_C0_D01_Q12[0][0][0] + w[3][20] * FE3_C0_D01_Q12[0][0][1];
    double w3_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c4 += w[3][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d11_c1 = w[2][6] * FE70_C0_D02_Q12[0][0][0] + w[2][8] * FE70_C0_D02_Q12[0][0][1] + w[2][10] * FE70_C0_D02_Q12[0][0][2];
    const double w2_d01_c1 = w[2][6] * FE70_C0_D11_Q12[0][0][0] + w[2][9] * FE70_C0_D11_Q12[0][0][1] + w[2][10] * FE70_C0_D11_Q12[0][0][2] + w[2][11] * FE70_C0_D11_Q12[0][0][3];
    const double w2_d00_c1 = w[2][6] * FE70_C0_D02_Q12[0][0][0] + w[2][7] * FE70_C0_D02_Q12[0][0][1] + w[2][11] * FE70_C0_D02_Q12[0][0][2];
    const double w2_d01_c0 = w[2][0] * FE70_C0_D11_Q12[0][0][0] + w[2][3] * FE70_C0_D11_Q12[0][0][1] + w[2][4] * FE70_C0_D11_Q12[0][0][2] + w[2][5] * FE70_C0_D11_Q12[0][0][3];
    const double w2_d11_c0 = w[2][0] * FE70_C0_D02_Q12[0][0][0] + w[2][2] * FE70_C0_D02_Q12[0][0][1] + w[2][4] * FE70_C0_D02_Q12[0][0][2];
    const double w2_d00_c0 = w[2][0] * FE70_C0_D02_Q12[0][0][0] + w[2][1] * FE70_C0_D02_Q12[0][0][1] + w[2][5] * FE70_C0_D02_Q12[0][0][2];
    const double w2_d1_c2 = w[2][12] * FE3_C0_D01_Q12[0][0][0] + w[2][14] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c2 += w[2][ic + 12] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c3 = w[2][15] * FE3_C0_D01_Q12[0][0][0] + w[2][17] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c3 += w[2][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c4 = w[2][18] * FE3_C0_D01_Q12[0][0][0] + w[2][20] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c4 += w[2][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    alignas(32) double sp[143];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[8] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[9] = sp[7] + sp[8];
    sp[10] = std::sqrt(sp[9]);
    sp[11] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[12] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[13] = sp[11] + sp[12];
    sp[14] = std::sqrt(sp[13]);
    sp[15] = sp[10] * sp[14];
    sp[16] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[17] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[18] = sp[16] + sp[17];
    sp[19] = std::sqrt(sp[18]);
    sp[20] = sp[15] * sp[19];
    sp[21] = triangle_reference_cell_volume * sp[2];
    sp[22] = std::abs(sp[21]);
    sp[23] = sp[20] / (4.0 * sp[22]);
    sp[24] = 2.0 * sp[23] * (2.0 * sp[23]);
    sp[25] = w4_d1 * sp[3];
    sp[26] = w4_d0 * sp[4];
    sp[27] = sp[25] + sp[26];
    sp[28] = w3_d1_c3 * sp[3];
    sp[29] = w3_d0_c3 * sp[4];
    sp[30] = sp[28] + sp[29];
    sp[31] = w3_d1_c4 * sp[3];
    sp[32] = w3_d0_c4 * sp[4];
    sp[33] = sp[31] + sp[32];
    sp[34] = sp[3] + sp[3];
    sp[35] = sp[4] + sp[4];
    sp[36] = sp[3] * sp[3];
    sp[37] = sp[3] * sp[4];
    sp[38] = sp[4] * sp[4];
    sp[39] = sp[37] + sp[37];
    sp[40] = sp[36] + sp[36];
    sp[41] = sp[39] + sp[39];
    sp[42] = sp[38] + sp[38];
    sp[43] = w4_d0 * sp[5];
    sp[44] = w4_d1 * sp[6];
    sp[45] = sp[43] + sp[44];
    sp[46] = w3_d0_c3 * sp[5];
    sp[47] = w3_d1_c3 * sp[6];
    sp[48] = sp[46] + sp[47];
    sp[49] = w3_d0_c4 * sp[5];
    sp[50] = w3_d1_c4 * sp[6];
    sp[51] = sp[49] + sp[50];
    sp[52] = sp[3] * sp[5];
    sp[53] = sp[3] * sp[6];
    sp[54] = sp[4] * sp[6];
    sp[55] = sp[5] * sp[4];
    sp[56] = sp[52] + sp[54];
    sp[57] = sp[5] * sp[6];
    sp[58] = sp[5] * sp[5];
    sp[59] = sp[6] * sp[6];
    sp[60] = sp[57] + sp[57];
    sp[61] = w2_d11_c1 * sp[3];
    sp[62] = w2_d01_c1 * sp[4];
    sp[63] = sp[61] + sp[62];
    sp[64] = sp[63] * sp[3];
    sp[65] = w2_d01_c1 * sp[3];
    sp[66] = w2_d00_c1 * sp[4];
    sp[67] = sp[65] + sp[66];
    sp[68] = sp[67] * sp[4];
    sp[69] = sp[64] + sp[68];
    sp[70] = sp[69] + sp[69];
    sp[71] = w2_d01_c0 * sp[5];
    sp[72] = w2_d11_c0 * sp[6];
    sp[73] = sp[71] + sp[72];
    sp[74] = sp[73] * sp[3];
    sp[75] = w2_d00_c0 * sp[5];
    sp[76] = w2_d01_c0 * sp[6];
    sp[77] = sp[75] + sp[76];
    sp[78] = sp[77] * sp[4];
    sp[79] = sp[74] + sp[78];
    sp[80] = w2_d00_c1 * sp[5];
    sp[81] = w2_d01_c1 * sp[6];
    sp[82] = sp[80] + sp[81];
    sp[83] = sp[82] * sp[5];
    sp[84] = w2_d01_c1 * sp[5];
    sp[85] = w2_d11_c1 * sp[6];
    sp[86] = sp[84] + sp[85];
    sp[87] = sp[86] * sp[6];
    sp[88] = sp[83] + sp[87];
    sp[89] = sp[79] + sp[88];
    sp[90] = w2_d1_c2 * sp[3];
    sp[91] = w2_d0_c2 * sp[4];
    sp[92] = sp[90] + sp[91];
    sp[93] = sp[5] + sp[5];
    sp[94] = sp[6] + sp[6];
    sp[95] = sp[60] + sp[60];
    sp[96] = sp[59] + sp[59];
    sp[97] = sp[58] + sp[58];
    sp[98] = w2_d11_c0 * sp[3];
    sp[99] = w2_d01_c0 * sp[4];
    sp[100] = sp[98] + sp[99];
    sp[101] = sp[100] * sp[3];
    sp[102] = w2_d01_c0 * sp[3];
    sp[103] = w2_d00_c0 * sp[4];
    sp[104] = sp[102] + sp[103];
    sp[105] = sp[104] * sp[4];
    sp[106] = sp[101] + sp[105];
    sp[107] = sp[67] * sp[5];
    sp[108] = sp[63] * sp[6];
    sp[109] = sp[107] + sp[108];
    sp[110] = sp[106] + sp[109];
    sp[111] = sp[77] * sp[5];
    sp[112] = sp[73] * sp[6];
    sp[113] = sp[111] + sp[112];
    sp[114] = sp[113] + sp[113];
    sp[115] = w2_d0_c2 * sp[5];
    sp[116] = w2_d1_c2 * sp[6];
    sp[117] = sp[115] + sp[116];
    sp[118] = w2_d1_c3 * sp[3];
    sp[119] = w2_d0_c3 * sp[4];
    sp[120] = sp[118] + sp[119];
    sp[121] = w2_d0_c3 * sp[5];
    sp[122] = w2_d1_c3 * sp[6];
    sp[123] = sp[121] + sp[122];
    sp[124] = w2_d1_c4 * sp[3];
    sp[125] = w2_d0_c4 * sp[4];
    sp[126] = sp[124] + sp[125];
    sp[127] = w2_d0_c4 * sp[5];
    sp[128] = w2_d1_c4 * sp[6];
    sp[129] = sp[127] + sp[128];
    sp[130] = sp[120] * sp[3];
    sp[131] = sp[120] * sp[4];
    sp[132] = sp[123] * sp[6];
    sp[133] = sp[123] * sp[5];
    sp[134] = sp[130] + sp[132];
    sp[135] = sp[133] + sp[131];
    sp[136] = sp[126] * sp[3];
    sp[137] = sp[126] * sp[4];
    sp[138] = sp[129] * sp[6];
    sp[139] = sp[129] * sp[5];
    sp[140] = sp[136] + sp[138];
    sp[141] = sp[139] + sp[137];
    sp[142] = std::abs(sp[2]);
    alignas(32) double BF0[6] = {};
    alignas(32) double BF1[5] = {};
    alignas(32) double BF2[3] = {};
    alignas(32) double BF3[5] = {};
    alignas(32) double BF4[3] = {};
    alignas(32) double BF5[4] = {};
    alignas(32) double BF6[6] = {};
    alignas(32) double BF7[5] = {};
    alignas(32) double BF8[3] = {};
    alignas(32) double BF9[5] = {};
    alignas(32) double BF10[3] = {};
    alignas(32) double BF11[4] = {};
    alignas(32) double BF12[2] = {};
    alignas(32) double BF13[3] = {};
    alignas(32) double BF14[2] = {};
    alignas(32) double BF15[2] = {};
    alignas(32) double BF16[3] = {};
    alignas(32) double BF17[2] = {};
    alignas(32) double BF18[2] = {};
    alignas(32) double BF19[3] = {};
    alignas(32) double BF20[2] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE70_C0_Q12[0][iq][ic];
        const double w2_d1_c0 = w[2][0] * FE70_C0_D01_Q12[0][iq][0] + w[2][2] * FE70_C0_D01_Q12[0][iq][1] + w[2][3] * FE70_C0_D01_Q12[0][iq][2] + w[2][4] * FE70_C0_D01_Q12[0][iq][3] + w[2][5] * FE70_C0_D01_Q12[0][iq][4];
        const double w2_d0_c0 = w[2][0] * FE70_C0_D10_Q12[0][iq][0] + w[2][1] * FE70_C0_D10_Q12[0][iq][1] + w[2][3] * FE70_C0_D10_Q12[0][iq][2] + w[2][4] * FE70_C0_D10_Q12[0][iq][3] + w[2][5] * FE70_C0_D10_Q12[0][iq][4];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE70_C0_Q12[0][iq][ic];
        const double w2_d1_c1 = w[2][6] * FE70_C0_D01_Q12[0][iq][0] + w[2][8] * FE70_C0_D01_Q12[0][iq][1] + w[2][9] * FE70_C0_D01_Q12[0][iq][2] + w[2][10] * FE70_C0_D01_Q12[0][iq][3] + w[2][11] * FE70_C0_D01_Q12[0][iq][4];
        const double w2_d0_c1 = w[2][6] * FE70_C0_D10_Q12[0][iq][0] + w[2][7] * FE70_C0_D10_Q12[0][iq][1] + w[2][9] * FE70_C0_D10_Q12[0][iq][2] + w[2][10] * FE70_C0_D10_Q12[0][iq][3] + w[2][11] * FE70_C0_D10_Q12[0][iq][4];
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c0 += w[3][ic] * FE70_C0_Q12[0][iq][ic];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c1 += w[3][ic + 6] * FE70_C0_Q12[0][iq][ic];
        double w3_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c3 += w[3][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4 += w[4][ic] * FE3_C0_Q12[0][iq][ic];
        double w3_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c4 += w[3][ic + 18] * FE3_C0_Q12[0][iq][ic];
        const double w3_d1_c1 = w[3][6] * FE70_C0_D01_Q12[0][iq][0] + w[3][8] * FE70_C0_D01_Q12[0][iq][1] + w[3][9] * FE70_C0_D01_Q12[0][iq][2] + w[3][10] * FE70_C0_D01_Q12[0][iq][3] + w[3][11] * FE70_C0_D01_Q12[0][iq][4];
        const double w3_d0_c1 = w[3][6] * FE70_C0_D10_Q12[0][iq][0] + w[3][7] * FE70_C0_D10_Q12[0][iq][1] + w[3][9] * FE70_C0_D10_Q12[0][iq][2] + w[3][10] * FE70_C0_D10_Q12[0][iq][3] + w[3][11] * FE70_C0_D10_Q12[0][iq][4];
        const double w3_d1_c0 = w[3][0] * FE70_C0_D01_Q12[0][iq][0] + w[3][2] * FE70_C0_D01_Q12[0][iq][1] + w[3][3] * FE70_C0_D01_Q12[0][iq][2] + w[3][4] * FE70_C0_D01_Q12[0][iq][3] + w[3][5] * FE70_C0_D01_Q12[0][iq][4];
        const double w3_d0_c0 = w[3][0] * FE70_C0_D10_Q12[0][iq][0] + w[3][1] * FE70_C0_D10_Q12[0][iq][1] + w[3][3] * FE70_C0_D10_Q12[0][iq][2] + w[3][4] * FE70_C0_D10_Q12[0][iq][3] + w[3][5] * FE70_C0_D10_Q12[0][iq][4];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE3_C0_Q12[0][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w2_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c2 += w[2][ic + 12] * FE3_C0_Q12[0][iq][ic];
        alignas(32) double sv12[382];
        sv12[0] = w2_d1_c0 * sp[3];
        sv12[1] = w2_d0_c0 * sp[4];
        sv12[2] = sv12[0] + sv12[1];
        sv12[3] = w2_c1 * sv12[2];
        sv12[4] = w2_d0_c0 * sp[5];
        sv12[5] = w2_d1_c0 * sp[6];
        sv12[6] = sv12[4] + sv12[5];
        sv12[7] = w2_c0 * sv12[6];
        sv12[8] = sv12[3] + sv12[7];
        sv12[9] = w2_d1_c1 * sp[3];
        sv12[10] = w2_d0_c1 * sp[4];
        sv12[11] = sv12[9] + sv12[10];
        sv12[12] = w2_c1 * sv12[11];
        sv12[13] = w2_d0_c1 * sp[5];
        sv12[14] = w2_d1_c1 * sp[6];
        sv12[15] = sv12[13] + sv12[14];
        sv12[16] = w2_c0 * sv12[15];
        sv12[17] = sv12[12] + sv12[16];
        sv12[18] = sv12[11] + sv12[6];
        sv12[19] = sv12[18] * sp[3];
        sv12[20] = sv12[18] * sp[4];
        sv12[21] = sv12[18] * sp[5];
        sv12[22] = sv12[18] * sp[6];
        sv12[23] = w3_c0 * w3_c0;
        sv12[24] = w3_c1 * w3_c1;
        sv12[25] = sv12[23] + sv12[24];
        sv12[26] = std::sqrt(1e-9 + sv12[25]);
        sv12[27] = sp[24] * sv12[26];
        sv12[28] = sv12[19] * sv12[27];
        sv12[29] = sv12[20] * sv12[27];
        sv12[30] = sv12[21] * sv12[27];
        sv12[31] = sv12[22] * sv12[27];
        sv12[32] = w3_c1 * sp[3];
        sv12[33] = w3_c1 * sp[4];
        sv12[34] = w3_c0 * sp[6];
        sv12[35] = w3_c0 * sp[5];
        sv12[36] = sv12[32] + sv12[34];
        sv12[37] = sv12[35] + sv12[33];
        sv12[38] = std::exp(w4);
        sv12[39] = sp[27] * sv12[38];
        sv12[40] = w3_c3 * (0.09 * sv12[39]);
        sv12[41] = sp[30] * (0.09 * sv12[38]);
        sv12[42] = sv12[40] + sv12[41];
        sv12[43] = w3_c3 * sv12[42];
        sv12[44] = w3_c3 * (0.09 * sv12[38]);
        sv12[45] = sp[30] * sv12[44];
        sv12[46] = sv12[43] + sv12[45];
        sv12[47] = w3_c4 * sp[33];
        sv12[48] = sv12[47] + sv12[47];
        sv12[49] = w3_c4 * w3_c4;
        sv12[50] = std::sqrt(1e-8 + sv12[49]);
        sv12[51] = sv12[48] / (2 * sv12[50]);
        sv12[52] = sp[33] + sv12[51];
        sv12[53] = w3_c3 * sv12[44];
        sv12[54] = w3_c4 + sv12[50];
        sv12[55] = sv12[53] / (0.5 * sv12[54]);
        sv12[56] = 0.5 * sv12[52] * sv12[55];
        sv12[57] = sv12[46] + -1 * sv12[56];
        sv12[58] = sv12[57] / (0.5 * sv12[54]);
        sv12[59] = 2.0 * sv12[58] * (sp[34] / 2);
        sv12[60] = 2.0 * sv12[58] * (sp[35] / 2);
        sv12[61] = 2.0 * (0.0001 + sv12[55]) * (sp[40] / 2);
        sv12[62] = 2.0 * (0.0001 + sv12[55]) * (sp[41] / 2);
        sv12[63] = 2.0 * (0.0001 + sv12[55]) * (sp[42] / 2);
        sv12[64] = sp[45] * sv12[38];
        sv12[65] = w3_c3 * (0.09 * sv12[64]);
        sv12[66] = sp[48] * (0.09 * sv12[38]);
        sv12[67] = sv12[65] + sv12[66];
        sv12[68] = w3_c3 * sv12[67];
        sv12[69] = sp[48] * sv12[44];
        sv12[70] = sv12[68] + sv12[69];
        sv12[71] = w3_c4 * sp[51];
        sv12[72] = sv12[71] + sv12[71];
        sv12[73] = sv12[72] / (2 * sv12[50]);
        sv12[74] = sp[51] + sv12[73];
        sv12[75] = 0.5 * sv12[74] * sv12[55];
        sv12[76] = sv12[70] + -1 * sv12[75];
        sv12[77] = sv12[76] / (0.5 * sv12[54]);
        sv12[78] = 2.0 * sv12[77] * (sp[6] / 2);
        sv12[79] = 2.0 * sv12[77] * (sp[5] / 2);
        sv12[80] = 2.0 * sv12[77] * (sp[4] / 2);
        sv12[81] = 2.0 * sv12[77] * (sp[3] / 2);
        sv12[82] = 2.0 * (0.0001 + sv12[55]) * (sp[59] / 2);
        sv12[83] = 2.0 * (0.0001 + sv12[55]) * (sp[60] / 2);
        sv12[84] = 2.0 * (0.0001 + sv12[55]) * (sp[58] / 2);
        sv12[85] = 2.0 * (0.0001 + sv12[55]) * (sp[56] / 2);
        sv12[86] = 2.0 * (0.0001 + sv12[55]) * (sp[53] / 2);
        sv12[87] = 2.0 * (0.0001 + sv12[55]) * (sp[55] / 2);
        sv12[88] = sv12[59] + sv12[78];
        sv12[89] = sv12[60] + sv12[79];
        sv12[90] = sv12[61] + sv12[82];
        sv12[91] = sv12[62] + sv12[83];
        sv12[92] = sv12[63] + sv12[84];
        sv12[93] = sv12[36] + -1 * sv12[88];
        sv12[94] = sv12[37] + -1 * sv12[89];
        sv12[95] = w3_c1 * sv12[11];
        sv12[96] = w3_c0 * sv12[15];
        sv12[97] = sv12[95] + sv12[96];
        sv12[98] = sv12[11] + sv12[11];
        sv12[99] = 2.0 * sv12[58] * (sv12[98] / 2);
        sv12[100] = 2.0 * (0.0001 + sv12[55]) * (sp[70] / 2);
        sv12[101] = sv12[99] + sv12[100];
        sv12[102] = sv12[2] + sv12[15];
        sv12[103] = 2.0 * sv12[77] * (sv12[102] / 2);
        sv12[104] = 2.0 * (0.0001 + sv12[55]) * (sp[89] / 2);
        sv12[105] = sv12[103] + sv12[104];
        sv12[106] = sv12[101] + sv12[105];
        sv12[107] = sv12[97] + -1 * sv12[106];
        sv12[108] = sv12[107] + sp[92];
        sv12[109] = sv12[108] * sv12[93];
        sv12[110] = sv12[108] * sv12[94];
        sv12[111] = sv12[108] * (-1 * sv12[80]);
        sv12[112] = sv12[108] * (-1 * sv12[81]);
        sv12[113] = sv12[108] * (-1 * sv12[90]);
        sv12[114] = sv12[108] * (-1 * sv12[91]);
        sv12[115] = sv12[108] * (-1 * sv12[92]);
        sv12[116] = sv12[108] * (-1 * sv12[85]);
        sv12[117] = sv12[108] * (-1 * sv12[86]);
        sv12[118] = sv12[108] * (-1 * sv12[87]);
        sv12[119] = sv12[108] * sp[3];
        sv12[120] = sv12[108] * sp[4];
        sv12[121] = 2.0 * sv12[58] * (sp[6] / 2);
        sv12[122] = 2.0 * sv12[58] * (sp[5] / 2);
        sv12[123] = 2.0 * sv12[58] * (sp[4] / 2);
        sv12[124] = 2.0 * sv12[58] * (sp[3] / 2);
        sv12[125] = 2.0 * (0.0001 + sv12[55]) * (sp[39] / 2);
        sv12[126] = 2.0 * (0.0001 + sv12[55]) * (sp[36] / 2);
        sv12[127] = 2.0 * (0.0001 + sv12[55]) * (sp[38] / 2);
        sv12[128] = 2.0 * sv12[77] * (sp[93] / 2);
        sv12[129] = 2.0 * sv12[77] * (sp[94] / 2);
        sv12[130] = 2.0 * (0.0001 + sv12[55]) * (sp[95] / 2);
        sv12[131] = 2.0 * (0.0001 + sv12[55]) * (sp[96] / 2);
        sv12[132] = 2.0 * (0.0001 + sv12[55]) * (sp[97] / 2);
        sv12[133] = sv12[128] + sv12[123];
        sv12[134] = sv12[129] + sv12[124];
        sv12[135] = sv12[130] + sv12[125];
        sv12[136] = sv12[131] + sv12[126];
        sv12[137] = sv12[132] + sv12[127];
        sv12[138] = sv12[37] + -1 * sv12[133];
        sv12[139] = sv12[36] + -1 * sv12[134];
        sv12[140] = w3_c1 * sv12[2];
        sv12[141] = w3_c0 * sv12[6];
        sv12[142] = sv12[140] + sv12[141];
        sv12[143] = 2.0 * sv12[58] * (sv12[102] / 2);
        sv12[144] = 2.0 * (0.0001 + sv12[55]) * (sp[110] / 2);
        sv12[145] = sv12[143] + sv12[144];
        sv12[146] = sv12[6] + sv12[6];
        sv12[147] = 2.0 * sv12[77] * (sv12[146] / 2);
        sv12[148] = 2.0 * (0.0001 + sv12[55]) * (sp[114] / 2);
        sv12[149] = sv12[147] + sv12[148];
        sv12[150] = sv12[145] + sv12[149];
        sv12[151] = sv12[142] + -1 * sv12[150];
        sv12[152] = sv12[151] + sp[117];
        sv12[153] = sv12[152] * (-1 * sv12[121]);
        sv12[154] = sv12[152] * (-1 * sv12[122]);
        sv12[155] = sv12[152] * sv12[138];
        sv12[156] = sv12[152] * sv12[139];
        sv12[157] = sv12[152] * (-1 * sv12[86]);
        sv12[158] = sv12[152] * (-1 * sv12[85]);
        sv12[159] = sv12[152] * (-1 * sv12[87]);
        sv12[160] = sv12[152] * (-1 * sv12[135]);
        sv12[161] = sv12[152] * (-1 * sv12[136]);
        sv12[162] = sv12[152] * (-1 * sv12[137]);
        sv12[163] = sv12[152] * sp[6];
        sv12[164] = sv12[152] * sp[5];
        sv12[165] = sv12[109] + sv12[153];
        sv12[166] = sv12[110] + sv12[154];
        sv12[167] = sv12[155] + sv12[111];
        sv12[168] = sv12[156] + sv12[112];
        sv12[169] = sv12[113] + sv12[157];
        sv12[170] = sv12[114] + sv12[158];
        sv12[171] = sv12[115] + sv12[159];
        sv12[172] = sv12[160] + sv12[116];
        sv12[173] = sv12[161] + sv12[117];
        sv12[174] = sv12[162] + sv12[118];
        sv12[175] = sv12[119] + sv12[163];
        sv12[176] = sv12[164] + sv12[120];
        sv12[177] = std::sqrt(sv12[25]);
        sv12[178] = 0.5 * (2.0 * sp[23]) * sv12[177];
        sv12[179] = sv12[178] / (0.0001 + sv12[55]);
        sv12[180] = std::exp(-2.0 * sv12[179]);
        sv12[181] = (1.0 + sv12[180]) / (1.0 + -1 * sv12[180]);
        sv12[182] = -1 * (1.0 / sv12[179]) + sv12[181];
        sv12[183] = sv12[182] * (2.0 * sp[23]);
        sv12[184] = sv12[183] / sv12[177];
        sv12[185] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[179]) * (2.0 * sp[23]);
        sv12[186] = sv12[185] * (2.0 * sp[23]);
        sv12[187] = sv12[186] / (0.0001 + sv12[55]);
        sv12[188] = (sv12[179] >= 0.1 ? sv12[184] : sv12[187]);
        sv12[189] = sv12[165] * sv12[188];
        sv12[190] = sv12[166] * sv12[188];
        sv12[191] = sv12[167] * sv12[188];
        sv12[192] = sv12[168] * sv12[188];
        sv12[193] = sv12[169] * sv12[188];
        sv12[194] = sv12[170] * sv12[188];
        sv12[195] = sv12[171] * sv12[188];
        sv12[196] = sv12[172] * sv12[188];
        sv12[197] = sv12[173] * sv12[188];
        sv12[198] = sv12[174] * sv12[188];
        sv12[199] = sv12[175] * sv12[188];
        sv12[200] = sv12[176] * sv12[188];
        sv12[201] = sv12[28] + sv12[189];
        sv12[202] = sv12[29] + sv12[190];
        sv12[203] = sv12[30] + sv12[191];
        sv12[204] = sv12[31] + sv12[192];
        sv12[205] = sp[3] * sv12[58];
        sv12[206] = sp[4] * sv12[58];
        sv12[207] = sp[6] * sv12[77];
        sv12[208] = sp[5] * sv12[77];
        sv12[209] = sv12[205] + sv12[207];
        sv12[210] = sv12[206] + sv12[208];
        sv12[211] = sv12[36] + -1 * sv12[209];
        sv12[212] = sv12[37] + -1 * sv12[210];
        sv12[213] = w3_c1 * sp[120];
        sv12[214] = w3_c0 * sp[123];
        sv12[215] = sv12[213] + sv12[214];
        sv12[216] = sp[120] * sv12[58];
        sv12[217] = sp[123] * sv12[77];
        sv12[218] = sv12[216] + sv12[217];
        sv12[219] = sv12[215] + -1 * sv12[218];
        sv12[220] = w3_c4 + sv12[219];
        sv12[221] = w3_d1_c1 * sp[3];
        sv12[222] = w3_d0_c1 * sp[4];
        sv12[223] = sv12[221] + sv12[222];
        sv12[224] = sv12[223] + sv12[223];
        sv12[225] = sv12[224] / 2 * (sv12[224] / 2);
        sv12[226] = w3_d1_c0 * sp[3];
        sv12[227] = w3_d0_c0 * sp[4];
        sv12[228] = sv12[226] + sv12[227];
        sv12[229] = w3_d0_c1 * sp[5];
        sv12[230] = w3_d1_c1 * sp[6];
        sv12[231] = sv12[229] + sv12[230];
        sv12[232] = sv12[228] + sv12[231];
        sv12[233] = sv12[232] / 2 * (sv12[232] / 2);
        sv12[234] = sv12[225] + sv12[233];
        sv12[235] = w3_d0_c0 * sp[5];
        sv12[236] = w3_d1_c0 * sp[6];
        sv12[237] = sv12[235] + sv12[236];
        sv12[238] = sv12[237] + sv12[237];
        sv12[239] = sv12[238] / 2 * (sv12[238] / 2);
        sv12[240] = sv12[239] + sv12[233];
        sv12[241] = sv12[234] + sv12[240];
        sv12[242] = 2.0 * sv12[241] * sv12[55];
        sv12[243] = sv12[220] + -1 * sv12[242];
        sv12[244] = sv12[211] * sv12[243];
        sv12[245] = sv12[212] * sv12[243];
        sv12[246] = sv12[244] * sv12[188];
        sv12[247] = sv12[245] * sv12[188];
        sv12[248] = sv12[58] / 1.3 * sp[3];
        sv12[249] = sv12[58] / 1.3 * sp[4];
        sv12[250] = sv12[77] / 1.3 * sp[6];
        sv12[251] = sv12[77] / 1.3 * sp[5];
        sv12[252] = sv12[248] + sv12[250];
        sv12[253] = sv12[251] + sv12[249];
        sv12[254] = sv12[36] + -1 * sv12[252];
        sv12[255] = sv12[37] + -1 * sv12[253];
        sv12[256] = w3_c3 * w3_c3;
        sv12[257] = std::sqrt(1e-8 + sv12[256]);
        sv12[258] = w3_c3 + sv12[257];
        sv12[259] = 1.92 * w2_c4 * (1.0 / (0.5 * sv12[258]));
        sv12[260] = w2_c4 / (0.5 * sv12[258]);
        sv12[261] = sv12[259] + 1.92 * sv12[260];
        sv12[262] = w3_c1 * sp[126];
        sv12[263] = w3_c0 * sp[129];
        sv12[264] = sv12[262] + sv12[263];
        sv12[265] = sp[126] * (sv12[58] / 1.3);
        sv12[266] = sp[129] * (sv12[77] / 1.3);
        sv12[267] = sv12[265] + sv12[266];
        sv12[268] = sv12[264] + -1 * sv12[267];
        sv12[269] = 1.92 * w2_c4 * sv12[260];
        sv12[270] = sv12[268] + sv12[269];
        sv12[271] = w3_c3 * (0.09 * (1.44 * sv12[38]));
        sv12[272] = 2.0 * sv12[241] * sv12[271];
        sv12[273] = sv12[270] + -1 * sv12[272];
        sv12[274] = sv12[254] * sv12[273];
        sv12[275] = sv12[255] * sv12[273];
        sv12[276] = sv12[273] * sv12[261];
        sv12[277] = sv12[178] / (0.0001 + sv12[55] / 1.3);
        sv12[278] = std::exp(-2.0 * sv12[277]);
        sv12[279] = (1.0 + sv12[278]) / (1.0 + -1 * sv12[278]);
        sv12[280] = -1 * (1.0 / sv12[277]) + sv12[279];
        sv12[281] = sv12[280] * (2.0 * sp[23]);
        sv12[282] = sv12[281] / sv12[177];
        sv12[283] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[277]) * (2.0 * sp[23]);
        sv12[284] = sv12[283] * (2.0 * sp[23]);
        sv12[285] = sv12[284] / (0.0001 + sv12[55] / 1.3);
        sv12[286] = (sv12[277] >= 0.1 ? sv12[282] : sv12[285]);
        sv12[287] = sv12[274] * sv12[286];
        sv12[288] = sv12[275] * sv12[286];
        sv12[289] = sv12[276] * sv12[286];
        sv12[290] = w2_c0 + -1 * w3_c0;
        sv12[291] = w2_c1 + -1 * w3_c1;
        sv12[292] = w2_c3 + -1 * w3_c3;
        sv12[293] = w2_c4 + -1 * w3_c4;
        sv12[294] = sv12[290] * w[1][0];
        sv12[295] = sv12[291] * w[1][0];
        sv12[296] = sv12[293] * w[1][0];
        sv12[297] = sv12[292] * w[1][0];
        sv12[298] = sv12[289] + sv12[296];
        sv12[299] = w2_c4 + sv12[297];
        sv12[300] = w2_c3 * (0.09 * (1.44 * sv12[38]));
        sv12[301] = 2.0 * sv12[241] * sv12[300];
        sv12[302] = sv12[298] + -1 * sv12[301];
        sv12[303] = w2_c3 * (0.09 * sv12[38]);
        sv12[304] = w2_c3 * sv12[303];
        sv12[305] = w2_c4 * w2_c4;
        sv12[306] = std::sqrt(1e-8 + sv12[305]);
        sv12[307] = w2_c4 + sv12[306];
        sv12[308] = sv12[304] / (0.5 * sv12[307]);
        sv12[309] = 2.0 * sv12[241] * sv12[308];
        sv12[310] = sv12[299] + -1 * sv12[309];
        sv12[311] = w2_c3 * w2_c3;
        sv12[312] = std::sqrt(1e-8 + sv12[311]);
        sv12[313] = w2_c3 + sv12[312];
        sv12[314] = w2_c4 / (0.5 * sv12[313]);
        sv12[315] = 1.92 * w2_c4 * sv12[314];
        sv12[316] = sv12[302] + sv12[315];
        sv12[317] = w2_c2 * sp[3];
        sv12[318] = w2_c2 * sp[4];
        sv12[319] = w2_c2 * sp[5];
        sv12[320] = w2_c2 * sp[6];
        sv12[321] = sv12[201] + -1 * sv12[317];
        sv12[322] = sv12[202] + -1 * sv12[318];
        sv12[323] = sv12[203] + -1 * sv12[319];
        sv12[324] = sv12[204] + -1 * sv12[320];
        sv12[325] = sp[134] * (0.0001 + sv12[308]);
        sv12[326] = sp[135] * (0.0001 + sv12[308]);
        sv12[327] = sv12[325] + sv12[246];
        sv12[328] = sv12[326] + sv12[247];
        sv12[329] = sp[140] * (0.0001 + sv12[308] / 1.3);
        sv12[330] = sp[141] * (0.0001 + sv12[308] / 1.3);
        sv12[331] = sv12[329] + sv12[287];
        sv12[332] = sv12[330] + sv12[288];
        sv12[333] = sv12[215] + sv12[310];
        sv12[334] = sv12[264] + sv12[316];
        sv12[335] = sv12[98] / 2 * (sp[34] / 2);
        sv12[336] = sv12[98] / 2 * (sp[35] / 2);
        sv12[337] = sv12[102] / 2 * (sp[6] / 2);
        sv12[338] = sv12[102] / 2 * (sp[5] / 2);
        sv12[339] = sv12[102] / 2 * (sp[4] / 2);
        sv12[340] = sv12[102] / 2 * (sp[3] / 2);
        sv12[341] = sv12[335] + sv12[337];
        sv12[342] = sv12[336] + sv12[338];
        sv12[343] = sv12[146] / 2 * (sp[93] / 2);
        sv12[344] = sv12[146] / 2 * (sp[94] / 2);
        sv12[345] = sv12[343] + sv12[339];
        sv12[346] = sv12[344] + sv12[340];
        sv12[347] = sv12[341] + sv12[337];
        sv12[348] = sv12[342] + sv12[338];
        sv12[349] = sv12[345] + sv12[339];
        sv12[350] = sv12[346] + sv12[340];
        sv12[351] = sv12[347] * (2.0 * (0.0001 + sv12[55]));
        sv12[352] = sv12[348] * (2.0 * (0.0001 + sv12[55]));
        sv12[353] = sv12[349] * (2.0 * (0.0001 + sv12[55]));
        sv12[354] = sv12[350] * (2.0 * (0.0001 + sv12[55]));
        sv12[355] = sv12[321] + sv12[351];
        sv12[356] = sv12[322] + sv12[352];
        sv12[357] = sv12[323] + sv12[353];
        sv12[358] = sv12[324] + sv12[354];
        sv12[359] = sv12[8] + sv12[294];
        sv12[360] = sv12[17] + sv12[295];
        sv12[361] = sv12[359] * sp[142];
        sv12[362] = sv12[360] * sp[142];
        sv12[363] = sv12[355] * sp[142];
        sv12[364] = sv12[356] * sp[142];
        sv12[365] = sv12[357] * sp[142];
        sv12[366] = sv12[358] * sp[142];
        sv12[367] = sv12[193] * sp[142];
        sv12[368] = sv12[194] * sp[142];
        sv12[369] = sv12[195] * sp[142];
        sv12[370] = sv12[196] * sp[142];
        sv12[371] = sv12[197] * sp[142];
        sv12[372] = sv12[198] * sp[142];
        sv12[373] = sv12[199] * sp[142];
        sv12[374] = sv12[200] * sp[142];
        sv12[375] = sv12[327] * sp[142];
        sv12[376] = sv12[328] * sp[142];
        sv12[377] = sv12[331] * sp[142];
        sv12[378] = sv12[332] * sp[142];
        sv12[379] = sv12[334] * sp[142];
        sv12[380] = sv12[333] * sp[142];
        sv12[381] = sv12[18] * sp[142];
        const double fw0 = sv12[361] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            BF0[i] += fw0 * FE70_C0_Q12[0][iq][i];
        const double fw1 = sv12[365] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF1[i] += fw1 * FE70_C0_D10_Q12[0][iq][i];
        const double fw2 = sv12[372] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF2[i] += fw2 * FE70_C0_D02_Q12[0][0][i];
        const double fw3 = sv12[366] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF3[i] += fw3 * FE70_C0_D01_Q12[0][iq][i];
        const double fw4 = sv12[371] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF4[i] += fw4 * FE70_C0_D02_Q12[0][0][i];
        const double fw5 = sv12[370] * weights12[iq];
        for (int i = 0; i < 4; ++i)
            BF5[i] += fw5 * FE70_C0_D11_Q12[0][0][i];
        const double fw6 = sv12[362] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            BF6[i] += fw6 * FE70_C0_Q12[0][iq][i];
        const double fw7 = sv12[364] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF7[i] += fw7 * FE70_C0_D10_Q12[0][iq][i];
        const double fw8 = sv12[369] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF8[i] += fw8 * FE70_C0_D02_Q12[0][0][i];
        const double fw9 = sv12[363] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF9[i] += fw9 * FE70_C0_D01_Q12[0][iq][i];
        const double fw10 = sv12[367] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF10[i] += fw10 * FE70_C0_D02_Q12[0][0][i];
        const double fw11 = sv12[368] * weights12[iq];
        for (int i = 0; i < 4; ++i)
            BF11[i] += fw11 * FE70_C0_D11_Q12[0][0][i];
        const double fw12 = sv12[374] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF12[i] += fw12 * FE3_C0_D01_Q12[0][0][i];
        const double fw13 = sv12[381] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF13[i] += fw13 * FE3_C0_Q12[0][iq][i];
        const double fw14 = sv12[373] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF14[i] += fw14 * FE3_C0_D01_Q12[0][0][i];
        const double fw15 = sv12[376] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF15[i] += fw15 * FE3_C0_D01_Q12[0][0][i];
        const double fw16 = sv12[380] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF16[i] += fw16 * FE3_C0_Q12[0][iq][i];
        const double fw17 = sv12[375] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF17[i] += fw17 * FE3_C0_D01_Q12[0][0][i];
        const double fw18 = sv12[378] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF18[i] += fw18 * FE3_C0_D01_Q12[0][0][i];
        const double fw19 = sv12[379] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF19[i] += fw19 * FE3_C0_Q12[0][iq][i];
        const double fw20 = sv12[377] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF20[i] += fw20 * FE3_C0_D01_Q12[0][0][i];
    }
    std::fill(A, A + 21, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[3] = { 0, 1, 5 };
    static const int DM2[5] = { 0, 2, 3, 4, 5 };
    static const int DM3[3] = { 0, 2, 4 };
    static const int DM4[4] = { 0, 3, 4, 5 };
    static const int DM5[5] = { 6, 7, 9, 10, 11 };
    static const int DM6[3] = { 6, 7, 11 };
    static const int DM7[5] = { 6, 8, 9, 10, 11 };
    static const int DM8[3] = { 6, 8, 10 };
    static const int DM9[4] = { 6, 9, 10, 11 };
    static const int DM10[2] = { 12, 14 };
    static const int DM11[2] = { 15, 17 };
    static const int DM12[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 5; ++i)
        A[DM0[i]] += BF1[i];
    for (int i = 0; i < 3; ++i)
        A[DM1[i]] += BF2[i];
    for (int i = 0; i < 5; ++i)
        A[DM2[i]] += BF3[i];
    for (int i = 0; i < 3; ++i)
        A[DM3[i]] += BF4[i];
    for (int i = 0; i < 4; ++i)
        A[DM4[i]] += BF5[i];
    for (int i = 0; i < 6; ++i)
        A[i + 6] += BF6[i];
    for (int i = 0; i < 5; ++i)
        A[DM5[i]] += BF7[i];
    for (int i = 0; i < 3; ++i)
        A[DM6[i]] += BF8[i];
    for (int i = 0; i < 5; ++i)
        A[DM7[i]] += BF9[i];
    for (int i = 0; i < 3; ++i)
        A[DM8[i]] += BF10[i];
    for (int i = 0; i < 4; ++i)
        A[DM9[i]] += BF11[i];
    for (int i = 0; i < 2; ++i)
        A[i + 12] += BF12[i];
    for (int i = 0; i < 3; ++i)
        A[i + 12] += BF13[i];
    for (int i = 0; i < 2; ++i)
        A[DM10[i]] += BF14[i];
    for (int i = 0; i < 2; ++i)
        A[i + 15] += BF15[i];
    for (int i = 0; i < 3; ++i)
        A[i + 15] += BF16[i];
    for (int i = 0; i < 2; ++i)
        A[DM11[i]] += BF17[i];
    for (int i = 0; i < 2; ++i)
        A[i + 18] += BF18[i];
    for (int i = 0; i < 3; ++i)
        A[i + 18] += BF19[i];
    for (int i = 0; i < 2; ++i)
        A[DM12[i]] += BF20[i];
  }

};


class ranspseudotimestepping_exterior_facet_integral_5_3: public ufc::exterior_facet_integral
{
public:

  ranspseudotimestepping_exterior_facet_integral_5_3() : ufc::exterior_facet_integral()
  {

  }

  ~ranspseudotimestepping_exterior_facet_integral_5_3() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, false, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 21
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.1739274225687268, 0.3260725774312731, 0.3260725774312731, 0.1739274225687268 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE35_C0_D01_F_Q4[3][4][5] =
        { { { 1.0, -0.7222726231881047, 3.722272623188091, -0.2777273768118826, -3.722272623188107 },
            { 1.0, 0.3200379128302891, 2.679962087169697, -1.320037912830275, -2.679962087169714 },
            { 1.0, 1.679962087169715, 1.320037912830271, -2.679962087169701, -1.320037912830287 },
            { 1.0, 2.722272623188108, 0.2777273768118786, -3.722272623188096, -0.2777273768118922 } },
          { { -2.72227262318811, -0.722272623188105, 0.0, 3.444545246376218, 0.0 },
            { -1.679962087169718, 0.3200379128302888, 0.0, 1.359924174339433, 0.0 },
            { -0.3200379128302928, 1.679962087169715, 0.0, -1.359924174339417, 0.0 },
            { 0.7222726231881, 2.722272623188108, 0.0, -3.444545246376202, 0.0 } },
          { { -2.72227262318811, -1.0, 0.2777273768118848, 3.722272623188112, -0.2777273768118925 },
            { -1.679962087169717, -1.0, 1.320037912830276, 2.679962087169721, -1.320037912830287 },
            { -0.3200379128302917, -1.0, 2.6799620871697, 1.320037912830298, -2.679962087169714 },
            { 0.7222726231880999, -1.0, 3.722272623188092, 0.2777273768119067, -3.722272623188106 } } };
    alignas(32) static const double FE35_C0_D10_F_Q4[3][4][5] =
        { { { 1.0, 2.722272623188104, 0.2777273768118936, -0.2777273768118936, -3.722272623188106 },
            { 1.0, 1.679962087169712, 1.320037912830285, -1.320037912830285, -2.679962087169713 },
            { 1.0, 0.3200379128302879, 2.679962087169708, -2.679962087169708, -1.320037912830288 },
            { 1.0, -0.7222726231881051, 3.722272623188099, -3.722272623188099, -0.2777273768118945 } },
          { { -2.722272623188107, -1.0, 0.277727376811893, -0.277727376811893, 3.72227262318811 },
            { -1.679962087169713, -1.0, 1.320037912830285, -1.320037912830285, 2.679962087169716 },
            { -0.3200379128302884, -1.0, 2.679962087169709, -2.679962087169709, 1.320037912830289 },
            { 0.7222726231881045, -1.0, 3.722272623188099, -3.722272623188099, 0.2777273768118963 } },
          { { -2.722272623188106, -0.7222726231881095, 0.0, 0.0, 3.444545246376216 },
            { -1.679962087169712, 0.3200379128302852, 0.0, 0.0, 1.359924174339427 },
            { -0.3200379128302857, 1.679962087169712, 0.0, 0.0, -1.359924174339426 },
            { 0.7222726231881069, 2.722272623188104, 0.0, 0.0, -3.444545246376211 } } };
    alignas(32) static const double FE35_C0_F_Q4[3][4][6] =
        { { { 0.0, 0.8013460293699309, -0.05979028222412166, 0.2584442528541909, 0.0, 0.0 },
            { 0.0, 0.2277840767909521, -0.1121969667939041, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.1121969667939041, 0.227784076790952, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.05979028222412169, 0.8013460293699309, 0.2584442528541908, 0.0, 0.0 } },
          { { 0.8013460293699309, 0.0, -0.05979028222412166, 0.0, 0.2584442528541908, 0.0 },
            { 0.2277840767909521, 0.0, -0.1121969667939041, 0.0, 0.8844128900029518, 0.0 },
            { -0.1121969667939041, 0.0, 0.2277840767909521, 0.0, 0.8844128900029519, 0.0 },
            { -0.05979028222412166, 0.0, 0.8013460293699309, 0.0, 0.2584442528541906, 0.0 } },
          { { 0.8013460293699309, -0.05979028222412169, 0.0, 0.0, 0.0, 0.2584442528541908 },
            { 0.2277840767909521, -0.1121969667939041, 0.0, 0.0, 0.0, 0.8844128900029519 },
            { -0.1121969667939041, 0.2277840767909522, 0.0, 0.0, 0.0, 0.884412890002952 },
            { -0.05979028222412169, 0.8013460293699308, 0.0, 0.0, 0.0, 0.2584442528541909 } } };
    alignas(32) static const double FE37_C2_D01_F_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE37_C2_F_Q4[3][4][3] =
        { { { 0.0, 0.9305681557970263, 0.06943184420297369 },
            { 0.0, 0.6699905217924281, 0.3300094782075718 },
            { 0.0, 0.3300094782075719, 0.6699905217924279 },
            { 0.0, 0.06943184420297382, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.0, 0.06943184420297369 },
            { 0.6699905217924281, 0.0, 0.3300094782075718 },
            { 0.3300094782075719, 0.0, 0.669990521792428 },
            { 0.06943184420297382, 0.0, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.06943184420297367, 0.0 },
            { 0.6699905217924281, 0.3300094782075718, 0.0 },
            { 0.3300094782075719, 0.6699905217924281, 0.0 },
            { 0.06943184420297374, 0.9305681557970263, 0.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE37_C2_D01_F_Q4[0][0][0] + coordinate_dofs[2] * FE37_C2_D01_F_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE37_C2_D01_F_Q4[0][0][0] + coordinate_dofs[5] * FE37_C2_D01_F_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE37_C2_D01_F_Q4[0][0][0] + coordinate_dofs[4] * FE37_C2_D01_F_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE37_C2_D01_F_Q4[0][0][0] + coordinate_dofs[3] * FE37_C2_D01_F_Q4[0][0][1];
    const double w2_d1_c3 = w[2][15] * FE37_C2_D01_F_Q4[0][0][0] + w[2][17] * FE37_C2_D01_F_Q4[0][0][1];
    double w2_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c3 += w[2][ic + 15] * FE37_C2_D01_F_Q4[0][0][ic];
    const double w2_d1_c4 = w[2][18] * FE37_C2_D01_F_Q4[0][0][0] + w[2][20] * FE37_C2_D01_F_Q4[0][0][1];
    double w2_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c4 += w[2][ic + 18] * FE37_C2_D01_F_Q4[0][0][ic];
    alignas(32) double sp[74];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = triangle_reference_facet_normals[facet][1] * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = triangle_reference_facet_normals[facet][0] * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet][0] * sp[9];
    sp[11] = -1 * J_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[20] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[21] = sp[19] + sp[20];
    sp[22] = std::sqrt(sp[21]);
    sp[23] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[24] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[25] = sp[23] + sp[24];
    sp[26] = std::sqrt(sp[25]);
    sp[27] = sp[22] * sp[26];
    sp[28] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[29] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[30] = sp[28] + sp[29];
    sp[31] = std::sqrt(sp[30]);
    sp[32] = sp[27] * sp[31];
    sp[33] = triangle_reference_cell_volume * sp[2];
    sp[34] = std::abs(sp[33]);
    sp[35] = sp[32] / (4.0 * sp[34]);
    sp[36] = sp[3] * sp[17];
    sp[37] = sp[5] * sp[17];
    sp[38] = sp[11] * sp[18];
    sp[39] = sp[9] * sp[18];
    sp[40] = sp[36] + sp[38];
    sp[41] = sp[37] + sp[39];
    sp[42] = w2_d1_c3 * sp[3];
    sp[43] = w2_d0_c3 * sp[5];
    sp[44] = sp[42] + sp[43];
    sp[45] = sp[44] * sp[17];
    sp[46] = w2_d0_c3 * sp[9];
    sp[47] = w2_d1_c3 * sp[11];
    sp[48] = sp[46] + sp[47];
    sp[49] = sp[48] * sp[18];
    sp[50] = sp[45] + sp[49];
    sp[51] = w2_d1_c4 * sp[3];
    sp[52] = w2_d0_c4 * sp[5];
    sp[53] = sp[51] + sp[52];
    sp[54] = sp[53] * sp[17];
    sp[55] = w2_d0_c4 * sp[9];
    sp[56] = w2_d1_c4 * sp[11];
    sp[57] = sp[55] + sp[56];
    sp[58] = sp[57] * sp[18];
    sp[59] = sp[54] + sp[58];
    sp[60] = sp[11] + sp[11];
    sp[61] = sp[9] + sp[9];
    sp[62] = sp[5] + sp[5];
    sp[63] = sp[3] + sp[3];
    sp[64] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[65] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[66] = sp[64] + sp[65];
    sp[67] = sp[66] * sp[66];
    sp[68] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[69] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[70] = sp[68] + sp[69];
    sp[71] = sp[70] * sp[70];
    sp[72] = sp[67] + sp[71];
    sp[73] = std::sqrt(sp[72]);
    alignas(32) double BF0[6] = {};
    alignas(32) double BF1[5] = {};
    alignas(32) double BF2[5] = {};
    alignas(32) double BF3[6] = {};
    alignas(32) double BF4[5] = {};
    alignas(32) double BF5[5] = {};
    alignas(32) double BF6[2] = {};
    alignas(32) double BF7[3] = {};
    alignas(32) double BF8[2] = {};
    alignas(32) double BF9[2] = {};
    alignas(32) double BF10[3] = {};
    alignas(32) double BF11[2] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE37_C2_F_Q4[facet][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE37_C2_F_Q4[facet][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4 += w[4][ic] * FE37_C2_F_Q4[facet][iq][ic];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c1 += w[3][ic + 6] * FE35_C0_F_Q4[facet][iq][ic];
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c0 += w[3][ic] * FE35_C0_F_Q4[facet][iq][ic];
        double w3_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c3 += w[3][ic + 15] * FE37_C2_F_Q4[facet][iq][ic];
        double w3_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c4 += w[3][ic + 18] * FE37_C2_F_Q4[facet][iq][ic];
        const double w2_d1_c0 = w[2][0] * FE35_C0_D01_F_Q4[facet][iq][0] + w[2][2] * FE35_C0_D01_F_Q4[facet][iq][1] + w[2][3] * FE35_C0_D01_F_Q4[facet][iq][2] + w[2][4] * FE35_C0_D01_F_Q4[facet][iq][3] + w[2][5] * FE35_C0_D01_F_Q4[facet][iq][4];
        const double w2_d0_c0 = w[2][0] * FE35_C0_D10_F_Q4[facet][iq][0] + w[2][1] * FE35_C0_D10_F_Q4[facet][iq][1] + w[2][3] * FE35_C0_D10_F_Q4[facet][iq][2] + w[2][4] * FE35_C0_D10_F_Q4[facet][iq][3] + w[2][5] * FE35_C0_D10_F_Q4[facet][iq][4];
        const double w2_d0_c1 = w[2][6] * FE35_C0_D10_F_Q4[facet][iq][0] + w[2][7] * FE35_C0_D10_F_Q4[facet][iq][1] + w[2][9] * FE35_C0_D10_F_Q4[facet][iq][2] + w[2][10] * FE35_C0_D10_F_Q4[facet][iq][3] + w[2][11] * FE35_C0_D10_F_Q4[facet][iq][4];
        const double w2_d1_c1 = w[2][6] * FE35_C0_D01_F_Q4[facet][iq][0] + w[2][8] * FE35_C0_D01_F_Q4[facet][iq][1] + w[2][9] * FE35_C0_D01_F_Q4[facet][iq][2] + w[2][10] * FE35_C0_D01_F_Q4[facet][iq][3] + w[2][11] * FE35_C0_D01_F_Q4[facet][iq][4];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE35_C0_F_Q4[facet][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE35_C0_F_Q4[facet][iq][ic];
        alignas(32) double sv4[129];
        sv4[0] = std::exp(w4);
        sv4[1] = w2_c3 * (0.09 * sv4[0]);
        sv4[2] = w2_c3 * sv4[1];
        sv4[3] = w2_c4 * w2_c4;
        sv4[4] = std::sqrt(1e-8 + sv4[3]);
        sv4[5] = w2_c4 + sv4[4];
        sv4[6] = sv4[2] / (0.5 * sv4[5]);
        sv4[7] = w3_c1 * sp[17];
        sv4[8] = w3_c0 * sp[18];
        sv4[9] = sv4[7] + sv4[8];
        sv4[10] = std::tanh(100.0 * sv4[9]);
        sv4[11] = (0.0001 + sv4[6] / 1.3) * (100000.0 * (0.5 + -1 * (0.5 * sv4[10])));
        sv4[12] = sv4[11] * (1.0 / (2.0 * sp[35]));
        sv4[13] = w2_c4 * sv4[12];
        sv4[14] = (0.0001 + sv4[6]) * (100000.0 * (0.5 + -1 * (0.5 * sv4[10])));
        sv4[15] = sv4[14] * (1.0 / (2.0 * sp[35]));
        sv4[16] = w2_c3 * sv4[15];
        sv4[17] = (0.5 + -1 * (0.5 * sv4[10])) * (0.0001 + sv4[6]);
        sv4[18] = sp[40] * sv4[17];
        sv4[19] = sp[41] * sv4[17];
        sv4[20] = w2_c3 * sv4[18];
        sv4[21] = w2_c3 * sv4[19];
        sv4[22] = sp[50] * sv4[17];
        sv4[23] = -1 * sv4[22] + sv4[16];
        sv4[24] = (0.5 + -1 * (0.5 * sv4[10])) * (0.0001 + sv4[6] / 1.3);
        sv4[25] = sp[40] * sv4[24];
        sv4[26] = sp[41] * sv4[24];
        sv4[27] = w2_c4 * sv4[25];
        sv4[28] = w2_c4 * sv4[26];
        sv4[29] = sp[59] * sv4[24];
        sv4[30] = sv4[23] + -1 * sv4[29];
        sv4[31] = w3_c3 * (0.09 * sv4[0]);
        sv4[32] = w3_c3 * sv4[31];
        sv4[33] = w3_c4 * w3_c4;
        sv4[34] = std::sqrt(1e-8 + sv4[33]);
        sv4[35] = w3_c4 + sv4[34];
        sv4[36] = sv4[32] / (0.5 * sv4[35]);
        sv4[37] = w2_d1_c0 * sp[3];
        sv4[38] = w2_d0_c0 * sp[5];
        sv4[39] = sv4[37] + sv4[38];
        sv4[40] = w2_d0_c1 * sp[9];
        sv4[41] = w2_d1_c1 * sp[11];
        sv4[42] = sv4[40] + sv4[41];
        sv4[43] = sv4[39] + sv4[42];
        sv4[44] = 2.0 * (0.0001 + sv4[36]) * (sv4[43] / 2);
        sv4[45] = sv4[44] * sp[17];
        sv4[46] = w2_d0_c0 * sp[9];
        sv4[47] = w2_d1_c0 * sp[11];
        sv4[48] = sv4[46] + sv4[47];
        sv4[49] = sv4[48] + sv4[48];
        sv4[50] = 2.0 * (0.0001 + sv4[36]) * (sv4[49] / 2);
        sv4[51] = sv4[50] * sp[18];
        sv4[52] = sv4[45] + sv4[51];
        sv4[53] = sv4[52] * (-1 * sp[17]);
        sv4[54] = w2_d1_c1 * sp[3];
        sv4[55] = w2_d0_c1 * sp[5];
        sv4[56] = sv4[54] + sv4[55];
        sv4[57] = sv4[56] + sv4[56];
        sv4[58] = 2.0 * (0.0001 + sv4[36]) * (sv4[57] / 2);
        sv4[59] = sv4[58] * sp[17];
        sv4[60] = sv4[44] * sp[18];
        sv4[61] = sv4[59] + sv4[60];
        sv4[62] = sv4[61] * sp[18];
        sv4[63] = sv4[53] + sv4[62];
        sv4[64] = sv4[63] * (-1 * sp[17]);
        sv4[65] = sv4[63] * sp[18];
        sv4[66] = w2_c0 + -1 * w[0][0];
        sv4[67] = sv4[66] * (-1 * sp[17]);
        sv4[68] = w2_c1 + -1 * w[0][1];
        sv4[69] = sv4[68] * sp[18];
        sv4[70] = sv4[67] + sv4[69];
        sv4[71] = 2.0 * (0.0001 + sv4[36]) * (sp[3] / 2);
        sv4[72] = 2.0 * (0.0001 + sv4[36]) * (sp[5] / 2);
        sv4[73] = 2.0 * (0.0001 + sv4[36]) * (sp[9] / 2);
        sv4[74] = 2.0 * (0.0001 + sv4[36]) * (sp[11] / 2);
        sv4[75] = sv4[71] * sp[17];
        sv4[76] = sv4[72] * sp[17];
        sv4[77] = sv4[73] * sp[17];
        sv4[78] = sv4[74] * sp[17];
        sv4[79] = 2.0 * (0.0001 + sv4[36]) * (sp[60] / 2);
        sv4[80] = 2.0 * (0.0001 + sv4[36]) * (sp[61] / 2);
        sv4[81] = sv4[79] * sp[18];
        sv4[82] = sv4[80] * sp[18];
        sv4[83] = sv4[75] + sv4[81];
        sv4[84] = sv4[76] + sv4[82];
        sv4[85] = sv4[83] * (-1 * sp[17]);
        sv4[86] = sv4[84] * (-1 * sp[17]);
        sv4[87] = -1 * sp[17] * sv4[77];
        sv4[88] = -1 * sp[17] * sv4[78];
        sv4[89] = 2.0 * (0.0001 + sv4[36]) * (sp[62] / 2);
        sv4[90] = 2.0 * (0.0001 + sv4[36]) * (sp[63] / 2);
        sv4[91] = sv4[89] * sp[17];
        sv4[92] = sv4[90] * sp[17];
        sv4[93] = sv4[71] * sp[18];
        sv4[94] = sv4[72] * sp[18];
        sv4[95] = sv4[73] * sp[18];
        sv4[96] = sv4[74] * sp[18];
        sv4[97] = sv4[91] + sv4[95];
        sv4[98] = sv4[92] + sv4[96];
        sv4[99] = sv4[93] * sp[18];
        sv4[100] = sv4[94] * sp[18];
        sv4[101] = sv4[97] * sp[18];
        sv4[102] = sv4[98] * sp[18];
        sv4[103] = sv4[85] + sv4[99];
        sv4[104] = sv4[86] + sv4[100];
        sv4[105] = sv4[87] + sv4[101];
        sv4[106] = sv4[88] + sv4[102];
        sv4[107] = sv4[70] * sv4[103];
        sv4[108] = sv4[70] * sv4[104];
        sv4[109] = sv4[70] * sv4[105];
        sv4[110] = sv4[70] * sv4[106];
        sv4[111] = 100000.0 * (0.0001 + sv4[36]) * (1.0 / (2.0 * sp[35]));
        sv4[112] = sv4[70] * sv4[111];
        sv4[113] = sv4[112] * (-1 * sp[17]);
        sv4[114] = sv4[112] * sp[18];
        sv4[115] = -1 * sv4[64] + sv4[113];
        sv4[116] = -1 * sv4[65] + sv4[114];
        sv4[117] = sv4[13] * sp[73];
        sv4[118] = sv4[30] * sp[73];
        sv4[119] = -1 * sv4[20] * sp[73];
        sv4[120] = -1 * sv4[21] * sp[73];
        sv4[121] = -1 * sv4[27] * sp[73];
        sv4[122] = -1 * sv4[28] * sp[73];
        sv4[123] = sv4[115] * sp[73];
        sv4[124] = sv4[116] * sp[73];
        sv4[125] = -1 * sv4[107] * sp[73];
        sv4[126] = -1 * sv4[108] * sp[73];
        sv4[127] = -1 * sv4[109] * sp[73];
        sv4[128] = -1 * sv4[110] * sp[73];
        const double fw0 = sv4[123] * weights4[iq];
        for (int i = 0; i < 6; ++i)
            BF0[i] += fw0 * FE35_C0_F_Q4[facet][iq][i];
        const double fw1 = sv4[126] * weights4[iq];
        for (int i = 0; i < 5; ++i)
            BF1[i] += fw1 * FE35_C0_D10_F_Q4[facet][iq][i];
        const double fw2 = sv4[125] * weights4[iq];
        for (int i = 0; i < 5; ++i)
            BF2[i] += fw2 * FE35_C0_D01_F_Q4[facet][iq][i];
        const double fw3 = sv4[124] * weights4[iq];
        for (int i = 0; i < 6; ++i)
            BF3[i] += fw3 * FE35_C0_F_Q4[facet][iq][i];
        const double fw4 = sv4[127] * weights4[iq];
        for (int i = 0; i < 5; ++i)
            BF4[i] += fw4 * FE35_C0_D10_F_Q4[facet][iq][i];
        const double fw5 = sv4[128] * weights4[iq];
        for (int i = 0; i < 5; ++i)
            BF5[i] += fw5 * FE35_C0_D01_F_Q4[facet][iq][i];
        const double fw6 = sv4[120] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF6[i] += fw6 * FE37_C2_D01_F_Q4[0][0][i];
        const double fw7 = sv4[118] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            BF7[i] += fw7 * FE37_C2_F_Q4[facet][iq][i];
        const double fw8 = sv4[119] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF8[i] += fw8 * FE37_C2_D01_F_Q4[0][0][i];
        const double fw9 = sv4[122] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF9[i] += fw9 * FE37_C2_D01_F_Q4[0][0][i];
        const double fw10 = sv4[117] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            BF10[i] += fw10 * FE37_C2_F_Q4[facet][iq][i];
        const double fw11 = sv4[121] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF11[i] += fw11 * FE37_C2_D01_F_Q4[0][0][i];
    }
    std::fill(A, A + 21, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    static const int DM4[2] = { 15, 17 };
    static const int DM5[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 5; ++i)
        A[DM0[i]] += BF1[i];
    for (int i = 0; i < 5; ++i)
        A[DM1[i]] += BF2[i];
    for (int i = 0; i < 6; ++i)
        A[i + 6] += BF3[i];
    for (int i = 0; i < 5; ++i)
        A[DM2[i]] += BF4[i];
    for (int i = 0; i < 5; ++i)
        A[DM3[i]] += BF5[i];
    for (int i = 0; i < 2; ++i)
        A[i + 15] += BF6[i];
    for (int i = 0; i < 3; ++i)
        A[i + 15] += BF7[i];
    for (int i = 0; i < 2; ++i)
        A[DM4[i]] += BF8[i];
    for (int i = 0; i < 2; ++i)
        A[i + 18] += BF9[i];
    for (int i = 0; i < 3; ++i)
        A[i + 18] += BF10[i];
    for (int i = 0; i < 2; ++i)
        A[DM5[i]] += BF11[i];
  }

};


class ranspseudotimestepping_cell_integral_6_otherwise: public ufc::cell_integral
{
public:

  ranspseudotimestepping_cell_integral_6_otherwise() : ufc::cell_integral()
  {

  }

  ~ranspseudotimestepping_cell_integral_6_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({false, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 282
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    alignas(32) static const double FE64_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE64_C0_D02_Q12[1][1][3] = { { { 3.999999999999998, 4.000000000000004, -7.999999999999995 } } };
    alignas(32) static const double FE64_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE64_C0_D11_Q12[1][1][4] = { { { 4.0, 3.999999999999997, -3.999999999999997, -4.000000000000005 } } };
    alignas(32) static const double FE64_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803568, 0.2205142679699366 },
            { -0.05512856699248404, -0.05512856699248409, 0.6533077030470597, 0.2205142679699364, 0.2205142679699362, 0.01592089499803596 },
            { 0.6533077030470594, -0.05512856699248415, -0.05512856699248411, 0.01592089499803581, 0.2205142679699364, 0.2205142679699366 },
            { -0.1249989825350975, 0.001430579517788794, -0.1249989825350975, 0.4999959301403892, 0.2485755252716258, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788821, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880001, 0.173768363654174, -0.1177151633084292, 0.790160442765823, 0.06597478591860526, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880001, 0.1353078281686267, 0.06597478591860512, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860538 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880001, 0.06597478591860524, 0.1353078281686266, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860538 },
            { 0.1737683636541741, -0.04749625719880015, -0.1177151633084292, 0.06597478591860535, 0.7901604427658229, 0.1353078281686269 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q12[0][0][1];
    const double w4_d1 = w[4][0] * FE3_C0_D01_Q12[0][0][0] + w[4][2] * FE3_C0_D01_Q12[0][0][1];
    double w4_d0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w4_d0 += w[4][ic] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c3 = w[2][15] * FE3_C0_D01_Q12[0][0][0] + w[2][17] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c3 += w[2][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c4 = w[2][18] * FE3_C0_D01_Q12[0][0][0] + w[2][20] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c4 += w[2][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    const double w1_d11_c1 = w[1][6] * FE64_C0_D02_Q12[0][0][0] + w[1][8] * FE64_C0_D02_Q12[0][0][1] + w[1][10] * FE64_C0_D02_Q12[0][0][2];
    const double w1_d01_c1 = w[1][6] * FE64_C0_D11_Q12[0][0][0] + w[1][9] * FE64_C0_D11_Q12[0][0][1] + w[1][10] * FE64_C0_D11_Q12[0][0][2] + w[1][11] * FE64_C0_D11_Q12[0][0][3];
    const double w1_d00_c1 = w[1][6] * FE64_C0_D02_Q12[0][0][0] + w[1][7] * FE64_C0_D02_Q12[0][0][1] + w[1][11] * FE64_C0_D02_Q12[0][0][2];
    const double w1_d01_c0 = w[1][0] * FE64_C0_D11_Q12[0][0][0] + w[1][3] * FE64_C0_D11_Q12[0][0][1] + w[1][4] * FE64_C0_D11_Q12[0][0][2] + w[1][5] * FE64_C0_D11_Q12[0][0][3];
    const double w1_d11_c0 = w[1][0] * FE64_C0_D02_Q12[0][0][0] + w[1][2] * FE64_C0_D02_Q12[0][0][1] + w[1][4] * FE64_C0_D02_Q12[0][0][2];
    const double w1_d00_c0 = w[1][0] * FE64_C0_D02_Q12[0][0][0] + w[1][1] * FE64_C0_D02_Q12[0][0][1] + w[1][5] * FE64_C0_D02_Q12[0][0][2];
    const double w1_d1_c2 = w[1][12] * FE3_C0_D01_Q12[0][0][0] + w[1][14] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c2 += w[1][ic + 12] * FE3_C0_D01_Q12[0][0][ic];
    const double w3_d11_c1 = w[3][6] * FE64_C0_D02_Q12[0][0][0] + w[3][8] * FE64_C0_D02_Q12[0][0][1] + w[3][10] * FE64_C0_D02_Q12[0][0][2];
    const double w3_d01_c1 = w[3][6] * FE64_C0_D11_Q12[0][0][0] + w[3][9] * FE64_C0_D11_Q12[0][0][1] + w[3][10] * FE64_C0_D11_Q12[0][0][2] + w[3][11] * FE64_C0_D11_Q12[0][0][3];
    const double w3_d00_c1 = w[3][6] * FE64_C0_D02_Q12[0][0][0] + w[3][7] * FE64_C0_D02_Q12[0][0][1] + w[3][11] * FE64_C0_D02_Q12[0][0][2];
    const double w3_d01_c0 = w[3][0] * FE64_C0_D11_Q12[0][0][0] + w[3][3] * FE64_C0_D11_Q12[0][0][1] + w[3][4] * FE64_C0_D11_Q12[0][0][2] + w[3][5] * FE64_C0_D11_Q12[0][0][3];
    const double w3_d11_c0 = w[3][0] * FE64_C0_D02_Q12[0][0][0] + w[3][2] * FE64_C0_D02_Q12[0][0][1] + w[3][4] * FE64_C0_D02_Q12[0][0][2];
    const double w3_d00_c0 = w[3][0] * FE64_C0_D02_Q12[0][0][0] + w[3][1] * FE64_C0_D02_Q12[0][0][1] + w[3][5] * FE64_C0_D02_Q12[0][0][2];
    const double w3_d1_c2 = w[3][12] * FE3_C0_D01_Q12[0][0][0] + w[3][14] * FE3_C0_D01_Q12[0][0][1];
    double w3_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c2 += w[3][ic + 12] * FE3_C0_D01_Q12[0][0][ic];
    const double w3_d1_c3 = w[3][15] * FE3_C0_D01_Q12[0][0][0] + w[3][17] * FE3_C0_D01_Q12[0][0][1];
    double w3_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c3 += w[3][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w1_d1_c3 = w[1][15] * FE3_C0_D01_Q12[0][0][0] + w[1][17] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c3 += w[1][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w3_d1_c4 = w[3][18] * FE3_C0_D01_Q12[0][0][0] + w[3][20] * FE3_C0_D01_Q12[0][0][1];
    double w3_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c4 += w[3][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    const double w1_d1_c4 = w[1][18] * FE3_C0_D01_Q12[0][0][0] + w[1][20] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c4 += w[1][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    alignas(32) double sp[177];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = w4_d1 * sp[3];
    sp[8] = w4_d0 * sp[4];
    sp[9] = sp[7] + sp[8];
    sp[10] = w2_d1_c3 * sp[3];
    sp[11] = w2_d0_c3 * sp[4];
    sp[12] = sp[10] + sp[11];
    sp[13] = w2_d1_c4 * sp[3];
    sp[14] = w2_d0_c4 * sp[4];
    sp[15] = sp[13] + sp[14];
    sp[16] = w1_d11_c1 * sp[3];
    sp[17] = w1_d01_c1 * sp[4];
    sp[18] = sp[16] + sp[17];
    sp[19] = sp[18] * sp[3];
    sp[20] = w1_d01_c1 * sp[3];
    sp[21] = w1_d00_c1 * sp[4];
    sp[22] = sp[20] + sp[21];
    sp[23] = sp[22] * sp[4];
    sp[24] = sp[19] + sp[23];
    sp[25] = sp[24] + sp[24];
    sp[26] = w4_d0 * sp[5];
    sp[27] = w4_d1 * sp[6];
    sp[28] = sp[26] + sp[27];
    sp[29] = w2_d0_c3 * sp[5];
    sp[30] = w2_d1_c3 * sp[6];
    sp[31] = sp[29] + sp[30];
    sp[32] = w2_d0_c4 * sp[5];
    sp[33] = w2_d1_c4 * sp[6];
    sp[34] = sp[32] + sp[33];
    sp[35] = w1_d01_c0 * sp[5];
    sp[36] = w1_d11_c0 * sp[6];
    sp[37] = sp[35] + sp[36];
    sp[38] = sp[37] * sp[3];
    sp[39] = w1_d00_c0 * sp[5];
    sp[40] = w1_d01_c0 * sp[6];
    sp[41] = sp[39] + sp[40];
    sp[42] = sp[41] * sp[4];
    sp[43] = sp[38] + sp[42];
    sp[44] = w1_d00_c1 * sp[5];
    sp[45] = w1_d01_c1 * sp[6];
    sp[46] = sp[44] + sp[45];
    sp[47] = sp[46] * sp[5];
    sp[48] = w1_d01_c1 * sp[5];
    sp[49] = w1_d11_c1 * sp[6];
    sp[50] = sp[48] + sp[49];
    sp[51] = sp[50] * sp[6];
    sp[52] = sp[47] + sp[51];
    sp[53] = sp[43] + sp[52];
    sp[54] = w1_d1_c2 * sp[3];
    sp[55] = w1_d0_c2 * sp[4];
    sp[56] = sp[54] + sp[55];
    sp[57] = w3_d11_c1 * sp[3];
    sp[58] = w3_d01_c1 * sp[4];
    sp[59] = sp[57] + sp[58];
    sp[60] = sp[59] * sp[3];
    sp[61] = w3_d01_c1 * sp[3];
    sp[62] = w3_d00_c1 * sp[4];
    sp[63] = sp[61] + sp[62];
    sp[64] = sp[63] * sp[4];
    sp[65] = sp[60] + sp[64];
    sp[66] = sp[65] + sp[65];
    sp[67] = w3_d01_c0 * sp[5];
    sp[68] = w3_d11_c0 * sp[6];
    sp[69] = sp[67] + sp[68];
    sp[70] = sp[69] * sp[3];
    sp[71] = w3_d00_c0 * sp[5];
    sp[72] = w3_d01_c0 * sp[6];
    sp[73] = sp[71] + sp[72];
    sp[74] = sp[73] * sp[4];
    sp[75] = sp[70] + sp[74];
    sp[76] = w3_d00_c1 * sp[5];
    sp[77] = w3_d01_c1 * sp[6];
    sp[78] = sp[76] + sp[77];
    sp[79] = sp[78] * sp[5];
    sp[80] = w3_d01_c1 * sp[5];
    sp[81] = w3_d11_c1 * sp[6];
    sp[82] = sp[80] + sp[81];
    sp[83] = sp[82] * sp[6];
    sp[84] = sp[79] + sp[83];
    sp[85] = sp[75] + sp[84];
    sp[86] = w3_d1_c2 * sp[3];
    sp[87] = w3_d0_c2 * sp[4];
    sp[88] = sp[86] + sp[87];
    sp[89] = w1_d11_c0 * sp[3];
    sp[90] = w1_d01_c0 * sp[4];
    sp[91] = sp[89] + sp[90];
    sp[92] = sp[91] * sp[3];
    sp[93] = w1_d01_c0 * sp[3];
    sp[94] = w1_d00_c0 * sp[4];
    sp[95] = sp[93] + sp[94];
    sp[96] = sp[95] * sp[4];
    sp[97] = sp[92] + sp[96];
    sp[98] = sp[22] * sp[5];
    sp[99] = sp[18] * sp[6];
    sp[100] = sp[98] + sp[99];
    sp[101] = sp[97] + sp[100];
    sp[102] = sp[41] * sp[5];
    sp[103] = sp[37] * sp[6];
    sp[104] = sp[102] + sp[103];
    sp[105] = sp[104] + sp[104];
    sp[106] = w1_d0_c2 * sp[5];
    sp[107] = w1_d1_c2 * sp[6];
    sp[108] = sp[106] + sp[107];
    sp[109] = w3_d11_c0 * sp[3];
    sp[110] = w3_d01_c0 * sp[4];
    sp[111] = sp[109] + sp[110];
    sp[112] = sp[111] * sp[3];
    sp[113] = w3_d01_c0 * sp[3];
    sp[114] = w3_d00_c0 * sp[4];
    sp[115] = sp[113] + sp[114];
    sp[116] = sp[115] * sp[4];
    sp[117] = sp[112] + sp[116];
    sp[118] = sp[63] * sp[5];
    sp[119] = sp[59] * sp[6];
    sp[120] = sp[118] + sp[119];
    sp[121] = sp[117] + sp[120];
    sp[122] = sp[73] * sp[5];
    sp[123] = sp[69] * sp[6];
    sp[124] = sp[122] + sp[123];
    sp[125] = sp[124] + sp[124];
    sp[126] = w3_d0_c2 * sp[5];
    sp[127] = w3_d1_c2 * sp[6];
    sp[128] = sp[126] + sp[127];
    sp[129] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[130] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[131] = sp[129] + sp[130];
    sp[132] = std::sqrt(sp[131]);
    sp[133] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[134] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[135] = sp[133] + sp[134];
    sp[136] = std::sqrt(sp[135]);
    sp[137] = sp[132] * sp[136];
    sp[138] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[139] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[140] = sp[138] + sp[139];
    sp[141] = std::sqrt(sp[140]);
    sp[142] = sp[137] * sp[141];
    sp[143] = triangle_reference_cell_volume * sp[2];
    sp[144] = std::abs(sp[143]);
    sp[145] = sp[142] / (4.0 * sp[144]);
    sp[146] = w3_d1_c3 * sp[3];
    sp[147] = w3_d0_c3 * sp[4];
    sp[148] = sp[146] + sp[147];
    sp[149] = w3_d0_c3 * sp[5];
    sp[150] = w3_d1_c3 * sp[6];
    sp[151] = sp[149] + sp[150];
    sp[152] = w1_d1_c3 * sp[3];
    sp[153] = w1_d0_c3 * sp[4];
    sp[154] = sp[152] + sp[153];
    sp[155] = w1_d0_c3 * sp[5];
    sp[156] = w1_d1_c3 * sp[6];
    sp[157] = sp[155] + sp[156];
    sp[158] = w3_d1_c4 * sp[3];
    sp[159] = w3_d0_c4 * sp[4];
    sp[160] = sp[158] + sp[159];
    sp[161] = w3_d0_c4 * sp[5];
    sp[162] = w3_d1_c4 * sp[6];
    sp[163] = sp[161] + sp[162];
    sp[164] = w1_d1_c4 * sp[3];
    sp[165] = w1_d0_c4 * sp[4];
    sp[166] = sp[164] + sp[165];
    sp[167] = w1_d0_c4 * sp[5];
    sp[168] = w1_d1_c4 * sp[6];
    sp[169] = sp[167] + sp[168];
    sp[170] = sp[154] * sp[148];
    sp[171] = sp[157] * sp[151];
    sp[172] = sp[170] + sp[171];
    sp[173] = sp[166] * sp[160];
    sp[174] = sp[169] * sp[163];
    sp[175] = sp[173] + sp[174];
    sp[176] = std::abs(sp[2]);
    alignas(32) double TP0[2] = {};
    alignas(32) double TP1[3] = {};
    alignas(32) double TP2[2] = {};
    alignas(32) double TP3[3] = {};
    alignas(32) double BF0[3][3] = {};
    alignas(32) double TP4[3] = {};
    alignas(32) double TP5[3] = {};
    alignas(32) double TP6[2] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE64_C0_Q12[0][iq][ic];
        const double w1_d1_c1 = w[1][6] * FE64_C0_D01_Q12[0][iq][0] + w[1][8] * FE64_C0_D01_Q12[0][iq][1] + w[1][9] * FE64_C0_D01_Q12[0][iq][2] + w[1][10] * FE64_C0_D01_Q12[0][iq][3] + w[1][11] * FE64_C0_D01_Q12[0][iq][4];
        const double w1_d0_c1 = w[1][6] * FE64_C0_D10_Q12[0][iq][0] + w[1][7] * FE64_C0_D10_Q12[0][iq][1] + w[1][9] * FE64_C0_D10_Q12[0][iq][2] + w[1][10] * FE64_C0_D10_Q12[0][iq][3] + w[1][11] * FE64_C0_D10_Q12[0][iq][4];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE64_C0_Q12[0][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4 += w[4][ic] * FE3_C0_Q12[0][iq][ic];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE3_C0_Q12[0][iq][ic];
        const double w1_d1_c0 = w[1][0] * FE64_C0_D01_Q12[0][iq][0] + w[1][2] * FE64_C0_D01_Q12[0][iq][1] + w[1][3] * FE64_C0_D01_Q12[0][iq][2] + w[1][4] * FE64_C0_D01_Q12[0][iq][3] + w[1][5] * FE64_C0_D01_Q12[0][iq][4];
        const double w1_d0_c0 = w[1][0] * FE64_C0_D10_Q12[0][iq][0] + w[1][1] * FE64_C0_D10_Q12[0][iq][1] + w[1][3] * FE64_C0_D10_Q12[0][iq][2] + w[1][4] * FE64_C0_D10_Q12[0][iq][3] + w[1][5] * FE64_C0_D10_Q12[0][iq][4];
        const double w3_d1_c1 = w[3][6] * FE64_C0_D01_Q12[0][iq][0] + w[3][8] * FE64_C0_D01_Q12[0][iq][1] + w[3][9] * FE64_C0_D01_Q12[0][iq][2] + w[3][10] * FE64_C0_D01_Q12[0][iq][3] + w[3][11] * FE64_C0_D01_Q12[0][iq][4];
        const double w3_d0_c1 = w[3][6] * FE64_C0_D10_Q12[0][iq][0] + w[3][7] * FE64_C0_D10_Q12[0][iq][1] + w[3][9] * FE64_C0_D10_Q12[0][iq][2] + w[3][10] * FE64_C0_D10_Q12[0][iq][3] + w[3][11] * FE64_C0_D10_Q12[0][iq][4];
        const double w3_d1_c0 = w[3][0] * FE64_C0_D01_Q12[0][iq][0] + w[3][2] * FE64_C0_D01_Q12[0][iq][1] + w[3][3] * FE64_C0_D01_Q12[0][iq][2] + w[3][4] * FE64_C0_D01_Q12[0][iq][3] + w[3][5] * FE64_C0_D01_Q12[0][iq][4];
        const double w3_d0_c0 = w[3][0] * FE64_C0_D10_Q12[0][iq][0] + w[3][1] * FE64_C0_D10_Q12[0][iq][1] + w[3][3] * FE64_C0_D10_Q12[0][iq][2] + w[3][4] * FE64_C0_D10_Q12[0][iq][3] + w[3][5] * FE64_C0_D10_Q12[0][iq][4];
        const double w2_d1_c1 = w[2][6] * FE64_C0_D01_Q12[0][iq][0] + w[2][8] * FE64_C0_D01_Q12[0][iq][1] + w[2][9] * FE64_C0_D01_Q12[0][iq][2] + w[2][10] * FE64_C0_D01_Q12[0][iq][3] + w[2][11] * FE64_C0_D01_Q12[0][iq][4];
        const double w2_d0_c1 = w[2][6] * FE64_C0_D10_Q12[0][iq][0] + w[2][7] * FE64_C0_D10_Q12[0][iq][1] + w[2][9] * FE64_C0_D10_Q12[0][iq][2] + w[2][10] * FE64_C0_D10_Q12[0][iq][3] + w[2][11] * FE64_C0_D10_Q12[0][iq][4];
        const double w2_d1_c0 = w[2][0] * FE64_C0_D01_Q12[0][iq][0] + w[2][2] * FE64_C0_D01_Q12[0][iq][1] + w[2][3] * FE64_C0_D01_Q12[0][iq][2] + w[2][4] * FE64_C0_D01_Q12[0][iq][3] + w[2][5] * FE64_C0_D01_Q12[0][iq][4];
        const double w2_d0_c0 = w[2][0] * FE64_C0_D10_Q12[0][iq][0] + w[2][1] * FE64_C0_D10_Q12[0][iq][1] + w[2][3] * FE64_C0_D10_Q12[0][iq][2] + w[2][4] * FE64_C0_D10_Q12[0][iq][3] + w[2][5] * FE64_C0_D10_Q12[0][iq][4];
        double w3_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c4 += w[3][ic + 18] * FE3_C0_Q12[0][iq][ic];
        double w1_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c4 += w[1][ic + 18] * FE3_C0_Q12[0][iq][ic];
        double w1_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c3 += w[1][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w3_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c3 += w[3][ic + 15] * FE3_C0_Q12[0][iq][ic];
        alignas(32) double sv12[648];
        sv12[0] = w1_d1_c1 * sp[3];
        sv12[1] = w1_d0_c1 * sp[4];
        sv12[2] = sv12[0] + sv12[1];
        sv12[3] = w2_c1 * sv12[2];
        sv12[4] = w1_d0_c1 * sp[5];
        sv12[5] = w1_d1_c1 * sp[6];
        sv12[6] = sv12[4] + sv12[5];
        sv12[7] = w2_c0 * sv12[6];
        sv12[8] = sv12[3] + sv12[7];
        sv12[9] = std::exp(w4);
        sv12[10] = sp[9] * sv12[9];
        sv12[11] = w2_c3 * (0.09 * sv12[10]);
        sv12[12] = sp[12] * (0.09 * sv12[9]);
        sv12[13] = sv12[11] + sv12[12];
        sv12[14] = w2_c3 * sv12[13];
        sv12[15] = w2_c3 * (0.09 * sv12[9]);
        sv12[16] = sp[12] * sv12[15];
        sv12[17] = sv12[14] + sv12[16];
        sv12[18] = w2_c4 * sp[15];
        sv12[19] = sv12[18] + sv12[18];
        sv12[20] = w2_c4 * w2_c4;
        sv12[21] = std::sqrt(1e-8 + sv12[20]);
        sv12[22] = sv12[19] / (2 * sv12[21]);
        sv12[23] = sp[15] + sv12[22];
        sv12[24] = w2_c3 * sv12[15];
        sv12[25] = w2_c4 + sv12[21];
        sv12[26] = sv12[24] / (0.5 * sv12[25]);
        sv12[27] = 0.5 * sv12[23] * sv12[26];
        sv12[28] = sv12[17] + -1 * sv12[27];
        sv12[29] = sv12[28] / (0.5 * sv12[25]);
        sv12[30] = sv12[2] + sv12[2];
        sv12[31] = 2.0 * sv12[29] * (sv12[30] / 2);
        sv12[32] = 2.0 * (0.0001 + sv12[26]) * (sp[25] / 2);
        sv12[33] = sv12[31] + sv12[32];
        sv12[34] = sp[28] * sv12[9];
        sv12[35] = w2_c3 * (0.09 * sv12[34]);
        sv12[36] = sp[31] * (0.09 * sv12[9]);
        sv12[37] = sv12[35] + sv12[36];
        sv12[38] = w2_c3 * sv12[37];
        sv12[39] = sp[31] * sv12[15];
        sv12[40] = sv12[38] + sv12[39];
        sv12[41] = w2_c4 * sp[34];
        sv12[42] = sv12[41] + sv12[41];
        sv12[43] = sv12[42] / (2 * sv12[21]);
        sv12[44] = sp[34] + sv12[43];
        sv12[45] = 0.5 * sv12[44] * sv12[26];
        sv12[46] = sv12[40] + -1 * sv12[45];
        sv12[47] = sv12[46] / (0.5 * sv12[25]);
        sv12[48] = w1_d1_c0 * sp[3];
        sv12[49] = w1_d0_c0 * sp[4];
        sv12[50] = sv12[48] + sv12[49];
        sv12[51] = sv12[50] + sv12[6];
        sv12[52] = 2.0 * sv12[47] * (sv12[51] / 2);
        sv12[53] = 2.0 * (0.0001 + sv12[26]) * (sp[53] / 2);
        sv12[54] = sv12[52] + sv12[53];
        sv12[55] = sv12[33] + sv12[54];
        sv12[56] = sv12[8] + -1 * sv12[55];
        sv12[57] = sv12[56] + sp[56];
        sv12[58] = w3_d1_c1 * sp[3];
        sv12[59] = w3_d0_c1 * sp[4];
        sv12[60] = sv12[58] + sv12[59];
        sv12[61] = w2_c1 * sv12[60];
        sv12[62] = w3_d0_c1 * sp[5];
        sv12[63] = w3_d1_c1 * sp[6];
        sv12[64] = sv12[62] + sv12[63];
        sv12[65] = w2_c0 * sv12[64];
        sv12[66] = sv12[61] + sv12[65];
        sv12[67] = sv12[60] + sv12[60];
        sv12[68] = 2.0 * sv12[29] * (sv12[67] / 2);
        sv12[69] = 2.0 * (0.0001 + sv12[26]) * (sp[66] / 2);
        sv12[70] = sv12[68] + sv12[69];
        sv12[71] = w3_d1_c0 * sp[3];
        sv12[72] = w3_d0_c0 * sp[4];
        sv12[73] = sv12[71] + sv12[72];
        sv12[74] = sv12[73] + sv12[64];
        sv12[75] = 2.0 * sv12[47] * (sv12[74] / 2);
        sv12[76] = 2.0 * (0.0001 + sv12[26]) * (sp[85] / 2);
        sv12[77] = sv12[75] + sv12[76];
        sv12[78] = sv12[70] + sv12[77];
        sv12[79] = sv12[66] + -1 * sv12[78];
        sv12[80] = sv12[79] + sp[88];
        sv12[81] = sv12[57] * sv12[80];
        sv12[82] = w2_c1 * sv12[50];
        sv12[83] = w1_d0_c0 * sp[5];
        sv12[84] = w1_d1_c0 * sp[6];
        sv12[85] = sv12[83] + sv12[84];
        sv12[86] = w2_c0 * sv12[85];
        sv12[87] = sv12[82] + sv12[86];
        sv12[88] = 2.0 * sv12[29] * (sv12[51] / 2);
        sv12[89] = 2.0 * (0.0001 + sv12[26]) * (sp[101] / 2);
        sv12[90] = sv12[88] + sv12[89];
        sv12[91] = sv12[85] + sv12[85];
        sv12[92] = 2.0 * sv12[47] * (sv12[91] / 2);
        sv12[93] = 2.0 * (0.0001 + sv12[26]) * (sp[105] / 2);
        sv12[94] = sv12[92] + sv12[93];
        sv12[95] = sv12[90] + sv12[94];
        sv12[96] = sv12[87] + -1 * sv12[95];
        sv12[97] = sv12[96] + sp[108];
        sv12[98] = w2_c1 * sv12[73];
        sv12[99] = w3_d0_c0 * sp[5];
        sv12[100] = w3_d1_c0 * sp[6];
        sv12[101] = sv12[99] + sv12[100];
        sv12[102] = w2_c0 * sv12[101];
        sv12[103] = sv12[98] + sv12[102];
        sv12[104] = 2.0 * sv12[29] * (sv12[74] / 2);
        sv12[105] = 2.0 * (0.0001 + sv12[26]) * (sp[121] / 2);
        sv12[106] = sv12[104] + sv12[105];
        sv12[107] = sv12[101] + sv12[101];
        sv12[108] = 2.0 * sv12[47] * (sv12[107] / 2);
        sv12[109] = 2.0 * (0.0001 + sv12[26]) * (sp[125] / 2);
        sv12[110] = sv12[108] + sv12[109];
        sv12[111] = sv12[106] + sv12[110];
        sv12[112] = sv12[103] + -1 * sv12[111];
        sv12[113] = sv12[112] + sp[128];
        sv12[114] = sv12[97] * sv12[113];
        sv12[115] = sv12[81] + sv12[114];
        sv12[116] = w2_c0 * w2_c0;
        sv12[117] = w2_c1 * w2_c1;
        sv12[118] = sv12[116] + sv12[117];
        sv12[119] = std::sqrt(sv12[118]);
        sv12[120] = 0.5 * (2.0 * sp[145]) * sv12[119];
        sv12[121] = sv12[120] / (0.0001 + sv12[26]);
        sv12[122] = sv12[121] * sv12[26];
        sv12[123] = -1 * sv12[122] / (0.0001 + sv12[26]);
        sv12[124] = sv12[123] * sv12[26];
        sv12[125] = sv12[124] + sv12[122];
        sv12[126] = -1 * sv12[125] + -1 * sv12[124];
        sv12[127] = sv12[126] / (0.0001 + sv12[26]);
        sv12[128] = sv12[127] * (1.0 / sv12[121]);
        sv12[129] = sv12[123] * (1.0 / sv12[121]);
        sv12[130] = -1 * sv12[129] / sv12[121];
        sv12[131] = sv12[123] * sv12[130];
        sv12[132] = sv12[128] + sv12[131];
        sv12[133] = -1 * sv12[132] + -1 * sv12[131];
        sv12[134] = sv12[133] / sv12[121];
        sv12[135] = std::exp(-2.0 * sv12[121]);
        sv12[136] = -2.0 * sv12[123] * sv12[135];
        sv12[137] = -2.0 * sv12[123] * sv12[136];
        sv12[138] = -2.0 * sv12[127] * sv12[135];
        sv12[139] = sv12[137] + sv12[138];
        sv12[140] = (1.0 + sv12[135]) / (1.0 + -1 * sv12[135]);
        sv12[141] = -1 * sv12[136] * sv12[140];
        sv12[142] = -1 * sv12[141] + sv12[136];
        sv12[143] = sv12[142] / (1.0 + -1 * sv12[135]);
        sv12[144] = -1 * sv12[136] * sv12[143];
        sv12[145] = -1 * sv12[139] * sv12[140];
        sv12[146] = sv12[144] + sv12[145];
        sv12[147] = sv12[139] + -1 * sv12[146];
        sv12[148] = sv12[147] + -1 * sv12[144];
        sv12[149] = sv12[148] / (1.0 + -1 * sv12[135]);
        sv12[150] = -1 * sv12[134] + sv12[149];
        sv12[151] = sv12[150] * (2.0 * sp[145]);
        sv12[152] = sv12[151] / sv12[119];
        sv12[153] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[121]) * (2.0 * sp[145]);
        sv12[154] = sv12[153] * (2.0 * sp[145]);
        sv12[155] = sv12[154] / (0.0001 + sv12[26]);
        sv12[156] = sv12[155] * sv12[26];
        sv12[157] = 0.5 * (-0.004435991517475 * sv12[123]) * (2.0 * sp[145]);
        sv12[158] = sv12[157] * (2.0 * sp[145]);
        sv12[159] = -1 * sv12[156] + sv12[158];
        sv12[160] = sv12[159] / (0.0001 + sv12[26]);
        sv12[161] = sv12[160] * sv12[26];
        sv12[162] = sv12[161] + sv12[156];
        sv12[163] = 0.5 * (-0.004435991517475 * sv12[127]) * (2.0 * sp[145]);
        sv12[164] = sv12[163] * (2.0 * sp[145]);
        sv12[165] = -1 * sv12[162] + sv12[164];
        sv12[166] = sv12[165] + -1 * sv12[161];
        sv12[167] = sv12[166] / (0.0001 + sv12[26]);
        sv12[168] = (sv12[121] >= 0.1 ? sv12[152] : sv12[167]);
        sv12[169] = sv12[115] * sv12[168];
        sv12[170] = sp[3] * sv12[9];
        sv12[171] = sp[4] * sv12[9];
        sv12[172] = w2_c3 * (0.09 * sv12[170]);
        sv12[173] = w2_c3 * (0.09 * sv12[171]);
        sv12[174] = w2_c3 * sv12[172];
        sv12[175] = w2_c3 * sv12[173];
        sv12[176] = sv12[174] / (0.5 * sv12[25]);
        sv12[177] = sv12[175] / (0.5 * sv12[25]);
        sv12[178] = 2.0 * sv12[176] * (sv12[51] / 2);
        sv12[179] = 2.0 * sv12[177] * (sv12[51] / 2);
        sv12[180] = 2.0 * sv12[26] * (sp[101] / 2);
        sv12[181] = sv12[88] + sv12[180];
        sv12[182] = sp[6] * sv12[9];
        sv12[183] = sp[5] * sv12[9];
        sv12[184] = w2_c3 * (0.09 * sv12[182]);
        sv12[185] = w2_c3 * (0.09 * sv12[183]);
        sv12[186] = w2_c3 * sv12[184];
        sv12[187] = w2_c3 * sv12[185];
        sv12[188] = sv12[186] / (0.5 * sv12[25]);
        sv12[189] = sv12[187] / (0.5 * sv12[25]);
        sv12[190] = 2.0 * sv12[188] * (sv12[91] / 2);
        sv12[191] = 2.0 * sv12[189] * (sv12[91] / 2);
        sv12[192] = 2.0 * sv12[26] * (sp[105] / 2);
        sv12[193] = sv12[92] + sv12[192];
        sv12[194] = sv12[181] + sv12[193];
        sv12[195] = sv12[190] + sv12[178];
        sv12[196] = sv12[191] + sv12[179];
        sv12[197] = sv12[113] * (-1 * sv12[194]);
        sv12[198] = sv12[113] * (-1 * sv12[195]);
        sv12[199] = sv12[113] * (-1 * sv12[196]);
        sv12[200] = 2.0 * sv12[176] * (sv12[74] / 2);
        sv12[201] = 2.0 * sv12[177] * (sv12[74] / 2);
        sv12[202] = 2.0 * sv12[26] * (sp[121] / 2);
        sv12[203] = sv12[104] + sv12[202];
        sv12[204] = 2.0 * sv12[188] * (sv12[107] / 2);
        sv12[205] = 2.0 * sv12[189] * (sv12[107] / 2);
        sv12[206] = 2.0 * sv12[26] * (sp[125] / 2);
        sv12[207] = sv12[108] + sv12[206];
        sv12[208] = sv12[203] + sv12[207];
        sv12[209] = sv12[204] + sv12[200];
        sv12[210] = sv12[205] + sv12[201];
        sv12[211] = sv12[97] * (-1 * sv12[208]);
        sv12[212] = sv12[97] * (-1 * sv12[209]);
        sv12[213] = sv12[97] * (-1 * sv12[210]);
        sv12[214] = sv12[197] + sv12[211];
        sv12[215] = sv12[198] + sv12[212];
        sv12[216] = sv12[199] + sv12[213];
        sv12[217] = 2.0 * sv12[176] * (sv12[30] / 2);
        sv12[218] = 2.0 * sv12[177] * (sv12[30] / 2);
        sv12[219] = 2.0 * sv12[26] * (sp[25] / 2);
        sv12[220] = sv12[31] + sv12[219];
        sv12[221] = 2.0 * sv12[188] * (sv12[51] / 2);
        sv12[222] = 2.0 * sv12[189] * (sv12[51] / 2);
        sv12[223] = 2.0 * sv12[26] * (sp[53] / 2);
        sv12[224] = sv12[52] + sv12[223];
        sv12[225] = sv12[220] + sv12[224];
        sv12[226] = sv12[217] + sv12[221];
        sv12[227] = sv12[218] + sv12[222];
        sv12[228] = sv12[80] * (-1 * sv12[225]);
        sv12[229] = sv12[80] * (-1 * sv12[226]);
        sv12[230] = sv12[80] * (-1 * sv12[227]);
        sv12[231] = 2.0 * sv12[176] * (sv12[67] / 2);
        sv12[232] = 2.0 * sv12[177] * (sv12[67] / 2);
        sv12[233] = 2.0 * sv12[26] * (sp[66] / 2);
        sv12[234] = sv12[68] + sv12[233];
        sv12[235] = 2.0 * sv12[188] * (sv12[74] / 2);
        sv12[236] = 2.0 * sv12[189] * (sv12[74] / 2);
        sv12[237] = 2.0 * sv12[26] * (sp[85] / 2);
        sv12[238] = sv12[75] + sv12[237];
        sv12[239] = sv12[234] + sv12[238];
        sv12[240] = sv12[231] + sv12[235];
        sv12[241] = sv12[232] + sv12[236];
        sv12[242] = sv12[57] * (-1 * sv12[239]);
        sv12[243] = sv12[57] * (-1 * sv12[240]);
        sv12[244] = sv12[57] * (-1 * sv12[241]);
        sv12[245] = sv12[228] + sv12[242];
        sv12[246] = sv12[229] + sv12[243];
        sv12[247] = sv12[230] + sv12[244];
        sv12[248] = sv12[214] + sv12[245];
        sv12[249] = sv12[215] + sv12[246];
        sv12[250] = sv12[247] + sv12[216];
        sv12[251] = -1 * sv12[130] + sv12[143];
        sv12[252] = sv12[251] * (2.0 * sp[145]);
        sv12[253] = sv12[252] / sv12[119];
        sv12[254] = (sv12[121] >= 0.1 ? sv12[253] : sv12[160]);
        sv12[255] = sv12[248] * sv12[254];
        sv12[256] = sv12[249] * sv12[254];
        sv12[257] = sv12[250] * sv12[254];
        sv12[258] = sv12[169] + sv12[255];
        sv12[259] = -1 * sv12[194] * (-1 * sv12[208]);
        sv12[260] = -1 * sv12[194] * (-1 * sv12[209]);
        sv12[261] = -1 * sv12[194] * (-1 * sv12[210]);
        sv12[262] = -1 * sv12[208] * (-1 * sv12[195]);
        sv12[263] = -1 * sv12[195] * (-1 * sv12[209]);
        sv12[264] = -1 * sv12[195] * (-1 * sv12[210]);
        sv12[265] = -1 * sv12[208] * (-1 * sv12[196]);
        sv12[266] = -1 * sv12[196] * (-1 * sv12[209]);
        sv12[267] = -1 * sv12[196] * (-1 * sv12[210]);
        sv12[268] = sv12[211] + sv12[259];
        sv12[269] = sv12[212] + sv12[260];
        sv12[270] = sv12[213] + sv12[261];
        sv12[271] = sv12[262] + sv12[212];
        sv12[272] = sv12[265] + sv12[213];
        sv12[273] = sv12[197] + sv12[259];
        sv12[274] = sv12[198] + sv12[262];
        sv12[275] = sv12[199] + sv12[265];
        sv12[276] = sv12[198] + sv12[260];
        sv12[277] = sv12[199] + sv12[261];
        sv12[278] = sv12[273] + sv12[268];
        sv12[279] = sv12[274] + sv12[269];
        sv12[280] = sv12[275] + sv12[270];
        sv12[281] = sv12[271] + sv12[276];
        sv12[282] = sv12[272] + sv12[277];
        sv12[283] = sv12[263] + sv12[263];
        sv12[284] = sv12[266] + sv12[264];
        sv12[285] = sv12[267] + sv12[267];
        sv12[286] = -1 * sv12[225] * (-1 * sv12[239]);
        sv12[287] = -1 * sv12[225] * (-1 * sv12[240]);
        sv12[288] = -1 * sv12[225] * (-1 * sv12[241]);
        sv12[289] = -1 * sv12[239] * (-1 * sv12[226]);
        sv12[290] = -1 * sv12[226] * (-1 * sv12[240]);
        sv12[291] = -1 * sv12[226] * (-1 * sv12[241]);
        sv12[292] = -1 * sv12[239] * (-1 * sv12[227]);
        sv12[293] = -1 * sv12[227] * (-1 * sv12[240]);
        sv12[294] = -1 * sv12[227] * (-1 * sv12[241]);
        sv12[295] = sv12[242] + sv12[286];
        sv12[296] = sv12[243] + sv12[287];
        sv12[297] = sv12[244] + sv12[288];
        sv12[298] = sv12[289] + sv12[243];
        sv12[299] = sv12[292] + sv12[244];
        sv12[300] = sv12[228] + sv12[286];
        sv12[301] = sv12[229] + sv12[289];
        sv12[302] = sv12[230] + sv12[292];
        sv12[303] = sv12[229] + sv12[287];
        sv12[304] = sv12[230] + sv12[288];
        sv12[305] = sv12[300] + sv12[295];
        sv12[306] = sv12[301] + sv12[296];
        sv12[307] = sv12[302] + sv12[297];
        sv12[308] = sv12[298] + sv12[303];
        sv12[309] = sv12[299] + sv12[304];
        sv12[310] = sv12[290] + sv12[290];
        sv12[311] = sv12[291] + sv12[293];
        sv12[312] = sv12[294] + sv12[294];
        sv12[313] = sv12[278] + sv12[305];
        sv12[314] = sv12[279] + sv12[306];
        sv12[315] = sv12[307] + sv12[280];
        sv12[316] = sv12[281] + sv12[308];
        sv12[317] = sv12[309] + sv12[282];
        sv12[318] = sv12[283] + sv12[310];
        sv12[319] = sv12[284] + sv12[311];
        sv12[320] = sv12[312] + sv12[285];
        sv12[321] = -1 * (1.0 / sv12[121]) + sv12[140];
        sv12[322] = sv12[321] * (2.0 * sp[145]);
        sv12[323] = sv12[322] / sv12[119];
        sv12[324] = (sv12[121] >= 0.1 ? sv12[323] : sv12[155]);
        sv12[325] = sv12[313] * sv12[324];
        sv12[326] = sv12[314] * sv12[324];
        sv12[327] = sv12[315] * sv12[324];
        sv12[328] = sv12[316] * sv12[324];
        sv12[329] = sv12[317] * sv12[324];
        sv12[330] = sv12[318] * sv12[324];
        sv12[331] = sv12[319] * sv12[324];
        sv12[332] = sv12[320] * sv12[324];
        sv12[333] = sv12[255] + sv12[325];
        sv12[334] = sv12[256] + sv12[326];
        sv12[335] = sv12[257] + sv12[327];
        sv12[336] = sv12[258] + sv12[333];
        sv12[337] = sv12[256] + sv12[328];
        sv12[338] = sv12[257] + sv12[329];
        sv12[339] = w2_c1 * sp[148];
        sv12[340] = w2_c0 * sp[151];
        sv12[341] = sv12[339] + sv12[340];
        sv12[342] = sp[148] * sv12[29];
        sv12[343] = sp[151] * sv12[47];
        sv12[344] = sv12[342] + sv12[343];
        sv12[345] = sv12[341] + -1 * sv12[344];
        sv12[346] = w2_c1 * sp[154];
        sv12[347] = w2_c0 * sp[157];
        sv12[348] = sv12[346] + sv12[347];
        sv12[349] = sp[154] * sv12[29];
        sv12[350] = sp[157] * sv12[47];
        sv12[351] = sv12[349] + sv12[350];
        sv12[352] = sv12[348] + -1 * sv12[351];
        sv12[353] = w2_c4 + sv12[352];
        sv12[354] = w2_d1_c1 * sp[3];
        sv12[355] = w2_d0_c1 * sp[4];
        sv12[356] = sv12[354] + sv12[355];
        sv12[357] = sv12[356] + sv12[356];
        sv12[358] = sv12[357] / 2 * (sv12[357] / 2);
        sv12[359] = w2_d1_c0 * sp[3];
        sv12[360] = w2_d0_c0 * sp[4];
        sv12[361] = sv12[359] + sv12[360];
        sv12[362] = w2_d0_c1 * sp[5];
        sv12[363] = w2_d1_c1 * sp[6];
        sv12[364] = sv12[362] + sv12[363];
        sv12[365] = sv12[361] + sv12[364];
        sv12[366] = sv12[365] / 2 * (sv12[365] / 2);
        sv12[367] = sv12[358] + sv12[366];
        sv12[368] = w2_d0_c0 * sp[5];
        sv12[369] = w2_d1_c0 * sp[6];
        sv12[370] = sv12[368] + sv12[369];
        sv12[371] = sv12[370] + sv12[370];
        sv12[372] = sv12[371] / 2 * (sv12[371] / 2);
        sv12[373] = sv12[372] + sv12[366];
        sv12[374] = sv12[367] + sv12[373];
        sv12[375] = 2.0 * sv12[374] * sv12[26];
        sv12[376] = sv12[353] + -1 * sv12[375];
        sv12[377] = sv12[345] * sv12[376];
        sv12[378] = sv12[377] * sv12[168];
        sv12[379] = sp[154] * sv12[176];
        sv12[380] = sp[154] * sv12[177];
        sv12[381] = sp[157] * sv12[188];
        sv12[382] = sp[157] * sv12[189];
        sv12[383] = sv12[379] + sv12[381];
        sv12[384] = sv12[382] + sv12[380];
        sv12[385] = -1 * sv12[351] + -1 * sv12[375];
        sv12[386] = sv12[345] * sv12[385];
        sv12[387] = sv12[345] * (-1 * sv12[383]);
        sv12[388] = sv12[345] * (-1 * sv12[384]);
        sv12[389] = sp[148] * sv12[176];
        sv12[390] = sp[148] * sv12[177];
        sv12[391] = sp[151] * sv12[188];
        sv12[392] = sp[151] * sv12[189];
        sv12[393] = sv12[389] + sv12[391];
        sv12[394] = sv12[392] + sv12[390];
        sv12[395] = sv12[376] * (-1 * sv12[344]);
        sv12[396] = sv12[376] * (-1 * sv12[393]);
        sv12[397] = sv12[376] * (-1 * sv12[394]);
        sv12[398] = sv12[386] + sv12[395];
        sv12[399] = sv12[387] + sv12[396];
        sv12[400] = sv12[388] + sv12[397];
        sv12[401] = sv12[398] * sv12[254];
        sv12[402] = sv12[399] * sv12[254];
        sv12[403] = sv12[400] * sv12[254];
        sv12[404] = sv12[378] + sv12[401];
        sv12[405] = sv12[385] * (-1 * sv12[344]);
        sv12[406] = sv12[385] * (-1 * sv12[393]);
        sv12[407] = sv12[385] * (-1 * sv12[394]);
        sv12[408] = -1 * sv12[344] * (-1 * sv12[383]);
        sv12[409] = -1 * sv12[383] * (-1 * sv12[393]);
        sv12[410] = -1 * sv12[394] * (-1 * sv12[383]);
        sv12[411] = -1 * sv12[344] * (-1 * sv12[384]);
        sv12[412] = -1 * sv12[384] * (-1 * sv12[393]);
        sv12[413] = -1 * sv12[384] * (-1 * sv12[394]);
        sv12[414] = sv12[395] + sv12[405];
        sv12[415] = sv12[396] + sv12[406];
        sv12[416] = sv12[397] + sv12[407];
        sv12[417] = sv12[408] + sv12[396];
        sv12[418] = sv12[411] + sv12[397];
        sv12[419] = sv12[386] + sv12[405];
        sv12[420] = sv12[387] + sv12[408];
        sv12[421] = sv12[388] + sv12[411];
        sv12[422] = sv12[387] + sv12[406];
        sv12[423] = sv12[388] + sv12[407];
        sv12[424] = sv12[419] + sv12[414];
        sv12[425] = sv12[420] + sv12[415];
        sv12[426] = sv12[421] + sv12[416];
        sv12[427] = sv12[417] + sv12[422];
        sv12[428] = sv12[418] + sv12[423];
        sv12[429] = sv12[409] + sv12[409];
        sv12[430] = sv12[410] + sv12[412];
        sv12[431] = sv12[413] + sv12[413];
        sv12[432] = sv12[424] * sv12[324];
        sv12[433] = sv12[425] * sv12[324];
        sv12[434] = sv12[426] * sv12[324];
        sv12[435] = sv12[427] * sv12[324];
        sv12[436] = sv12[428] * sv12[324];
        sv12[437] = sv12[429] * sv12[324];
        sv12[438] = sv12[430] * sv12[324];
        sv12[439] = sv12[431] * sv12[324];
        sv12[440] = sv12[401] + sv12[432];
        sv12[441] = sv12[402] + sv12[433];
        sv12[442] = sv12[403] + sv12[434];
        sv12[443] = sv12[404] + sv12[440];
        sv12[444] = sv12[402] + sv12[435];
        sv12[445] = sv12[403] + sv12[436];
        sv12[446] = sv12[336] + sv12[443];
        sv12[447] = sv12[334] + sv12[441];
        sv12[448] = sv12[335] + sv12[442];
        sv12[449] = sv12[337] + sv12[444];
        sv12[450] = sv12[338] + sv12[445];
        sv12[451] = sv12[330] + sv12[437];
        sv12[452] = sv12[331] + sv12[438];
        sv12[453] = sv12[332] + sv12[439];
        sv12[454] = w2_c1 * sp[160];
        sv12[455] = w2_c0 * sp[163];
        sv12[456] = sv12[454] + sv12[455];
        sv12[457] = sp[160] * (sv12[29] / 1.3);
        sv12[458] = sp[163] * (sv12[47] / 1.3);
        sv12[459] = sv12[457] + sv12[458];
        sv12[460] = sv12[456] + -1 * sv12[459];
        sv12[461] = w2_c3 * w2_c3;
        sv12[462] = std::sqrt(1e-8 + sv12[461]);
        sv12[463] = w2_c3 + sv12[462];
        sv12[464] = w1_c4 / (0.5 * sv12[463]);
        sv12[465] = 1.92 * w3_c4 * sv12[464];
        sv12[466] = w3_c4 / (0.5 * sv12[463]);
        sv12[467] = 1.92 * w1_c4 * sv12[466];
        sv12[468] = sv12[465] + sv12[467];
        sv12[469] = sv12[460] + sv12[468];
        sv12[470] = w2_c1 * sp[166];
        sv12[471] = w2_c0 * sp[169];
        sv12[472] = sv12[470] + sv12[471];
        sv12[473] = sp[166] * (sv12[29] / 1.3);
        sv12[474] = sp[169] * (sv12[47] / 1.3);
        sv12[475] = sv12[473] + sv12[474];
        sv12[476] = sv12[472] + -1 * sv12[475];
        sv12[477] = 1.92 * w1_c4 * sv12[464];
        sv12[478] = sv12[476] + sv12[477];
        sv12[479] = w2_c3 * (0.09 * (1.44 * sv12[9]));
        sv12[480] = 2.0 * sv12[374] * sv12[479];
        sv12[481] = sv12[478] + -1 * sv12[480];
        sv12[482] = sv12[469] * sv12[481];
        sv12[483] = sv12[120] / (0.0001 + sv12[26] / 1.3);
        sv12[484] = sv12[26] / 1.3 * sv12[483];
        sv12[485] = -1 * sv12[484] / (0.0001 + sv12[26] / 1.3);
        sv12[486] = sv12[26] / 1.3 * sv12[485];
        sv12[487] = sv12[486] + sv12[484];
        sv12[488] = -1 * sv12[487] + -1 * sv12[486];
        sv12[489] = sv12[488] / (0.0001 + sv12[26] / 1.3);
        sv12[490] = sv12[489] * (1.0 / sv12[483]);
        sv12[491] = sv12[485] * (1.0 / sv12[483]);
        sv12[492] = -1 * sv12[491] / sv12[483];
        sv12[493] = sv12[485] * sv12[492];
        sv12[494] = sv12[490] + sv12[493];
        sv12[495] = -1 * sv12[494] + -1 * sv12[493];
        sv12[496] = sv12[495] / sv12[483];
        sv12[497] = std::exp(-2.0 * sv12[483]);
        sv12[498] = -2.0 * sv12[485] * sv12[497];
        sv12[499] = -2.0 * sv12[485] * sv12[498];
        sv12[500] = -2.0 * sv12[489] * sv12[497];
        sv12[501] = sv12[499] + sv12[500];
        sv12[502] = (1.0 + sv12[497]) / (1.0 + -1 * sv12[497]);
        sv12[503] = -1 * sv12[498] * sv12[502];
        sv12[504] = -1 * sv12[503] + sv12[498];
        sv12[505] = sv12[504] / (1.0 + -1 * sv12[497]);
        sv12[506] = -1 * sv12[498] * sv12[505];
        sv12[507] = -1 * sv12[501] * sv12[502];
        sv12[508] = sv12[506] + sv12[507];
        sv12[509] = sv12[501] + -1 * sv12[508];
        sv12[510] = sv12[509] + -1 * sv12[506];
        sv12[511] = sv12[510] / (1.0 + -1 * sv12[497]);
        sv12[512] = -1 * sv12[496] + sv12[511];
        sv12[513] = sv12[512] * (2.0 * sp[145]);
        sv12[514] = sv12[513] / sv12[119];
        sv12[515] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[483]) * (2.0 * sp[145]);
        sv12[516] = sv12[515] * (2.0 * sp[145]);
        sv12[517] = sv12[516] / (0.0001 + sv12[26] / 1.3);
        sv12[518] = sv12[26] / 1.3 * sv12[517];
        sv12[519] = 0.5 * (-0.004435991517475 * sv12[485]) * (2.0 * sp[145]);
        sv12[520] = sv12[519] * (2.0 * sp[145]);
        sv12[521] = -1 * sv12[518] + sv12[520];
        sv12[522] = sv12[521] / (0.0001 + sv12[26] / 1.3);
        sv12[523] = sv12[26] / 1.3 * sv12[522];
        sv12[524] = sv12[523] + sv12[518];
        sv12[525] = 0.5 * (-0.004435991517475 * sv12[489]) * (2.0 * sp[145]);
        sv12[526] = sv12[525] * (2.0 * sp[145]);
        sv12[527] = -1 * sv12[524] + sv12[526];
        sv12[528] = sv12[527] + -1 * sv12[523];
        sv12[529] = sv12[528] / (0.0001 + sv12[26] / 1.3);
        sv12[530] = (sv12[483] >= 0.1 ? sv12[514] : sv12[529]);
        sv12[531] = sv12[482] * sv12[530];
        sv12[532] = sp[166] * (sv12[176] / 1.3);
        sv12[533] = sp[166] * (sv12[177] / 1.3);
        sv12[534] = sp[169] * (sv12[188] / 1.3);
        sv12[535] = sp[169] * (sv12[189] / 1.3);
        sv12[536] = sv12[532] + sv12[534];
        sv12[537] = sv12[535] + sv12[533];
        sv12[538] = -1 * sv12[475] + -1 * sv12[480];
        sv12[539] = sv12[469] * sv12[538];
        sv12[540] = sv12[469] * (-1 * sv12[536]);
        sv12[541] = sv12[469] * (-1 * sv12[537]);
        sv12[542] = sp[160] * (sv12[176] / 1.3);
        sv12[543] = sp[160] * (sv12[177] / 1.3);
        sv12[544] = sp[163] * (sv12[188] / 1.3);
        sv12[545] = sp[163] * (sv12[189] / 1.3);
        sv12[546] = sv12[542] + sv12[544];
        sv12[547] = sv12[545] + sv12[543];
        sv12[548] = sv12[481] * (-1 * sv12[459]);
        sv12[549] = sv12[481] * (-1 * sv12[546]);
        sv12[550] = sv12[481] * (-1 * sv12[547]);
        sv12[551] = sv12[539] + sv12[548];
        sv12[552] = sv12[540] + sv12[549];
        sv12[553] = sv12[541] + sv12[550];
        sv12[554] = -1 * sv12[492] + sv12[505];
        sv12[555] = sv12[554] * (2.0 * sp[145]);
        sv12[556] = sv12[555] / sv12[119];
        sv12[557] = (sv12[483] >= 0.1 ? sv12[556] : sv12[522]);
        sv12[558] = sv12[551] * sv12[557];
        sv12[559] = sv12[552] * sv12[557];
        sv12[560] = sv12[553] * sv12[557];
        sv12[561] = sv12[531] + sv12[558];
        sv12[562] = sv12[538] * (-1 * sv12[459]);
        sv12[563] = sv12[538] * (-1 * sv12[546]);
        sv12[564] = sv12[538] * (-1 * sv12[547]);
        sv12[565] = -1 * sv12[459] * (-1 * sv12[536]);
        sv12[566] = -1 * sv12[536] * (-1 * sv12[546]);
        sv12[567] = -1 * sv12[547] * (-1 * sv12[536]);
        sv12[568] = -1 * sv12[459] * (-1 * sv12[537]);
        sv12[569] = -1 * sv12[537] * (-1 * sv12[546]);
        sv12[570] = -1 * sv12[537] * (-1 * sv12[547]);
        sv12[571] = sv12[548] + sv12[562];
        sv12[572] = sv12[549] + sv12[563];
        sv12[573] = sv12[550] + sv12[564];
        sv12[574] = sv12[565] + sv12[549];
        sv12[575] = sv12[568] + sv12[550];
        sv12[576] = sv12[539] + sv12[562];
        sv12[577] = sv12[540] + sv12[565];
        sv12[578] = sv12[541] + sv12[568];
        sv12[579] = sv12[540] + sv12[563];
        sv12[580] = sv12[541] + sv12[564];
        sv12[581] = sv12[576] + sv12[571];
        sv12[582] = sv12[577] + sv12[572];
        sv12[583] = sv12[578] + sv12[573];
        sv12[584] = sv12[574] + sv12[579];
        sv12[585] = sv12[575] + sv12[580];
        sv12[586] = sv12[566] + sv12[566];
        sv12[587] = sv12[567] + sv12[569];
        sv12[588] = sv12[570] + sv12[570];
        sv12[589] = -1 * (1.0 / sv12[483]) + sv12[502];
        sv12[590] = sv12[589] * (2.0 * sp[145]);
        sv12[591] = sv12[590] / sv12[119];
        sv12[592] = (sv12[483] >= 0.1 ? sv12[591] : sv12[517]);
        sv12[593] = sv12[581] * sv12[592];
        sv12[594] = sv12[582] * sv12[592];
        sv12[595] = sv12[583] * sv12[592];
        sv12[596] = sv12[584] * sv12[592];
        sv12[597] = sv12[585] * sv12[592];
        sv12[598] = sv12[586] * sv12[592];
        sv12[599] = sv12[587] * sv12[592];
        sv12[600] = sv12[588] * sv12[592];
        sv12[601] = sv12[558] + sv12[593];
        sv12[602] = sv12[559] + sv12[594];
        sv12[603] = sv12[560] + sv12[595];
        sv12[604] = sv12[561] + sv12[601];
        sv12[605] = sv12[559] + sv12[596];
        sv12[606] = sv12[560] + sv12[597];
        sv12[607] = sv12[446] + sv12[604];
        sv12[608] = sv12[447] + sv12[602];
        sv12[609] = sv12[448] + sv12[603];
        sv12[610] = sv12[449] + sv12[605];
        sv12[611] = sv12[450] + sv12[606];
        sv12[612] = sv12[451] + sv12[598];
        sv12[613] = sv12[452] + sv12[599];
        sv12[614] = sv12[453] + sv12[600];
        sv12[615] = w1_c3 * (0.09 * (1.44 * sv12[9]));
        sv12[616] = 2.0 * sv12[374] * sv12[615];
        sv12[617] = w3_c4 * sv12[616];
        sv12[618] = sv12[607] + -1 * sv12[617];
        sv12[619] = w1_c3 * (0.09 * sv12[9]);
        sv12[620] = w1_c3 * sv12[619];
        sv12[621] = w1_c4 * w1_c4;
        sv12[622] = std::sqrt(1e-8 + sv12[621]);
        sv12[623] = w1_c4 + sv12[622];
        sv12[624] = sv12[620] / (0.5 * sv12[623]);
        sv12[625] = 2.0 * sv12[374] * sv12[624];
        sv12[626] = w3_c3 * sv12[625];
        sv12[627] = sv12[618] + -1 * sv12[626];
        sv12[628] = sp[172] * sv12[624];
        sv12[629] = sv12[627] + sv12[628];
        sv12[630] = sp[175] * (sv12[624] / 1.3);
        sv12[631] = sv12[629] + sv12[630];
        sv12[632] = sv12[30] / 2 * (sv12[67] / 2);
        sv12[633] = sv12[51] / 2 * (sv12[74] / 2);
        sv12[634] = sv12[632] + sv12[633];
        sv12[635] = sv12[91] / 2 * (sv12[107] / 2);
        sv12[636] = sv12[635] + sv12[633];
        sv12[637] = sv12[634] + sv12[636];
        sv12[638] = sv12[637] * (2.0 * sv12[26]);
        sv12[639] = sv12[631] + sv12[638];
        sv12[640] = sv12[639] * sp[176];
        sv12[641] = sv12[608] * sp[176];
        sv12[642] = sv12[609] * sp[176];
        sv12[643] = sv12[610] * sp[176];
        sv12[644] = sv12[611] * sp[176];
        sv12[645] = sv12[612] * sp[176];
        sv12[646] = sv12[613] * sp[176];
        sv12[647] = sv12[614] * sp[176];
        const double fw0 = sv12[647] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP0[j] += fw0 * FE3_C0_D01_Q12[0][0][j];
        const double fw1 = sv12[642] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP1[j] += fw1 * FE3_C0_Q12[0][iq][j];
        const double fw2 = sv12[646] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP2[j] += fw2 * FE3_C0_D01_Q12[0][0][j];
        const double fw3 = sv12[644] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP3[i] += fw3 * FE3_C0_Q12[0][iq][i];
        const double fw4 = sv12[640] * weights12[iq];
        alignas(32) double TF0[3];
        for (int i = 0; i < 3; ++i)
            TF0[i] = fw4 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF0[i][j] += TF0[i] * FE3_C0_Q12[0][iq][j];
        const double fw5 = sv12[643] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP4[i] += fw5 * FE3_C0_Q12[0][iq][i];
        const double fw6 = sv12[641] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP5[j] += fw6 * FE3_C0_Q12[0][iq][j];
        const double fw7 = sv12[645] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP6[j] += fw7 * FE3_C0_D01_Q12[0][0][j];
    }
    std::fill(A, A + 9, 0.0);
    static const int DM0[2] = { 0, 2 };
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * i + j] += FE3_C0_D01_Q12[0][0][i] * TP0[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * i + j] += FE3_C0_D01_Q12[0][0][i] * TP1[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * i + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP2[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * i + j] += FE3_C0_D01_Q12[0][0][j] * TP3[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * i + j] += BF0[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * i + DM0[j]] += FE3_C0_D01_Q12[0][0][j] * TP4[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM0[i] + j] += FE3_C0_D01_Q12[0][0][i] * TP2[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM0[i] + j] += FE3_C0_D01_Q12[0][0][i] * TP5[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM0[i] + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP6[j];
  }

};


class ranspseudotimestepping_exterior_facet_integral_6_3: public ufc::exterior_facet_integral
{
public:

  ranspseudotimestepping_exterior_facet_integral_6_3() : ufc::exterior_facet_integral()
  {

  }

  ~ranspseudotimestepping_exterior_facet_integral_6_3() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 23
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.1739274225687268, 0.3260725774312731, 0.3260725774312731, 0.1739274225687268 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE35_C0_D01_F_Q4[3][4][5] =
        { { { 1.0, -0.7222726231881047, 3.722272623188091, -0.2777273768118826, -3.722272623188107 },
            { 1.0, 0.3200379128302891, 2.679962087169697, -1.320037912830275, -2.679962087169714 },
            { 1.0, 1.679962087169715, 1.320037912830271, -2.679962087169701, -1.320037912830287 },
            { 1.0, 2.722272623188108, 0.2777273768118786, -3.722272623188096, -0.2777273768118922 } },
          { { -2.72227262318811, -0.722272623188105, 0.0, 3.444545246376218, 0.0 },
            { -1.679962087169718, 0.3200379128302888, 0.0, 1.359924174339433, 0.0 },
            { -0.3200379128302928, 1.679962087169715, 0.0, -1.359924174339417, 0.0 },
            { 0.7222726231881, 2.722272623188108, 0.0, -3.444545246376202, 0.0 } },
          { { -2.72227262318811, -1.0, 0.2777273768118848, 3.722272623188112, -0.2777273768118925 },
            { -1.679962087169717, -1.0, 1.320037912830276, 2.679962087169721, -1.320037912830287 },
            { -0.3200379128302917, -1.0, 2.6799620871697, 1.320037912830298, -2.679962087169714 },
            { 0.7222726231880999, -1.0, 3.722272623188092, 0.2777273768119067, -3.722272623188106 } } };
    alignas(32) static const double FE35_C0_D10_F_Q4[3][4][5] =
        { { { 1.0, 2.722272623188104, 0.2777273768118936, -0.2777273768118936, -3.722272623188106 },
            { 1.0, 1.679962087169712, 1.320037912830285, -1.320037912830285, -2.679962087169713 },
            { 1.0, 0.3200379128302879, 2.679962087169708, -2.679962087169708, -1.320037912830288 },
            { 1.0, -0.7222726231881051, 3.722272623188099, -3.722272623188099, -0.2777273768118945 } },
          { { -2.722272623188107, -1.0, 0.277727376811893, -0.277727376811893, 3.72227262318811 },
            { -1.679962087169713, -1.0, 1.320037912830285, -1.320037912830285, 2.679962087169716 },
            { -0.3200379128302884, -1.0, 2.679962087169709, -2.679962087169709, 1.320037912830289 },
            { 0.7222726231881045, -1.0, 3.722272623188099, -3.722272623188099, 0.2777273768118963 } },
          { { -2.722272623188106, -0.7222726231881095, 0.0, 0.0, 3.444545246376216 },
            { -1.679962087169712, 0.3200379128302852, 0.0, 0.0, 1.359924174339427 },
            { -0.3200379128302857, 1.679962087169712, 0.0, 0.0, -1.359924174339426 },
            { 0.7222726231881069, 2.722272623188104, 0.0, 0.0, -3.444545246376211 } } };
    alignas(32) static const double FE35_C0_F_Q4[3][4][6] =
        { { { 0.0, 0.8013460293699309, -0.05979028222412166, 0.2584442528541909, 0.0, 0.0 },
            { 0.0, 0.2277840767909521, -0.1121969667939041, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.1121969667939041, 0.227784076790952, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.05979028222412169, 0.8013460293699309, 0.2584442528541908, 0.0, 0.0 } },
          { { 0.8013460293699309, 0.0, -0.05979028222412166, 0.0, 0.2584442528541908, 0.0 },
            { 0.2277840767909521, 0.0, -0.1121969667939041, 0.0, 0.8844128900029518, 0.0 },
            { -0.1121969667939041, 0.0, 0.2277840767909521, 0.0, 0.8844128900029519, 0.0 },
            { -0.05979028222412166, 0.0, 0.8013460293699309, 0.0, 0.2584442528541906, 0.0 } },
          { { 0.8013460293699309, -0.05979028222412169, 0.0, 0.0, 0.0, 0.2584442528541908 },
            { 0.2277840767909521, -0.1121969667939041, 0.0, 0.0, 0.0, 0.8844128900029519 },
            { -0.1121969667939041, 0.2277840767909522, 0.0, 0.0, 0.0, 0.884412890002952 },
            { -0.05979028222412169, 0.8013460293699308, 0.0, 0.0, 0.0, 0.2584442528541909 } } };
    alignas(32) static const double FE37_C2_D01_F_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE37_C2_F_Q4[3][4][3] =
        { { { 0.0, 0.9305681557970263, 0.06943184420297369 },
            { 0.0, 0.6699905217924281, 0.3300094782075718 },
            { 0.0, 0.3300094782075719, 0.6699905217924279 },
            { 0.0, 0.06943184420297382, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.0, 0.06943184420297369 },
            { 0.6699905217924281, 0.0, 0.3300094782075718 },
            { 0.3300094782075719, 0.0, 0.669990521792428 },
            { 0.06943184420297382, 0.0, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.06943184420297367, 0.0 },
            { 0.6699905217924281, 0.3300094782075718, 0.0 },
            { 0.3300094782075719, 0.6699905217924281, 0.0 },
            { 0.06943184420297374, 0.9305681557970263, 0.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE37_C2_D01_F_Q4[0][0][0] + coordinate_dofs[2] * FE37_C2_D01_F_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE37_C2_D01_F_Q4[0][0][0] + coordinate_dofs[5] * FE37_C2_D01_F_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE37_C2_D01_F_Q4[0][0][0] + coordinate_dofs[4] * FE37_C2_D01_F_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE37_C2_D01_F_Q4[0][0][0] + coordinate_dofs[3] * FE37_C2_D01_F_Q4[0][0][1];
    const double w1_d1_c3 = w[1][15] * FE37_C2_D01_F_Q4[0][0][0] + w[1][17] * FE37_C2_D01_F_Q4[0][0][1];
    double w1_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c3 += w[1][ic + 15] * FE37_C2_D01_F_Q4[0][0][ic];
    const double w3_d1_c3 = w[3][15] * FE37_C2_D01_F_Q4[0][0][0] + w[3][17] * FE37_C2_D01_F_Q4[0][0][1];
    double w3_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c3 += w[3][ic + 15] * FE37_C2_D01_F_Q4[0][0][ic];
    const double w1_d1_c4 = w[1][18] * FE37_C2_D01_F_Q4[0][0][0] + w[1][20] * FE37_C2_D01_F_Q4[0][0][1];
    double w1_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c4 += w[1][ic + 18] * FE37_C2_D01_F_Q4[0][0][ic];
    const double w3_d1_c4 = w[3][18] * FE37_C2_D01_F_Q4[0][0][0] + w[3][20] * FE37_C2_D01_F_Q4[0][0][1];
    double w3_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c4 += w[3][ic + 18] * FE37_C2_D01_F_Q4[0][0][ic];
    alignas(32) double sp[82];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = triangle_reference_facet_normals[facet][1] * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = triangle_reference_facet_normals[facet][0] * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet][0] * sp[9];
    sp[11] = -1 * J_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[20] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[21] = sp[19] + sp[20];
    sp[22] = std::sqrt(sp[21]);
    sp[23] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[24] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[25] = sp[23] + sp[24];
    sp[26] = std::sqrt(sp[25]);
    sp[27] = sp[22] * sp[26];
    sp[28] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[29] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[30] = sp[28] + sp[29];
    sp[31] = std::sqrt(sp[30]);
    sp[32] = sp[27] * sp[31];
    sp[33] = triangle_reference_cell_volume * sp[2];
    sp[34] = std::abs(sp[33]);
    sp[35] = sp[32] / (4.0 * sp[34]);
    sp[36] = w1_d1_c3 * sp[3];
    sp[37] = w1_d0_c3 * sp[5];
    sp[38] = sp[36] + sp[37];
    sp[39] = sp[38] * sp[17];
    sp[40] = w1_d0_c3 * sp[9];
    sp[41] = w1_d1_c3 * sp[11];
    sp[42] = sp[40] + sp[41];
    sp[43] = sp[42] * sp[18];
    sp[44] = sp[39] + sp[43];
    sp[45] = w3_d1_c3 * sp[3];
    sp[46] = w3_d0_c3 * sp[5];
    sp[47] = sp[45] + sp[46];
    sp[48] = sp[47] * sp[17];
    sp[49] = w3_d0_c3 * sp[9];
    sp[50] = w3_d1_c3 * sp[11];
    sp[51] = sp[49] + sp[50];
    sp[52] = sp[51] * sp[18];
    sp[53] = sp[48] + sp[52];
    sp[54] = w1_d1_c4 * sp[3];
    sp[55] = w1_d0_c4 * sp[5];
    sp[56] = sp[54] + sp[55];
    sp[57] = sp[56] * sp[17];
    sp[58] = w1_d0_c4 * sp[9];
    sp[59] = w1_d1_c4 * sp[11];
    sp[60] = sp[58] + sp[59];
    sp[61] = sp[60] * sp[18];
    sp[62] = sp[57] + sp[61];
    sp[63] = w3_d1_c4 * sp[3];
    sp[64] = w3_d0_c4 * sp[5];
    sp[65] = sp[63] + sp[64];
    sp[66] = sp[65] * sp[17];
    sp[67] = w3_d0_c4 * sp[9];
    sp[68] = w3_d1_c4 * sp[11];
    sp[69] = sp[67] + sp[68];
    sp[70] = sp[69] * sp[18];
    sp[71] = sp[66] + sp[70];
    sp[72] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[73] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[74] = sp[72] + sp[73];
    sp[75] = sp[74] * sp[74];
    sp[76] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[77] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[78] = sp[76] + sp[77];
    sp[79] = sp[78] * sp[78];
    sp[80] = sp[75] + sp[79];
    sp[81] = std::sqrt(sp[80]);
    alignas(32) double BF0[3][3] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w3_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c4 += w[3][ic + 18] * FE37_C2_F_Q4[facet][iq][ic];
        double w1_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c4 += w[1][ic + 18] * FE37_C2_F_Q4[facet][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE35_C0_F_Q4[facet][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE35_C0_F_Q4[facet][iq][ic];
        double w1_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c3 += w[1][ic + 15] * FE37_C2_F_Q4[facet][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4 += w[4][ic] * FE37_C2_F_Q4[facet][iq][ic];
        double w3_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c3 += w[3][ic + 15] * FE37_C2_F_Q4[facet][iq][ic];
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c0 += w[3][ic] * FE35_C0_F_Q4[facet][iq][ic];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c1 += w[3][ic + 6] * FE35_C0_F_Q4[facet][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE37_C2_F_Q4[facet][iq][ic];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE37_C2_F_Q4[facet][iq][ic];
        const double w1_d1_c0 = w[1][0] * FE35_C0_D01_F_Q4[facet][iq][0] + w[1][2] * FE35_C0_D01_F_Q4[facet][iq][1] + w[1][3] * FE35_C0_D01_F_Q4[facet][iq][2] + w[1][4] * FE35_C0_D01_F_Q4[facet][iq][3] + w[1][5] * FE35_C0_D01_F_Q4[facet][iq][4];
        const double w1_d0_c0 = w[1][0] * FE35_C0_D10_F_Q4[facet][iq][0] + w[1][1] * FE35_C0_D10_F_Q4[facet][iq][1] + w[1][3] * FE35_C0_D10_F_Q4[facet][iq][2] + w[1][4] * FE35_C0_D10_F_Q4[facet][iq][3] + w[1][5] * FE35_C0_D10_F_Q4[facet][iq][4];
        const double w1_d0_c1 = w[1][6] * FE35_C0_D10_F_Q4[facet][iq][0] + w[1][7] * FE35_C0_D10_F_Q4[facet][iq][1] + w[1][9] * FE35_C0_D10_F_Q4[facet][iq][2] + w[1][10] * FE35_C0_D10_F_Q4[facet][iq][3] + w[1][11] * FE35_C0_D10_F_Q4[facet][iq][4];
        const double w1_d1_c1 = w[1][6] * FE35_C0_D01_F_Q4[facet][iq][0] + w[1][8] * FE35_C0_D01_F_Q4[facet][iq][1] + w[1][9] * FE35_C0_D01_F_Q4[facet][iq][2] + w[1][10] * FE35_C0_D01_F_Q4[facet][iq][3] + w[1][11] * FE35_C0_D01_F_Q4[facet][iq][4];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c0 += w[1][ic] * FE35_C0_F_Q4[facet][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c1 += w[1][ic + 6] * FE35_C0_F_Q4[facet][iq][ic];
        const double w3_d1_c0 = w[3][0] * FE35_C0_D01_F_Q4[facet][iq][0] + w[3][2] * FE35_C0_D01_F_Q4[facet][iq][1] + w[3][3] * FE35_C0_D01_F_Q4[facet][iq][2] + w[3][4] * FE35_C0_D01_F_Q4[facet][iq][3] + w[3][5] * FE35_C0_D01_F_Q4[facet][iq][4];
        const double w3_d0_c0 = w[3][0] * FE35_C0_D10_F_Q4[facet][iq][0] + w[3][1] * FE35_C0_D10_F_Q4[facet][iq][1] + w[3][3] * FE35_C0_D10_F_Q4[facet][iq][2] + w[3][4] * FE35_C0_D10_F_Q4[facet][iq][3] + w[3][5] * FE35_C0_D10_F_Q4[facet][iq][4];
        const double w3_d0_c1 = w[3][6] * FE35_C0_D10_F_Q4[facet][iq][0] + w[3][7] * FE35_C0_D10_F_Q4[facet][iq][1] + w[3][9] * FE35_C0_D10_F_Q4[facet][iq][2] + w[3][10] * FE35_C0_D10_F_Q4[facet][iq][3] + w[3][11] * FE35_C0_D10_F_Q4[facet][iq][4];
        const double w3_d1_c1 = w[3][6] * FE35_C0_D01_F_Q4[facet][iq][0] + w[3][8] * FE35_C0_D01_F_Q4[facet][iq][1] + w[3][9] * FE35_C0_D01_F_Q4[facet][iq][2] + w[3][10] * FE35_C0_D01_F_Q4[facet][iq][3] + w[3][11] * FE35_C0_D01_F_Q4[facet][iq][4];
        alignas(32) double sv4[111];
        sv4[0] = w2_c1 * sp[17];
        sv4[1] = w2_c0 * sp[18];
        sv4[2] = sv4[0] + sv4[1];
        sv4[3] = std::tanh(100.0 * sv4[2]);
        sv4[4] = std::exp(w4);
        sv4[5] = w1_c3 * (0.09 * sv4[4]);
        sv4[6] = w1_c3 * sv4[5];
        sv4[7] = w1_c4 * w1_c4;
        sv4[8] = std::sqrt(1e-8 + sv4[7]);
        sv4[9] = w1_c4 + sv4[8];
        sv4[10] = sv4[6] / (0.5 * sv4[9]);
        sv4[11] = 100000.0 * (0.5 + -1 * (0.5 * sv4[3])) * (sv4[10] / 1.3);
        sv4[12] = sv4[11] * (1.0 / (2.0 * sp[35]));
        sv4[13] = w1_c4 * sv4[12];
        sv4[14] = w3_c4 * sv4[13];
        sv4[15] = 100000.0 * (0.5 + -1 * (0.5 * sv4[3])) * sv4[10];
        sv4[16] = sv4[15] * (1.0 / (2.0 * sp[35]));
        sv4[17] = w1_c3 * sv4[16];
        sv4[18] = w3_c3 * sv4[17];
        sv4[19] = sv4[14] + sv4[18];
        sv4[20] = (0.5 + -1 * (0.5 * sv4[3])) * sv4[10];
        sv4[21] = sp[44] * sv4[20];
        sv4[22] = w3_c3 * sv4[21];
        sv4[23] = sv4[19] + -1 * sv4[22];
        sv4[24] = sp[53] * sv4[20];
        sv4[25] = w1_c3 * sv4[24];
        sv4[26] = sv4[23] + -1 * sv4[25];
        sv4[27] = (0.5 + -1 * (0.5 * sv4[3])) * (sv4[10] / 1.3);
        sv4[28] = sp[62] * sv4[27];
        sv4[29] = w3_c3 * sv4[28];
        sv4[30] = sv4[26] + -1 * sv4[29];
        sv4[31] = sp[71] * sv4[27];
        sv4[32] = w1_c4 * sv4[31];
        sv4[33] = sv4[30] + -1 * sv4[32];
        sv4[34] = w3_c0 * (-1 * sp[17]);
        sv4[35] = w3_c1 * sp[18];
        sv4[36] = sv4[34] + sv4[35];
        sv4[37] = w2_c3 * (0.09 * sv4[4]);
        sv4[38] = w2_c3 * sv4[37];
        sv4[39] = w2_c4 * w2_c4;
        sv4[40] = std::sqrt(1e-8 + sv4[39]);
        sv4[41] = w2_c4 + sv4[40];
        sv4[42] = sv4[38] / (0.5 * sv4[41]);
        sv4[43] = w1_d1_c0 * sp[3];
        sv4[44] = w1_d0_c0 * sp[5];
        sv4[45] = sv4[43] + sv4[44];
        sv4[46] = w1_d0_c1 * sp[9];
        sv4[47] = w1_d1_c1 * sp[11];
        sv4[48] = sv4[46] + sv4[47];
        sv4[49] = sv4[45] + sv4[48];
        sv4[50] = 2.0 * sv4[42] * (sv4[49] / 2);
        sv4[51] = sv4[50] * sp[17];
        sv4[52] = w1_d0_c0 * sp[9];
        sv4[53] = w1_d1_c0 * sp[11];
        sv4[54] = sv4[52] + sv4[53];
        sv4[55] = sv4[54] + sv4[54];
        sv4[56] = 2.0 * sv4[42] * (sv4[55] / 2);
        sv4[57] = sv4[56] * sp[18];
        sv4[58] = sv4[51] + sv4[57];
        sv4[59] = sv4[58] * (-1 * sp[17]);
        sv4[60] = w1_d1_c1 * sp[3];
        sv4[61] = w1_d0_c1 * sp[5];
        sv4[62] = sv4[60] + sv4[61];
        sv4[63] = sv4[62] + sv4[62];
        sv4[64] = 2.0 * sv4[42] * (sv4[63] / 2);
        sv4[65] = sv4[64] * sp[17];
        sv4[66] = sv4[50] * sp[18];
        sv4[67] = sv4[65] + sv4[66];
        sv4[68] = sv4[67] * sp[18];
        sv4[69] = sv4[59] + sv4[68];
        sv4[70] = sv4[36] * sv4[69];
        sv4[71] = sv4[33] + -1 * sv4[70];
        sv4[72] = w1_c0 + -1 * w[0][0];
        sv4[73] = sv4[72] * (-1 * sp[17]);
        sv4[74] = w1_c1 + -1 * w[0][1];
        sv4[75] = sv4[74] * sp[18];
        sv4[76] = sv4[73] + sv4[75];
        sv4[77] = w3_d1_c0 * sp[3];
        sv4[78] = w3_d0_c0 * sp[5];
        sv4[79] = sv4[77] + sv4[78];
        sv4[80] = w3_d0_c1 * sp[9];
        sv4[81] = w3_d1_c1 * sp[11];
        sv4[82] = sv4[80] + sv4[81];
        sv4[83] = sv4[79] + sv4[82];
        sv4[84] = 2.0 * sv4[42] * (sv4[83] / 2);
        sv4[85] = sv4[84] * sp[17];
        sv4[86] = w3_d0_c0 * sp[9];
        sv4[87] = w3_d1_c0 * sp[11];
        sv4[88] = sv4[86] + sv4[87];
        sv4[89] = sv4[88] + sv4[88];
        sv4[90] = 2.0 * sv4[42] * (sv4[89] / 2);
        sv4[91] = sv4[90] * sp[18];
        sv4[92] = sv4[85] + sv4[91];
        sv4[93] = sv4[92] * (-1 * sp[17]);
        sv4[94] = w3_d1_c1 * sp[3];
        sv4[95] = w3_d0_c1 * sp[5];
        sv4[96] = sv4[94] + sv4[95];
        sv4[97] = sv4[96] + sv4[96];
        sv4[98] = 2.0 * sv4[42] * (sv4[97] / 2);
        sv4[99] = sv4[98] * sp[17];
        sv4[100] = sv4[84] * sp[18];
        sv4[101] = sv4[99] + sv4[100];
        sv4[102] = sv4[101] * sp[18];
        sv4[103] = sv4[93] + sv4[102];
        sv4[104] = sv4[76] * sv4[103];
        sv4[105] = sv4[71] + -1 * sv4[104];
        sv4[106] = 100000.0 * sv4[42] * (1.0 / (2.0 * sp[35]));
        sv4[107] = sv4[76] * sv4[106];
        sv4[108] = sv4[36] * sv4[107];
        sv4[109] = sv4[105] + sv4[108];
        sv4[110] = sv4[109] * sp[81];
        const double fw0 = sv4[110] * weights4[iq];
        alignas(32) double TF0[3];
        for (int i = 0; i < 3; ++i)
            TF0[i] = fw0 * FE37_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF0[i][j] += TF0[i] * FE37_C2_F_Q4[facet][iq][j];
    }
    std::fill(A, A + 9, 0.0);
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * i + j] += BF0[i][j];
  }

};


class ranspseudotimestepping_cell_integral_7_otherwise: public ufc::cell_integral
{
public:

  ranspseudotimestepping_cell_integral_7_otherwise() : ufc::cell_integral()
  {

  }

  ~ranspseudotimestepping_cell_integral_7_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({false, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 209
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    alignas(32) static const double FE96_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE96_C0_D02_Q12[1][1][3] = { { { 3.999999999999998, 4.000000000000004, -7.999999999999995 } } };
    alignas(32) static const double FE96_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE96_C0_D11_Q12[1][1][4] = { { { 4.0, 3.999999999999997, -3.999999999999997, -4.000000000000005 } } };
    alignas(32) static const double FE96_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803568, 0.2205142679699366 },
            { -0.05512856699248404, -0.05512856699248409, 0.6533077030470597, 0.2205142679699364, 0.2205142679699362, 0.01592089499803596 },
            { 0.6533077030470594, -0.05512856699248415, -0.05512856699248411, 0.01592089499803581, 0.2205142679699364, 0.2205142679699366 },
            { -0.1249989825350975, 0.001430579517788794, -0.1249989825350975, 0.4999959301403892, 0.2485755252716258, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788821, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880001, 0.173768363654174, -0.1177151633084292, 0.790160442765823, 0.06597478591860526, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880001, 0.1353078281686267, 0.06597478591860512, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860538 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880001, 0.06597478591860524, 0.1353078281686266, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860538 },
            { 0.1737683636541741, -0.04749625719880015, -0.1177151633084292, 0.06597478591860535, 0.7901604427658229, 0.1353078281686269 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q12[0][0][1];
    const double w4_d1 = w[4][0] * FE3_C0_D01_Q12[0][0][0] + w[4][2] * FE3_C0_D01_Q12[0][0][1];
    double w4_d0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w4_d0 += w[4][ic] * FE3_C0_D01_Q12[0][0][ic];
    const double w3_d1_c3 = w[3][15] * FE3_C0_D01_Q12[0][0][0] + w[3][17] * FE3_C0_D01_Q12[0][0][1];
    double w3_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c3 += w[3][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w3_d1_c4 = w[3][18] * FE3_C0_D01_Q12[0][0][0] + w[3][20] * FE3_C0_D01_Q12[0][0][1];
    double w3_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c4 += w[3][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d11_c1 = w[2][6] * FE96_C0_D02_Q12[0][0][0] + w[2][8] * FE96_C0_D02_Q12[0][0][1] + w[2][10] * FE96_C0_D02_Q12[0][0][2];
    const double w2_d01_c1 = w[2][6] * FE96_C0_D11_Q12[0][0][0] + w[2][9] * FE96_C0_D11_Q12[0][0][1] + w[2][10] * FE96_C0_D11_Q12[0][0][2] + w[2][11] * FE96_C0_D11_Q12[0][0][3];
    const double w2_d00_c1 = w[2][6] * FE96_C0_D02_Q12[0][0][0] + w[2][7] * FE96_C0_D02_Q12[0][0][1] + w[2][11] * FE96_C0_D02_Q12[0][0][2];
    const double w2_d01_c0 = w[2][0] * FE96_C0_D11_Q12[0][0][0] + w[2][3] * FE96_C0_D11_Q12[0][0][1] + w[2][4] * FE96_C0_D11_Q12[0][0][2] + w[2][5] * FE96_C0_D11_Q12[0][0][3];
    const double w2_d11_c0 = w[2][0] * FE96_C0_D02_Q12[0][0][0] + w[2][2] * FE96_C0_D02_Q12[0][0][1] + w[2][4] * FE96_C0_D02_Q12[0][0][2];
    const double w2_d00_c0 = w[2][0] * FE96_C0_D02_Q12[0][0][0] + w[2][1] * FE96_C0_D02_Q12[0][0][1] + w[2][5] * FE96_C0_D02_Q12[0][0][2];
    const double w2_d1_c2 = w[2][12] * FE3_C0_D01_Q12[0][0][0] + w[2][14] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c2 += w[2][ic + 12] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c3 = w[2][15] * FE3_C0_D01_Q12[0][0][0] + w[2][17] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c3 += w[2][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c4 = w[2][18] * FE3_C0_D01_Q12[0][0][0] + w[2][20] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c4 += w[2][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    alignas(32) double sp[191];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = w4_d1 * sp[3];
    sp[8] = w4_d0 * sp[4];
    sp[9] = sp[7] + sp[8];
    sp[10] = w3_d1_c3 * sp[3];
    sp[11] = w3_d0_c3 * sp[4];
    sp[12] = sp[10] + sp[11];
    sp[13] = w3_d1_c4 * sp[3];
    sp[14] = w3_d0_c4 * sp[4];
    sp[15] = sp[13] + sp[14];
    sp[16] = sp[3] + sp[3];
    sp[17] = sp[4] + sp[4];
    sp[18] = sp[3] * sp[3];
    sp[19] = sp[3] * sp[4];
    sp[20] = sp[4] * sp[4];
    sp[21] = sp[19] + sp[19];
    sp[22] = sp[18] + sp[18];
    sp[23] = sp[21] + sp[21];
    sp[24] = sp[20] + sp[20];
    sp[25] = w4_d0 * sp[5];
    sp[26] = w4_d1 * sp[6];
    sp[27] = sp[25] + sp[26];
    sp[28] = w3_d0_c3 * sp[5];
    sp[29] = w3_d1_c3 * sp[6];
    sp[30] = sp[28] + sp[29];
    sp[31] = w3_d0_c4 * sp[5];
    sp[32] = w3_d1_c4 * sp[6];
    sp[33] = sp[31] + sp[32];
    sp[34] = sp[3] * sp[5];
    sp[35] = sp[3] * sp[6];
    sp[36] = sp[4] * sp[6];
    sp[37] = sp[5] * sp[4];
    sp[38] = sp[34] + sp[36];
    sp[39] = sp[5] * sp[6];
    sp[40] = sp[5] * sp[5];
    sp[41] = sp[6] * sp[6];
    sp[42] = sp[39] + sp[39];
    sp[43] = w2_d11_c1 * sp[3];
    sp[44] = w2_d01_c1 * sp[4];
    sp[45] = sp[43] + sp[44];
    sp[46] = sp[45] * sp[3];
    sp[47] = w2_d01_c1 * sp[3];
    sp[48] = w2_d00_c1 * sp[4];
    sp[49] = sp[47] + sp[48];
    sp[50] = sp[49] * sp[4];
    sp[51] = sp[46] + sp[50];
    sp[52] = sp[51] + sp[51];
    sp[53] = w2_d01_c0 * sp[5];
    sp[54] = w2_d11_c0 * sp[6];
    sp[55] = sp[53] + sp[54];
    sp[56] = sp[55] * sp[3];
    sp[57] = w2_d00_c0 * sp[5];
    sp[58] = w2_d01_c0 * sp[6];
    sp[59] = sp[57] + sp[58];
    sp[60] = sp[59] * sp[4];
    sp[61] = sp[56] + sp[60];
    sp[62] = w2_d00_c1 * sp[5];
    sp[63] = w2_d01_c1 * sp[6];
    sp[64] = sp[62] + sp[63];
    sp[65] = sp[64] * sp[5];
    sp[66] = w2_d01_c1 * sp[5];
    sp[67] = w2_d11_c1 * sp[6];
    sp[68] = sp[66] + sp[67];
    sp[69] = sp[68] * sp[6];
    sp[70] = sp[65] + sp[69];
    sp[71] = sp[61] + sp[70];
    sp[72] = w2_d1_c2 * sp[3];
    sp[73] = w2_d0_c2 * sp[4];
    sp[74] = sp[72] + sp[73];
    sp[75] = sp[6] + sp[6];
    sp[76] = sp[5] + sp[5];
    sp[77] = sp[42] + sp[42];
    sp[78] = sp[41] + sp[41];
    sp[79] = sp[40] + sp[40];
    sp[80] = w2_d11_c0 * sp[3];
    sp[81] = w2_d01_c0 * sp[4];
    sp[82] = sp[80] + sp[81];
    sp[83] = sp[82] * sp[3];
    sp[84] = w2_d01_c0 * sp[3];
    sp[85] = w2_d00_c0 * sp[4];
    sp[86] = sp[84] + sp[85];
    sp[87] = sp[86] * sp[4];
    sp[88] = sp[83] + sp[87];
    sp[89] = sp[49] * sp[5];
    sp[90] = sp[45] * sp[6];
    sp[91] = sp[89] + sp[90];
    sp[92] = sp[88] + sp[91];
    sp[93] = sp[59] * sp[5];
    sp[94] = sp[55] * sp[6];
    sp[95] = sp[93] + sp[94];
    sp[96] = sp[95] + sp[95];
    sp[97] = w2_d0_c2 * sp[5];
    sp[98] = w2_d1_c2 * sp[6];
    sp[99] = sp[97] + sp[98];
    sp[100] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[101] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[102] = sp[100] + sp[101];
    sp[103] = std::sqrt(sp[102]);
    sp[104] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[105] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[106] = sp[104] + sp[105];
    sp[107] = std::sqrt(sp[106]);
    sp[108] = sp[103] * sp[107];
    sp[109] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[110] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[111] = sp[109] + sp[110];
    sp[112] = std::sqrt(sp[111]);
    sp[113] = sp[108] * sp[112];
    sp[114] = triangle_reference_cell_volume * sp[2];
    sp[115] = std::abs(sp[114]);
    sp[116] = sp[113] / (4.0 * sp[115]);
    sp[117] = sp[15] + sp[15];
    sp[118] = sp[33] + sp[33];
    sp[119] = 2.0 * sp[116] * (2.0 * sp[116]);
    sp[120] = w2_d1_c3 * sp[3];
    sp[121] = w2_d0_c3 * sp[4];
    sp[122] = sp[120] + sp[121];
    sp[123] = w2_d0_c3 * sp[5];
    sp[124] = w2_d1_c3 * sp[6];
    sp[125] = sp[123] + sp[124];
    sp[126] = w2_d1_c4 * sp[3];
    sp[127] = w2_d0_c4 * sp[4];
    sp[128] = sp[126] + sp[127];
    sp[129] = w2_d0_c4 * sp[5];
    sp[130] = w2_d1_c4 * sp[6];
    sp[131] = sp[129] + sp[130];
    sp[132] = sp[18] + sp[41];
    sp[133] = sp[19] + sp[39];
    sp[134] = sp[40] + sp[20];
    sp[135] = sp[122] * sp[3];
    sp[136] = sp[122] * sp[4];
    sp[137] = sp[125] * sp[6];
    sp[138] = sp[125] * sp[5];
    sp[139] = sp[135] + sp[137];
    sp[140] = sp[138] + sp[136];
    sp[141] = sp[128] * sp[3];
    sp[142] = sp[128] * sp[4];
    sp[143] = sp[131] * sp[6];
    sp[144] = sp[131] * sp[5];
    sp[145] = sp[141] + sp[143];
    sp[146] = sp[144] + sp[142];
    sp[147] = -1.0 * w[1][0] + w[1][0];
    sp[148] = sp[16] / 2 * (sp[16] / 2);
    sp[149] = sp[16] / 2 * (sp[17] / 2);
    sp[150] = sp[17] / 2 * (sp[17] / 2);
    sp[151] = sp[3] / 2 * (sp[6] / 2);
    sp[152] = sp[4] / 2 * (sp[6] / 2);
    sp[153] = sp[6] / 2 * (sp[6] / 2);
    sp[154] = sp[5] / 2 * (sp[6] / 2);
    sp[155] = sp[3] / 2 * (sp[5] / 2);
    sp[156] = sp[5] / 2 * (sp[4] / 2);
    sp[157] = sp[5] / 2 * (sp[5] / 2);
    sp[158] = sp[3] / 2 * (sp[3] / 2);
    sp[159] = sp[3] / 2 * (sp[4] / 2);
    sp[160] = sp[4] / 2 * (sp[4] / 2);
    sp[161] = sp[148] + sp[153];
    sp[162] = sp[149] + sp[154];
    sp[163] = sp[150] + sp[157];
    sp[164] = sp[75] / 2 * (sp[75] / 2);
    sp[165] = sp[76] / 2 * (sp[75] / 2);
    sp[166] = sp[76] / 2 * (sp[76] / 2);
    sp[167] = sp[164] + sp[158];
    sp[168] = sp[165] + sp[159];
    sp[169] = sp[166] + sp[160];
    sp[170] = sp[151] + sp[151];
    sp[171] = sp[155] + sp[155];
    sp[172] = sp[167] + sp[158];
    sp[173] = sp[168] + sp[159];
    sp[174] = sp[152] + sp[152];
    sp[175] = sp[156] + sp[156];
    sp[176] = sp[169] + sp[160];
    sp[177] = sp[161] + sp[153];
    sp[178] = sp[162] + sp[154];
    sp[179] = sp[163] + sp[157];
    sp[180] = std::abs(sp[2]);
    sp[181] = sp[6] * sp[180];
    sp[182] = sp[5] * sp[180];
    sp[183] = sp[122] * sp[180];
    sp[184] = sp[125] * sp[180];
    sp[185] = sp[3] * sp[180];
    sp[186] = sp[4] * sp[180];
    sp[187] = -1 * sp[3] * sp[180];
    sp[188] = -1 * sp[4] * sp[180];
    sp[189] = -1 * sp[6] * sp[180];
    sp[190] = -1 * sp[5] * sp[180];
    alignas(32) double BF0[6][6] = {};
    alignas(32) double BF1[6][5] = {};
    alignas(32) double BF2[6][5] = {};
    alignas(32) double BF3[6][6] = {};
    alignas(32) double BF4[5][6] = {};
    alignas(32) double BF5[5][5] = {};
    alignas(32) double TP0[5] = {};
    alignas(32) double BF6[5][5] = {};
    alignas(32) double TP1[5] = {};
    alignas(32) double TP2[5] = {};
    alignas(32) double BF7[5][6] = {};
    alignas(32) double BF8[5][5] = {};
    alignas(32) double TP3[5] = {};
    alignas(32) double BF9[5][5] = {};
    alignas(32) double TP4[5] = {};
    alignas(32) double TP5[5] = {};
    alignas(32) double TP6[5] = {};
    alignas(32) double TP7[5] = {};
    alignas(32) double TP8[5] = {};
    alignas(32) double BF10[5][3] = {};
    alignas(32) double TP9[5] = {};
    alignas(32) double TP10[5] = {};
    alignas(32) double BF11[5][3] = {};
    alignas(32) double TP11[5] = {};
    alignas(32) double TP12[6] = {};
    alignas(32) double TP13[5] = {};
    alignas(32) double TP14[3] = {};
    alignas(32) double TP15[5] = {};
    alignas(32) double TP16[3] = {};
    alignas(32) double TP17[4] = {};
    alignas(32) double TP18[6] = {};
    alignas(32) double TP19[5] = {};
    alignas(32) double TP20[3] = {};
    alignas(32) double TP21[5] = {};
    alignas(32) double TP22[3] = {};
    alignas(32) double TP23[4] = {};
    alignas(32) double TP24[2] = {};
    alignas(32) double TP25[2] = {};
    alignas(32) double TP26[2] = {};
    alignas(32) double TP27[3] = {};
    alignas(32) double TP28[2] = {};
    alignas(32) double TP29[2] = {};
    alignas(32) double TP30[3] = {};
    alignas(32) double TP31[2] = {};
    alignas(32) double BF12[5][6] = {};
    alignas(32) double BF13[5][5] = {};
    alignas(32) double TP32[5] = {};
    alignas(32) double BF14[5][5] = {};
    alignas(32) double TP33[5] = {};
    alignas(32) double TP34[5] = {};
    alignas(32) double BF15[5][6] = {};
    alignas(32) double BF16[5][5] = {};
    alignas(32) double TP35[5] = {};
    alignas(32) double BF17[5][5] = {};
    alignas(32) double TP36[5] = {};
    alignas(32) double TP37[5] = {};
    alignas(32) double TP38[5] = {};
    alignas(32) double TP39[5] = {};
    alignas(32) double TP40[5] = {};
    alignas(32) double BF18[5][3] = {};
    alignas(32) double TP41[5] = {};
    alignas(32) double TP42[5] = {};
    alignas(32) double BF19[5][3] = {};
    alignas(32) double TP43[5] = {};
    alignas(32) double TP44[6] = {};
    alignas(32) double TP45[5] = {};
    alignas(32) double TP46[5] = {};
    alignas(32) double TP47[3] = {};
    alignas(32) double TP48[4] = {};
    alignas(32) double TP49[6] = {};
    alignas(32) double TP50[5] = {};
    alignas(32) double TP51[3] = {};
    alignas(32) double TP52[5] = {};
    alignas(32) double TP53[3] = {};
    alignas(32) double TP54[4] = {};
    alignas(32) double TP55[2] = {};
    alignas(32) double TP56[2] = {};
    alignas(32) double TP57[2] = {};
    alignas(32) double TP58[3] = {};
    alignas(32) double TP59[2] = {};
    alignas(32) double TP60[2] = {};
    alignas(32) double TP61[3] = {};
    alignas(32) double TP62[2] = {};
    alignas(32) double TP63[6] = {};
    alignas(32) double TP64[5] = {};
    alignas(32) double TP65[3] = {};
    alignas(32) double TP66[5] = {};
    alignas(32) double TP67[3] = {};
    alignas(32) double TP68[4] = {};
    alignas(32) double TP69[6] = {};
    alignas(32) double TP70[5] = {};
    alignas(32) double TP71[3] = {};
    alignas(32) double TP72[5] = {};
    alignas(32) double TP73[3] = {};
    alignas(32) double TP74[4] = {};
    alignas(32) double TP75[2] = {};
    alignas(32) double TP76[2] = {};
    alignas(32) double TP77[2] = {};
    alignas(32) double TP78[3] = {};
    alignas(32) double TP79[2] = {};
    alignas(32) double TP80[2] = {};
    alignas(32) double TP81[3] = {};
    alignas(32) double TP82[2] = {};
    alignas(32) double BF20[6][6] = {};
    alignas(32) double BF21[6][6] = {};
    alignas(32) double BF22[5][6] = {};
    alignas(32) double TP83[5] = {};
    alignas(32) double BF23[5][5] = {};
    alignas(32) double TP84[5] = {};
    alignas(32) double TP85[5] = {};
    alignas(32) double BF24[5][6] = {};
    alignas(32) double BF25[5][5] = {};
    alignas(32) double TP86[5] = {};
    alignas(32) double BF26[5][5] = {};
    alignas(32) double TP87[5] = {};
    alignas(32) double TP88[5] = {};
    alignas(32) double TP89[5] = {};
    alignas(32) double TP90[5] = {};
    alignas(32) double TP91[5] = {};
    alignas(32) double BF27[5][3] = {};
    alignas(32) double TP92[5] = {};
    alignas(32) double TP93[5] = {};
    alignas(32) double BF28[5][3] = {};
    alignas(32) double TP94[5] = {};
    alignas(32) double TP95[6] = {};
    alignas(32) double TP96[5] = {};
    alignas(32) double TP97[5] = {};
    alignas(32) double TP98[4] = {};
    alignas(32) double TP99[6] = {};
    alignas(32) double TP100[5] = {};
    alignas(32) double TP101[3] = {};
    alignas(32) double TP102[5] = {};
    alignas(32) double TP103[3] = {};
    alignas(32) double TP104[4] = {};
    alignas(32) double TP105[2] = {};
    alignas(32) double TP106[2] = {};
    alignas(32) double TP107[2] = {};
    alignas(32) double TP108[3] = {};
    alignas(32) double TP109[2] = {};
    alignas(32) double TP110[2] = {};
    alignas(32) double TP111[3] = {};
    alignas(32) double TP112[2] = {};
    alignas(32) double BF29[5][6] = {};
    alignas(32) double BF30[5][5] = {};
    alignas(32) double TP113[5] = {};
    alignas(32) double TP114[5] = {};
    alignas(32) double TP115[5] = {};
    alignas(32) double BF31[5][6] = {};
    alignas(32) double BF32[5][5] = {};
    alignas(32) double TP116[5] = {};
    alignas(32) double BF33[5][5] = {};
    alignas(32) double TP117[5] = {};
    alignas(32) double TP118[5] = {};
    alignas(32) double TP119[5] = {};
    alignas(32) double TP120[5] = {};
    alignas(32) double TP121[5] = {};
    alignas(32) double BF34[5][3] = {};
    alignas(32) double TP122[5] = {};
    alignas(32) double TP123[5] = {};
    alignas(32) double BF35[5][3] = {};
    alignas(32) double TP124[5] = {};
    alignas(32) double TP125[6] = {};
    alignas(32) double TP126[5] = {};
    alignas(32) double TP127[5] = {};
    alignas(32) double TP128[4] = {};
    alignas(32) double TP129[6] = {};
    alignas(32) double TP130[5] = {};
    alignas(32) double TP131[5] = {};
    alignas(32) double TP132[3] = {};
    alignas(32) double TP133[4] = {};
    alignas(32) double TP134[2] = {};
    alignas(32) double TP135[2] = {};
    alignas(32) double TP136[2] = {};
    alignas(32) double TP137[3] = {};
    alignas(32) double TP138[2] = {};
    alignas(32) double TP139[2] = {};
    alignas(32) double TP140[3] = {};
    alignas(32) double TP141[2] = {};
    alignas(32) double TP142[6] = {};
    alignas(32) double TP143[5] = {};
    alignas(32) double TP144[3] = {};
    alignas(32) double TP145[5] = {};
    alignas(32) double TP146[3] = {};
    alignas(32) double TP147[6] = {};
    alignas(32) double TP148[5] = {};
    alignas(32) double TP149[3] = {};
    alignas(32) double TP150[5] = {};
    alignas(32) double TP151[3] = {};
    alignas(32) double TP152[4] = {};
    alignas(32) double TP153[2] = {};
    alignas(32) double TP154[2] = {};
    alignas(32) double TP155[2] = {};
    alignas(32) double TP156[3] = {};
    alignas(32) double TP157[2] = {};
    alignas(32) double TP158[2] = {};
    alignas(32) double TP159[3] = {};
    alignas(32) double TP160[2] = {};
    alignas(32) double TP161[6] = {};
    alignas(32) double TP162[5] = {};
    alignas(32) double TP163[3] = {};
    alignas(32) double TP164[5] = {};
    alignas(32) double TP165[3] = {};
    alignas(32) double TP166[4] = {};
    alignas(32) double TP167[6] = {};
    alignas(32) double TP168[5] = {};
    alignas(32) double TP169[3] = {};
    alignas(32) double TP170[5] = {};
    alignas(32) double TP171[3] = {};
    alignas(32) double TP172[4] = {};
    alignas(32) double TP173[2] = {};
    alignas(32) double TP174[2] = {};
    alignas(32) double TP175[2] = {};
    alignas(32) double TP176[3] = {};
    alignas(32) double TP177[2] = {};
    alignas(32) double TP178[2] = {};
    alignas(32) double TP179[3] = {};
    alignas(32) double TP180[2] = {};
    alignas(32) double TP181[6] = {};
    alignas(32) double TP182[5] = {};
    alignas(32) double TP183[3] = {};
    alignas(32) double TP184[5] = {};
    alignas(32) double TP185[3] = {};
    alignas(32) double TP186[4] = {};
    alignas(32) double TP187[6] = {};
    alignas(32) double TP188[5] = {};
    alignas(32) double TP189[3] = {};
    alignas(32) double TP190[5] = {};
    alignas(32) double TP191[3] = {};
    alignas(32) double TP192[4] = {};
    alignas(32) double TP193[2] = {};
    alignas(32) double TP194[2] = {};
    alignas(32) double TP195[3] = {};
    alignas(32) double TP196[2] = {};
    alignas(32) double TP197[2] = {};
    alignas(32) double TP198[3] = {};
    alignas(32) double TP199[2] = {};
    alignas(32) double TP200[6] = {};
    alignas(32) double TP201[5] = {};
    alignas(32) double TP202[5] = {};
    alignas(32) double TP203[6] = {};
    alignas(32) double TP204[5] = {};
    alignas(32) double TP205[5] = {};
    alignas(32) double TP206[2] = {};
    alignas(32) double TP207[3] = {};
    alignas(32) double TP208[2] = {};
    alignas(32) double TP209[2] = {};
    alignas(32) double TP210[3] = {};
    alignas(32) double TP211[2] = {};
    alignas(32) double BF36[3][5] = {};
    alignas(32) double BF37[3][5] = {};
    alignas(32) double BF38[3][5] = {};
    alignas(32) double BF39[3][5] = {};
    alignas(32) double TP212[3] = {};
    alignas(32) double BF40[3][3] = {};
    alignas(32) double TP213[3] = {};
    alignas(32) double BF41[3][3] = {};
    alignas(32) double TP214[6] = {};
    alignas(32) double TP215[5] = {};
    alignas(32) double TP216[5] = {};
    alignas(32) double TP217[6] = {};
    alignas(32) double TP218[5] = {};
    alignas(32) double TP219[5] = {};
    alignas(32) double TP220[2] = {};
    alignas(32) double TP221[3] = {};
    alignas(32) double TP222[2] = {};
    alignas(32) double TP223[2] = {};
    alignas(32) double TP224[3] = {};
    alignas(32) double TP225[2] = {};
    alignas(32) double TP226[6] = {};
    alignas(32) double TP227[5] = {};
    alignas(32) double TP228[5] = {};
    alignas(32) double TP229[6] = {};
    alignas(32) double TP230[5] = {};
    alignas(32) double TP231[5] = {};
    alignas(32) double TP232[2] = {};
    alignas(32) double TP233[3] = {};
    alignas(32) double TP234[2] = {};
    alignas(32) double TP235[2] = {};
    alignas(32) double TP236[3] = {};
    alignas(32) double TP237[2] = {};
    alignas(32) double BF42[3][6] = {};
    alignas(32) double BF43[3][5] = {};
    alignas(32) double BF44[3][5] = {};
    alignas(32) double BF45[3][6] = {};
    alignas(32) double BF46[3][5] = {};
    alignas(32) double BF47[3][5] = {};
    alignas(32) double TP238[3] = {};
    alignas(32) double BF48[3][3] = {};
    alignas(32) double TP239[3] = {};
    alignas(32) double TP240[3] = {};
    alignas(32) double BF49[3][3] = {};
    alignas(32) double TP241[3] = {};
    alignas(32) double TP242[6] = {};
    alignas(32) double TP243[5] = {};
    alignas(32) double TP244[5] = {};
    alignas(32) double TP245[6] = {};
    alignas(32) double TP246[5] = {};
    alignas(32) double TP247[5] = {};
    alignas(32) double TP248[2] = {};
    alignas(32) double TP249[3] = {};
    alignas(32) double TP250[2] = {};
    alignas(32) double TP251[2] = {};
    alignas(32) double TP252[3] = {};
    alignas(32) double TP253[2] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE96_C0_Q12[0][iq][ic];
        const double w2_d1_c0 = w[2][0] * FE96_C0_D01_Q12[0][iq][0] + w[2][2] * FE96_C0_D01_Q12[0][iq][1] + w[2][3] * FE96_C0_D01_Q12[0][iq][2] + w[2][4] * FE96_C0_D01_Q12[0][iq][3] + w[2][5] * FE96_C0_D01_Q12[0][iq][4];
        const double w2_d0_c0 = w[2][0] * FE96_C0_D10_Q12[0][iq][0] + w[2][1] * FE96_C0_D10_Q12[0][iq][1] + w[2][3] * FE96_C0_D10_Q12[0][iq][2] + w[2][4] * FE96_C0_D10_Q12[0][iq][3] + w[2][5] * FE96_C0_D10_Q12[0][iq][4];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE96_C0_Q12[0][iq][ic];
        const double w2_d1_c1 = w[2][6] * FE96_C0_D01_Q12[0][iq][0] + w[2][8] * FE96_C0_D01_Q12[0][iq][1] + w[2][9] * FE96_C0_D01_Q12[0][iq][2] + w[2][10] * FE96_C0_D01_Q12[0][iq][3] + w[2][11] * FE96_C0_D01_Q12[0][iq][4];
        const double w2_d0_c1 = w[2][6] * FE96_C0_D10_Q12[0][iq][0] + w[2][7] * FE96_C0_D10_Q12[0][iq][1] + w[2][9] * FE96_C0_D10_Q12[0][iq][2] + w[2][10] * FE96_C0_D10_Q12[0][iq][3] + w[2][11] * FE96_C0_D10_Q12[0][iq][4];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c1 += w[3][ic + 6] * FE96_C0_Q12[0][iq][ic];
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c0 += w[3][ic] * FE96_C0_Q12[0][iq][ic];
        double w3_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c3 += w[3][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4 += w[4][ic] * FE3_C0_Q12[0][iq][ic];
        double w3_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c4 += w[3][ic + 18] * FE3_C0_Q12[0][iq][ic];
        const double w3_d1_c1 = w[3][6] * FE96_C0_D01_Q12[0][iq][0] + w[3][8] * FE96_C0_D01_Q12[0][iq][1] + w[3][9] * FE96_C0_D01_Q12[0][iq][2] + w[3][10] * FE96_C0_D01_Q12[0][iq][3] + w[3][11] * FE96_C0_D01_Q12[0][iq][4];
        const double w3_d0_c1 = w[3][6] * FE96_C0_D10_Q12[0][iq][0] + w[3][7] * FE96_C0_D10_Q12[0][iq][1] + w[3][9] * FE96_C0_D10_Q12[0][iq][2] + w[3][10] * FE96_C0_D10_Q12[0][iq][3] + w[3][11] * FE96_C0_D10_Q12[0][iq][4];
        const double w3_d1_c0 = w[3][0] * FE96_C0_D01_Q12[0][iq][0] + w[3][2] * FE96_C0_D01_Q12[0][iq][1] + w[3][3] * FE96_C0_D01_Q12[0][iq][2] + w[3][4] * FE96_C0_D01_Q12[0][iq][3] + w[3][5] * FE96_C0_D01_Q12[0][iq][4];
        const double w3_d0_c0 = w[3][0] * FE96_C0_D10_Q12[0][iq][0] + w[3][1] * FE96_C0_D10_Q12[0][iq][1] + w[3][3] * FE96_C0_D10_Q12[0][iq][2] + w[3][4] * FE96_C0_D10_Q12[0][iq][3] + w[3][5] * FE96_C0_D10_Q12[0][iq][4];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE3_C0_Q12[0][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE3_C0_Q12[0][iq][ic];
        alignas(32) double sv12[2440];
        sv12[0] = w2_c1 * sp[3];
        sv12[1] = w2_c1 * sp[4];
        sv12[2] = w2_d1_c0 * sp[3];
        sv12[3] = w2_d0_c0 * sp[4];
        sv12[4] = sv12[2] + sv12[3];
        sv12[5] = w2_c0 * sp[6];
        sv12[6] = w2_c0 * sp[5];
        sv12[7] = w2_d0_c0 * sp[5];
        sv12[8] = w2_d1_c0 * sp[6];
        sv12[9] = sv12[7] + sv12[8];
        sv12[10] = sv12[0] + sv12[5];
        sv12[11] = sv12[6] + sv12[1];
        sv12[12] = w2_d1_c1 * sp[3];
        sv12[13] = w2_d0_c1 * sp[4];
        sv12[14] = sv12[12] + sv12[13];
        sv12[15] = w2_d0_c1 * sp[5];
        sv12[16] = w2_d1_c1 * sp[6];
        sv12[17] = sv12[15] + sv12[16];
        sv12[18] = w3_c1 * sp[3];
        sv12[19] = w3_c1 * sp[4];
        sv12[20] = w3_c0 * sp[6];
        sv12[21] = w3_c0 * sp[5];
        sv12[22] = sv12[18] + sv12[20];
        sv12[23] = sv12[21] + sv12[19];
        sv12[24] = std::exp(w4);
        sv12[25] = sp[9] * sv12[24];
        sv12[26] = w3_c3 * (0.09 * sv12[25]);
        sv12[27] = sp[12] * (0.09 * sv12[24]);
        sv12[28] = sv12[26] + sv12[27];
        sv12[29] = w3_c3 * sv12[28];
        sv12[30] = w3_c3 * (0.09 * sv12[24]);
        sv12[31] = sp[12] * sv12[30];
        sv12[32] = sv12[29] + sv12[31];
        sv12[33] = w3_c4 * sp[15];
        sv12[34] = sv12[33] + sv12[33];
        sv12[35] = w3_c4 * w3_c4;
        sv12[36] = std::sqrt(1e-8 + sv12[35]);
        sv12[37] = sv12[34] / (2 * sv12[36]);
        sv12[38] = sp[15] + sv12[37];
        sv12[39] = w3_c3 * sv12[30];
        sv12[40] = w3_c4 + sv12[36];
        sv12[41] = sv12[39] / (0.5 * sv12[40]);
        sv12[42] = 0.5 * sv12[38] * sv12[41];
        sv12[43] = sv12[32] + -1 * sv12[42];
        sv12[44] = sv12[43] / (0.5 * sv12[40]);
        sv12[45] = 2.0 * sv12[44] * (sp[16] / 2);
        sv12[46] = 2.0 * sv12[44] * (sp[17] / 2);
        sv12[47] = 2.0 * (0.0001 + sv12[41]) * (sp[22] / 2);
        sv12[48] = 2.0 * (0.0001 + sv12[41]) * (sp[23] / 2);
        sv12[49] = 2.0 * (0.0001 + sv12[41]) * (sp[24] / 2);
        sv12[50] = sp[27] * sv12[24];
        sv12[51] = w3_c3 * (0.09 * sv12[50]);
        sv12[52] = sp[30] * (0.09 * sv12[24]);
        sv12[53] = sv12[51] + sv12[52];
        sv12[54] = w3_c3 * sv12[53];
        sv12[55] = sp[30] * sv12[30];
        sv12[56] = sv12[54] + sv12[55];
        sv12[57] = w3_c4 * sp[33];
        sv12[58] = sv12[57] + sv12[57];
        sv12[59] = sv12[58] / (2 * sv12[36]);
        sv12[60] = sp[33] + sv12[59];
        sv12[61] = 0.5 * sv12[60] * sv12[41];
        sv12[62] = sv12[56] + -1 * sv12[61];
        sv12[63] = sv12[62] / (0.5 * sv12[40]);
        sv12[64] = 2.0 * sv12[63] * (sp[6] / 2);
        sv12[65] = 2.0 * sv12[63] * (sp[5] / 2);
        sv12[66] = 2.0 * sv12[63] * (sp[3] / 2);
        sv12[67] = 2.0 * sv12[63] * (sp[4] / 2);
        sv12[68] = 2.0 * (0.0001 + sv12[41]) * (sp[41] / 2);
        sv12[69] = 2.0 * (0.0001 + sv12[41]) * (sp[42] / 2);
        sv12[70] = 2.0 * (0.0001 + sv12[41]) * (sp[40] / 2);
        sv12[71] = 2.0 * (0.0001 + sv12[41]) * (sp[38] / 2);
        sv12[72] = 2.0 * (0.0001 + sv12[41]) * (sp[35] / 2);
        sv12[73] = 2.0 * (0.0001 + sv12[41]) * (sp[37] / 2);
        sv12[74] = sv12[45] + sv12[64];
        sv12[75] = sv12[46] + sv12[65];
        sv12[76] = sv12[47] + sv12[68];
        sv12[77] = sv12[48] + sv12[69];
        sv12[78] = sv12[49] + sv12[70];
        sv12[79] = sv12[22] + -1 * sv12[74];
        sv12[80] = sv12[23] + -1 * sv12[75];
        sv12[81] = w3_c1 * sv12[14];
        sv12[82] = w3_c0 * sv12[17];
        sv12[83] = sv12[81] + sv12[82];
        sv12[84] = sv12[14] + sv12[14];
        sv12[85] = 2.0 * sv12[44] * (sv12[84] / 2);
        sv12[86] = 2.0 * (0.0001 + sv12[41]) * (sp[52] / 2);
        sv12[87] = sv12[85] + sv12[86];
        sv12[88] = sv12[4] + sv12[17];
        sv12[89] = 2.0 * sv12[63] * (sv12[88] / 2);
        sv12[90] = 2.0 * (0.0001 + sv12[41]) * (sp[71] / 2);
        sv12[91] = sv12[89] + sv12[90];
        sv12[92] = sv12[87] + sv12[91];
        sv12[93] = sv12[83] + -1 * sv12[92];
        sv12[94] = sv12[93] + sp[74];
        sv12[95] = sv12[94] * sv12[79];
        sv12[96] = sv12[94] * sv12[80];
        sv12[97] = sv12[94] * (-1 * sv12[76]);
        sv12[98] = sv12[94] * (-1 * sv12[77]);
        sv12[99] = sv12[94] * (-1 * sv12[78]);
        sv12[100] = sv12[94] * (-1 * sv12[66]);
        sv12[101] = sv12[94] * (-1 * sv12[67]);
        sv12[102] = sv12[94] * (-1 * sv12[71]);
        sv12[103] = sv12[94] * (-1 * sv12[72]);
        sv12[104] = sv12[94] * (-1 * sv12[73]);
        sv12[105] = sv12[94] * sp[3];
        sv12[106] = sv12[94] * sp[4];
        sv12[107] = 2.0 * sv12[44] * (sp[6] / 2);
        sv12[108] = 2.0 * sv12[44] * (sp[5] / 2);
        sv12[109] = 2.0 * sv12[44] * (sp[3] / 2);
        sv12[110] = 2.0 * sv12[44] * (sp[4] / 2);
        sv12[111] = 2.0 * (0.0001 + sv12[41]) * (sp[21] / 2);
        sv12[112] = 2.0 * (0.0001 + sv12[41]) * (sp[18] / 2);
        sv12[113] = 2.0 * (0.0001 + sv12[41]) * (sp[20] / 2);
        sv12[114] = 2.0 * sv12[63] * (sp[75] / 2);
        sv12[115] = 2.0 * sv12[63] * (sp[76] / 2);
        sv12[116] = 2.0 * (0.0001 + sv12[41]) * (sp[77] / 2);
        sv12[117] = 2.0 * (0.0001 + sv12[41]) * (sp[78] / 2);
        sv12[118] = 2.0 * (0.0001 + sv12[41]) * (sp[79] / 2);
        sv12[119] = sv12[114] + sv12[109];
        sv12[120] = sv12[115] + sv12[110];
        sv12[121] = sv12[116] + sv12[111];
        sv12[122] = sv12[117] + sv12[112];
        sv12[123] = sv12[118] + sv12[113];
        sv12[124] = sv12[22] + -1 * sv12[119];
        sv12[125] = sv12[23] + -1 * sv12[120];
        sv12[126] = w3_c1 * sv12[4];
        sv12[127] = w3_c0 * sv12[9];
        sv12[128] = sv12[126] + sv12[127];
        sv12[129] = 2.0 * sv12[44] * (sv12[88] / 2);
        sv12[130] = 2.0 * (0.0001 + sv12[41]) * (sp[92] / 2);
        sv12[131] = sv12[129] + sv12[130];
        sv12[132] = sv12[9] + sv12[9];
        sv12[133] = 2.0 * sv12[63] * (sv12[132] / 2);
        sv12[134] = 2.0 * (0.0001 + sv12[41]) * (sp[96] / 2);
        sv12[135] = sv12[133] + sv12[134];
        sv12[136] = sv12[131] + sv12[135];
        sv12[137] = sv12[128] + -1 * sv12[136];
        sv12[138] = sv12[137] + sp[99];
        sv12[139] = sv12[138] * (-1 * sv12[107]);
        sv12[140] = sv12[138] * (-1 * sv12[108]);
        sv12[141] = sv12[138] * (-1 * sv12[72]);
        sv12[142] = sv12[138] * (-1 * sv12[71]);
        sv12[143] = sv12[138] * (-1 * sv12[73]);
        sv12[144] = sv12[138] * sv12[124];
        sv12[145] = sv12[138] * sv12[125];
        sv12[146] = sv12[138] * (-1 * sv12[121]);
        sv12[147] = sv12[138] * (-1 * sv12[122]);
        sv12[148] = sv12[138] * (-1 * sv12[123]);
        sv12[149] = sv12[138] * sp[6];
        sv12[150] = sv12[138] * sp[5];
        sv12[151] = sv12[95] + sv12[139];
        sv12[152] = sv12[96] + sv12[140];
        sv12[153] = sv12[97] + sv12[141];
        sv12[154] = sv12[98] + sv12[142];
        sv12[155] = sv12[99] + sv12[143];
        sv12[156] = sv12[144] + sv12[100];
        sv12[157] = sv12[145] + sv12[101];
        sv12[158] = sv12[146] + sv12[102];
        sv12[159] = sv12[147] + sv12[103];
        sv12[160] = sv12[148] + sv12[104];
        sv12[161] = sv12[105] + sv12[149];
        sv12[162] = sv12[150] + sv12[106];
        sv12[163] = w3_c0 * w3_c0;
        sv12[164] = w3_c1 * w3_c1;
        sv12[165] = sv12[163] + sv12[164];
        sv12[166] = std::sqrt(sv12[165]);
        sv12[167] = 0.5 * (2.0 * sp[116]) * sv12[166];
        sv12[168] = sv12[167] / (0.0001 + sv12[41]);
        sv12[169] = sv12[30] + sv12[30];
        sv12[170] = w3_c4 + w3_c4;
        sv12[171] = sv12[170] / (2 * sv12[36]);
        sv12[172] = 0.5 * (1.0 + sv12[171]) * sv12[41];
        sv12[173] = sv12[169] / (0.5 * sv12[40]);
        sv12[174] = -1 * sv12[172] / (0.5 * sv12[40]);
        sv12[175] = sv12[168] * sv12[173];
        sv12[176] = sv12[168] * sv12[174];
        sv12[177] = w3_c0 + w3_c0;
        sv12[178] = w3_c1 + w3_c1;
        sv12[179] = sv12[178] / (2 * sv12[166]);
        sv12[180] = sv12[177] / (2 * sv12[166]);
        sv12[181] = 0.5 * (2.0 * sp[116]) * sv12[179];
        sv12[182] = 0.5 * (2.0 * sp[116]) * sv12[180];
        sv12[183] = sv12[181] / (0.0001 + sv12[41]);
        sv12[184] = sv12[182] / (0.0001 + sv12[41]);
        sv12[185] = -1 * sv12[175] / (0.0001 + sv12[41]);
        sv12[186] = -1 * sv12[176] / (0.0001 + sv12[41]);
        sv12[187] = sv12[183] * (1.0 / sv12[168]);
        sv12[188] = sv12[184] * (1.0 / sv12[168]);
        sv12[189] = sv12[185] * (1.0 / sv12[168]);
        sv12[190] = sv12[186] * (1.0 / sv12[168]);
        sv12[191] = -1 * sv12[187] / sv12[168];
        sv12[192] = -1 * sv12[188] / sv12[168];
        sv12[193] = -1 * sv12[189] / sv12[168];
        sv12[194] = -1 * sv12[190] / sv12[168];
        sv12[195] = std::exp(-2.0 * sv12[168]);
        sv12[196] = -2.0 * sv12[183] * sv12[195];
        sv12[197] = -2.0 * sv12[184] * sv12[195];
        sv12[198] = -2.0 * sv12[185] * sv12[195];
        sv12[199] = -2.0 * sv12[186] * sv12[195];
        sv12[200] = (1.0 + sv12[195]) / (1.0 + -1 * sv12[195]);
        sv12[201] = -1 * sv12[196] * sv12[200];
        sv12[202] = -1 * sv12[197] * sv12[200];
        sv12[203] = -1 * sv12[198] * sv12[200];
        sv12[204] = -1 * sv12[199] * sv12[200];
        sv12[205] = -1 * sv12[201] + sv12[196];
        sv12[206] = -1 * sv12[202] + sv12[197];
        sv12[207] = -1 * sv12[203] + sv12[198];
        sv12[208] = -1 * sv12[204] + sv12[199];
        sv12[209] = sv12[205] / (1.0 + -1 * sv12[195]);
        sv12[210] = sv12[206] / (1.0 + -1 * sv12[195]);
        sv12[211] = sv12[207] / (1.0 + -1 * sv12[195]);
        sv12[212] = sv12[208] / (1.0 + -1 * sv12[195]);
        sv12[213] = -1 * sv12[191] + sv12[209];
        sv12[214] = -1 * sv12[192] + sv12[210];
        sv12[215] = -1 * sv12[193] + sv12[211];
        sv12[216] = -1 * sv12[194] + sv12[212];
        sv12[217] = sv12[213] * (2.0 * sp[116]);
        sv12[218] = sv12[214] * (2.0 * sp[116]);
        sv12[219] = sv12[215] * (2.0 * sp[116]);
        sv12[220] = sv12[216] * (2.0 * sp[116]);
        sv12[221] = -1 * (1.0 / sv12[168]) + sv12[200];
        sv12[222] = sv12[221] * (2.0 * sp[116]);
        sv12[223] = sv12[222] / sv12[166];
        sv12[224] = sv12[179] * sv12[223];
        sv12[225] = sv12[180] * sv12[223];
        sv12[226] = sv12[217] + -1 * sv12[224];
        sv12[227] = sv12[218] + -1 * sv12[225];
        sv12[228] = sv12[226] / sv12[166];
        sv12[229] = sv12[227] / sv12[166];
        sv12[230] = sv12[219] / sv12[166];
        sv12[231] = sv12[220] / sv12[166];
        sv12[232] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[168]) * (2.0 * sp[116]);
        sv12[233] = sv12[232] * (2.0 * sp[116]);
        sv12[234] = sv12[233] / (0.0001 + sv12[41]);
        sv12[235] = sv12[234] * sv12[173];
        sv12[236] = sv12[234] * sv12[174];
        sv12[237] = 0.5 * (-0.004435991517475 * sv12[183]) * (2.0 * sp[116]);
        sv12[238] = 0.5 * (-0.004435991517475 * sv12[184]) * (2.0 * sp[116]);
        sv12[239] = 0.5 * (-0.004435991517475 * sv12[185]) * (2.0 * sp[116]);
        sv12[240] = 0.5 * (-0.004435991517475 * sv12[186]) * (2.0 * sp[116]);
        sv12[241] = sv12[237] * (2.0 * sp[116]);
        sv12[242] = sv12[238] * (2.0 * sp[116]);
        sv12[243] = sv12[239] * (2.0 * sp[116]);
        sv12[244] = sv12[240] * (2.0 * sp[116]);
        sv12[245] = -1 * sv12[235] + sv12[243];
        sv12[246] = -1 * sv12[236] + sv12[244];
        sv12[247] = sv12[241] / (0.0001 + sv12[41]);
        sv12[248] = sv12[242] / (0.0001 + sv12[41]);
        sv12[249] = sv12[245] / (0.0001 + sv12[41]);
        sv12[250] = sv12[246] / (0.0001 + sv12[41]);
        sv12[251] = (sv12[168] >= 0.1 ? sv12[228] : sv12[247]);
        sv12[252] = (sv12[168] >= 0.1 ? sv12[229] : sv12[248]);
        sv12[253] = (sv12[168] >= 0.1 ? sv12[230] : sv12[249]);
        sv12[254] = (sv12[168] >= 0.1 ? sv12[231] : sv12[250]);
        sv12[255] = sv12[151] * sv12[251];
        sv12[256] = sv12[151] * sv12[252];
        sv12[257] = sv12[151] * sv12[253];
        sv12[258] = sv12[151] * sv12[254];
        sv12[259] = sv12[152] * sv12[251];
        sv12[260] = sv12[152] * sv12[252];
        sv12[261] = sv12[152] * sv12[253];
        sv12[262] = sv12[152] * sv12[254];
        sv12[263] = sv12[153] * sv12[251];
        sv12[264] = sv12[153] * sv12[252];
        sv12[265] = sv12[153] * sv12[253];
        sv12[266] = sv12[153] * sv12[254];
        sv12[267] = sv12[154] * sv12[251];
        sv12[268] = sv12[154] * sv12[252];
        sv12[269] = sv12[154] * sv12[253];
        sv12[270] = sv12[154] * sv12[254];
        sv12[271] = sv12[155] * sv12[251];
        sv12[272] = sv12[155] * sv12[252];
        sv12[273] = sv12[155] * sv12[253];
        sv12[274] = sv12[155] * sv12[254];
        sv12[275] = sv12[156] * sv12[251];
        sv12[276] = sv12[156] * sv12[252];
        sv12[277] = sv12[156] * sv12[253];
        sv12[278] = sv12[156] * sv12[254];
        sv12[279] = sv12[157] * sv12[251];
        sv12[280] = sv12[157] * sv12[252];
        sv12[281] = sv12[157] * sv12[253];
        sv12[282] = sv12[157] * sv12[254];
        sv12[283] = sv12[158] * sv12[251];
        sv12[284] = sv12[158] * sv12[252];
        sv12[285] = sv12[158] * sv12[253];
        sv12[286] = sv12[158] * sv12[254];
        sv12[287] = sv12[159] * sv12[251];
        sv12[288] = sv12[159] * sv12[252];
        sv12[289] = sv12[159] * sv12[253];
        sv12[290] = sv12[159] * sv12[254];
        sv12[291] = sv12[160] * sv12[251];
        sv12[292] = sv12[160] * sv12[252];
        sv12[293] = sv12[160] * sv12[253];
        sv12[294] = sv12[160] * sv12[254];
        sv12[295] = sv12[161] * sv12[251];
        sv12[296] = sv12[161] * sv12[252];
        sv12[297] = sv12[161] * sv12[253];
        sv12[298] = sv12[161] * sv12[254];
        sv12[299] = sv12[162] * sv12[251];
        sv12[300] = sv12[162] * sv12[252];
        sv12[301] = sv12[162] * sv12[253];
        sv12[302] = sv12[162] * sv12[254];
        sv12[303] = 0.09 * sv12[24] * sp[3];
        sv12[304] = 0.09 * sv12[24] * sp[4];
        sv12[305] = w3_c3 * sv12[303];
        sv12[306] = w3_c3 * sv12[304];
        sv12[307] = sv12[28] + sv12[26];
        sv12[308] = sv12[30] * sp[3];
        sv12[309] = sv12[30] * sp[4];
        sv12[310] = sv12[307] + sv12[27];
        sv12[311] = sv12[305] + sv12[308];
        sv12[312] = sv12[306] + sv12[309];
        sv12[313] = 0.5 * sv12[38] * sv12[173];
        sv12[314] = 0.5 * sv12[38] * sv12[174];
        sv12[315] = w3_c4 * sp[3];
        sv12[316] = w3_c4 * sp[4];
        sv12[317] = sv12[315] + sv12[315];
        sv12[318] = sv12[316] + sv12[316];
        sv12[319] = 2 * sv12[171] * sv12[37];
        sv12[320] = sp[117] + -1 * sv12[319];
        sv12[321] = sv12[320] / (2 * sv12[36]);
        sv12[322] = sv12[317] / (2 * sv12[36]);
        sv12[323] = sv12[318] / (2 * sv12[36]);
        sv12[324] = sp[3] + sv12[322];
        sv12[325] = sp[4] + sv12[323];
        sv12[326] = 0.5 * sv12[321] * sv12[41];
        sv12[327] = 0.5 * sv12[324] * sv12[41];
        sv12[328] = 0.5 * sv12[325] * sv12[41];
        sv12[329] = sv12[326] + sv12[314];
        sv12[330] = sv12[310] + -1 * sv12[313];
        sv12[331] = 0.5 * (1.0 + sv12[171]) * sv12[44];
        sv12[332] = -1 * sv12[329] + -1 * sv12[331];
        sv12[333] = sv12[330] / (0.5 * sv12[40]);
        sv12[334] = sv12[332] / (0.5 * sv12[40]);
        sv12[335] = sv12[311] / (0.5 * sv12[40]);
        sv12[336] = sv12[312] / (0.5 * sv12[40]);
        sv12[337] = -1 * sv12[327] / (0.5 * sv12[40]);
        sv12[338] = -1 * sv12[328] / (0.5 * sv12[40]);
        sv12[339] = 2.0 * sv12[333] * (sp[6] / 2);
        sv12[340] = 2.0 * sv12[333] * (sp[5] / 2);
        sv12[341] = 2.0 * sv12[333] * (sp[3] / 2);
        sv12[342] = 2.0 * sv12[333] * (sp[4] / 2);
        sv12[343] = 2.0 * sv12[334] * (sp[6] / 2);
        sv12[344] = 2.0 * sv12[334] * (sp[5] / 2);
        sv12[345] = 2.0 * sv12[334] * (sp[3] / 2);
        sv12[346] = 2.0 * sv12[334] * (sp[4] / 2);
        sv12[347] = 2.0 * sv12[335] * (sp[6] / 2);
        sv12[348] = 2.0 * sv12[335] * (sp[5] / 2);
        sv12[349] = 2.0 * sv12[335] * (sp[3] / 2);
        sv12[350] = 2.0 * sv12[335] * (sp[4] / 2);
        sv12[351] = 2.0 * sv12[336] * (sp[6] / 2);
        sv12[352] = 2.0 * sv12[336] * (sp[5] / 2);
        sv12[353] = 2.0 * sv12[336] * (sp[3] / 2);
        sv12[354] = 2.0 * sv12[336] * (sp[4] / 2);
        sv12[355] = 2.0 * sv12[337] * (sp[6] / 2);
        sv12[356] = 2.0 * sv12[337] * (sp[5] / 2);
        sv12[357] = 2.0 * sv12[337] * (sp[3] / 2);
        sv12[358] = 2.0 * sv12[337] * (sp[4] / 2);
        sv12[359] = 2.0 * sv12[338] * (sp[6] / 2);
        sv12[360] = 2.0 * sv12[338] * (sp[5] / 2);
        sv12[361] = 2.0 * sv12[338] * (sp[3] / 2);
        sv12[362] = 2.0 * sv12[338] * (sp[4] / 2);
        sv12[363] = 2.0 * sv12[173] * (sp[35] / 2);
        sv12[364] = 2.0 * sv12[173] * (sp[38] / 2);
        sv12[365] = 2.0 * sv12[173] * (sp[37] / 2);
        sv12[366] = 2.0 * sv12[173] * (sp[21] / 2);
        sv12[367] = 2.0 * sv12[173] * (sp[18] / 2);
        sv12[368] = 2.0 * sv12[173] * (sp[20] / 2);
        sv12[369] = 2.0 * sv12[174] * (sp[35] / 2);
        sv12[370] = 2.0 * sv12[174] * (sp[38] / 2);
        sv12[371] = 2.0 * sv12[174] * (sp[37] / 2);
        sv12[372] = 2.0 * sv12[174] * (sp[21] / 2);
        sv12[373] = 2.0 * sv12[174] * (sp[18] / 2);
        sv12[374] = 2.0 * sv12[174] * (sp[20] / 2);
        sv12[375] = 0.09 * sv12[24] * sp[6];
        sv12[376] = 0.09 * sv12[24] * sp[5];
        sv12[377] = w3_c3 * sv12[375];
        sv12[378] = w3_c3 * sv12[376];
        sv12[379] = sv12[53] + sv12[51];
        sv12[380] = sv12[30] * sp[6];
        sv12[381] = sv12[30] * sp[5];
        sv12[382] = sv12[379] + sv12[52];
        sv12[383] = sv12[377] + sv12[380];
        sv12[384] = sv12[378] + sv12[381];
        sv12[385] = 0.5 * sv12[60] * sv12[173];
        sv12[386] = 0.5 * sv12[60] * sv12[174];
        sv12[387] = w3_c4 * sp[6];
        sv12[388] = w3_c4 * sp[5];
        sv12[389] = sv12[387] + sv12[387];
        sv12[390] = sv12[388] + sv12[388];
        sv12[391] = 2 * sv12[171] * sv12[59];
        sv12[392] = sp[118] + -1 * sv12[391];
        sv12[393] = sv12[392] / (2 * sv12[36]);
        sv12[394] = sv12[389] / (2 * sv12[36]);
        sv12[395] = sv12[390] / (2 * sv12[36]);
        sv12[396] = sp[6] + sv12[394];
        sv12[397] = sp[5] + sv12[395];
        sv12[398] = 0.5 * sv12[393] * sv12[41];
        sv12[399] = 0.5 * sv12[396] * sv12[41];
        sv12[400] = 0.5 * sv12[397] * sv12[41];
        sv12[401] = sv12[398] + sv12[386];
        sv12[402] = sv12[382] + -1 * sv12[385];
        sv12[403] = 0.5 * (1.0 + sv12[171]) * sv12[63];
        sv12[404] = -1 * sv12[401] + -1 * sv12[403];
        sv12[405] = sv12[402] / (0.5 * sv12[40]);
        sv12[406] = sv12[404] / (0.5 * sv12[40]);
        sv12[407] = sv12[383] / (0.5 * sv12[40]);
        sv12[408] = sv12[384] / (0.5 * sv12[40]);
        sv12[409] = -1 * sv12[399] / (0.5 * sv12[40]);
        sv12[410] = -1 * sv12[400] / (0.5 * sv12[40]);
        sv12[411] = 2.0 * sv12[405] * (sp[75] / 2);
        sv12[412] = 2.0 * sv12[405] * (sp[76] / 2);
        sv12[413] = 2.0 * sv12[406] * (sp[75] / 2);
        sv12[414] = 2.0 * sv12[406] * (sp[76] / 2);
        sv12[415] = 2.0 * sv12[407] * (sp[75] / 2);
        sv12[416] = 2.0 * sv12[407] * (sp[76] / 2);
        sv12[417] = 2.0 * sv12[408] * (sp[75] / 2);
        sv12[418] = 2.0 * sv12[408] * (sp[76] / 2);
        sv12[419] = 2.0 * sv12[409] * (sp[75] / 2);
        sv12[420] = 2.0 * sv12[409] * (sp[76] / 2);
        sv12[421] = 2.0 * sv12[410] * (sp[75] / 2);
        sv12[422] = 2.0 * sv12[410] * (sp[76] / 2);
        sv12[423] = 2.0 * sv12[173] * (sp[77] / 2);
        sv12[424] = 2.0 * sv12[173] * (sp[78] / 2);
        sv12[425] = 2.0 * sv12[173] * (sp[79] / 2);
        sv12[426] = 2.0 * sv12[174] * (sp[77] / 2);
        sv12[427] = 2.0 * sv12[174] * (sp[78] / 2);
        sv12[428] = 2.0 * sv12[174] * (sp[79] / 2);
        sv12[429] = sv12[411] + sv12[341];
        sv12[430] = sv12[413] + sv12[345];
        sv12[431] = sv12[415] + sv12[349];
        sv12[432] = sv12[417] + sv12[353];
        sv12[433] = sv12[419] + sv12[357];
        sv12[434] = sv12[421] + sv12[361];
        sv12[435] = sv12[412] + sv12[342];
        sv12[436] = sv12[414] + sv12[346];
        sv12[437] = sv12[416] + sv12[350];
        sv12[438] = sv12[418] + sv12[354];
        sv12[439] = sv12[420] + sv12[358];
        sv12[440] = sv12[422] + sv12[362];
        sv12[441] = sv12[423] + sv12[366];
        sv12[442] = sv12[426] + sv12[372];
        sv12[443] = sv12[424] + sv12[367];
        sv12[444] = sv12[427] + sv12[373];
        sv12[445] = sv12[425] + sv12[368];
        sv12[446] = sv12[428] + sv12[374];
        sv12[447] = sv12[138] * sp[3];
        sv12[448] = sv12[138] * sp[4];
        sv12[449] = sv12[138] * (-1 * sv12[339]);
        sv12[450] = sv12[138] * (-1 * sv12[343]);
        sv12[451] = sv12[138] * (-1 * sv12[347]);
        sv12[452] = sv12[138] * (-1 * sv12[351]);
        sv12[453] = sv12[138] * (-1 * sv12[355]);
        sv12[454] = sv12[138] * (-1 * sv12[359]);
        sv12[455] = sv12[138] * (-1 * sv12[340]);
        sv12[456] = sv12[138] * (-1 * sv12[344]);
        sv12[457] = sv12[138] * (-1 * sv12[348]);
        sv12[458] = sv12[138] * (-1 * sv12[352]);
        sv12[459] = sv12[138] * (-1 * sv12[356]);
        sv12[460] = sv12[138] * (-1 * sv12[360]);
        sv12[461] = sv12[138] * (-1 * sv12[363]);
        sv12[462] = sv12[138] * (-1 * sv12[369]);
        sv12[463] = sv12[138] * (-1 * sv12[364]);
        sv12[464] = sv12[138] * (-1 * sv12[370]);
        sv12[465] = sv12[138] * (-1 * sv12[365]);
        sv12[466] = sv12[138] * (-1 * sv12[371]);
        sv12[467] = sv12[138] * (-1 * sv12[429]);
        sv12[468] = sv12[138] * (-1 * sv12[430]);
        sv12[469] = sv12[138] * (-1 * sv12[431]);
        sv12[470] = sv12[138] * (-1 * sv12[432]);
        sv12[471] = sv12[138] * (-1 * sv12[433]);
        sv12[472] = sv12[138] * (-1 * sv12[434]);
        sv12[473] = sv12[138] * (-1 * sv12[435]);
        sv12[474] = sv12[138] * (-1 * sv12[436]);
        sv12[475] = sv12[138] * (-1 * sv12[437]);
        sv12[476] = sv12[138] * (-1 * sv12[438]);
        sv12[477] = sv12[138] * (-1 * sv12[439]);
        sv12[478] = sv12[138] * (-1 * sv12[440]);
        sv12[479] = sv12[138] * (-1 * sv12[441]);
        sv12[480] = sv12[138] * (-1 * sv12[442]);
        sv12[481] = sv12[138] * (-1 * sv12[443]);
        sv12[482] = sv12[138] * (-1 * sv12[444]);
        sv12[483] = sv12[138] * (-1 * sv12[445]);
        sv12[484] = sv12[138] * (-1 * sv12[446]);
        sv12[485] = 2.0 * sv12[333] * (sv12[88] / 2);
        sv12[486] = 2.0 * sv12[334] * (sv12[88] / 2);
        sv12[487] = 2.0 * sv12[335] * (sv12[88] / 2);
        sv12[488] = 2.0 * sv12[336] * (sv12[88] / 2);
        sv12[489] = 2.0 * sv12[337] * (sv12[88] / 2);
        sv12[490] = 2.0 * sv12[338] * (sv12[88] / 2);
        sv12[491] = 2.0 * sv12[173] * (sp[92] / 2);
        sv12[492] = 2.0 * sv12[174] * (sp[92] / 2);
        sv12[493] = sv12[485] + sv12[491];
        sv12[494] = sv12[486] + sv12[492];
        sv12[495] = 2.0 * sv12[405] * (sv12[132] / 2);
        sv12[496] = 2.0 * sv12[406] * (sv12[132] / 2);
        sv12[497] = 2.0 * sv12[407] * (sv12[132] / 2);
        sv12[498] = 2.0 * sv12[408] * (sv12[132] / 2);
        sv12[499] = 2.0 * sv12[409] * (sv12[132] / 2);
        sv12[500] = 2.0 * sv12[410] * (sv12[132] / 2);
        sv12[501] = 2.0 * sv12[173] * (sp[96] / 2);
        sv12[502] = 2.0 * sv12[174] * (sp[96] / 2);
        sv12[503] = sv12[495] + sv12[501];
        sv12[504] = sv12[496] + sv12[502];
        sv12[505] = sv12[493] + sv12[503];
        sv12[506] = sv12[494] + sv12[504];
        sv12[507] = sv12[497] + sv12[487];
        sv12[508] = sv12[498] + sv12[488];
        sv12[509] = sv12[499] + sv12[489];
        sv12[510] = sv12[500] + sv12[490];
        sv12[511] = sv12[4] * (-1 * sv12[107]);
        sv12[512] = sv12[9] * (-1 * sv12[107]);
        sv12[513] = -1 * sv12[505] * (-1 * sv12[107]);
        sv12[514] = -1 * sv12[506] * (-1 * sv12[107]);
        sv12[515] = -1 * sv12[507] * (-1 * sv12[107]);
        sv12[516] = -1 * sv12[508] * (-1 * sv12[107]);
        sv12[517] = -1 * sv12[509] * (-1 * sv12[107]);
        sv12[518] = -1 * sv12[510] * (-1 * sv12[107]);
        sv12[519] = sv12[4] * (-1 * sv12[108]);
        sv12[520] = sv12[9] * (-1 * sv12[108]);
        sv12[521] = -1 * sv12[505] * (-1 * sv12[108]);
        sv12[522] = -1 * sv12[506] * (-1 * sv12[108]);
        sv12[523] = -1 * sv12[507] * (-1 * sv12[108]);
        sv12[524] = -1 * sv12[508] * (-1 * sv12[108]);
        sv12[525] = -1 * sv12[509] * (-1 * sv12[108]);
        sv12[526] = -1 * sv12[510] * (-1 * sv12[108]);
        sv12[527] = sv12[4] * (-1 * sv12[72]);
        sv12[528] = sv12[9] * (-1 * sv12[72]);
        sv12[529] = -1 * sv12[505] * (-1 * sv12[72]);
        sv12[530] = -1 * sv12[506] * (-1 * sv12[72]);
        sv12[531] = -1 * sv12[507] * (-1 * sv12[72]);
        sv12[532] = -1 * sv12[508] * (-1 * sv12[72]);
        sv12[533] = -1 * sv12[509] * (-1 * sv12[72]);
        sv12[534] = -1 * sv12[510] * (-1 * sv12[72]);
        sv12[535] = sv12[4] * (-1 * sv12[71]);
        sv12[536] = sv12[9] * (-1 * sv12[71]);
        sv12[537] = -1 * sv12[505] * (-1 * sv12[71]);
        sv12[538] = -1 * sv12[506] * (-1 * sv12[71]);
        sv12[539] = -1 * sv12[507] * (-1 * sv12[71]);
        sv12[540] = -1 * sv12[508] * (-1 * sv12[71]);
        sv12[541] = -1 * sv12[509] * (-1 * sv12[71]);
        sv12[542] = -1 * sv12[510] * (-1 * sv12[71]);
        sv12[543] = sv12[4] * (-1 * sv12[73]);
        sv12[544] = sv12[9] * (-1 * sv12[73]);
        sv12[545] = -1 * sv12[505] * (-1 * sv12[73]);
        sv12[546] = -1 * sv12[506] * (-1 * sv12[73]);
        sv12[547] = -1 * sv12[507] * (-1 * sv12[73]);
        sv12[548] = -1 * sv12[508] * (-1 * sv12[73]);
        sv12[549] = -1 * sv12[509] * (-1 * sv12[73]);
        sv12[550] = -1 * sv12[510] * (-1 * sv12[73]);
        sv12[551] = sv12[124] * sv12[4];
        sv12[552] = sv12[124] * sv12[9];
        sv12[553] = sv12[124] * (-1 * sv12[505]);
        sv12[554] = sv12[124] * (-1 * sv12[506]);
        sv12[555] = sv12[124] * (-1 * sv12[507]);
        sv12[556] = sv12[124] * (-1 * sv12[508]);
        sv12[557] = sv12[124] * (-1 * sv12[509]);
        sv12[558] = sv12[124] * (-1 * sv12[510]);
        sv12[559] = sv12[125] * sv12[4];
        sv12[560] = sv12[125] * sv12[9];
        sv12[561] = sv12[125] * (-1 * sv12[505]);
        sv12[562] = sv12[125] * (-1 * sv12[506]);
        sv12[563] = sv12[125] * (-1 * sv12[507]);
        sv12[564] = sv12[125] * (-1 * sv12[508]);
        sv12[565] = sv12[125] * (-1 * sv12[509]);
        sv12[566] = sv12[125] * (-1 * sv12[510]);
        sv12[567] = sv12[4] * (-1 * sv12[121]);
        sv12[568] = sv12[9] * (-1 * sv12[121]);
        sv12[569] = -1 * sv12[505] * (-1 * sv12[121]);
        sv12[570] = -1 * sv12[506] * (-1 * sv12[121]);
        sv12[571] = -1 * sv12[507] * (-1 * sv12[121]);
        sv12[572] = -1 * sv12[508] * (-1 * sv12[121]);
        sv12[573] = -1 * sv12[509] * (-1 * sv12[121]);
        sv12[574] = -1 * sv12[510] * (-1 * sv12[121]);
        sv12[575] = sv12[4] * (-1 * sv12[122]);
        sv12[576] = sv12[9] * (-1 * sv12[122]);
        sv12[577] = -1 * sv12[505] * (-1 * sv12[122]);
        sv12[578] = -1 * sv12[506] * (-1 * sv12[122]);
        sv12[579] = -1 * sv12[507] * (-1 * sv12[122]);
        sv12[580] = -1 * sv12[508] * (-1 * sv12[122]);
        sv12[581] = -1 * sv12[509] * (-1 * sv12[122]);
        sv12[582] = -1 * sv12[510] * (-1 * sv12[122]);
        sv12[583] = sv12[4] * (-1 * sv12[123]);
        sv12[584] = sv12[9] * (-1 * sv12[123]);
        sv12[585] = -1 * sv12[505] * (-1 * sv12[123]);
        sv12[586] = -1 * sv12[506] * (-1 * sv12[123]);
        sv12[587] = -1 * sv12[507] * (-1 * sv12[123]);
        sv12[588] = -1 * sv12[508] * (-1 * sv12[123]);
        sv12[589] = -1 * sv12[509] * (-1 * sv12[123]);
        sv12[590] = -1 * sv12[510] * (-1 * sv12[123]);
        sv12[591] = sv12[4] * sp[6];
        sv12[592] = sv12[9] * sp[6];
        sv12[593] = -1 * sv12[505] * sp[6];
        sv12[594] = -1 * sv12[506] * sp[6];
        sv12[595] = -1 * sv12[507] * sp[6];
        sv12[596] = -1 * sv12[508] * sp[6];
        sv12[597] = -1 * sv12[509] * sp[6];
        sv12[598] = -1 * sv12[510] * sp[6];
        sv12[599] = sv12[4] * sp[5];
        sv12[600] = sv12[9] * sp[5];
        sv12[601] = -1 * sv12[505] * sp[5];
        sv12[602] = -1 * sv12[506] * sp[5];
        sv12[603] = -1 * sv12[507] * sp[5];
        sv12[604] = -1 * sv12[508] * sp[5];
        sv12[605] = -1 * sv12[509] * sp[5];
        sv12[606] = -1 * sv12[510] * sp[5];
        sv12[607] = sv12[551] + sv12[447];
        sv12[608] = sv12[559] + sv12[448];
        sv12[609] = sv12[552] + sv12[149];
        sv12[610] = sv12[560] + sv12[150];
        sv12[611] = sv12[449] + sv12[513];
        sv12[612] = sv12[450] + sv12[514];
        sv12[613] = sv12[515] + sv12[451];
        sv12[614] = sv12[516] + sv12[452];
        sv12[615] = sv12[517] + sv12[453];
        sv12[616] = sv12[518] + sv12[454];
        sv12[617] = sv12[455] + sv12[521];
        sv12[618] = sv12[456] + sv12[522];
        sv12[619] = sv12[523] + sv12[457];
        sv12[620] = sv12[524] + sv12[458];
        sv12[621] = sv12[525] + sv12[459];
        sv12[622] = sv12[526] + sv12[460];
        sv12[623] = sv12[529] + sv12[461];
        sv12[624] = sv12[530] + sv12[462];
        sv12[625] = sv12[537] + sv12[463];
        sv12[626] = sv12[538] + sv12[464];
        sv12[627] = sv12[545] + sv12[465];
        sv12[628] = sv12[546] + sv12[466];
        sv12[629] = sv12[553] + sv12[467];
        sv12[630] = sv12[554] + sv12[468];
        sv12[631] = sv12[555] + sv12[469];
        sv12[632] = sv12[556] + sv12[470];
        sv12[633] = sv12[557] + sv12[471];
        sv12[634] = sv12[558] + sv12[472];
        sv12[635] = sv12[561] + sv12[473];
        sv12[636] = sv12[562] + sv12[474];
        sv12[637] = sv12[563] + sv12[475];
        sv12[638] = sv12[564] + sv12[476];
        sv12[639] = sv12[565] + sv12[477];
        sv12[640] = sv12[566] + sv12[478];
        sv12[641] = sv12[569] + sv12[479];
        sv12[642] = sv12[570] + sv12[480];
        sv12[643] = sv12[577] + sv12[481];
        sv12[644] = sv12[578] + sv12[482];
        sv12[645] = sv12[585] + sv12[483];
        sv12[646] = sv12[586] + sv12[484];
        sv12[647] = 2.0 * sv12[333] * (sp[16] / 2);
        sv12[648] = 2.0 * sv12[333] * (sp[17] / 2);
        sv12[649] = 2.0 * sv12[334] * (sp[16] / 2);
        sv12[650] = 2.0 * sv12[334] * (sp[17] / 2);
        sv12[651] = 2.0 * sv12[335] * (sp[16] / 2);
        sv12[652] = 2.0 * sv12[335] * (sp[17] / 2);
        sv12[653] = 2.0 * sv12[336] * (sp[16] / 2);
        sv12[654] = 2.0 * sv12[336] * (sp[17] / 2);
        sv12[655] = 2.0 * sv12[337] * (sp[16] / 2);
        sv12[656] = 2.0 * sv12[337] * (sp[17] / 2);
        sv12[657] = 2.0 * sv12[338] * (sp[16] / 2);
        sv12[658] = 2.0 * sv12[338] * (sp[17] / 2);
        sv12[659] = 2.0 * sv12[173] * (sp[22] / 2);
        sv12[660] = 2.0 * sv12[173] * (sp[23] / 2);
        sv12[661] = 2.0 * sv12[173] * (sp[24] / 2);
        sv12[662] = 2.0 * sv12[174] * (sp[22] / 2);
        sv12[663] = 2.0 * sv12[174] * (sp[23] / 2);
        sv12[664] = 2.0 * sv12[174] * (sp[24] / 2);
        sv12[665] = 2.0 * sv12[405] * (sp[6] / 2);
        sv12[666] = 2.0 * sv12[405] * (sp[5] / 2);
        sv12[667] = 2.0 * sv12[405] * (sp[3] / 2);
        sv12[668] = 2.0 * sv12[405] * (sp[4] / 2);
        sv12[669] = 2.0 * sv12[406] * (sp[6] / 2);
        sv12[670] = 2.0 * sv12[406] * (sp[5] / 2);
        sv12[671] = 2.0 * sv12[406] * (sp[3] / 2);
        sv12[672] = 2.0 * sv12[406] * (sp[4] / 2);
        sv12[673] = 2.0 * sv12[407] * (sp[6] / 2);
        sv12[674] = 2.0 * sv12[407] * (sp[5] / 2);
        sv12[675] = 2.0 * sv12[407] * (sp[3] / 2);
        sv12[676] = 2.0 * sv12[407] * (sp[4] / 2);
        sv12[677] = 2.0 * sv12[408] * (sp[6] / 2);
        sv12[678] = 2.0 * sv12[408] * (sp[5] / 2);
        sv12[679] = 2.0 * sv12[408] * (sp[3] / 2);
        sv12[680] = 2.0 * sv12[408] * (sp[4] / 2);
        sv12[681] = 2.0 * sv12[409] * (sp[6] / 2);
        sv12[682] = 2.0 * sv12[409] * (sp[5] / 2);
        sv12[683] = 2.0 * sv12[409] * (sp[3] / 2);
        sv12[684] = 2.0 * sv12[409] * (sp[4] / 2);
        sv12[685] = 2.0 * sv12[410] * (sp[6] / 2);
        sv12[686] = 2.0 * sv12[410] * (sp[5] / 2);
        sv12[687] = 2.0 * sv12[410] * (sp[3] / 2);
        sv12[688] = 2.0 * sv12[410] * (sp[4] / 2);
        sv12[689] = 2.0 * sv12[173] * (sp[41] / 2);
        sv12[690] = 2.0 * sv12[173] * (sp[42] / 2);
        sv12[691] = 2.0 * sv12[173] * (sp[40] / 2);
        sv12[692] = 2.0 * sv12[174] * (sp[41] / 2);
        sv12[693] = 2.0 * sv12[174] * (sp[42] / 2);
        sv12[694] = 2.0 * sv12[174] * (sp[40] / 2);
        sv12[695] = sv12[647] + sv12[665];
        sv12[696] = sv12[649] + sv12[669];
        sv12[697] = sv12[651] + sv12[673];
        sv12[698] = sv12[653] + sv12[677];
        sv12[699] = sv12[655] + sv12[681];
        sv12[700] = sv12[657] + sv12[685];
        sv12[701] = sv12[648] + sv12[666];
        sv12[702] = sv12[650] + sv12[670];
        sv12[703] = sv12[652] + sv12[674];
        sv12[704] = sv12[654] + sv12[678];
        sv12[705] = sv12[656] + sv12[682];
        sv12[706] = sv12[658] + sv12[686];
        sv12[707] = sv12[659] + sv12[689];
        sv12[708] = sv12[662] + sv12[692];
        sv12[709] = sv12[660] + sv12[690];
        sv12[710] = sv12[663] + sv12[693];
        sv12[711] = sv12[661] + sv12[691];
        sv12[712] = sv12[664] + sv12[694];
        sv12[713] = sv12[94] * sp[6];
        sv12[714] = sv12[94] * sp[5];
        sv12[715] = sv12[94] * (-1 * sv12[695]);
        sv12[716] = sv12[94] * (-1 * sv12[696]);
        sv12[717] = sv12[94] * (-1 * sv12[697]);
        sv12[718] = sv12[94] * (-1 * sv12[698]);
        sv12[719] = sv12[94] * (-1 * sv12[699]);
        sv12[720] = sv12[94] * (-1 * sv12[700]);
        sv12[721] = sv12[94] * (-1 * sv12[701]);
        sv12[722] = sv12[94] * (-1 * sv12[702]);
        sv12[723] = sv12[94] * (-1 * sv12[703]);
        sv12[724] = sv12[94] * (-1 * sv12[704]);
        sv12[725] = sv12[94] * (-1 * sv12[705]);
        sv12[726] = sv12[94] * (-1 * sv12[706]);
        sv12[727] = sv12[94] * (-1 * sv12[707]);
        sv12[728] = sv12[94] * (-1 * sv12[708]);
        sv12[729] = sv12[94] * (-1 * sv12[709]);
        sv12[730] = sv12[94] * (-1 * sv12[710]);
        sv12[731] = sv12[94] * (-1 * sv12[711]);
        sv12[732] = sv12[94] * (-1 * sv12[712]);
        sv12[733] = sv12[94] * (-1 * sv12[667]);
        sv12[734] = sv12[94] * (-1 * sv12[671]);
        sv12[735] = sv12[94] * (-1 * sv12[675]);
        sv12[736] = sv12[94] * (-1 * sv12[679]);
        sv12[737] = sv12[94] * (-1 * sv12[683]);
        sv12[738] = sv12[94] * (-1 * sv12[687]);
        sv12[739] = sv12[94] * (-1 * sv12[668]);
        sv12[740] = sv12[94] * (-1 * sv12[672]);
        sv12[741] = sv12[94] * (-1 * sv12[676]);
        sv12[742] = sv12[94] * (-1 * sv12[680]);
        sv12[743] = sv12[94] * (-1 * sv12[684]);
        sv12[744] = sv12[94] * (-1 * sv12[688]);
        sv12[745] = sv12[94] * (-1 * sv12[364]);
        sv12[746] = sv12[94] * (-1 * sv12[370]);
        sv12[747] = sv12[94] * (-1 * sv12[363]);
        sv12[748] = sv12[94] * (-1 * sv12[369]);
        sv12[749] = sv12[94] * (-1 * sv12[365]);
        sv12[750] = sv12[94] * (-1 * sv12[371]);
        sv12[751] = 2.0 * sv12[333] * (sv12[84] / 2);
        sv12[752] = 2.0 * sv12[334] * (sv12[84] / 2);
        sv12[753] = 2.0 * sv12[335] * (sv12[84] / 2);
        sv12[754] = 2.0 * sv12[336] * (sv12[84] / 2);
        sv12[755] = 2.0 * sv12[337] * (sv12[84] / 2);
        sv12[756] = 2.0 * sv12[338] * (sv12[84] / 2);
        sv12[757] = 2.0 * sv12[173] * (sp[52] / 2);
        sv12[758] = 2.0 * sv12[174] * (sp[52] / 2);
        sv12[759] = sv12[751] + sv12[757];
        sv12[760] = sv12[752] + sv12[758];
        sv12[761] = 2.0 * sv12[405] * (sv12[88] / 2);
        sv12[762] = 2.0 * sv12[406] * (sv12[88] / 2);
        sv12[763] = 2.0 * sv12[407] * (sv12[88] / 2);
        sv12[764] = 2.0 * sv12[408] * (sv12[88] / 2);
        sv12[765] = 2.0 * sv12[409] * (sv12[88] / 2);
        sv12[766] = 2.0 * sv12[410] * (sv12[88] / 2);
        sv12[767] = 2.0 * sv12[173] * (sp[71] / 2);
        sv12[768] = 2.0 * sv12[174] * (sp[71] / 2);
        sv12[769] = sv12[761] + sv12[767];
        sv12[770] = sv12[762] + sv12[768];
        sv12[771] = sv12[759] + sv12[769];
        sv12[772] = sv12[760] + sv12[770];
        sv12[773] = sv12[753] + sv12[763];
        sv12[774] = sv12[754] + sv12[764];
        sv12[775] = sv12[755] + sv12[765];
        sv12[776] = sv12[756] + sv12[766];
        sv12[777] = sv12[79] * sv12[14];
        sv12[778] = sv12[79] * sv12[17];
        sv12[779] = sv12[79] * (-1 * sv12[771]);
        sv12[780] = sv12[79] * (-1 * sv12[772]);
        sv12[781] = sv12[79] * (-1 * sv12[773]);
        sv12[782] = sv12[79] * (-1 * sv12[774]);
        sv12[783] = sv12[79] * (-1 * sv12[775]);
        sv12[784] = sv12[79] * (-1 * sv12[776]);
        sv12[785] = sv12[80] * sv12[14];
        sv12[786] = sv12[80] * sv12[17];
        sv12[787] = sv12[80] * (-1 * sv12[771]);
        sv12[788] = sv12[80] * (-1 * sv12[772]);
        sv12[789] = sv12[80] * (-1 * sv12[773]);
        sv12[790] = sv12[80] * (-1 * sv12[774]);
        sv12[791] = sv12[80] * (-1 * sv12[775]);
        sv12[792] = sv12[80] * (-1 * sv12[776]);
        sv12[793] = sv12[14] * (-1 * sv12[76]);
        sv12[794] = sv12[17] * (-1 * sv12[76]);
        sv12[795] = -1 * sv12[771] * (-1 * sv12[76]);
        sv12[796] = -1 * sv12[772] * (-1 * sv12[76]);
        sv12[797] = -1 * sv12[773] * (-1 * sv12[76]);
        sv12[798] = -1 * sv12[774] * (-1 * sv12[76]);
        sv12[799] = -1 * sv12[775] * (-1 * sv12[76]);
        sv12[800] = -1 * sv12[776] * (-1 * sv12[76]);
        sv12[801] = sv12[14] * (-1 * sv12[77]);
        sv12[802] = sv12[17] * (-1 * sv12[77]);
        sv12[803] = -1 * sv12[771] * (-1 * sv12[77]);
        sv12[804] = -1 * sv12[772] * (-1 * sv12[77]);
        sv12[805] = -1 * sv12[773] * (-1 * sv12[77]);
        sv12[806] = -1 * sv12[774] * (-1 * sv12[77]);
        sv12[807] = -1 * sv12[775] * (-1 * sv12[77]);
        sv12[808] = -1 * sv12[776] * (-1 * sv12[77]);
        sv12[809] = sv12[14] * (-1 * sv12[78]);
        sv12[810] = sv12[17] * (-1 * sv12[78]);
        sv12[811] = -1 * sv12[771] * (-1 * sv12[78]);
        sv12[812] = -1 * sv12[772] * (-1 * sv12[78]);
        sv12[813] = -1 * sv12[773] * (-1 * sv12[78]);
        sv12[814] = -1 * sv12[774] * (-1 * sv12[78]);
        sv12[815] = -1 * sv12[775] * (-1 * sv12[78]);
        sv12[816] = -1 * sv12[776] * (-1 * sv12[78]);
        sv12[817] = sv12[14] * (-1 * sv12[66]);
        sv12[818] = sv12[17] * (-1 * sv12[66]);
        sv12[819] = -1 * sv12[771] * (-1 * sv12[66]);
        sv12[820] = -1 * sv12[772] * (-1 * sv12[66]);
        sv12[821] = -1 * sv12[773] * (-1 * sv12[66]);
        sv12[822] = -1 * sv12[774] * (-1 * sv12[66]);
        sv12[823] = -1 * sv12[775] * (-1 * sv12[66]);
        sv12[824] = -1 * sv12[776] * (-1 * sv12[66]);
        sv12[825] = sv12[14] * (-1 * sv12[67]);
        sv12[826] = sv12[17] * (-1 * sv12[67]);
        sv12[827] = -1 * sv12[771] * (-1 * sv12[67]);
        sv12[828] = -1 * sv12[772] * (-1 * sv12[67]);
        sv12[829] = -1 * sv12[773] * (-1 * sv12[67]);
        sv12[830] = -1 * sv12[774] * (-1 * sv12[67]);
        sv12[831] = -1 * sv12[775] * (-1 * sv12[67]);
        sv12[832] = -1 * sv12[776] * (-1 * sv12[67]);
        sv12[833] = sv12[14] * (-1 * sv12[71]);
        sv12[834] = sv12[17] * (-1 * sv12[71]);
        sv12[835] = -1 * sv12[771] * (-1 * sv12[71]);
        sv12[836] = -1 * sv12[772] * (-1 * sv12[71]);
        sv12[837] = -1 * sv12[773] * (-1 * sv12[71]);
        sv12[838] = -1 * sv12[774] * (-1 * sv12[71]);
        sv12[839] = -1 * sv12[775] * (-1 * sv12[71]);
        sv12[840] = -1 * sv12[776] * (-1 * sv12[71]);
        sv12[841] = sv12[14] * (-1 * sv12[72]);
        sv12[842] = sv12[17] * (-1 * sv12[72]);
        sv12[843] = -1 * sv12[771] * (-1 * sv12[72]);
        sv12[844] = -1 * sv12[772] * (-1 * sv12[72]);
        sv12[845] = -1 * sv12[773] * (-1 * sv12[72]);
        sv12[846] = -1 * sv12[774] * (-1 * sv12[72]);
        sv12[847] = -1 * sv12[775] * (-1 * sv12[72]);
        sv12[848] = -1 * sv12[776] * (-1 * sv12[72]);
        sv12[849] = sv12[14] * (-1 * sv12[73]);
        sv12[850] = sv12[17] * (-1 * sv12[73]);
        sv12[851] = -1 * sv12[771] * (-1 * sv12[73]);
        sv12[852] = -1 * sv12[772] * (-1 * sv12[73]);
        sv12[853] = -1 * sv12[773] * (-1 * sv12[73]);
        sv12[854] = -1 * sv12[774] * (-1 * sv12[73]);
        sv12[855] = -1 * sv12[775] * (-1 * sv12[73]);
        sv12[856] = -1 * sv12[776] * (-1 * sv12[73]);
        sv12[857] = sv12[14] * sp[3];
        sv12[858] = sv12[17] * sp[3];
        sv12[859] = -1 * sv12[771] * sp[3];
        sv12[860] = -1 * sv12[772] * sp[3];
        sv12[861] = -1 * sv12[773] * sp[3];
        sv12[862] = -1 * sv12[774] * sp[3];
        sv12[863] = -1 * sv12[775] * sp[3];
        sv12[864] = -1 * sv12[776] * sp[3];
        sv12[865] = sv12[14] * sp[4];
        sv12[866] = sv12[17] * sp[4];
        sv12[867] = -1 * sv12[771] * sp[4];
        sv12[868] = -1 * sv12[772] * sp[4];
        sv12[869] = -1 * sv12[773] * sp[4];
        sv12[870] = -1 * sv12[774] * sp[4];
        sv12[871] = -1 * sv12[775] * sp[4];
        sv12[872] = -1 * sv12[776] * sp[4];
        sv12[873] = sv12[777] + sv12[105];
        sv12[874] = sv12[785] + sv12[106];
        sv12[875] = sv12[778] + sv12[713];
        sv12[876] = sv12[786] + sv12[714];
        sv12[877] = sv12[779] + sv12[715];
        sv12[878] = sv12[780] + sv12[716];
        sv12[879] = sv12[781] + sv12[717];
        sv12[880] = sv12[782] + sv12[718];
        sv12[881] = sv12[783] + sv12[719];
        sv12[882] = sv12[784] + sv12[720];
        sv12[883] = sv12[787] + sv12[721];
        sv12[884] = sv12[788] + sv12[722];
        sv12[885] = sv12[789] + sv12[723];
        sv12[886] = sv12[790] + sv12[724];
        sv12[887] = sv12[791] + sv12[725];
        sv12[888] = sv12[792] + sv12[726];
        sv12[889] = sv12[795] + sv12[727];
        sv12[890] = sv12[796] + sv12[728];
        sv12[891] = sv12[803] + sv12[729];
        sv12[892] = sv12[804] + sv12[730];
        sv12[893] = sv12[811] + sv12[731];
        sv12[894] = sv12[812] + sv12[732];
        sv12[895] = sv12[733] + sv12[819];
        sv12[896] = sv12[734] + sv12[820];
        sv12[897] = sv12[821] + sv12[735];
        sv12[898] = sv12[822] + sv12[736];
        sv12[899] = sv12[823] + sv12[737];
        sv12[900] = sv12[824] + sv12[738];
        sv12[901] = sv12[739] + sv12[827];
        sv12[902] = sv12[740] + sv12[828];
        sv12[903] = sv12[829] + sv12[741];
        sv12[904] = sv12[830] + sv12[742];
        sv12[905] = sv12[831] + sv12[743];
        sv12[906] = sv12[832] + sv12[744];
        sv12[907] = sv12[835] + sv12[745];
        sv12[908] = sv12[836] + sv12[746];
        sv12[909] = sv12[843] + sv12[747];
        sv12[910] = sv12[844] + sv12[748];
        sv12[911] = sv12[851] + sv12[749];
        sv12[912] = sv12[852] + sv12[750];
        sv12[913] = sv12[873] + sv12[511];
        sv12[914] = sv12[874] + sv12[519];
        sv12[915] = sv12[793] + sv12[527];
        sv12[916] = sv12[801] + sv12[535];
        sv12[917] = sv12[809] + sv12[543];
        sv12[918] = sv12[607] + sv12[817];
        sv12[919] = sv12[608] + sv12[825];
        sv12[920] = sv12[567] + sv12[833];
        sv12[921] = sv12[575] + sv12[841];
        sv12[922] = sv12[583] + sv12[849];
        sv12[923] = sv12[857] + sv12[591];
        sv12[924] = sv12[599] + sv12[865];
        sv12[925] = sv12[875] + sv12[512];
        sv12[926] = sv12[876] + sv12[520];
        sv12[927] = sv12[794] + sv12[528];
        sv12[928] = sv12[802] + sv12[536];
        sv12[929] = sv12[810] + sv12[544];
        sv12[930] = sv12[609] + sv12[818];
        sv12[931] = sv12[610] + sv12[826];
        sv12[932] = sv12[568] + sv12[834];
        sv12[933] = sv12[576] + sv12[842];
        sv12[934] = sv12[584] + sv12[850];
        sv12[935] = sv12[858] + sv12[592];
        sv12[936] = sv12[600] + sv12[866];
        sv12[937] = sv12[877] + sv12[611];
        sv12[938] = sv12[878] + sv12[612];
        sv12[939] = sv12[879] + sv12[613];
        sv12[940] = sv12[880] + sv12[614];
        sv12[941] = sv12[881] + sv12[615];
        sv12[942] = sv12[882] + sv12[616];
        sv12[943] = sv12[883] + sv12[617];
        sv12[944] = sv12[884] + sv12[618];
        sv12[945] = sv12[885] + sv12[619];
        sv12[946] = sv12[886] + sv12[620];
        sv12[947] = sv12[887] + sv12[621];
        sv12[948] = sv12[888] + sv12[622];
        sv12[949] = sv12[889] + sv12[623];
        sv12[950] = sv12[890] + sv12[624];
        sv12[951] = sv12[797] + sv12[531];
        sv12[952] = sv12[798] + sv12[532];
        sv12[953] = sv12[799] + sv12[533];
        sv12[954] = sv12[800] + sv12[534];
        sv12[955] = sv12[891] + sv12[625];
        sv12[956] = sv12[892] + sv12[626];
        sv12[957] = sv12[805] + sv12[539];
        sv12[958] = sv12[806] + sv12[540];
        sv12[959] = sv12[807] + sv12[541];
        sv12[960] = sv12[808] + sv12[542];
        sv12[961] = sv12[893] + sv12[627];
        sv12[962] = sv12[894] + sv12[628];
        sv12[963] = sv12[813] + sv12[547];
        sv12[964] = sv12[814] + sv12[548];
        sv12[965] = sv12[815] + sv12[549];
        sv12[966] = sv12[816] + sv12[550];
        sv12[967] = sv12[629] + sv12[895];
        sv12[968] = sv12[630] + sv12[896];
        sv12[969] = sv12[631] + sv12[897];
        sv12[970] = sv12[632] + sv12[898];
        sv12[971] = sv12[633] + sv12[899];
        sv12[972] = sv12[634] + sv12[900];
        sv12[973] = sv12[635] + sv12[901];
        sv12[974] = sv12[636] + sv12[902];
        sv12[975] = sv12[637] + sv12[903];
        sv12[976] = sv12[638] + sv12[904];
        sv12[977] = sv12[639] + sv12[905];
        sv12[978] = sv12[640] + sv12[906];
        sv12[979] = sv12[641] + sv12[907];
        sv12[980] = sv12[642] + sv12[908];
        sv12[981] = sv12[571] + sv12[837];
        sv12[982] = sv12[572] + sv12[838];
        sv12[983] = sv12[573] + sv12[839];
        sv12[984] = sv12[574] + sv12[840];
        sv12[985] = sv12[643] + sv12[909];
        sv12[986] = sv12[644] + sv12[910];
        sv12[987] = sv12[579] + sv12[845];
        sv12[988] = sv12[580] + sv12[846];
        sv12[989] = sv12[581] + sv12[847];
        sv12[990] = sv12[582] + sv12[848];
        sv12[991] = sv12[645] + sv12[911];
        sv12[992] = sv12[646] + sv12[912];
        sv12[993] = sv12[587] + sv12[853];
        sv12[994] = sv12[588] + sv12[854];
        sv12[995] = sv12[589] + sv12[855];
        sv12[996] = sv12[590] + sv12[856];
        sv12[997] = sv12[859] + sv12[593];
        sv12[998] = sv12[860] + sv12[594];
        sv12[999] = sv12[861] + sv12[595];
        sv12[1000] = sv12[862] + sv12[596];
        sv12[1001] = sv12[863] + sv12[597];
        sv12[1002] = sv12[864] + sv12[598];
        sv12[1003] = sv12[601] + sv12[867];
        sv12[1004] = sv12[602] + sv12[868];
        sv12[1005] = sv12[603] + sv12[869];
        sv12[1006] = sv12[604] + sv12[870];
        sv12[1007] = sv12[605] + sv12[871];
        sv12[1008] = sv12[606] + sv12[872];
        sv12[1009] = (sv12[168] >= 0.1 ? sv12[223] : sv12[234]);
        sv12[1010] = sv12[913] * sv12[1009];
        sv12[1011] = sv12[914] * sv12[1009];
        sv12[1012] = sv12[915] * sv12[1009];
        sv12[1013] = sv12[916] * sv12[1009];
        sv12[1014] = sv12[917] * sv12[1009];
        sv12[1015] = sv12[918] * sv12[1009];
        sv12[1016] = sv12[919] * sv12[1009];
        sv12[1017] = sv12[920] * sv12[1009];
        sv12[1018] = sv12[921] * sv12[1009];
        sv12[1019] = sv12[922] * sv12[1009];
        sv12[1020] = sv12[923] * sv12[1009];
        sv12[1021] = sv12[924] * sv12[1009];
        sv12[1022] = sv12[925] * sv12[1009];
        sv12[1023] = sv12[926] * sv12[1009];
        sv12[1024] = sv12[927] * sv12[1009];
        sv12[1025] = sv12[928] * sv12[1009];
        sv12[1026] = sv12[929] * sv12[1009];
        sv12[1027] = sv12[930] * sv12[1009];
        sv12[1028] = sv12[931] * sv12[1009];
        sv12[1029] = sv12[932] * sv12[1009];
        sv12[1030] = sv12[933] * sv12[1009];
        sv12[1031] = sv12[934] * sv12[1009];
        sv12[1032] = sv12[935] * sv12[1009];
        sv12[1033] = sv12[936] * sv12[1009];
        sv12[1034] = sv12[937] * sv12[1009];
        sv12[1035] = sv12[938] * sv12[1009];
        sv12[1036] = sv12[939] * sv12[1009];
        sv12[1037] = sv12[940] * sv12[1009];
        sv12[1038] = sv12[941] * sv12[1009];
        sv12[1039] = sv12[942] * sv12[1009];
        sv12[1040] = sv12[943] * sv12[1009];
        sv12[1041] = sv12[944] * sv12[1009];
        sv12[1042] = sv12[945] * sv12[1009];
        sv12[1043] = sv12[946] * sv12[1009];
        sv12[1044] = sv12[947] * sv12[1009];
        sv12[1045] = sv12[948] * sv12[1009];
        sv12[1046] = sv12[949] * sv12[1009];
        sv12[1047] = sv12[950] * sv12[1009];
        sv12[1048] = sv12[951] * sv12[1009];
        sv12[1049] = sv12[952] * sv12[1009];
        sv12[1050] = sv12[953] * sv12[1009];
        sv12[1051] = sv12[954] * sv12[1009];
        sv12[1052] = sv12[955] * sv12[1009];
        sv12[1053] = sv12[956] * sv12[1009];
        sv12[1054] = sv12[957] * sv12[1009];
        sv12[1055] = sv12[958] * sv12[1009];
        sv12[1056] = sv12[959] * sv12[1009];
        sv12[1057] = sv12[960] * sv12[1009];
        sv12[1058] = sv12[961] * sv12[1009];
        sv12[1059] = sv12[962] * sv12[1009];
        sv12[1060] = sv12[963] * sv12[1009];
        sv12[1061] = sv12[964] * sv12[1009];
        sv12[1062] = sv12[965] * sv12[1009];
        sv12[1063] = sv12[966] * sv12[1009];
        sv12[1064] = sv12[967] * sv12[1009];
        sv12[1065] = sv12[968] * sv12[1009];
        sv12[1066] = sv12[969] * sv12[1009];
        sv12[1067] = sv12[970] * sv12[1009];
        sv12[1068] = sv12[971] * sv12[1009];
        sv12[1069] = sv12[972] * sv12[1009];
        sv12[1070] = sv12[973] * sv12[1009];
        sv12[1071] = sv12[974] * sv12[1009];
        sv12[1072] = sv12[975] * sv12[1009];
        sv12[1073] = sv12[976] * sv12[1009];
        sv12[1074] = sv12[977] * sv12[1009];
        sv12[1075] = sv12[978] * sv12[1009];
        sv12[1076] = sv12[979] * sv12[1009];
        sv12[1077] = sv12[980] * sv12[1009];
        sv12[1078] = sv12[981] * sv12[1009];
        sv12[1079] = sv12[982] * sv12[1009];
        sv12[1080] = sv12[983] * sv12[1009];
        sv12[1081] = sv12[984] * sv12[1009];
        sv12[1082] = sv12[985] * sv12[1009];
        sv12[1083] = sv12[986] * sv12[1009];
        sv12[1084] = sv12[987] * sv12[1009];
        sv12[1085] = sv12[988] * sv12[1009];
        sv12[1086] = sv12[989] * sv12[1009];
        sv12[1087] = sv12[990] * sv12[1009];
        sv12[1088] = sv12[991] * sv12[1009];
        sv12[1089] = sv12[992] * sv12[1009];
        sv12[1090] = sv12[993] * sv12[1009];
        sv12[1091] = sv12[994] * sv12[1009];
        sv12[1092] = sv12[995] * sv12[1009];
        sv12[1093] = sv12[996] * sv12[1009];
        sv12[1094] = sv12[997] * sv12[1009];
        sv12[1095] = sv12[998] * sv12[1009];
        sv12[1096] = sv12[999] * sv12[1009];
        sv12[1097] = sv12[1000] * sv12[1009];
        sv12[1098] = sv12[1001] * sv12[1009];
        sv12[1099] = sv12[1002] * sv12[1009];
        sv12[1100] = sv12[1003] * sv12[1009];
        sv12[1101] = sv12[1004] * sv12[1009];
        sv12[1102] = sv12[1005] * sv12[1009];
        sv12[1103] = sv12[1006] * sv12[1009];
        sv12[1104] = sv12[1007] * sv12[1009];
        sv12[1105] = sv12[1008] * sv12[1009];
        sv12[1106] = sv12[1010] + sv12[255];
        sv12[1107] = sv12[1011] + sv12[259];
        sv12[1108] = sv12[1012] + sv12[263];
        sv12[1109] = sv12[1013] + sv12[267];
        sv12[1110] = sv12[1014] + sv12[271];
        sv12[1111] = sv12[1015] + sv12[275];
        sv12[1112] = sv12[1016] + sv12[279];
        sv12[1113] = sv12[1017] + sv12[283];
        sv12[1114] = sv12[1018] + sv12[287];
        sv12[1115] = sv12[1019] + sv12[291];
        sv12[1116] = sv12[1020] + sv12[295];
        sv12[1117] = sv12[1021] + sv12[299];
        sv12[1118] = sv12[1022] + sv12[256];
        sv12[1119] = sv12[1023] + sv12[260];
        sv12[1120] = sv12[1024] + sv12[264];
        sv12[1121] = sv12[1025] + sv12[268];
        sv12[1122] = sv12[1026] + sv12[272];
        sv12[1123] = sv12[1027] + sv12[276];
        sv12[1124] = sv12[1028] + sv12[280];
        sv12[1125] = sv12[1029] + sv12[284];
        sv12[1126] = sv12[1030] + sv12[288];
        sv12[1127] = sv12[1031] + sv12[292];
        sv12[1128] = sv12[1032] + sv12[296];
        sv12[1129] = sv12[1033] + sv12[300];
        sv12[1130] = sv12[257] + sv12[1034];
        sv12[1131] = sv12[258] + sv12[1035];
        sv12[1132] = sv12[261] + sv12[1040];
        sv12[1133] = sv12[262] + sv12[1041];
        sv12[1134] = sv12[265] + sv12[1046];
        sv12[1135] = sv12[266] + sv12[1047];
        sv12[1136] = sv12[269] + sv12[1052];
        sv12[1137] = sv12[270] + sv12[1053];
        sv12[1138] = sv12[273] + sv12[1058];
        sv12[1139] = sv12[274] + sv12[1059];
        sv12[1140] = sv12[277] + sv12[1064];
        sv12[1141] = sv12[278] + sv12[1065];
        sv12[1142] = sv12[281] + sv12[1070];
        sv12[1143] = sv12[282] + sv12[1071];
        sv12[1144] = sv12[285] + sv12[1076];
        sv12[1145] = sv12[286] + sv12[1077];
        sv12[1146] = sv12[289] + sv12[1082];
        sv12[1147] = sv12[290] + sv12[1083];
        sv12[1148] = sv12[293] + sv12[1088];
        sv12[1149] = sv12[294] + sv12[1089];
        sv12[1150] = sv12[297] + sv12[1094];
        sv12[1151] = sv12[298] + sv12[1095];
        sv12[1152] = sv12[301] + sv12[1100];
        sv12[1153] = sv12[302] + sv12[1101];
        sv12[1154] = sv12[14] + sv12[9];
        sv12[1155] = sv12[1154] * sp[3];
        sv12[1156] = sv12[1154] * sp[4];
        sv12[1157] = sv12[1154] * sp[6];
        sv12[1158] = sv12[1154] * sp[5];
        sv12[1159] = std::sqrt(1e-9 + sv12[165]);
        sv12[1160] = sv12[178] / (2 * sv12[1159]);
        sv12[1161] = sv12[177] / (2 * sv12[1159]);
        sv12[1162] = sp[119] * sv12[1160];
        sv12[1163] = sp[119] * sv12[1161];
        sv12[1164] = sv12[1155] * sv12[1162];
        sv12[1165] = sv12[1155] * sv12[1163];
        sv12[1166] = sv12[1156] * sv12[1162];
        sv12[1167] = sv12[1156] * sv12[1163];
        sv12[1168] = sv12[1157] * sv12[1162];
        sv12[1169] = sv12[1157] * sv12[1163];
        sv12[1170] = sv12[1158] * sv12[1162];
        sv12[1171] = sv12[1158] * sv12[1163];
        sv12[1172] = sv12[1106] + sv12[1164];
        sv12[1173] = sv12[1107] + sv12[1166];
        sv12[1174] = sv12[1111] + sv12[1168];
        sv12[1175] = sv12[1112] + sv12[1170];
        sv12[1176] = sv12[1118] + sv12[1165];
        sv12[1177] = sv12[1119] + sv12[1167];
        sv12[1178] = sv12[1123] + sv12[1169];
        sv12[1179] = sv12[1124] + sv12[1171];
        sv12[1180] = sp[3] * sv12[44];
        sv12[1181] = sp[4] * sv12[44];
        sv12[1182] = sp[6] * sv12[63];
        sv12[1183] = sp[5] * sv12[63];
        sv12[1184] = sv12[1180] + sv12[1182];
        sv12[1185] = sv12[1181] + sv12[1183];
        sv12[1186] = sv12[22] + -1 * sv12[1184];
        sv12[1187] = sv12[23] + -1 * sv12[1185];
        sv12[1188] = w3_c1 * sp[122];
        sv12[1189] = w3_c0 * sp[125];
        sv12[1190] = sv12[1188] + sv12[1189];
        sv12[1191] = sp[122] * sv12[44];
        sv12[1192] = sp[125] * sv12[63];
        sv12[1193] = sv12[1191] + sv12[1192];
        sv12[1194] = sv12[1190] + -1 * sv12[1193];
        sv12[1195] = w3_c4 + sv12[1194];
        sv12[1196] = w3_d1_c1 * sp[3];
        sv12[1197] = w3_d0_c1 * sp[4];
        sv12[1198] = sv12[1196] + sv12[1197];
        sv12[1199] = sv12[1198] + sv12[1198];
        sv12[1200] = sv12[1199] / 2 * (sv12[1199] / 2);
        sv12[1201] = w3_d1_c0 * sp[3];
        sv12[1202] = w3_d0_c0 * sp[4];
        sv12[1203] = sv12[1201] + sv12[1202];
        sv12[1204] = w3_d0_c1 * sp[5];
        sv12[1205] = w3_d1_c1 * sp[6];
        sv12[1206] = sv12[1204] + sv12[1205];
        sv12[1207] = sv12[1203] + sv12[1206];
        sv12[1208] = sv12[1207] / 2 * (sv12[1207] / 2);
        sv12[1209] = sv12[1200] + sv12[1208];
        sv12[1210] = w3_d0_c0 * sp[5];
        sv12[1211] = w3_d1_c0 * sp[6];
        sv12[1212] = sv12[1210] + sv12[1211];
        sv12[1213] = sv12[1212] + sv12[1212];
        sv12[1214] = sv12[1213] / 2 * (sv12[1213] / 2);
        sv12[1215] = sv12[1214] + sv12[1208];
        sv12[1216] = sv12[1209] + sv12[1215];
        sv12[1217] = 2.0 * sv12[1216] * sv12[41];
        sv12[1218] = sv12[1195] + -1 * sv12[1217];
        sv12[1219] = sv12[1186] * sv12[1218];
        sv12[1220] = sv12[1187] * sv12[1218];
        sv12[1221] = sv12[1219] * sv12[251];
        sv12[1222] = sv12[1219] * sv12[252];
        sv12[1223] = sv12[1219] * sv12[253];
        sv12[1224] = sv12[1219] * sv12[254];
        sv12[1225] = sv12[1220] * sv12[251];
        sv12[1226] = sv12[1220] * sv12[252];
        sv12[1227] = sv12[1220] * sv12[253];
        sv12[1228] = sv12[1220] * sv12[254];
        sv12[1229] = sp[122] * sv12[333];
        sv12[1230] = sp[122] * sv12[334];
        sv12[1231] = sp[122] * sv12[335];
        sv12[1232] = sp[122] * sv12[336];
        sv12[1233] = sp[122] * sv12[337];
        sv12[1234] = sp[122] * sv12[338];
        sv12[1235] = sp[125] * sv12[405];
        sv12[1236] = sp[125] * sv12[406];
        sv12[1237] = sp[125] * sv12[407];
        sv12[1238] = sp[125] * sv12[408];
        sv12[1239] = sp[125] * sv12[409];
        sv12[1240] = sp[125] * sv12[410];
        sv12[1241] = sv12[1229] + sv12[1235];
        sv12[1242] = sv12[1230] + sv12[1236];
        sv12[1243] = sv12[1231] + sv12[1237];
        sv12[1244] = sv12[1238] + sv12[1232];
        sv12[1245] = sv12[1233] + sv12[1239];
        sv12[1246] = sv12[1240] + sv12[1234];
        sv12[1247] = 2.0 * sv12[1216] * sv12[173];
        sv12[1248] = 2.0 * sv12[1216] * sv12[174];
        sv12[1249] = sv12[1199] / 2 * (sp[16] / 2);
        sv12[1250] = sv12[1199] / 2 * (sp[17] / 2);
        sv12[1251] = sv12[1249] + sv12[1249];
        sv12[1252] = sv12[1250] + sv12[1250];
        sv12[1253] = sv12[1207] / 2 * (sp[3] / 2);
        sv12[1254] = sv12[1207] / 2 * (sp[4] / 2);
        sv12[1255] = sv12[1207] / 2 * (sp[6] / 2);
        sv12[1256] = sv12[1207] / 2 * (sp[5] / 2);
        sv12[1257] = sv12[1253] + sv12[1253];
        sv12[1258] = sv12[1254] + sv12[1254];
        sv12[1259] = sv12[1255] + sv12[1255];
        sv12[1260] = sv12[1256] + sv12[1256];
        sv12[1261] = sv12[1251] + sv12[1259];
        sv12[1262] = sv12[1252] + sv12[1260];
        sv12[1263] = sv12[1213] / 2 * (sp[75] / 2);
        sv12[1264] = sv12[1213] / 2 * (sp[76] / 2);
        sv12[1265] = sv12[1263] + sv12[1263];
        sv12[1266] = sv12[1264] + sv12[1264];
        sv12[1267] = sv12[1265] + sv12[1257];
        sv12[1268] = sv12[1266] + sv12[1258];
        sv12[1269] = sv12[1267] + sv12[1257];
        sv12[1270] = sv12[1268] + sv12[1258];
        sv12[1271] = sv12[1261] + sv12[1259];
        sv12[1272] = sv12[1262] + sv12[1260];
        sv12[1273] = 2.0 * sv12[1269] * sv12[41];
        sv12[1274] = 2.0 * sv12[1270] * sv12[41];
        sv12[1275] = 2.0 * sv12[1271] * sv12[41];
        sv12[1276] = 2.0 * sv12[1272] * sv12[41];
        sv12[1277] = -1 * sv12[1241] + -1 * sv12[1247];
        sv12[1278] = 1.0 + -1 * sv12[1242] + -1 * sv12[1248];
        sv12[1279] = sv12[1186] * (-1 * sv12[1273]);
        sv12[1280] = sv12[1186] * (-1 * sv12[1274]);
        sv12[1281] = sv12[1186] * sp[122];
        sv12[1282] = sv12[1186] * sp[125];
        sv12[1283] = sv12[1186] * (-1 * sv12[1275]);
        sv12[1284] = sv12[1186] * (-1 * sv12[1276]);
        sv12[1285] = sv12[1186] * sv12[1277];
        sv12[1286] = sv12[1186] * sv12[1278];
        sv12[1287] = sv12[1186] * (-1 * sv12[1243]);
        sv12[1288] = sv12[1186] * (-1 * sv12[1244]);
        sv12[1289] = sv12[1186] * (-1 * sv12[1245]);
        sv12[1290] = sv12[1186] * (-1 * sv12[1246]);
        sv12[1291] = sv12[1187] * (-1 * sv12[1273]);
        sv12[1292] = sv12[1187] * (-1 * sv12[1274]);
        sv12[1293] = sv12[1187] * sp[122];
        sv12[1294] = sv12[1187] * sp[125];
        sv12[1295] = sv12[1187] * (-1 * sv12[1275]);
        sv12[1296] = sv12[1187] * (-1 * sv12[1276]);
        sv12[1297] = sv12[1187] * sv12[1277];
        sv12[1298] = sv12[1187] * sv12[1278];
        sv12[1299] = sv12[1187] * (-1 * sv12[1243]);
        sv12[1300] = sv12[1187] * (-1 * sv12[1244]);
        sv12[1301] = sv12[1187] * (-1 * sv12[1245]);
        sv12[1302] = sv12[1187] * (-1 * sv12[1246]);
        sv12[1303] = sp[3] * sv12[333];
        sv12[1304] = sp[3] * sv12[334];
        sv12[1305] = sp[3] * sv12[335];
        sv12[1306] = sp[3] * sv12[336];
        sv12[1307] = sp[3] * sv12[337];
        sv12[1308] = sp[3] * sv12[338];
        sv12[1309] = sp[4] * sv12[333];
        sv12[1310] = sp[4] * sv12[334];
        sv12[1311] = sp[4] * sv12[335];
        sv12[1312] = sp[4] * sv12[336];
        sv12[1313] = sp[4] * sv12[337];
        sv12[1314] = sp[4] * sv12[338];
        sv12[1315] = sp[6] * sv12[405];
        sv12[1316] = sp[6] * sv12[406];
        sv12[1317] = sp[6] * sv12[407];
        sv12[1318] = sp[6] * sv12[408];
        sv12[1319] = sp[6] * sv12[409];
        sv12[1320] = sp[6] * sv12[410];
        sv12[1321] = sp[5] * sv12[405];
        sv12[1322] = sp[5] * sv12[406];
        sv12[1323] = sp[5] * sv12[407];
        sv12[1324] = sp[5] * sv12[408];
        sv12[1325] = sp[5] * sv12[409];
        sv12[1326] = sp[5] * sv12[410];
        sv12[1327] = sv12[1303] + sv12[1315];
        sv12[1328] = sv12[1309] + sv12[1321];
        sv12[1329] = sv12[1304] + sv12[1316];
        sv12[1330] = sv12[1310] + sv12[1322];
        sv12[1331] = sv12[1305] + sv12[1317];
        sv12[1332] = sv12[1311] + sv12[1323];
        sv12[1333] = sv12[1318] + sv12[1306];
        sv12[1334] = sv12[1324] + sv12[1312];
        sv12[1335] = sv12[1307] + sv12[1319];
        sv12[1336] = sv12[1313] + sv12[1325];
        sv12[1337] = sv12[1320] + sv12[1308];
        sv12[1338] = sv12[1326] + sv12[1314];
        sv12[1339] = sv12[1218] * sp[3];
        sv12[1340] = sv12[1218] * sp[4];
        sv12[1341] = sv12[1218] * sp[6];
        sv12[1342] = sv12[1218] * sp[5];
        sv12[1343] = sv12[1218] * (-1 * sv12[1327]);
        sv12[1344] = sv12[1218] * (-1 * sv12[1328]);
        sv12[1345] = sv12[1218] * (-1 * sv12[1329]);
        sv12[1346] = sv12[1218] * (-1 * sv12[1330]);
        sv12[1347] = sv12[1218] * (-1 * sv12[1331]);
        sv12[1348] = sv12[1218] * (-1 * sv12[1332]);
        sv12[1349] = sv12[1218] * (-1 * sv12[1333]);
        sv12[1350] = sv12[1218] * (-1 * sv12[1334]);
        sv12[1351] = sv12[1218] * (-1 * sv12[1335]);
        sv12[1352] = sv12[1218] * (-1 * sv12[1336]);
        sv12[1353] = sv12[1218] * (-1 * sv12[1337]);
        sv12[1354] = sv12[1218] * (-1 * sv12[1338]);
        sv12[1355] = sv12[1281] + sv12[1339];
        sv12[1356] = sv12[1293] + sv12[1340];
        sv12[1357] = sv12[1282] + sv12[1341];
        sv12[1358] = sv12[1294] + sv12[1342];
        sv12[1359] = sv12[1285] + sv12[1343];
        sv12[1360] = sv12[1297] + sv12[1344];
        sv12[1361] = sv12[1286] + sv12[1345];
        sv12[1362] = sv12[1298] + sv12[1346];
        sv12[1363] = sv12[1287] + sv12[1347];
        sv12[1364] = sv12[1299] + sv12[1348];
        sv12[1365] = sv12[1288] + sv12[1349];
        sv12[1366] = sv12[1300] + sv12[1350];
        sv12[1367] = sv12[1289] + sv12[1351];
        sv12[1368] = sv12[1301] + sv12[1352];
        sv12[1369] = sv12[1290] + sv12[1353];
        sv12[1370] = sv12[1302] + sv12[1354];
        sv12[1371] = sv12[1279] * sv12[1009];
        sv12[1372] = sv12[1291] * sv12[1009];
        sv12[1373] = sv12[1280] * sv12[1009];
        sv12[1374] = sv12[1292] * sv12[1009];
        sv12[1375] = sv12[1355] * sv12[1009];
        sv12[1376] = sv12[1356] * sv12[1009];
        sv12[1377] = sv12[1357] * sv12[1009];
        sv12[1378] = sv12[1358] * sv12[1009];
        sv12[1379] = sv12[1283] * sv12[1009];
        sv12[1380] = sv12[1295] * sv12[1009];
        sv12[1381] = sv12[1284] * sv12[1009];
        sv12[1382] = sv12[1296] * sv12[1009];
        sv12[1383] = sv12[1359] * sv12[1009];
        sv12[1384] = sv12[1360] * sv12[1009];
        sv12[1385] = sv12[1361] * sv12[1009];
        sv12[1386] = sv12[1362] * sv12[1009];
        sv12[1387] = sv12[1363] * sv12[1009];
        sv12[1388] = sv12[1364] * sv12[1009];
        sv12[1389] = sv12[1365] * sv12[1009];
        sv12[1390] = sv12[1366] * sv12[1009];
        sv12[1391] = sv12[1367] * sv12[1009];
        sv12[1392] = sv12[1368] * sv12[1009];
        sv12[1393] = sv12[1369] * sv12[1009];
        sv12[1394] = sv12[1370] * sv12[1009];
        sv12[1395] = sv12[1375] + sv12[1221];
        sv12[1396] = sv12[1376] + sv12[1225];
        sv12[1397] = sv12[1377] + sv12[1222];
        sv12[1398] = sv12[1378] + sv12[1226];
        sv12[1399] = sv12[1223] + sv12[1383];
        sv12[1400] = sv12[1227] + sv12[1384];
        sv12[1401] = sv12[1224] + sv12[1385];
        sv12[1402] = sv12[1228] + sv12[1386];
        sv12[1403] = sv12[44] / 1.3 * sp[3];
        sv12[1404] = sv12[44] / 1.3 * sp[4];
        sv12[1405] = sv12[63] / 1.3 * sp[6];
        sv12[1406] = sv12[63] / 1.3 * sp[5];
        sv12[1407] = sv12[1403] + sv12[1405];
        sv12[1408] = sv12[1406] + sv12[1404];
        sv12[1409] = sv12[22] + -1 * sv12[1407];
        sv12[1410] = sv12[23] + -1 * sv12[1408];
        sv12[1411] = w3_c3 * w3_c3;
        sv12[1412] = std::sqrt(1e-8 + sv12[1411]);
        sv12[1413] = w3_c3 + sv12[1412];
        sv12[1414] = 1.92 * w2_c4 * (1.0 / (0.5 * sv12[1413]));
        sv12[1415] = w2_c4 / (0.5 * sv12[1413]);
        sv12[1416] = sv12[1414] + 1.92 * sv12[1415];
        sv12[1417] = w3_c1 * sp[128];
        sv12[1418] = w3_c0 * sp[131];
        sv12[1419] = sv12[1417] + sv12[1418];
        sv12[1420] = sp[128] * (sv12[44] / 1.3);
        sv12[1421] = sp[131] * (sv12[63] / 1.3);
        sv12[1422] = sv12[1420] + sv12[1421];
        sv12[1423] = sv12[1419] + -1 * sv12[1422];
        sv12[1424] = 1.92 * w2_c4 * sv12[1415];
        sv12[1425] = sv12[1423] + sv12[1424];
        sv12[1426] = w3_c3 * (0.09 * (1.44 * sv12[24]));
        sv12[1427] = 2.0 * sv12[1216] * sv12[1426];
        sv12[1428] = sv12[1425] + -1 * sv12[1427];
        sv12[1429] = sv12[1409] * sv12[1428];
        sv12[1430] = sv12[1410] * sv12[1428];
        sv12[1431] = sv12[1428] * sv12[1416];
        sv12[1432] = sv12[167] / (0.0001 + sv12[41] / 1.3);
        sv12[1433] = sv12[173] / 1.3 * sv12[1432];
        sv12[1434] = sv12[174] / 1.3 * sv12[1432];
        sv12[1435] = sv12[181] / (0.0001 + sv12[41] / 1.3);
        sv12[1436] = sv12[182] / (0.0001 + sv12[41] / 1.3);
        sv12[1437] = -1 * sv12[1433] / (0.0001 + sv12[41] / 1.3);
        sv12[1438] = -1 * sv12[1434] / (0.0001 + sv12[41] / 1.3);
        sv12[1439] = sv12[1435] * (1.0 / sv12[1432]);
        sv12[1440] = sv12[1436] * (1.0 / sv12[1432]);
        sv12[1441] = sv12[1437] * (1.0 / sv12[1432]);
        sv12[1442] = sv12[1438] * (1.0 / sv12[1432]);
        sv12[1443] = -1 * sv12[1439] / sv12[1432];
        sv12[1444] = -1 * sv12[1440] / sv12[1432];
        sv12[1445] = -1 * sv12[1441] / sv12[1432];
        sv12[1446] = -1 * sv12[1442] / sv12[1432];
        sv12[1447] = std::exp(-2.0 * sv12[1432]);
        sv12[1448] = -2.0 * sv12[1435] * sv12[1447];
        sv12[1449] = -2.0 * sv12[1436] * sv12[1447];
        sv12[1450] = -2.0 * sv12[1437] * sv12[1447];
        sv12[1451] = -2.0 * sv12[1438] * sv12[1447];
        sv12[1452] = (1.0 + sv12[1447]) / (1.0 + -1 * sv12[1447]);
        sv12[1453] = -1 * sv12[1448] * sv12[1452];
        sv12[1454] = -1 * sv12[1449] * sv12[1452];
        sv12[1455] = -1 * sv12[1450] * sv12[1452];
        sv12[1456] = -1 * sv12[1451] * sv12[1452];
        sv12[1457] = -1 * sv12[1453] + sv12[1448];
        sv12[1458] = -1 * sv12[1454] + sv12[1449];
        sv12[1459] = -1 * sv12[1455] + sv12[1450];
        sv12[1460] = -1 * sv12[1456] + sv12[1451];
        sv12[1461] = sv12[1457] / (1.0 + -1 * sv12[1447]);
        sv12[1462] = sv12[1458] / (1.0 + -1 * sv12[1447]);
        sv12[1463] = sv12[1459] / (1.0 + -1 * sv12[1447]);
        sv12[1464] = sv12[1460] / (1.0 + -1 * sv12[1447]);
        sv12[1465] = -1 * sv12[1443] + sv12[1461];
        sv12[1466] = -1 * sv12[1444] + sv12[1462];
        sv12[1467] = -1 * sv12[1445] + sv12[1463];
        sv12[1468] = -1 * sv12[1446] + sv12[1464];
        sv12[1469] = sv12[1465] * (2.0 * sp[116]);
        sv12[1470] = sv12[1466] * (2.0 * sp[116]);
        sv12[1471] = sv12[1467] * (2.0 * sp[116]);
        sv12[1472] = sv12[1468] * (2.0 * sp[116]);
        sv12[1473] = -1 * (1.0 / sv12[1432]) + sv12[1452];
        sv12[1474] = sv12[1473] * (2.0 * sp[116]);
        sv12[1475] = sv12[1474] / sv12[166];
        sv12[1476] = sv12[179] * sv12[1475];
        sv12[1477] = sv12[180] * sv12[1475];
        sv12[1478] = sv12[1469] + -1 * sv12[1476];
        sv12[1479] = sv12[1470] + -1 * sv12[1477];
        sv12[1480] = sv12[1478] / sv12[166];
        sv12[1481] = sv12[1479] / sv12[166];
        sv12[1482] = sv12[1471] / sv12[166];
        sv12[1483] = sv12[1472] / sv12[166];
        sv12[1484] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[1432]) * (2.0 * sp[116]);
        sv12[1485] = sv12[1484] * (2.0 * sp[116]);
        sv12[1486] = sv12[1485] / (0.0001 + sv12[41] / 1.3);
        sv12[1487] = sv12[173] / 1.3 * sv12[1486];
        sv12[1488] = sv12[174] / 1.3 * sv12[1486];
        sv12[1489] = 0.5 * (-0.004435991517475 * sv12[1435]) * (2.0 * sp[116]);
        sv12[1490] = 0.5 * (-0.004435991517475 * sv12[1436]) * (2.0 * sp[116]);
        sv12[1491] = 0.5 * (-0.004435991517475 * sv12[1437]) * (2.0 * sp[116]);
        sv12[1492] = 0.5 * (-0.004435991517475 * sv12[1438]) * (2.0 * sp[116]);
        sv12[1493] = sv12[1489] * (2.0 * sp[116]);
        sv12[1494] = sv12[1490] * (2.0 * sp[116]);
        sv12[1495] = sv12[1491] * (2.0 * sp[116]);
        sv12[1496] = sv12[1492] * (2.0 * sp[116]);
        sv12[1497] = -1 * sv12[1487] + sv12[1495];
        sv12[1498] = -1 * sv12[1488] + sv12[1496];
        sv12[1499] = sv12[1493] / (0.0001 + sv12[41] / 1.3);
        sv12[1500] = sv12[1494] / (0.0001 + sv12[41] / 1.3);
        sv12[1501] = sv12[1497] / (0.0001 + sv12[41] / 1.3);
        sv12[1502] = sv12[1498] / (0.0001 + sv12[41] / 1.3);
        sv12[1503] = (sv12[1432] >= 0.1 ? sv12[1480] : sv12[1499]);
        sv12[1504] = (sv12[1432] >= 0.1 ? sv12[1481] : sv12[1500]);
        sv12[1505] = (sv12[1432] >= 0.1 ? sv12[1482] : sv12[1501]);
        sv12[1506] = (sv12[1432] >= 0.1 ? sv12[1483] : sv12[1502]);
        sv12[1507] = sv12[1429] * sv12[1503];
        sv12[1508] = sv12[1429] * sv12[1504];
        sv12[1509] = sv12[1429] * sv12[1505];
        sv12[1510] = sv12[1429] * sv12[1506];
        sv12[1511] = sv12[1430] * sv12[1503];
        sv12[1512] = sv12[1430] * sv12[1504];
        sv12[1513] = sv12[1430] * sv12[1505];
        sv12[1514] = sv12[1430] * sv12[1506];
        sv12[1515] = sv12[1431] * sv12[1503];
        sv12[1516] = sv12[1431] * sv12[1504];
        sv12[1517] = sv12[1431] * sv12[1505];
        sv12[1518] = sv12[1431] * sv12[1506];
        sv12[1519] = sp[128] * (sv12[333] / 1.3);
        sv12[1520] = sp[128] * (sv12[334] / 1.3);
        sv12[1521] = sp[128] * (sv12[335] / 1.3);
        sv12[1522] = sp[128] * (sv12[336] / 1.3);
        sv12[1523] = sp[128] * (sv12[337] / 1.3);
        sv12[1524] = sp[128] * (sv12[338] / 1.3);
        sv12[1525] = sp[131] * (sv12[405] / 1.3);
        sv12[1526] = sp[131] * (sv12[406] / 1.3);
        sv12[1527] = sp[131] * (sv12[407] / 1.3);
        sv12[1528] = sp[131] * (sv12[408] / 1.3);
        sv12[1529] = sp[131] * (sv12[409] / 1.3);
        sv12[1530] = sp[131] * (sv12[410] / 1.3);
        sv12[1531] = sv12[1519] + sv12[1525];
        sv12[1532] = sv12[1520] + sv12[1526];
        sv12[1533] = sv12[1521] + sv12[1527];
        sv12[1534] = sv12[1528] + sv12[1522];
        sv12[1535] = sv12[1523] + sv12[1529];
        sv12[1536] = sv12[1530] + sv12[1524];
        sv12[1537] = w3_c3 + w3_c3;
        sv12[1538] = sv12[1537] / (2 * sv12[1412]);
        sv12[1539] = 0.5 * (1.0 + sv12[1538]) * sv12[1415];
        sv12[1540] = -1 * sv12[1539] / (0.5 * sv12[1413]);
        sv12[1541] = 1.92 * w2_c4 * sv12[1540];
        sv12[1542] = -1 * sv12[1531] + sv12[1541];
        sv12[1543] = 2.0 * sv12[1216] * (0.09 * (1.44 * sv12[24]));
        sv12[1544] = 2.0 * sv12[1269] * sv12[1426];
        sv12[1545] = 2.0 * sv12[1270] * sv12[1426];
        sv12[1546] = 2.0 * sv12[1271] * sv12[1426];
        sv12[1547] = 2.0 * sv12[1272] * sv12[1426];
        sv12[1548] = sv12[1542] + -1 * sv12[1543];
        sv12[1549] = sv12[1409] * (-1 * sv12[1544]);
        sv12[1550] = sv12[1409] * (-1 * sv12[1545]);
        sv12[1551] = sv12[1409] * sp[128];
        sv12[1552] = sv12[1409] * sp[131];
        sv12[1553] = sv12[1409] * (-1 * sv12[1546]);
        sv12[1554] = sv12[1409] * (-1 * sv12[1547]);
        sv12[1555] = sv12[1409] * sv12[1548];
        sv12[1556] = sv12[1409] * (-1 * sv12[1532]);
        sv12[1557] = sv12[1409] * (-1 * sv12[1533]);
        sv12[1558] = sv12[1409] * (-1 * sv12[1534]);
        sv12[1559] = sv12[1409] * (-1 * sv12[1535]);
        sv12[1560] = sv12[1409] * (-1 * sv12[1536]);
        sv12[1561] = sv12[1410] * (-1 * sv12[1544]);
        sv12[1562] = sv12[1410] * (-1 * sv12[1545]);
        sv12[1563] = sv12[1410] * sp[128];
        sv12[1564] = sv12[1410] * sp[131];
        sv12[1565] = sv12[1410] * (-1 * sv12[1546]);
        sv12[1566] = sv12[1410] * (-1 * sv12[1547]);
        sv12[1567] = sv12[1410] * sv12[1548];
        sv12[1568] = sv12[1410] * (-1 * sv12[1532]);
        sv12[1569] = sv12[1410] * (-1 * sv12[1533]);
        sv12[1570] = sv12[1410] * (-1 * sv12[1534]);
        sv12[1571] = sv12[1410] * (-1 * sv12[1535]);
        sv12[1572] = sv12[1410] * (-1 * sv12[1536]);
        sv12[1573] = sv12[1416] * (-1 * sv12[1544]);
        sv12[1574] = sv12[1416] * (-1 * sv12[1545]);
        sv12[1575] = sp[128] * sv12[1416];
        sv12[1576] = sp[131] * sv12[1416];
        sv12[1577] = sv12[1416] * (-1 * sv12[1546]);
        sv12[1578] = sv12[1416] * (-1 * sv12[1547]);
        sv12[1579] = sv12[1548] * sv12[1416];
        sv12[1580] = sv12[1416] * (-1 * sv12[1532]);
        sv12[1581] = sv12[1416] * (-1 * sv12[1533]);
        sv12[1582] = sv12[1416] * (-1 * sv12[1534]);
        sv12[1583] = sv12[1416] * (-1 * sv12[1535]);
        sv12[1584] = sv12[1416] * (-1 * sv12[1536]);
        sv12[1585] = sv12[333] / 1.3 * sp[3];
        sv12[1586] = sv12[334] / 1.3 * sp[3];
        sv12[1587] = sv12[335] / 1.3 * sp[3];
        sv12[1588] = sv12[336] / 1.3 * sp[3];
        sv12[1589] = sv12[337] / 1.3 * sp[3];
        sv12[1590] = sv12[338] / 1.3 * sp[3];
        sv12[1591] = sv12[333] / 1.3 * sp[4];
        sv12[1592] = sv12[334] / 1.3 * sp[4];
        sv12[1593] = sv12[335] / 1.3 * sp[4];
        sv12[1594] = sv12[336] / 1.3 * sp[4];
        sv12[1595] = sv12[337] / 1.3 * sp[4];
        sv12[1596] = sv12[338] / 1.3 * sp[4];
        sv12[1597] = sv12[405] / 1.3 * sp[6];
        sv12[1598] = sv12[406] / 1.3 * sp[6];
        sv12[1599] = sv12[407] / 1.3 * sp[6];
        sv12[1600] = sv12[408] / 1.3 * sp[6];
        sv12[1601] = sv12[409] / 1.3 * sp[6];
        sv12[1602] = sv12[410] / 1.3 * sp[6];
        sv12[1603] = sv12[405] / 1.3 * sp[5];
        sv12[1604] = sv12[406] / 1.3 * sp[5];
        sv12[1605] = sv12[407] / 1.3 * sp[5];
        sv12[1606] = sv12[408] / 1.3 * sp[5];
        sv12[1607] = sv12[409] / 1.3 * sp[5];
        sv12[1608] = sv12[410] / 1.3 * sp[5];
        sv12[1609] = sv12[1585] + sv12[1597];
        sv12[1610] = sv12[1603] + sv12[1591];
        sv12[1611] = sv12[1586] + sv12[1598];
        sv12[1612] = sv12[1604] + sv12[1592];
        sv12[1613] = sv12[1587] + sv12[1599];
        sv12[1614] = sv12[1605] + sv12[1593];
        sv12[1615] = sv12[1588] + sv12[1600];
        sv12[1616] = sv12[1606] + sv12[1594];
        sv12[1617] = sv12[1589] + sv12[1601];
        sv12[1618] = sv12[1607] + sv12[1595];
        sv12[1619] = sv12[1590] + sv12[1602];
        sv12[1620] = sv12[1608] + sv12[1596];
        sv12[1621] = 0.5 * (1.0 + sv12[1538]) * (1.0 / (0.5 * sv12[1413]));
        sv12[1622] = -1 * sv12[1621] / (0.5 * sv12[1413]);
        sv12[1623] = 1.92 * w2_c4 * sv12[1622];
        sv12[1624] = sv12[1623] + 1.92 * sv12[1540];
        sv12[1625] = sv12[1428] * sp[3];
        sv12[1626] = sv12[1428] * sp[4];
        sv12[1627] = sv12[1428] * sp[6];
        sv12[1628] = sv12[1428] * sp[5];
        sv12[1629] = sv12[1428] * (-1 * sv12[1609]);
        sv12[1630] = sv12[1428] * (-1 * sv12[1610]);
        sv12[1631] = sv12[1428] * sv12[1624];
        sv12[1632] = sv12[1428] * (-1 * sv12[1611]);
        sv12[1633] = sv12[1428] * (-1 * sv12[1612]);
        sv12[1634] = sv12[1428] * (-1 * sv12[1613]);
        sv12[1635] = sv12[1428] * (-1 * sv12[1614]);
        sv12[1636] = sv12[1428] * (-1 * sv12[1615]);
        sv12[1637] = sv12[1428] * (-1 * sv12[1616]);
        sv12[1638] = sv12[1428] * (-1 * sv12[1617]);
        sv12[1639] = sv12[1428] * (-1 * sv12[1618]);
        sv12[1640] = sv12[1428] * (-1 * sv12[1619]);
        sv12[1641] = sv12[1428] * (-1 * sv12[1620]);
        sv12[1642] = sv12[1551] + sv12[1625];
        sv12[1643] = sv12[1563] + sv12[1626];
        sv12[1644] = sv12[1552] + sv12[1627];
        sv12[1645] = sv12[1564] + sv12[1628];
        sv12[1646] = sv12[1555] + sv12[1629];
        sv12[1647] = sv12[1567] + sv12[1630];
        sv12[1648] = sv12[1579] + sv12[1631];
        sv12[1649] = sv12[1556] + sv12[1632];
        sv12[1650] = sv12[1568] + sv12[1633];
        sv12[1651] = sv12[1557] + sv12[1634];
        sv12[1652] = sv12[1569] + sv12[1635];
        sv12[1653] = sv12[1558] + sv12[1636];
        sv12[1654] = sv12[1570] + sv12[1637];
        sv12[1655] = sv12[1559] + sv12[1638];
        sv12[1656] = sv12[1571] + sv12[1639];
        sv12[1657] = sv12[1560] + sv12[1640];
        sv12[1658] = sv12[1572] + sv12[1641];
        sv12[1659] = (sv12[1432] >= 0.1 ? sv12[1475] : sv12[1486]);
        sv12[1660] = sv12[1549] * sv12[1659];
        sv12[1661] = sv12[1561] * sv12[1659];
        sv12[1662] = sv12[1573] * sv12[1659];
        sv12[1663] = sv12[1550] * sv12[1659];
        sv12[1664] = sv12[1562] * sv12[1659];
        sv12[1665] = sv12[1574] * sv12[1659];
        sv12[1666] = sv12[1642] * sv12[1659];
        sv12[1667] = sv12[1643] * sv12[1659];
        sv12[1668] = sv12[1575] * sv12[1659];
        sv12[1669] = sv12[1644] * sv12[1659];
        sv12[1670] = sv12[1645] * sv12[1659];
        sv12[1671] = sv12[1576] * sv12[1659];
        sv12[1672] = sv12[1553] * sv12[1659];
        sv12[1673] = sv12[1565] * sv12[1659];
        sv12[1674] = sv12[1577] * sv12[1659];
        sv12[1675] = sv12[1554] * sv12[1659];
        sv12[1676] = sv12[1566] * sv12[1659];
        sv12[1677] = sv12[1578] * sv12[1659];
        sv12[1678] = sv12[1646] * sv12[1659];
        sv12[1679] = sv12[1647] * sv12[1659];
        sv12[1680] = sv12[1648] * sv12[1659];
        sv12[1681] = sv12[1649] * sv12[1659];
        sv12[1682] = sv12[1650] * sv12[1659];
        sv12[1683] = sv12[1580] * sv12[1659];
        sv12[1684] = sv12[1651] * sv12[1659];
        sv12[1685] = sv12[1652] * sv12[1659];
        sv12[1686] = sv12[1581] * sv12[1659];
        sv12[1687] = sv12[1653] * sv12[1659];
        sv12[1688] = sv12[1654] * sv12[1659];
        sv12[1689] = sv12[1582] * sv12[1659];
        sv12[1690] = sv12[1655] * sv12[1659];
        sv12[1691] = sv12[1656] * sv12[1659];
        sv12[1692] = sv12[1583] * sv12[1659];
        sv12[1693] = sv12[1657] * sv12[1659];
        sv12[1694] = sv12[1658] * sv12[1659];
        sv12[1695] = sv12[1584] * sv12[1659];
        sv12[1696] = sv12[1666] + sv12[1507];
        sv12[1697] = sv12[1667] + sv12[1511];
        sv12[1698] = sv12[1668] + sv12[1515];
        sv12[1699] = sv12[1669] + sv12[1508];
        sv12[1700] = sv12[1670] + sv12[1512];
        sv12[1701] = sv12[1671] + sv12[1516];
        sv12[1702] = sv12[1509] + sv12[1678];
        sv12[1703] = sv12[1513] + sv12[1679];
        sv12[1704] = sv12[1517] + sv12[1680];
        sv12[1705] = sv12[1510] + sv12[1681];
        sv12[1706] = sv12[1514] + sv12[1682];
        sv12[1707] = sv12[1518] + sv12[1683];
        sv12[1708] = w2_c3 * (0.09 * sv12[24]);
        sv12[1709] = w2_c3 * sv12[1708];
        sv12[1710] = w2_c4 * w2_c4;
        sv12[1711] = std::sqrt(1e-8 + sv12[1710]);
        sv12[1712] = w2_c4 + sv12[1711];
        sv12[1713] = sv12[1709] / (0.5 * sv12[1712]);
        sv12[1714] = sp[132] * (0.0001 + sv12[1713]);
        sv12[1715] = sp[133] * (0.0001 + sv12[1713]);
        sv12[1716] = sp[134] * (0.0001 + sv12[1713]);
        sv12[1717] = sv12[1708] + sv12[1708];
        sv12[1718] = w2_c4 + w2_c4;
        sv12[1719] = sv12[1718] / (2 * sv12[1711]);
        sv12[1720] = 0.5 * (1.0 + sv12[1719]) * sv12[1713];
        sv12[1721] = sv12[1717] / (0.5 * sv12[1712]);
        sv12[1722] = -1 * sv12[1720] / (0.5 * sv12[1712]);
        sv12[1723] = sp[139] * sv12[1721];
        sv12[1724] = sp[139] * sv12[1722];
        sv12[1725] = sp[140] * sv12[1721];
        sv12[1726] = sp[140] * sv12[1722];
        sv12[1727] = sv12[1399] + sv12[1723];
        sv12[1728] = sv12[1400] + sv12[1725];
        sv12[1729] = sv12[1401] + sv12[1724];
        sv12[1730] = sv12[1402] + sv12[1726];
        sv12[1731] = sv12[1714] + sv12[1387];
        sv12[1732] = sv12[1715] + sv12[1388];
        sv12[1733] = sv12[1715] + sv12[1389];
        sv12[1734] = sv12[1716] + sv12[1390];
        sv12[1735] = sp[132] * (0.0001 + sv12[1713] / 1.3);
        sv12[1736] = sp[133] * (0.0001 + sv12[1713] / 1.3);
        sv12[1737] = sp[134] * (0.0001 + sv12[1713] / 1.3);
        sv12[1738] = sp[145] * (sv12[1721] / 1.3);
        sv12[1739] = sp[145] * (sv12[1722] / 1.3);
        sv12[1740] = sp[146] * (sv12[1721] / 1.3);
        sv12[1741] = sp[146] * (sv12[1722] / 1.3);
        sv12[1742] = sv12[1702] + sv12[1738];
        sv12[1743] = sv12[1703] + sv12[1740];
        sv12[1744] = sv12[1705] + sv12[1739];
        sv12[1745] = sv12[1706] + sv12[1741];
        sv12[1746] = sv12[1735] + sv12[1690];
        sv12[1747] = sv12[1736] + sv12[1691];
        sv12[1748] = sv12[1736] + sv12[1693];
        sv12[1749] = sv12[1737] + sv12[1694];
        sv12[1750] = sp[119] * sv12[1159];
        sv12[1751] = sp[35] * sv12[1750];
        sv12[1752] = sp[36] * sv12[1750];
        sv12[1753] = sp[41] * sv12[1750];
        sv12[1754] = sp[39] * sv12[1750];
        sv12[1755] = sp[34] * sv12[1750];
        sv12[1756] = sp[37] * sv12[1750];
        sv12[1757] = sp[40] * sv12[1750];
        sv12[1758] = sp[18] * sv12[1750];
        sv12[1759] = sp[19] * sv12[1750];
        sv12[1760] = sp[20] * sv12[1750];
        sv12[1761] = sv12[79] * (-1 * sv12[66]);
        sv12[1762] = sv12[79] * (-1 * sv12[67]);
        sv12[1763] = sv12[79] * sv12[79];
        sv12[1764] = sv12[80] * sv12[79];
        sv12[1765] = sv12[79] * (-1 * sv12[76]);
        sv12[1766] = sv12[79] * (-1 * sv12[77]);
        sv12[1767] = sv12[79] * (-1 * sv12[78]);
        sv12[1768] = sv12[79] * (-1 * sv12[71]);
        sv12[1769] = sv12[79] * (-1 * sv12[72]);
        sv12[1770] = sv12[79] * (-1 * sv12[73]);
        sv12[1771] = sv12[79] * sp[3];
        sv12[1772] = sv12[79] * sp[4];
        sv12[1773] = sv12[80] * (-1 * sv12[66]);
        sv12[1774] = sv12[80] * (-1 * sv12[67]);
        sv12[1775] = sv12[80] * sv12[80];
        sv12[1776] = sv12[80] * (-1 * sv12[76]);
        sv12[1777] = sv12[80] * (-1 * sv12[77]);
        sv12[1778] = sv12[80] * (-1 * sv12[78]);
        sv12[1779] = sv12[80] * (-1 * sv12[71]);
        sv12[1780] = sv12[80] * (-1 * sv12[72]);
        sv12[1781] = sv12[80] * (-1 * sv12[73]);
        sv12[1782] = sv12[80] * sp[3];
        sv12[1783] = sv12[80] * sp[4];
        sv12[1784] = -1 * sv12[76] * (-1 * sv12[66]);
        sv12[1785] = -1 * sv12[76] * (-1 * sv12[67]);
        sv12[1786] = -1 * sv12[76] * (-1 * sv12[76]);
        sv12[1787] = -1 * sv12[77] * (-1 * sv12[76]);
        sv12[1788] = -1 * sv12[78] * (-1 * sv12[76]);
        sv12[1789] = -1 * sv12[76] * (-1 * sv12[71]);
        sv12[1790] = -1 * sv12[76] * (-1 * sv12[72]);
        sv12[1791] = -1 * sv12[76] * (-1 * sv12[73]);
        sv12[1792] = -1 * sv12[76] * sp[3];
        sv12[1793] = -1 * sv12[76] * sp[4];
        sv12[1794] = -1 * sv12[77] * (-1 * sv12[66]);
        sv12[1795] = -1 * sv12[77] * (-1 * sv12[67]);
        sv12[1796] = -1 * sv12[77] * (-1 * sv12[77]);
        sv12[1797] = -1 * sv12[77] * (-1 * sv12[78]);
        sv12[1798] = -1 * sv12[77] * (-1 * sv12[71]);
        sv12[1799] = -1 * sv12[77] * (-1 * sv12[72]);
        sv12[1800] = -1 * sv12[77] * (-1 * sv12[73]);
        sv12[1801] = -1 * sv12[77] * sp[3];
        sv12[1802] = -1 * sv12[77] * sp[4];
        sv12[1803] = -1 * sv12[78] * (-1 * sv12[66]);
        sv12[1804] = -1 * sv12[78] * (-1 * sv12[67]);
        sv12[1805] = -1 * sv12[78] * (-1 * sv12[78]);
        sv12[1806] = -1 * sv12[78] * (-1 * sv12[71]);
        sv12[1807] = -1 * sv12[78] * (-1 * sv12[72]);
        sv12[1808] = -1 * sv12[78] * (-1 * sv12[73]);
        sv12[1809] = -1 * sv12[78] * sp[3];
        sv12[1810] = -1 * sv12[78] * sp[4];
        sv12[1811] = -1 * sv12[66] * (-1 * sv12[66]);
        sv12[1812] = -1 * sv12[66] * (-1 * sv12[67]);
        sv12[1813] = -1 * sv12[71] * (-1 * sv12[66]);
        sv12[1814] = -1 * sv12[72] * (-1 * sv12[66]);
        sv12[1815] = -1 * sv12[73] * (-1 * sv12[66]);
        sv12[1816] = -1 * sv12[66] * sp[3];
        sv12[1817] = -1 * sv12[66] * sp[4];
        sv12[1818] = -1 * sv12[67] * (-1 * sv12[67]);
        sv12[1819] = -1 * sv12[71] * (-1 * sv12[67]);
        sv12[1820] = -1 * sv12[72] * (-1 * sv12[67]);
        sv12[1821] = -1 * sv12[73] * (-1 * sv12[67]);
        sv12[1822] = -1 * sv12[67] * sp[3];
        sv12[1823] = -1 * sv12[67] * sp[4];
        sv12[1824] = -1 * sv12[71] * (-1 * sv12[71]);
        sv12[1825] = -1 * sv12[71] * (-1 * sv12[72]);
        sv12[1826] = -1 * sv12[71] * (-1 * sv12[73]);
        sv12[1827] = -1 * sv12[71] * sp[3];
        sv12[1828] = -1 * sv12[71] * sp[4];
        sv12[1829] = -1 * sv12[72] * (-1 * sv12[72]);
        sv12[1830] = -1 * sv12[73] * (-1 * sv12[72]);
        sv12[1831] = -1 * sv12[72] * sp[3];
        sv12[1832] = -1 * sv12[72] * sp[4];
        sv12[1833] = -1 * sv12[73] * (-1 * sv12[73]);
        sv12[1834] = -1 * sv12[73] * sp[3];
        sv12[1835] = -1 * sv12[73] * sp[4];
        sv12[1836] = sv12[124] * (-1 * sv12[107]);
        sv12[1837] = sv12[125] * (-1 * sv12[107]);
        sv12[1838] = -1 * sv12[107] * (-1 * sv12[107]);
        sv12[1839] = -1 * sv12[108] * (-1 * sv12[107]);
        sv12[1840] = -1 * sv12[72] * (-1 * sv12[107]);
        sv12[1841] = -1 * sv12[71] * (-1 * sv12[107]);
        sv12[1842] = -1 * sv12[73] * (-1 * sv12[107]);
        sv12[1843] = -1 * sv12[121] * (-1 * sv12[107]);
        sv12[1844] = -1 * sv12[122] * (-1 * sv12[107]);
        sv12[1845] = -1 * sv12[123] * (-1 * sv12[107]);
        sv12[1846] = -1 * sv12[107] * sp[6];
        sv12[1847] = -1 * sv12[107] * sp[5];
        sv12[1848] = sv12[124] * (-1 * sv12[108]);
        sv12[1849] = sv12[125] * (-1 * sv12[108]);
        sv12[1850] = -1 * sv12[108] * (-1 * sv12[108]);
        sv12[1851] = -1 * sv12[72] * (-1 * sv12[108]);
        sv12[1852] = -1 * sv12[71] * (-1 * sv12[108]);
        sv12[1853] = -1 * sv12[73] * (-1 * sv12[108]);
        sv12[1854] = -1 * sv12[121] * (-1 * sv12[108]);
        sv12[1855] = -1 * sv12[122] * (-1 * sv12[108]);
        sv12[1856] = -1 * sv12[123] * (-1 * sv12[108]);
        sv12[1857] = -1 * sv12[108] * sp[6];
        sv12[1858] = -1 * sv12[108] * sp[5];
        sv12[1859] = sv12[124] * (-1 * sv12[72]);
        sv12[1860] = sv12[125] * (-1 * sv12[72]);
        sv12[1861] = -1 * sv12[121] * (-1 * sv12[72]);
        sv12[1862] = -1 * sv12[122] * (-1 * sv12[72]);
        sv12[1863] = -1 * sv12[123] * (-1 * sv12[72]);
        sv12[1864] = -1 * sv12[72] * sp[6];
        sv12[1865] = -1 * sv12[72] * sp[5];
        sv12[1866] = sv12[124] * (-1 * sv12[71]);
        sv12[1867] = sv12[125] * (-1 * sv12[71]);
        sv12[1868] = -1 * sv12[121] * (-1 * sv12[71]);
        sv12[1869] = -1 * sv12[122] * (-1 * sv12[71]);
        sv12[1870] = -1 * sv12[123] * (-1 * sv12[71]);
        sv12[1871] = -1 * sv12[71] * sp[6];
        sv12[1872] = -1 * sv12[71] * sp[5];
        sv12[1873] = sv12[124] * (-1 * sv12[73]);
        sv12[1874] = sv12[125] * (-1 * sv12[73]);
        sv12[1875] = -1 * sv12[121] * (-1 * sv12[73]);
        sv12[1876] = -1 * sv12[122] * (-1 * sv12[73]);
        sv12[1877] = -1 * sv12[123] * (-1 * sv12[73]);
        sv12[1878] = -1 * sv12[73] * sp[6];
        sv12[1879] = -1 * sv12[73] * sp[5];
        sv12[1880] = sv12[124] * sv12[124];
        sv12[1881] = sv12[124] * sv12[125];
        sv12[1882] = sv12[124] * (-1 * sv12[121]);
        sv12[1883] = sv12[124] * (-1 * sv12[122]);
        sv12[1884] = sv12[124] * (-1 * sv12[123]);
        sv12[1885] = sv12[124] * sp[6];
        sv12[1886] = sv12[124] * sp[5];
        sv12[1887] = sv12[125] * sv12[125];
        sv12[1888] = sv12[125] * (-1 * sv12[121]);
        sv12[1889] = sv12[125] * (-1 * sv12[122]);
        sv12[1890] = sv12[125] * (-1 * sv12[123]);
        sv12[1891] = sv12[125] * sp[6];
        sv12[1892] = sv12[125] * sp[5];
        sv12[1893] = -1 * sv12[121] * (-1 * sv12[121]);
        sv12[1894] = -1 * sv12[121] * (-1 * sv12[122]);
        sv12[1895] = -1 * sv12[121] * (-1 * sv12[123]);
        sv12[1896] = -1 * sv12[121] * sp[6];
        sv12[1897] = -1 * sv12[121] * sp[5];
        sv12[1898] = -1 * sv12[122] * (-1 * sv12[122]);
        sv12[1899] = -1 * sv12[122] * (-1 * sv12[123]);
        sv12[1900] = -1 * sv12[122] * sp[6];
        sv12[1901] = -1 * sv12[122] * sp[5];
        sv12[1902] = -1 * sv12[123] * (-1 * sv12[123]);
        sv12[1903] = -1 * sv12[123] * sp[6];
        sv12[1904] = -1 * sv12[123] * sp[5];
        sv12[1905] = sv12[1761] + sv12[1836];
        sv12[1906] = sv12[1773] + sv12[1848];
        sv12[1907] = sv12[1859] + sv12[1784];
        sv12[1908] = sv12[1866] + sv12[1794];
        sv12[1909] = sv12[1873] + sv12[1803];
        sv12[1910] = sv12[1880] + sv12[1811];
        sv12[1911] = sv12[1881] + sv12[1812];
        sv12[1912] = sv12[1882] + sv12[1813];
        sv12[1913] = sv12[1883] + sv12[1814];
        sv12[1914] = sv12[1884] + sv12[1815];
        sv12[1915] = sv12[1816] + sv12[1885];
        sv12[1916] = sv12[1886] + sv12[1817];
        sv12[1917] = sv12[1762] + sv12[1837];
        sv12[1918] = sv12[1849] + sv12[1774];
        sv12[1919] = sv12[1860] + sv12[1785];
        sv12[1920] = sv12[1867] + sv12[1795];
        sv12[1921] = sv12[1874] + sv12[1804];
        sv12[1922] = sv12[1887] + sv12[1818];
        sv12[1923] = sv12[1888] + sv12[1819];
        sv12[1924] = sv12[1889] + sv12[1820];
        sv12[1925] = sv12[1890] + sv12[1821];
        sv12[1926] = sv12[1822] + sv12[1891];
        sv12[1927] = sv12[1892] + sv12[1823];
        sv12[1928] = sv12[1763] + sv12[1838];
        sv12[1929] = sv12[1764] + sv12[1839];
        sv12[1930] = sv12[1765] + sv12[1840];
        sv12[1931] = sv12[1766] + sv12[1841];
        sv12[1932] = sv12[1767] + sv12[1842];
        sv12[1933] = sv12[1768] + sv12[1843];
        sv12[1934] = sv12[1769] + sv12[1844];
        sv12[1935] = sv12[1770] + sv12[1845];
        sv12[1936] = sv12[1771] + sv12[1846];
        sv12[1937] = sv12[1847] + sv12[1772];
        sv12[1938] = sv12[1775] + sv12[1850];
        sv12[1939] = sv12[1776] + sv12[1851];
        sv12[1940] = sv12[1777] + sv12[1852];
        sv12[1941] = sv12[1778] + sv12[1853];
        sv12[1942] = sv12[1779] + sv12[1854];
        sv12[1943] = sv12[1780] + sv12[1855];
        sv12[1944] = sv12[1781] + sv12[1856];
        sv12[1945] = sv12[1782] + sv12[1857];
        sv12[1946] = sv12[1858] + sv12[1783];
        sv12[1947] = sv12[1786] + sv12[1829];
        sv12[1948] = sv12[1787] + sv12[1825];
        sv12[1949] = sv12[1788] + sv12[1830];
        sv12[1950] = sv12[1789] + sv12[1861];
        sv12[1951] = sv12[1862] + sv12[1790];
        sv12[1952] = sv12[1791] + sv12[1863];
        sv12[1953] = sv12[1792] + sv12[1864];
        sv12[1954] = sv12[1865] + sv12[1793];
        sv12[1955] = sv12[1796] + sv12[1824];
        sv12[1956] = sv12[1797] + sv12[1826];
        sv12[1957] = sv12[1868] + sv12[1798];
        sv12[1958] = sv12[1869] + sv12[1799];
        sv12[1959] = sv12[1870] + sv12[1800];
        sv12[1960] = sv12[1801] + sv12[1871];
        sv12[1961] = sv12[1872] + sv12[1802];
        sv12[1962] = sv12[1805] + sv12[1833];
        sv12[1963] = sv12[1806] + sv12[1875];
        sv12[1964] = sv12[1876] + sv12[1807];
        sv12[1965] = sv12[1808] + sv12[1877];
        sv12[1966] = sv12[1809] + sv12[1878];
        sv12[1967] = sv12[1879] + sv12[1810];
        sv12[1968] = sv12[1893] + sv12[1824];
        sv12[1969] = sv12[1894] + sv12[1825];
        sv12[1970] = sv12[1895] + sv12[1826];
        sv12[1971] = sv12[1827] + sv12[1896];
        sv12[1972] = sv12[1897] + sv12[1828];
        sv12[1973] = sv12[1898] + sv12[1829];
        sv12[1974] = sv12[1899] + sv12[1830];
        sv12[1975] = sv12[1831] + sv12[1900];
        sv12[1976] = sv12[1901] + sv12[1832];
        sv12[1977] = sv12[1902] + sv12[1833];
        sv12[1978] = sv12[1834] + sv12[1903];
        sv12[1979] = sv12[1904] + sv12[1835];
        sv12[1980] = sv12[1905] * sv12[1009];
        sv12[1981] = sv12[1906] * sv12[1009];
        sv12[1982] = sv12[1907] * sv12[1009];
        sv12[1983] = sv12[1908] * sv12[1009];
        sv12[1984] = sv12[1909] * sv12[1009];
        sv12[1985] = sv12[1910] * sv12[1009];
        sv12[1986] = sv12[1911] * sv12[1009];
        sv12[1987] = sv12[1912] * sv12[1009];
        sv12[1988] = sv12[1913] * sv12[1009];
        sv12[1989] = sv12[1914] * sv12[1009];
        sv12[1990] = sv12[1915] * sv12[1009];
        sv12[1991] = sv12[1916] * sv12[1009];
        sv12[1992] = sv12[1917] * sv12[1009];
        sv12[1993] = sv12[1918] * sv12[1009];
        sv12[1994] = sv12[1919] * sv12[1009];
        sv12[1995] = sv12[1920] * sv12[1009];
        sv12[1996] = sv12[1921] * sv12[1009];
        sv12[1997] = sv12[1922] * sv12[1009];
        sv12[1998] = sv12[1923] * sv12[1009];
        sv12[1999] = sv12[1924] * sv12[1009];
        sv12[2000] = sv12[1925] * sv12[1009];
        sv12[2001] = sv12[1926] * sv12[1009];
        sv12[2002] = sv12[1927] * sv12[1009];
        sv12[2003] = sv12[1928] * sv12[1009];
        sv12[2004] = sv12[1929] * sv12[1009];
        sv12[2005] = sv12[1930] * sv12[1009];
        sv12[2006] = sv12[1931] * sv12[1009];
        sv12[2007] = sv12[1932] * sv12[1009];
        sv12[2008] = sv12[1933] * sv12[1009];
        sv12[2009] = sv12[1934] * sv12[1009];
        sv12[2010] = sv12[1935] * sv12[1009];
        sv12[2011] = sv12[1936] * sv12[1009];
        sv12[2012] = sv12[1937] * sv12[1009];
        sv12[2013] = sv12[1938] * sv12[1009];
        sv12[2014] = sv12[1939] * sv12[1009];
        sv12[2015] = sv12[1940] * sv12[1009];
        sv12[2016] = sv12[1941] * sv12[1009];
        sv12[2017] = sv12[1942] * sv12[1009];
        sv12[2018] = sv12[1943] * sv12[1009];
        sv12[2019] = sv12[1944] * sv12[1009];
        sv12[2020] = sv12[1945] * sv12[1009];
        sv12[2021] = sv12[1946] * sv12[1009];
        sv12[2022] = sv12[1947] * sv12[1009];
        sv12[2023] = sv12[1948] * sv12[1009];
        sv12[2024] = sv12[1949] * sv12[1009];
        sv12[2025] = sv12[1950] * sv12[1009];
        sv12[2026] = sv12[1951] * sv12[1009];
        sv12[2027] = sv12[1952] * sv12[1009];
        sv12[2028] = sv12[1953] * sv12[1009];
        sv12[2029] = sv12[1954] * sv12[1009];
        sv12[2030] = sv12[1955] * sv12[1009];
        sv12[2031] = sv12[1956] * sv12[1009];
        sv12[2032] = sv12[1957] * sv12[1009];
        sv12[2033] = sv12[1958] * sv12[1009];
        sv12[2034] = sv12[1959] * sv12[1009];
        sv12[2035] = sv12[1960] * sv12[1009];
        sv12[2036] = sv12[1961] * sv12[1009];
        sv12[2037] = sv12[1962] * sv12[1009];
        sv12[2038] = sv12[1963] * sv12[1009];
        sv12[2039] = sv12[1964] * sv12[1009];
        sv12[2040] = sv12[1965] * sv12[1009];
        sv12[2041] = sv12[1966] * sv12[1009];
        sv12[2042] = sv12[1967] * sv12[1009];
        sv12[2043] = sv12[1968] * sv12[1009];
        sv12[2044] = sv12[1969] * sv12[1009];
        sv12[2045] = sv12[1970] * sv12[1009];
        sv12[2046] = sv12[1971] * sv12[1009];
        sv12[2047] = sv12[1972] * sv12[1009];
        sv12[2048] = sv12[1973] * sv12[1009];
        sv12[2049] = sv12[1974] * sv12[1009];
        sv12[2050] = sv12[1975] * sv12[1009];
        sv12[2051] = sv12[1976] * sv12[1009];
        sv12[2052] = sv12[1977] * sv12[1009];
        sv12[2053] = sv12[1978] * sv12[1009];
        sv12[2054] = sv12[1979] * sv12[1009];
        sv12[2055] = sp[132] * sv12[1009];
        sv12[2056] = sp[133] * sv12[1009];
        sv12[2057] = sp[134] * sv12[1009];
        sv12[2058] = sv12[1751] + sv12[1980];
        sv12[2059] = sv12[1752] + sv12[1981];
        sv12[2060] = sv12[1753] + sv12[1985];
        sv12[2061] = sv12[1754] + sv12[1986];
        sv12[2062] = sv12[1755] + sv12[1992];
        sv12[2063] = sv12[1756] + sv12[1993];
        sv12[2064] = sv12[1757] + sv12[1997];
        sv12[2065] = sv12[1758] + sv12[2003];
        sv12[2066] = sv12[1759] + sv12[2004];
        sv12[2067] = sv12[1760] + sv12[2013];
        sv12[2068] = sv12[1186] * sv12[1186];
        sv12[2069] = sv12[1187] * sv12[1186];
        sv12[2070] = sv12[1187] * sv12[1187];
        sv12[2071] = sv12[2068] * sv12[1009];
        sv12[2072] = sv12[2069] * sv12[1009];
        sv12[2073] = sv12[2070] * sv12[1009];
        sv12[2074] = sv12[1409] * sv12[1416];
        sv12[2075] = sv12[1409] * sv12[1409];
        sv12[2076] = sv12[1410] * sv12[1409];
        sv12[2077] = sv12[1410] * sv12[1416];
        sv12[2078] = sv12[1410] * sv12[1410];
        sv12[2079] = sv12[1416] * sv12[1416];
        sv12[2080] = 1.92 * (1.0 / (0.5 * sv12[1413])) + 1.92 * (1.0 / (0.5 * sv12[1413]));
        sv12[2081] = sv12[1428] * sv12[2080];
        sv12[2082] = sv12[2081] + sv12[2079];
        sv12[2083] = sv12[2074] * sv12[1659];
        sv12[2084] = sv12[2077] * sv12[1659];
        sv12[2085] = sv12[2082] * sv12[1659];
        sv12[2086] = sv12[2075] * sv12[1659];
        sv12[2087] = sv12[2076] * sv12[1659];
        sv12[2088] = sv12[2078] * sv12[1659];
        sv12[2089] = sv12[1744] + sv12[2083];
        sv12[2090] = sv12[1745] + sv12[2084];
        sv12[2091] = sv12[1707] + sv12[2085];
        sv12[2092] = sv12[1731] + sv12[2071];
        sv12[2093] = sv12[1732] + sv12[2072];
        sv12[2094] = sv12[1733] + sv12[2072];
        sv12[2095] = sv12[1734] + sv12[2073];
        sv12[2096] = sv12[1746] + sv12[2086];
        sv12[2097] = sv12[1747] + sv12[2087];
        sv12[2098] = sv12[2083] + sv12[1692];
        sv12[2099] = sv12[1748] + sv12[2087];
        sv12[2100] = sv12[1749] + sv12[2088];
        sv12[2101] = sv12[2084] + sv12[1695];
        sv12[2102] = sv12[2091] + w[1][0];
        sv12[2103] = sv12[2102] + -1.0 * w[1][0];
        sv12[2104] = w2_c3 * w2_c3;
        sv12[2105] = std::sqrt(1e-8 + sv12[2104]);
        sv12[2106] = w2_c3 + sv12[2105];
        sv12[2107] = w2_c4 / (0.5 * sv12[2106]);
        sv12[2108] = w2_c3 + w2_c3;
        sv12[2109] = sv12[2108] / (2 * sv12[2105]);
        sv12[2110] = 0.5 * (1.0 + sv12[2109]) * sv12[2107];
        sv12[2111] = -1 * sv12[2110] / (0.5 * sv12[2106]);
        sv12[2112] = 1.92 * w2_c4 * sv12[2111];
        sv12[2113] = 1.92 * w2_c4 * (1.0 / (0.5 * sv12[2106]));
        sv12[2114] = sv12[2113] + 1.92 * sv12[2107];
        sv12[2115] = sv12[1704] + sv12[2112];
        sv12[2116] = sv12[2114] + sv12[2103];
        sv12[2117] = w2_c3 * (0.09 * (1.44 * sv12[24]));
        sv12[2118] = 2.0 * sv12[1269] * sv12[2117];
        sv12[2119] = 2.0 * sv12[1270] * sv12[2117];
        sv12[2120] = 2.0 * sv12[1271] * sv12[2117];
        sv12[2121] = 2.0 * sv12[1272] * sv12[2117];
        sv12[2122] = -1 * sv12[2118] + sv12[1662];
        sv12[2123] = -1 * sv12[2119] + sv12[1665];
        sv12[2124] = -1 * sv12[2120] + sv12[1674];
        sv12[2125] = -1 * sv12[2121] + sv12[1677];
        sv12[2126] = sv12[2115] + -1 * sv12[1543];
        sv12[2127] = 2.0 * sv12[1216] * sv12[1721];
        sv12[2128] = 2.0 * sv12[1216] * sv12[1722];
        sv12[2129] = sp[147] + -1 * sv12[2127];
        sv12[2130] = 2.0 * sv12[1269] * sv12[1713];
        sv12[2131] = 2.0 * sv12[1270] * sv12[1713];
        sv12[2132] = 2.0 * sv12[1271] * sv12[1713];
        sv12[2133] = 2.0 * sv12[1272] * sv12[1713];
        sv12[2134] = sp[128] + sv12[1698];
        sv12[2135] = sp[131] + sv12[1701];
        sv12[2136] = sv12[22] + sv12[2098];
        sv12[2137] = sv12[23] + sv12[2101];
        sv12[2138] = sp[170] * (2.0 * (0.0001 + sv12[41]));
        sv12[2139] = sp[171] * (2.0 * (0.0001 + sv12[41]));
        sv12[2140] = sp[172] * (2.0 * (0.0001 + sv12[41]));
        sv12[2141] = sp[173] * (2.0 * (0.0001 + sv12[41]));
        sv12[2142] = sp[174] * (2.0 * (0.0001 + sv12[41]));
        sv12[2143] = sp[175] * (2.0 * (0.0001 + sv12[41]));
        sv12[2144] = sp[176] * (2.0 * (0.0001 + sv12[41]));
        sv12[2145] = sp[177] * (2.0 * (0.0001 + sv12[41]));
        sv12[2146] = sp[178] * (2.0 * (0.0001 + sv12[41]));
        sv12[2147] = sp[179] * (2.0 * (0.0001 + sv12[41]));
        sv12[2148] = sv12[2058] + sv12[2138];
        sv12[2149] = sv12[2059] + sv12[2139];
        sv12[2150] = sv12[2060] + sv12[2140];
        sv12[2151] = sv12[2061] + sv12[2141];
        sv12[2152] = sv12[2062] + sv12[2142];
        sv12[2153] = sv12[2063] + sv12[2143];
        sv12[2154] = sv12[2064] + sv12[2144];
        sv12[2155] = sv12[2065] + sv12[2145];
        sv12[2156] = sv12[2066] + sv12[2146];
        sv12[2157] = sv12[2067] + sv12[2147];
        sv12[2158] = sv12[84] / 2 * (sp[16] / 2);
        sv12[2159] = sv12[84] / 2 * (sp[17] / 2);
        sv12[2160] = sv12[88] / 2 * (sp[6] / 2);
        sv12[2161] = sv12[88] / 2 * (sp[5] / 2);
        sv12[2162] = sv12[88] / 2 * (sp[3] / 2);
        sv12[2163] = sv12[88] / 2 * (sp[4] / 2);
        sv12[2164] = sv12[2158] + sv12[2160];
        sv12[2165] = sv12[2159] + sv12[2161];
        sv12[2166] = sv12[132] / 2 * (sp[75] / 2);
        sv12[2167] = sv12[132] / 2 * (sp[76] / 2);
        sv12[2168] = sv12[2166] + sv12[2162];
        sv12[2169] = sv12[2167] + sv12[2163];
        sv12[2170] = sv12[2164] + sv12[2160];
        sv12[2171] = sv12[2165] + sv12[2161];
        sv12[2172] = sv12[2168] + sv12[2162];
        sv12[2173] = sv12[2169] + sv12[2163];
        sv12[2174] = sv12[2170] * (2.0 * sv12[173]);
        sv12[2175] = sv12[2170] * (2.0 * sv12[174]);
        sv12[2176] = sv12[2171] * (2.0 * sv12[173]);
        sv12[2177] = sv12[2171] * (2.0 * sv12[174]);
        sv12[2178] = sv12[2172] * (2.0 * sv12[173]);
        sv12[2179] = sv12[2172] * (2.0 * sv12[174]);
        sv12[2180] = sv12[2173] * (2.0 * sv12[173]);
        sv12[2181] = sv12[2173] * (2.0 * sv12[174]);
        sv12[2182] = sv12[1130] + sv12[2174];
        sv12[2183] = sv12[1131] + sv12[2175];
        sv12[2184] = sv12[1132] + sv12[2176];
        sv12[2185] = sv12[1133] + sv12[2177];
        sv12[2186] = sv12[1140] + sv12[2178];
        sv12[2187] = sv12[1141] + sv12[2179];
        sv12[2188] = sv12[1142] + sv12[2180];
        sv12[2189] = sv12[1143] + sv12[2181];
        sv12[2190] = sv12[9] + sp[147];
        sv12[2191] = sv12[14] + sp[147];
        sv12[2192] = sv12[10] * sp[180];
        sv12[2193] = sv12[11] * sp[180];
        sv12[2194] = sv12[4] * sp[180];
        sv12[2195] = sv12[2190] * sp[180];
        sv12[2196] = sv12[2148] * sp[180];
        sv12[2197] = sv12[2149] * sp[180];
        sv12[2198] = sv12[1982] * sp[180];
        sv12[2199] = sv12[1983] * sp[180];
        sv12[2200] = sv12[1984] * sp[180];
        sv12[2201] = sv12[2150] * sp[180];
        sv12[2202] = sv12[2151] * sp[180];
        sv12[2203] = sv12[1987] * sp[180];
        sv12[2204] = sv12[1988] * sp[180];
        sv12[2205] = sv12[1989] * sp[180];
        sv12[2206] = sv12[1990] * sp[180];
        sv12[2207] = sv12[1991] * sp[180];
        sv12[2208] = sv12[1371] * sp[180];
        sv12[2209] = sv12[1372] * sp[180];
        sv12[2210] = sv12[1660] * sp[180];
        sv12[2211] = sv12[1661] * sp[180];
        sv12[2212] = sv12[2122] * sp[180];
        sv12[2213] = -1 * sv12[2130] * sp[180];
        sv12[2214] = sv12[2152] * sp[180];
        sv12[2215] = sv12[2153] * sp[180];
        sv12[2216] = sv12[1994] * sp[180];
        sv12[2217] = sv12[1995] * sp[180];
        sv12[2218] = sv12[1996] * sp[180];
        sv12[2219] = sv12[2154] * sp[180];
        sv12[2220] = sv12[1998] * sp[180];
        sv12[2221] = sv12[1999] * sp[180];
        sv12[2222] = sv12[2000] * sp[180];
        sv12[2223] = sv12[2001] * sp[180];
        sv12[2224] = sv12[2002] * sp[180];
        sv12[2225] = sv12[1373] * sp[180];
        sv12[2226] = sv12[1374] * sp[180];
        sv12[2227] = sv12[1663] * sp[180];
        sv12[2228] = sv12[1664] * sp[180];
        sv12[2229] = sv12[2123] * sp[180];
        sv12[2230] = -1 * sv12[2131] * sp[180];
        sv12[2231] = sv12[2191] * sp[180];
        sv12[2232] = sv12[1172] * sp[180];
        sv12[2233] = sv12[1173] * sp[180];
        sv12[2234] = sv12[1108] * sp[180];
        sv12[2235] = sv12[1109] * sp[180];
        sv12[2236] = sv12[1110] * sp[180];
        sv12[2237] = sv12[1174] * sp[180];
        sv12[2238] = sv12[1175] * sp[180];
        sv12[2239] = sv12[1113] * sp[180];
        sv12[2240] = sv12[1114] * sp[180];
        sv12[2241] = sv12[1115] * sp[180];
        sv12[2242] = sv12[1116] * sp[180];
        sv12[2243] = sv12[1117] * sp[180];
        sv12[2244] = sv12[1395] * sp[180];
        sv12[2245] = sv12[1396] * sp[180];
        sv12[2246] = sv12[1696] * sp[180];
        sv12[2247] = sv12[1697] * sp[180];
        sv12[2248] = sv12[2134] * sp[180];
        sv12[2249] = sv12[17] * sp[180];
        sv12[2250] = sv12[1176] * sp[180];
        sv12[2251] = sv12[1177] * sp[180];
        sv12[2252] = sv12[1120] * sp[180];
        sv12[2253] = sv12[1121] * sp[180];
        sv12[2254] = sv12[1122] * sp[180];
        sv12[2255] = sv12[1178] * sp[180];
        sv12[2256] = sv12[1179] * sp[180];
        sv12[2257] = sv12[1125] * sp[180];
        sv12[2258] = sv12[1126] * sp[180];
        sv12[2259] = sv12[1127] * sp[180];
        sv12[2260] = sv12[1128] * sp[180];
        sv12[2261] = sv12[1129] * sp[180];
        sv12[2262] = sv12[1397] * sp[180];
        sv12[2263] = sv12[1398] * sp[180];
        sv12[2264] = sv12[1699] * sp[180];
        sv12[2265] = sv12[1700] * sp[180];
        sv12[2266] = sv12[2135] * sp[180];
        sv12[2267] = sv12[2155] * sp[180];
        sv12[2268] = sv12[2156] * sp[180];
        sv12[2269] = sv12[2005] * sp[180];
        sv12[2270] = sv12[2006] * sp[180];
        sv12[2271] = sv12[2007] * sp[180];
        sv12[2272] = sv12[2008] * sp[180];
        sv12[2273] = sv12[2009] * sp[180];
        sv12[2274] = sv12[2010] * sp[180];
        sv12[2275] = sv12[2011] * sp[180];
        sv12[2276] = sv12[2012] * sp[180];
        sv12[2277] = sv12[1379] * sp[180];
        sv12[2278] = sv12[1380] * sp[180];
        sv12[2279] = sv12[1672] * sp[180];
        sv12[2280] = sv12[1673] * sp[180];
        sv12[2281] = sv12[2124] * sp[180];
        sv12[2282] = -1 * sv12[2132] * sp[180];
        sv12[2283] = sv12[2157] * sp[180];
        sv12[2284] = sv12[2014] * sp[180];
        sv12[2285] = sv12[2015] * sp[180];
        sv12[2286] = sv12[2016] * sp[180];
        sv12[2287] = sv12[2017] * sp[180];
        sv12[2288] = sv12[2018] * sp[180];
        sv12[2289] = sv12[2019] * sp[180];
        sv12[2290] = sv12[2020] * sp[180];
        sv12[2291] = sv12[2021] * sp[180];
        sv12[2292] = sv12[1381] * sp[180];
        sv12[2293] = sv12[1382] * sp[180];
        sv12[2294] = sv12[1675] * sp[180];
        sv12[2295] = sv12[1676] * sp[180];
        sv12[2296] = sv12[2125] * sp[180];
        sv12[2297] = -1 * sv12[2133] * sp[180];
        sv12[2298] = sv12[2182] * sp[180];
        sv12[2299] = sv12[2183] * sp[180];
        sv12[2300] = sv12[1036] * sp[180];
        sv12[2301] = sv12[1037] * sp[180];
        sv12[2302] = sv12[1038] * sp[180];
        sv12[2303] = sv12[1039] * sp[180];
        sv12[2304] = sv12[2184] * sp[180];
        sv12[2305] = sv12[2185] * sp[180];
        sv12[2306] = sv12[1042] * sp[180];
        sv12[2307] = sv12[1043] * sp[180];
        sv12[2308] = sv12[1044] * sp[180];
        sv12[2309] = sv12[1045] * sp[180];
        sv12[2310] = sv12[1134] * sp[180];
        sv12[2311] = sv12[1135] * sp[180];
        sv12[2312] = sv12[1048] * sp[180];
        sv12[2313] = sv12[1049] * sp[180];
        sv12[2314] = sv12[1050] * sp[180];
        sv12[2315] = sv12[1051] * sp[180];
        sv12[2316] = sv12[2022] * sp[180];
        sv12[2317] = sv12[2023] * sp[180];
        sv12[2318] = sv12[2024] * sp[180];
        sv12[2319] = sv12[2025] * sp[180];
        sv12[2320] = sv12[2026] * sp[180];
        sv12[2321] = sv12[2027] * sp[180];
        sv12[2322] = sv12[2028] * sp[180];
        sv12[2323] = sv12[2029] * sp[180];
        sv12[2324] = sv12[1136] * sp[180];
        sv12[2325] = sv12[1137] * sp[180];
        sv12[2326] = sv12[1054] * sp[180];
        sv12[2327] = sv12[1055] * sp[180];
        sv12[2328] = sv12[1056] * sp[180];
        sv12[2329] = sv12[1057] * sp[180];
        sv12[2330] = sv12[2030] * sp[180];
        sv12[2331] = sv12[2031] * sp[180];
        sv12[2332] = sv12[2032] * sp[180];
        sv12[2333] = sv12[2033] * sp[180];
        sv12[2334] = sv12[2034] * sp[180];
        sv12[2335] = sv12[2035] * sp[180];
        sv12[2336] = sv12[2036] * sp[180];
        sv12[2337] = sv12[1138] * sp[180];
        sv12[2338] = sv12[1139] * sp[180];
        sv12[2339] = sv12[1060] * sp[180];
        sv12[2340] = sv12[1061] * sp[180];
        sv12[2341] = sv12[1062] * sp[180];
        sv12[2342] = sv12[1063] * sp[180];
        sv12[2343] = sv12[2037] * sp[180];
        sv12[2344] = sv12[2038] * sp[180];
        sv12[2345] = sv12[2039] * sp[180];
        sv12[2346] = sv12[2040] * sp[180];
        sv12[2347] = sv12[2041] * sp[180];
        sv12[2348] = sv12[2042] * sp[180];
        sv12[2349] = sv12[2186] * sp[180];
        sv12[2350] = sv12[2187] * sp[180];
        sv12[2351] = sv12[1066] * sp[180];
        sv12[2352] = sv12[1067] * sp[180];
        sv12[2353] = sv12[1068] * sp[180];
        sv12[2354] = sv12[1069] * sp[180];
        sv12[2355] = sv12[2188] * sp[180];
        sv12[2356] = sv12[2189] * sp[180];
        sv12[2357] = sv12[1072] * sp[180];
        sv12[2358] = sv12[1073] * sp[180];
        sv12[2359] = sv12[1074] * sp[180];
        sv12[2360] = sv12[1075] * sp[180];
        sv12[2361] = sv12[1144] * sp[180];
        sv12[2362] = sv12[1145] * sp[180];
        sv12[2363] = sv12[1078] * sp[180];
        sv12[2364] = sv12[1079] * sp[180];
        sv12[2365] = sv12[1080] * sp[180];
        sv12[2366] = sv12[1081] * sp[180];
        sv12[2367] = sv12[2043] * sp[180];
        sv12[2368] = sv12[2044] * sp[180];
        sv12[2369] = sv12[2045] * sp[180];
        sv12[2370] = sv12[2046] * sp[180];
        sv12[2371] = sv12[2047] * sp[180];
        sv12[2372] = sv12[1146] * sp[180];
        sv12[2373] = sv12[1147] * sp[180];
        sv12[2374] = sv12[1084] * sp[180];
        sv12[2375] = sv12[1085] * sp[180];
        sv12[2376] = sv12[1086] * sp[180];
        sv12[2377] = sv12[1087] * sp[180];
        sv12[2378] = sv12[2048] * sp[180];
        sv12[2379] = sv12[2049] * sp[180];
        sv12[2380] = sv12[2050] * sp[180];
        sv12[2381] = sv12[2051] * sp[180];
        sv12[2382] = sv12[1148] * sp[180];
        sv12[2383] = sv12[1149] * sp[180];
        sv12[2384] = sv12[1090] * sp[180];
        sv12[2385] = sv12[1091] * sp[180];
        sv12[2386] = sv12[1092] * sp[180];
        sv12[2387] = sv12[1093] * sp[180];
        sv12[2388] = sv12[2052] * sp[180];
        sv12[2389] = sv12[2053] * sp[180];
        sv12[2390] = sv12[2054] * sp[180];
        sv12[2391] = sv12[1150] * sp[180];
        sv12[2392] = sv12[1151] * sp[180];
        sv12[2393] = sv12[1096] * sp[180];
        sv12[2394] = sv12[1097] * sp[180];
        sv12[2395] = sv12[1098] * sp[180];
        sv12[2396] = sv12[1099] * sp[180];
        sv12[2397] = sv12[2055] * sp[180];
        sv12[2398] = sv12[2056] * sp[180];
        sv12[2399] = sv12[1152] * sp[180];
        sv12[2400] = sv12[1153] * sp[180];
        sv12[2401] = sv12[1102] * sp[180];
        sv12[2402] = sv12[1103] * sp[180];
        sv12[2403] = sv12[1104] * sp[180];
        sv12[2404] = sv12[1105] * sp[180];
        sv12[2405] = sv12[2057] * sp[180];
        sv12[2406] = sv12[1727] * sp[180];
        sv12[2407] = sv12[1728] * sp[180];
        sv12[2408] = sv12[1742] * sp[180];
        sv12[2409] = sv12[1743] * sp[180];
        sv12[2410] = sv12[2126] * sp[180];
        sv12[2411] = sv12[2129] * sp[180];
        sv12[2412] = sv12[1729] * sp[180];
        sv12[2413] = sv12[1730] * sp[180];
        sv12[2414] = sv12[2089] * sp[180];
        sv12[2415] = sv12[2090] * sp[180];
        sv12[2416] = sv12[2116] * sp[180];
        sv12[2417] = (1.0 + -1 * sv12[2128]) * sp[180];
        sv12[2418] = sv12[2092] * sp[180];
        sv12[2419] = sv12[2093] * sp[180];
        sv12[2420] = sv12[1684] * sp[180];
        sv12[2421] = sv12[1685] * sp[180];
        sv12[2422] = sv12[1686] * sp[180];
        sv12[2423] = sv12[22] * sp[180];
        sv12[2424] = sv12[2094] * sp[180];
        sv12[2425] = sv12[2095] * sp[180];
        sv12[2426] = sv12[1687] * sp[180];
        sv12[2427] = sv12[1688] * sp[180];
        sv12[2428] = sv12[1689] * sp[180];
        sv12[2429] = sv12[23] * sp[180];
        sv12[2430] = sv12[1391] * sp[180];
        sv12[2431] = sv12[1392] * sp[180];
        sv12[2432] = sv12[2096] * sp[180];
        sv12[2433] = sv12[2097] * sp[180];
        sv12[2434] = sv12[2136] * sp[180];
        sv12[2435] = sv12[1393] * sp[180];
        sv12[2436] = sv12[1394] * sp[180];
        sv12[2437] = sv12[2099] * sp[180];
        sv12[2438] = sv12[2100] * sp[180];
        sv12[2439] = sv12[2137] * sp[180];
        const double fw0 = sv12[2195] * weights12[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF0[i][j] += TF0[i] * FE96_C0_Q12[0][iq][j];
        const double fw1 = sv12[2193] * weights12[iq];
        alignas(32) double TF1[6];
        for (int i = 0; i < 6; ++i)
            TF1[i] = fw1 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF1[i][j] += TF1[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw2 = sv12[2192] * weights12[iq];
        alignas(32) double TF2[6];
        for (int i = 0; i < 6; ++i)
            TF2[i] = fw2 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF2[i][j] += TF2[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw3 = sv12[2194] * weights12[iq];
        alignas(32) double TF3[6];
        for (int i = 0; i < 6; ++i)
            TF3[i] = fw3 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF3[i][j] += TF3[i] * FE96_C0_Q12[0][iq][j];
        const double fw4 = sv12[2256] * weights12[iq];
        alignas(32) double TF4[5];
        for (int i = 0; i < 5; ++i)
            TF4[i] = fw4 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF4[i][j] += TF4[i] * FE96_C0_Q12[0][iq][j];
        const double fw5 = sv12[2219] * weights12[iq];
        alignas(32) double TF5[5];
        for (int i = 0; i < 5; ++i)
            TF5[i] = fw5 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF5[i][j] += TF5[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw6 = sv12[2222] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP0[i] += fw6 * FE96_C0_D10_Q12[0][iq][i];
        const double fw7 = sv12[2202] * weights12[iq];
        alignas(32) double TF6[5];
        for (int i = 0; i < 5; ++i)
            TF6[i] = fw7 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF6[i][j] += TF6[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw8 = sv12[2221] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP1[i] += fw8 * FE96_C0_D10_Q12[0][iq][i];
        const double fw9 = sv12[2220] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP2[i] += fw9 * FE96_C0_D10_Q12[0][iq][i];
        const double fw10 = sv12[2238] * weights12[iq];
        alignas(32) double TF7[5];
        for (int i = 0; i < 5; ++i)
            TF7[i] = fw10 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF7[i][j] += TF7[i] * FE96_C0_Q12[0][iq][j];
        const double fw11 = sv12[2215] * weights12[iq];
        alignas(32) double TF8[5];
        for (int i = 0; i < 5; ++i)
            TF8[i] = fw11 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF8[i][j] += TF8[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw12 = sv12[2218] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP3[i] += fw12 * FE96_C0_D10_Q12[0][iq][i];
        const double fw13 = sv12[2214] * weights12[iq];
        alignas(32) double TF9[5];
        for (int i = 0; i < 5; ++i)
            TF9[i] = fw13 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF9[i][j] += TF9[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw14 = sv12[2216] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP4[i] += fw14 * FE96_C0_D10_Q12[0][iq][i];
        const double fw15 = sv12[2217] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP5[i] += fw15 * FE96_C0_D10_Q12[0][iq][i];
        const double fw16 = sv12[2224] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP6[i] += fw16 * FE96_C0_D10_Q12[0][iq][i];
        const double fw17 = sv12[2223] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP7[i] += fw17 * FE96_C0_D10_Q12[0][iq][i];
        const double fw18 = sv12[2358] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP8[i] += fw18 * FE96_C0_D10_Q12[0][iq][i];
        const double fw19 = sv12[2355] * weights12[iq];
        alignas(32) double TF10[5];
        for (int i = 0; i < 5; ++i)
            TF10[i] = fw19 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF10[i][j] += TF10[i] * FE3_C0_Q12[0][iq][j];
        const double fw20 = sv12[2357] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP9[i] += fw20 * FE96_C0_D10_Q12[0][iq][i];
        const double fw21 = sv12[2360] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP10[i] += fw21 * FE96_C0_D10_Q12[0][iq][i];
        const double fw22 = sv12[2356] * weights12[iq];
        alignas(32) double TF11[5];
        for (int i = 0; i < 5; ++i)
            TF11[i] = fw22 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF11[i][j] += TF11[i] * FE3_C0_Q12[0][iq][j];
        const double fw23 = sv12[2359] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP11[i] += fw23 * FE96_C0_D10_Q12[0][iq][i];
        const double fw24 = sv12[2259] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP12[j] += fw24 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP13[j] += fw6 * FE96_C0_D10_Q12[0][iq][j];
        const double fw25 = sv12[2388] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP14[j] += fw25 * FE96_C0_D02_Q12[0][0][j];
        const double fw26 = sv12[2205] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP15[j] += fw26 * FE96_C0_D01_Q12[0][iq][j];
        const double fw27 = sv12[2379] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP16[j] += fw27 * FE96_C0_D02_Q12[0][0][j];
        const double fw28 = sv12[2369] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP17[j] += fw28 * FE96_C0_D11_Q12[0][0][j];
        const double fw29 = sv12[2241] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP18[j] += fw29 * FE96_C0_Q12[0][iq][j];
        const double fw30 = sv12[2289] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP19[j] += fw30 * FE96_C0_D10_Q12[0][iq][j];
        const double fw31 = sv12[2346] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP20[j] += fw31 * FE96_C0_D02_Q12[0][0][j];
        const double fw32 = sv12[2274] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP21[j] += fw32 * FE96_C0_D01_Q12[0][iq][j];
        const double fw33 = sv12[2321] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP22[j] += fw33 * FE96_C0_D02_Q12[0][0][j];
        const double fw34 = sv12[2334] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP23[j] += fw34 * FE96_C0_D11_Q12[0][0][j];
        const double fw35 = sv12[2390] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP24[j] += fw35 * FE3_C0_D01_Q12[0][0][j];
        const double fw36 = sv12[2389] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP25[j] += fw36 * FE3_C0_D01_Q12[0][0][j];
        const double fw37 = sv12[2385] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP26[j] += fw37 * FE3_C0_D01_Q12[0][0][j];
        const double fw38 = sv12[2382] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP27[j] += fw38 * FE3_C0_Q12[0][iq][j];
        const double fw39 = sv12[2384] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP28[j] += fw39 * FE3_C0_D01_Q12[0][0][j];
        const double fw40 = sv12[2387] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP29[j] += fw40 * FE3_C0_D01_Q12[0][0][j];
        const double fw41 = sv12[2383] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP30[j] += fw41 * FE3_C0_Q12[0][iq][j];
        const double fw42 = sv12[2386] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP31[j] += fw42 * FE3_C0_D01_Q12[0][0][j];
        const double fw43 = sv12[2255] * weights12[iq];
        alignas(32) double TF12[5];
        for (int i = 0; i < 5; ++i)
            TF12[i] = fw43 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF12[i][j] += TF12[i] * FE96_C0_Q12[0][iq][j];
        alignas(32) double TF13[5];
        for (int i = 0; i < 5; ++i)
            TF13[i] = fw7 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF13[i][j] += TF13[i] * FE96_C0_D10_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP32[i] += fw26 * FE96_C0_D01_Q12[0][iq][i];
        const double fw44 = sv12[2201] * weights12[iq];
        alignas(32) double TF14[5];
        for (int i = 0; i < 5; ++i)
            TF14[i] = fw44 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF14[i][j] += TF14[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw45 = sv12[2204] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP33[i] += fw45 * FE96_C0_D01_Q12[0][iq][i];
        const double fw46 = sv12[2203] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP34[i] += fw46 * FE96_C0_D01_Q12[0][iq][i];
        const double fw47 = sv12[2237] * weights12[iq];
        alignas(32) double TF15[5];
        for (int i = 0; i < 5; ++i)
            TF15[i] = fw47 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF15[i][j] += TF15[i] * FE96_C0_Q12[0][iq][j];
        const double fw48 = sv12[2197] * weights12[iq];
        alignas(32) double TF16[5];
        for (int i = 0; i < 5; ++i)
            TF16[i] = fw48 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF16[i][j] += TF16[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw49 = sv12[2200] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP35[i] += fw49 * FE96_C0_D01_Q12[0][iq][i];
        const double fw50 = sv12[2196] * weights12[iq];
        alignas(32) double TF17[5];
        for (int i = 0; i < 5; ++i)
            TF17[i] = fw50 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF17[i][j] += TF17[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw51 = sv12[2198] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP36[i] += fw51 * FE96_C0_D01_Q12[0][iq][i];
        const double fw52 = sv12[2199] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP37[i] += fw52 * FE96_C0_D01_Q12[0][iq][i];
        const double fw53 = sv12[2207] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP38[i] += fw53 * FE96_C0_D01_Q12[0][iq][i];
        const double fw54 = sv12[2206] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP39[i] += fw54 * FE96_C0_D01_Q12[0][iq][i];
        const double fw55 = sv12[2352] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP40[i] += fw55 * FE96_C0_D01_Q12[0][iq][i];
        const double fw56 = sv12[2349] * weights12[iq];
        alignas(32) double TF18[5];
        for (int i = 0; i < 5; ++i)
            TF18[i] = fw56 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF18[i][j] += TF18[i] * FE3_C0_Q12[0][iq][j];
        const double fw57 = sv12[2351] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP41[i] += fw57 * FE96_C0_D01_Q12[0][iq][i];
        const double fw58 = sv12[2354] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP42[i] += fw58 * FE96_C0_D01_Q12[0][iq][i];
        const double fw59 = sv12[2350] * weights12[iq];
        alignas(32) double TF19[5];
        for (int i = 0; i < 5; ++i)
            TF19[i] = fw59 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF19[i][j] += TF19[i] * FE3_C0_Q12[0][iq][j];
        const double fw60 = sv12[2353] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP43[i] += fw60 * FE96_C0_D01_Q12[0][iq][i];
        const double fw61 = sv12[2258] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP44[j] += fw61 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP45[j] += fw8 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP46[j] += fw45 * FE96_C0_D01_Q12[0][iq][j];
        const double fw62 = sv12[2378] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP47[j] += fw62 * FE96_C0_D02_Q12[0][0][j];
        const double fw63 = sv12[2368] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP48[j] += fw63 * FE96_C0_D11_Q12[0][0][j];
        const double fw64 = sv12[2240] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP49[j] += fw64 * FE96_C0_Q12[0][iq][j];
        const double fw65 = sv12[2288] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP50[j] += fw65 * FE96_C0_D10_Q12[0][iq][j];
        const double fw66 = sv12[2345] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP51[j] += fw66 * FE96_C0_D02_Q12[0][0][j];
        const double fw67 = sv12[2273] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP52[j] += fw67 * FE96_C0_D01_Q12[0][iq][j];
        const double fw68 = sv12[2320] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP53[j] += fw68 * FE96_C0_D02_Q12[0][0][j];
        const double fw69 = sv12[2333] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP54[j] += fw69 * FE96_C0_D11_Q12[0][0][j];
        const double fw70 = sv12[2381] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP55[j] += fw70 * FE3_C0_D01_Q12[0][0][j];
        const double fw71 = sv12[2380] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP56[j] += fw71 * FE3_C0_D01_Q12[0][0][j];
        const double fw72 = sv12[2375] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP57[j] += fw72 * FE3_C0_D01_Q12[0][0][j];
        const double fw73 = sv12[2372] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP58[j] += fw73 * FE3_C0_Q12[0][iq][j];
        const double fw74 = sv12[2374] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP59[j] += fw74 * FE3_C0_D01_Q12[0][0][j];
        const double fw75 = sv12[2377] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP60[j] += fw75 * FE3_C0_D01_Q12[0][0][j];
        const double fw76 = sv12[2373] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP61[j] += fw76 * FE3_C0_Q12[0][iq][j];
        const double fw77 = sv12[2376] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP62[j] += fw77 * FE3_C0_D01_Q12[0][0][j];
        const double fw78 = sv12[2257] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP63[j] += fw78 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP64[j] += fw9 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP65[j] += fw28 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP66[j] += fw46 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP67[j] += fw63 * FE96_C0_D02_Q12[0][0][j];
        const double fw79 = sv12[2367] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP68[j] += fw79 * FE96_C0_D11_Q12[0][0][j];
        const double fw80 = sv12[2239] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP69[j] += fw80 * FE96_C0_Q12[0][iq][j];
        const double fw81 = sv12[2287] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP70[j] += fw81 * FE96_C0_D10_Q12[0][iq][j];
        const double fw82 = sv12[2344] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP71[j] += fw82 * FE96_C0_D02_Q12[0][0][j];
        const double fw83 = sv12[2272] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP72[j] += fw83 * FE96_C0_D01_Q12[0][iq][j];
        const double fw84 = sv12[2319] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP73[j] += fw84 * FE96_C0_D02_Q12[0][0][j];
        const double fw85 = sv12[2332] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP74[j] += fw85 * FE96_C0_D11_Q12[0][0][j];
        const double fw86 = sv12[2371] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP75[j] += fw86 * FE3_C0_D01_Q12[0][0][j];
        const double fw87 = sv12[2370] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP76[j] += fw87 * FE3_C0_D01_Q12[0][0][j];
        const double fw88 = sv12[2364] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP77[j] += fw88 * FE3_C0_D01_Q12[0][0][j];
        const double fw89 = sv12[2361] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP78[j] += fw89 * FE3_C0_Q12[0][iq][j];
        const double fw90 = sv12[2363] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP79[j] += fw90 * FE3_C0_D01_Q12[0][0][j];
        const double fw91 = sv12[2366] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP80[j] += fw91 * FE3_C0_D01_Q12[0][0][j];
        const double fw92 = sv12[2362] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP81[j] += fw92 * FE3_C0_Q12[0][iq][j];
        const double fw93 = sv12[2365] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP82[j] += fw93 * FE3_C0_D01_Q12[0][0][j];
        const double fw94 = sv12[2249] * weights12[iq];
        alignas(32) double TF20[6];
        for (int i = 0; i < 6; ++i)
            TF20[i] = fw94 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF20[i][j] += TF20[i] * FE96_C0_Q12[0][iq][j];
        const double fw95 = sv12[2231] * weights12[iq];
        alignas(32) double TF21[6];
        for (int i = 0; i < 6; ++i)
            TF21[i] = fw95 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF21[i][j] += TF21[i] * FE96_C0_Q12[0][iq][j];
        const double fw96 = sv12[2251] * weights12[iq];
        alignas(32) double TF22[5];
        for (int i = 0; i < 5; ++i)
            TF22[i] = fw96 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF22[i][j] += TF22[i] * FE96_C0_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP83[i] += fw30 * FE96_C0_D10_Q12[0][iq][i];
        alignas(32) double TF23[5];
        for (int i = 0; i < 5; ++i)
            TF23[i] = fw48 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF23[i][j] += TF23[i] * FE96_C0_D01_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP84[i] += fw65 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            TP85[i] += fw81 * FE96_C0_D10_Q12[0][iq][i];
        const double fw97 = sv12[2233] * weights12[iq];
        alignas(32) double TF24[5];
        for (int i = 0; i < 5; ++i)
            TF24[i] = fw97 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF24[i][j] += TF24[i] * FE96_C0_Q12[0][iq][j];
        const double fw98 = sv12[2283] * weights12[iq];
        alignas(32) double TF25[5];
        for (int i = 0; i < 5; ++i)
            TF25[i] = fw98 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF25[i][j] += TF25[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw99 = sv12[2286] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP86[i] += fw99 * FE96_C0_D10_Q12[0][iq][i];
        const double fw100 = sv12[2268] * weights12[iq];
        alignas(32) double TF26[5];
        for (int i = 0; i < 5; ++i)
            TF26[i] = fw100 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF26[i][j] += TF26[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw101 = sv12[2284] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP87[i] += fw101 * FE96_C0_D10_Q12[0][iq][i];
        const double fw102 = sv12[2285] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP88[i] += fw102 * FE96_C0_D10_Q12[0][iq][i];
        const double fw103 = sv12[2291] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP89[i] += fw103 * FE96_C0_D10_Q12[0][iq][i];
        const double fw104 = sv12[2290] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP90[i] += fw104 * FE96_C0_D10_Q12[0][iq][i];
        const double fw105 = sv12[2307] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP91[i] += fw105 * FE96_C0_D10_Q12[0][iq][i];
        const double fw106 = sv12[2304] * weights12[iq];
        alignas(32) double TF27[5];
        for (int i = 0; i < 5; ++i)
            TF27[i] = fw106 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF27[i][j] += TF27[i] * FE3_C0_Q12[0][iq][j];
        const double fw107 = sv12[2306] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP92[i] += fw107 * FE96_C0_D10_Q12[0][iq][i];
        const double fw108 = sv12[2309] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP93[i] += fw108 * FE96_C0_D10_Q12[0][iq][i];
        const double fw109 = sv12[2305] * weights12[iq];
        alignas(32) double TF28[5];
        for (int i = 0; i < 5; ++i)
            TF28[i] = fw109 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF28[i][j] += TF28[i] * FE3_C0_Q12[0][iq][j];
        const double fw110 = sv12[2308] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP94[i] += fw110 * FE96_C0_D10_Q12[0][iq][i];
        const double fw111 = sv12[2254] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP95[j] += fw111 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP96[j] += fw12 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP97[j] += fw49 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 4; ++j)
            TP98[j] += fw82 * FE96_C0_D11_Q12[0][0][j];
        const double fw112 = sv12[2236] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP99[j] += fw112 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP100[j] += fw99 * FE96_C0_D10_Q12[0][iq][j];
        const double fw113 = sv12[2343] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP101[j] += fw113 * FE96_C0_D02_Q12[0][0][j];
        const double fw114 = sv12[2271] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP102[j] += fw114 * FE96_C0_D01_Q12[0][iq][j];
        const double fw115 = sv12[2318] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP103[j] += fw115 * FE96_C0_D02_Q12[0][0][j];
        const double fw116 = sv12[2331] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP104[j] += fw116 * FE96_C0_D11_Q12[0][0][j];
        const double fw117 = sv12[2348] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP105[j] += fw117 * FE3_C0_D01_Q12[0][0][j];
        const double fw118 = sv12[2347] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP106[j] += fw118 * FE3_C0_D01_Q12[0][0][j];
        const double fw119 = sv12[2340] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP107[j] += fw119 * FE3_C0_D01_Q12[0][0][j];
        const double fw120 = sv12[2337] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP108[j] += fw120 * FE3_C0_Q12[0][iq][j];
        const double fw121 = sv12[2339] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP109[j] += fw121 * FE3_C0_D01_Q12[0][0][j];
        const double fw122 = sv12[2342] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP110[j] += fw122 * FE3_C0_D01_Q12[0][0][j];
        const double fw123 = sv12[2338] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP111[j] += fw123 * FE3_C0_Q12[0][iq][j];
        const double fw124 = sv12[2341] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP112[j] += fw124 * FE3_C0_D01_Q12[0][0][j];
        const double fw125 = sv12[2250] * weights12[iq];
        alignas(32) double TF29[5];
        for (int i = 0; i < 5; ++i)
            TF29[i] = fw125 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF29[i][j] += TF29[i] * FE96_C0_Q12[0][iq][j];
        alignas(32) double TF30[5];
        for (int i = 0; i < 5; ++i)
            TF30[i] = fw13 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF30[i][j] += TF30[i] * FE96_C0_D10_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP113[i] += fw32 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            TP114[i] += fw67 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            TP115[i] += fw83 * FE96_C0_D01_Q12[0][iq][i];
        const double fw126 = sv12[2232] * weights12[iq];
        alignas(32) double TF31[5];
        for (int i = 0; i < 5; ++i)
            TF31[i] = fw126 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF31[i][j] += TF31[i] * FE96_C0_Q12[0][iq][j];
        alignas(32) double TF32[5];
        for (int i = 0; i < 5; ++i)
            TF32[i] = fw100 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF32[i][j] += TF32[i] * FE96_C0_D10_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP116[i] += fw114 * FE96_C0_D01_Q12[0][iq][i];
        const double fw127 = sv12[2267] * weights12[iq];
        alignas(32) double TF33[5];
        for (int i = 0; i < 5; ++i)
            TF33[i] = fw127 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF33[i][j] += TF33[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw128 = sv12[2269] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP117[i] += fw128 * FE96_C0_D01_Q12[0][iq][i];
        const double fw129 = sv12[2270] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP118[i] += fw129 * FE96_C0_D01_Q12[0][iq][i];
        const double fw130 = sv12[2276] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP119[i] += fw130 * FE96_C0_D01_Q12[0][iq][i];
        const double fw131 = sv12[2275] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP120[i] += fw131 * FE96_C0_D01_Q12[0][iq][i];
        const double fw132 = sv12[2301] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP121[i] += fw132 * FE96_C0_D01_Q12[0][iq][i];
        const double fw133 = sv12[2298] * weights12[iq];
        alignas(32) double TF34[5];
        for (int i = 0; i < 5; ++i)
            TF34[i] = fw133 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF34[i][j] += TF34[i] * FE3_C0_Q12[0][iq][j];
        const double fw134 = sv12[2300] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP122[i] += fw134 * FE96_C0_D01_Q12[0][iq][i];
        const double fw135 = sv12[2303] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP123[i] += fw135 * FE96_C0_D01_Q12[0][iq][i];
        const double fw136 = sv12[2299] * weights12[iq];
        alignas(32) double TF35[5];
        for (int i = 0; i < 5; ++i)
            TF35[i] = fw136 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF35[i][j] += TF35[i] * FE3_C0_Q12[0][iq][j];
        const double fw137 = sv12[2302] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP124[i] += fw137 * FE96_C0_D01_Q12[0][iq][i];
        const double fw138 = sv12[2252] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP125[j] += fw138 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP126[j] += fw14 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP127[j] += fw51 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 4; ++j)
            TP128[j] += fw84 * FE96_C0_D11_Q12[0][0][j];
        const double fw139 = sv12[2234] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP129[j] += fw139 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP130[j] += fw101 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP131[j] += fw128 * FE96_C0_D01_Q12[0][iq][j];
        const double fw140 = sv12[2316] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP132[j] += fw140 * FE96_C0_D02_Q12[0][0][j];
        const double fw141 = sv12[2317] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP133[j] += fw141 * FE96_C0_D11_Q12[0][0][j];
        const double fw142 = sv12[2323] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP134[j] += fw142 * FE3_C0_D01_Q12[0][0][j];
        const double fw143 = sv12[2322] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP135[j] += fw143 * FE3_C0_D01_Q12[0][0][j];
        const double fw144 = sv12[2313] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP136[j] += fw144 * FE3_C0_D01_Q12[0][0][j];
        const double fw145 = sv12[2310] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP137[j] += fw145 * FE3_C0_Q12[0][iq][j];
        const double fw146 = sv12[2312] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP138[j] += fw146 * FE3_C0_D01_Q12[0][0][j];
        const double fw147 = sv12[2315] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP139[j] += fw147 * FE3_C0_D01_Q12[0][0][j];
        const double fw148 = sv12[2311] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP140[j] += fw148 * FE3_C0_Q12[0][iq][j];
        const double fw149 = sv12[2314] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP141[j] += fw149 * FE3_C0_D01_Q12[0][0][j];
        const double fw150 = sv12[2253] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP142[j] += fw150 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP143[j] += fw15 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP144[j] += fw34 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP145[j] += fw52 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP146[j] += fw69 * FE96_C0_D02_Q12[0][0][j];
        const double fw151 = sv12[2235] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP147[j] += fw151 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP148[j] += fw102 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP149[j] += fw116 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP150[j] += fw129 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP151[j] += fw141 * FE96_C0_D02_Q12[0][0][j];
        const double fw152 = sv12[2330] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP152[j] += fw152 * FE96_C0_D11_Q12[0][0][j];
        const double fw153 = sv12[2336] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP153[j] += fw153 * FE3_C0_D01_Q12[0][0][j];
        const double fw154 = sv12[2335] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP154[j] += fw154 * FE3_C0_D01_Q12[0][0][j];
        const double fw155 = sv12[2327] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP155[j] += fw155 * FE3_C0_D01_Q12[0][0][j];
        const double fw156 = sv12[2324] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP156[j] += fw156 * FE3_C0_Q12[0][iq][j];
        const double fw157 = sv12[2326] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP157[j] += fw157 * FE3_C0_D01_Q12[0][0][j];
        const double fw158 = sv12[2329] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP158[j] += fw158 * FE3_C0_D01_Q12[0][0][j];
        const double fw159 = sv12[2325] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP159[j] += fw159 * FE3_C0_Q12[0][iq][j];
        const double fw160 = sv12[2328] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP160[j] += fw160 * FE3_C0_D01_Q12[0][0][j];
        const double fw161 = sv12[2261] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP161[j] += fw161 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP162[j] += fw16 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP163[j] += fw35 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP164[j] += fw53 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP165[j] += fw70 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP166[j] += fw86 * FE96_C0_D11_Q12[0][0][j];
        const double fw162 = sv12[2243] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP167[j] += fw162 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP168[j] += fw103 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP169[j] += fw117 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP170[j] += fw130 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP171[j] += fw142 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP172[j] += fw153 * FE96_C0_D11_Q12[0][0][j];
        const double fw163 = sv12[2405] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP173[j] += fw163 * FE3_C0_D01_Q12[0][0][j];
        const double fw164 = sv12[2398] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP174[j] += fw164 * FE3_C0_D01_Q12[0][0][j];
        const double fw165 = sv12[2402] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP175[j] += fw165 * FE3_C0_D01_Q12[0][0][j];
        const double fw166 = sv12[2399] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP176[j] += fw166 * FE3_C0_Q12[0][iq][j];
        const double fw167 = sv12[2401] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP177[j] += fw167 * FE3_C0_D01_Q12[0][0][j];
        const double fw168 = sv12[2404] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP178[j] += fw168 * FE3_C0_D01_Q12[0][0][j];
        const double fw169 = sv12[2400] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP179[j] += fw169 * FE3_C0_Q12[0][iq][j];
        const double fw170 = sv12[2403] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP180[j] += fw170 * FE3_C0_D01_Q12[0][0][j];
        const double fw171 = sv12[2260] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP181[j] += fw171 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP182[j] += fw17 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP183[j] += fw36 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP184[j] += fw54 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP185[j] += fw71 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP186[j] += fw87 * FE96_C0_D11_Q12[0][0][j];
        const double fw172 = sv12[2242] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP187[j] += fw172 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP188[j] += fw104 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP189[j] += fw118 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP190[j] += fw131 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP191[j] += fw143 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP192[j] += fw154 * FE96_C0_D11_Q12[0][0][j];
        const double fw173 = sv12[2397] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP193[j] += fw173 * FE3_C0_D01_Q12[0][0][j];
        const double fw174 = sv12[2394] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP194[j] += fw174 * FE3_C0_D01_Q12[0][0][j];
        const double fw175 = sv12[2391] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP195[j] += fw175 * FE3_C0_Q12[0][iq][j];
        const double fw176 = sv12[2393] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP196[j] += fw176 * FE3_C0_D01_Q12[0][0][j];
        const double fw177 = sv12[2396] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP197[j] += fw177 * FE3_C0_D01_Q12[0][0][j];
        const double fw178 = sv12[2392] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP198[j] += fw178 * FE3_C0_Q12[0][iq][j];
        const double fw179 = sv12[2395] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP199[j] += fw179 * FE3_C0_D01_Q12[0][0][j];
        const double fw180 = sv12[2263] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP200[j] += fw180 * FE96_C0_Q12[0][iq][j];
        const double fw181 = sv12[2226] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP201[j] += fw181 * FE96_C0_D10_Q12[0][iq][j];
        const double fw182 = sv12[2209] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP202[j] += fw182 * FE96_C0_D01_Q12[0][iq][j];
        const double fw183 = sv12[2245] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP203[j] += fw183 * FE96_C0_Q12[0][iq][j];
        const double fw184 = sv12[2293] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP204[j] += fw184 * FE96_C0_D10_Q12[0][iq][j];
        const double fw185 = sv12[2278] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP205[j] += fw185 * FE96_C0_D01_Q12[0][iq][j];
        const double fw186 = sv12[2425] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP206[j] += fw186 * FE3_C0_D01_Q12[0][0][j];
        const double fw187 = sv12[2407] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP207[j] += fw187 * FE3_C0_Q12[0][iq][j];
        const double fw188 = sv12[2419] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP208[j] += fw188 * FE3_C0_D01_Q12[0][0][j];
        const double fw189 = sv12[2436] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP209[j] += fw189 * FE3_C0_D01_Q12[0][0][j];
        const double fw190 = sv12[2413] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP210[j] += fw190 * FE3_C0_Q12[0][iq][j];
        const double fw191 = sv12[2431] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP211[j] += fw191 * FE3_C0_D01_Q12[0][0][j];
        const double fw192 = sv12[2230] * weights12[iq];
        alignas(32) double TF36[3];
        for (int i = 0; i < 3; ++i)
            TF36[i] = fw192 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF36[i][j] += TF36[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw193 = sv12[2213] * weights12[iq];
        alignas(32) double TF37[3];
        for (int i = 0; i < 3; ++i)
            TF37[i] = fw193 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF37[i][j] += TF37[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw194 = sv12[2297] * weights12[iq];
        alignas(32) double TF38[3];
        for (int i = 0; i < 3; ++i)
            TF38[i] = fw194 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF38[i][j] += TF38[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw195 = sv12[2282] * weights12[iq];
        alignas(32) double TF39[3];
        for (int i = 0; i < 3; ++i)
            TF39[i] = fw195 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF39[i][j] += TF39[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw196 = sv12[2429] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP212[i] += fw196 * FE3_C0_Q12[0][iq][i];
        const double fw197 = sv12[2411] * weights12[iq];
        alignas(32) double TF40[3];
        for (int i = 0; i < 3; ++i)
            TF40[i] = fw197 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF40[i][j] += TF40[i] * FE3_C0_Q12[0][iq][j];
        const double fw198 = sv12[2423] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP213[i] += fw198 * FE3_C0_Q12[0][iq][i];
        const double fw199 = sv12[2417] * weights12[iq];
        alignas(32) double TF41[3];
        for (int i = 0; i < 3; ++i)
            TF41[i] = fw199 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF41[i][j] += TF41[i] * FE3_C0_Q12[0][iq][j];
        const double fw200 = sv12[2262] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP214[j] += fw200 * FE96_C0_Q12[0][iq][j];
        const double fw201 = sv12[2225] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP215[j] += fw201 * FE96_C0_D10_Q12[0][iq][j];
        const double fw202 = sv12[2208] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP216[j] += fw202 * FE96_C0_D01_Q12[0][iq][j];
        const double fw203 = sv12[2244] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP217[j] += fw203 * FE96_C0_Q12[0][iq][j];
        const double fw204 = sv12[2292] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP218[j] += fw204 * FE96_C0_D10_Q12[0][iq][j];
        const double fw205 = sv12[2277] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP219[j] += fw205 * FE96_C0_D01_Q12[0][iq][j];
        const double fw206 = sv12[2424] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP220[j] += fw206 * FE3_C0_D01_Q12[0][0][j];
        const double fw207 = sv12[2406] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP221[j] += fw207 * FE3_C0_Q12[0][iq][j];
        const double fw208 = sv12[2418] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP222[j] += fw208 * FE3_C0_D01_Q12[0][0][j];
        const double fw209 = sv12[2435] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP223[j] += fw209 * FE3_C0_D01_Q12[0][0][j];
        const double fw210 = sv12[2412] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP224[j] += fw210 * FE3_C0_Q12[0][iq][j];
        const double fw211 = sv12[2430] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP225[j] += fw211 * FE3_C0_D01_Q12[0][0][j];
        const double fw212 = sv12[2265] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP226[j] += fw212 * FE96_C0_Q12[0][iq][j];
        const double fw213 = sv12[2228] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP227[j] += fw213 * FE96_C0_D10_Q12[0][iq][j];
        const double fw214 = sv12[2211] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP228[j] += fw214 * FE96_C0_D01_Q12[0][iq][j];
        const double fw215 = sv12[2247] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP229[j] += fw215 * FE96_C0_Q12[0][iq][j];
        const double fw216 = sv12[2295] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP230[j] += fw216 * FE96_C0_D10_Q12[0][iq][j];
        const double fw217 = sv12[2280] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP231[j] += fw217 * FE96_C0_D01_Q12[0][iq][j];
        const double fw218 = sv12[2427] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP232[j] += fw218 * FE3_C0_D01_Q12[0][0][j];
        const double fw219 = sv12[2409] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP233[j] += fw219 * FE3_C0_Q12[0][iq][j];
        const double fw220 = sv12[2421] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP234[j] += fw220 * FE3_C0_D01_Q12[0][0][j];
        const double fw221 = sv12[2438] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP235[j] += fw221 * FE3_C0_D01_Q12[0][0][j];
        const double fw222 = sv12[2415] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP236[j] += fw222 * FE3_C0_Q12[0][iq][j];
        const double fw223 = sv12[2433] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP237[j] += fw223 * FE3_C0_D01_Q12[0][0][j];
        const double fw224 = sv12[2266] * weights12[iq];
        alignas(32) double TF42[3];
        for (int i = 0; i < 3; ++i)
            TF42[i] = fw224 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF42[i][j] += TF42[i] * FE96_C0_Q12[0][iq][j];
        const double fw225 = sv12[2229] * weights12[iq];
        alignas(32) double TF43[3];
        for (int i = 0; i < 3; ++i)
            TF43[i] = fw225 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF43[i][j] += TF43[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw226 = sv12[2212] * weights12[iq];
        alignas(32) double TF44[3];
        for (int i = 0; i < 3; ++i)
            TF44[i] = fw226 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF44[i][j] += TF44[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw227 = sv12[2248] * weights12[iq];
        alignas(32) double TF45[3];
        for (int i = 0; i < 3; ++i)
            TF45[i] = fw227 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF45[i][j] += TF45[i] * FE96_C0_Q12[0][iq][j];
        const double fw228 = sv12[2296] * weights12[iq];
        alignas(32) double TF46[3];
        for (int i = 0; i < 3; ++i)
            TF46[i] = fw228 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF46[i][j] += TF46[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw229 = sv12[2281] * weights12[iq];
        alignas(32) double TF47[3];
        for (int i = 0; i < 3; ++i)
            TF47[i] = fw229 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF47[i][j] += TF47[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw230 = sv12[2428] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP238[i] += fw230 * FE3_C0_Q12[0][iq][i];
        const double fw231 = sv12[2410] * weights12[iq];
        alignas(32) double TF48[3];
        for (int i = 0; i < 3; ++i)
            TF48[i] = fw231 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF48[i][j] += TF48[i] * FE3_C0_Q12[0][iq][j];
        const double fw232 = sv12[2422] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP239[i] += fw232 * FE3_C0_Q12[0][iq][i];
        const double fw233 = sv12[2439] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP240[i] += fw233 * FE3_C0_Q12[0][iq][i];
        const double fw234 = sv12[2416] * weights12[iq];
        alignas(32) double TF49[3];
        for (int i = 0; i < 3; ++i)
            TF49[i] = fw234 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF49[i][j] += TF49[i] * FE3_C0_Q12[0][iq][j];
        const double fw235 = sv12[2434] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP241[i] += fw235 * FE3_C0_Q12[0][iq][i];
        const double fw236 = sv12[2264] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP242[j] += fw236 * FE96_C0_Q12[0][iq][j];
        const double fw237 = sv12[2227] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP243[j] += fw237 * FE96_C0_D10_Q12[0][iq][j];
        const double fw238 = sv12[2210] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP244[j] += fw238 * FE96_C0_D01_Q12[0][iq][j];
        const double fw239 = sv12[2246] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP245[j] += fw239 * FE96_C0_Q12[0][iq][j];
        const double fw240 = sv12[2294] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP246[j] += fw240 * FE96_C0_D10_Q12[0][iq][j];
        const double fw241 = sv12[2279] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP247[j] += fw241 * FE96_C0_D01_Q12[0][iq][j];
        const double fw242 = sv12[2426] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP248[j] += fw242 * FE3_C0_D01_Q12[0][0][j];
        const double fw243 = sv12[2408] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP249[j] += fw243 * FE3_C0_Q12[0][iq][j];
        const double fw244 = sv12[2420] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP250[j] += fw244 * FE3_C0_D01_Q12[0][0][j];
        const double fw245 = sv12[2437] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP251[j] += fw245 * FE3_C0_D01_Q12[0][0][j];
        const double fw246 = sv12[2414] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP252[j] += fw246 * FE3_C0_Q12[0][iq][j];
        const double fw247 = sv12[2432] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP253[j] += fw247 * FE3_C0_D01_Q12[0][0][j];
    }
    std::fill(A, A + 12, 0.0);
    A[12] = -0.1666666666666677 * sp[190] + -0.1666666666666685 * sp[189];
    std::fill(A + 13, A + 34, 0.0);
    A[34] = 0.1666666666666674 * sp[190];
    std::fill(A + 35, A + 56, 0.0);
    A[56] = 0.1666666666666677 * sp[189];
    std::fill(A + 57, A + 75, 0.0);
    A[75] = 0.1666666666666665 * sp[190] + 0.1666666666666648 * sp[189];
    A[76] = 0.1666666666666663 * sp[190] + 0.3333333333333322 * sp[189];
    A[77] = 0.3333333333333338 * sp[190] + 0.1666666666666643 * sp[189];
    std::fill(A + 78, A + 96, 0.0);
    A[96] = -0.1666666666666665 * sp[190] + 0.1666666666666693 * sp[189];
    A[97] = -0.1666666666666663 * sp[190];
    A[98] = -0.3333333333333338 * sp[190] + -0.1666666666666662 * sp[189];
    std::fill(A + 99, A + 117, 0.0);
    A[117] = 0.1666666666666682 * sp[190] + -0.1666666666666668 * sp[189];
    A[118] = -0.1666666666666677 * sp[190] + -0.3333333333333345 * sp[189];
    A[119] = -0.1666666666666665 * sp[189];
    std::fill(A + 120, A + 138, 0.0);
    A[138] = -0.1666666666666677 * sp[188] + -0.1666666666666685 * sp[187];
    std::fill(A + 139, A + 160, 0.0);
    A[160] = 0.1666666666666674 * sp[188];
    std::fill(A + 161, A + 182, 0.0);
    A[182] = 0.1666666666666677 * sp[187];
    std::fill(A + 183, A + 201, 0.0);
    A[201] = 0.1666666666666665 * sp[188] + 0.1666666666666648 * sp[187];
    A[202] = 0.1666666666666663 * sp[188] + 0.3333333333333322 * sp[187];
    A[203] = 0.3333333333333338 * sp[188] + 0.1666666666666643 * sp[187];
    std::fill(A + 204, A + 222, 0.0);
    A[222] = -0.1666666666666665 * sp[188] + 0.1666666666666693 * sp[187];
    A[223] = -0.1666666666666663 * sp[188];
    A[224] = -0.3333333333333338 * sp[188] + -0.1666666666666662 * sp[187];
    std::fill(A + 225, A + 243, 0.0);
    A[243] = 0.1666666666666682 * sp[188] + -0.1666666666666668 * sp[187];
    A[244] = -0.1666666666666677 * sp[188] + -0.3333333333333345 * sp[187];
    A[245] = -0.1666666666666665 * sp[187];
    std::fill(A + 246, A + 252, 0.0);
    A[252] = -0.1666666666666677 * sp[182] + -0.1666666666666685 * sp[181];
    std::fill(A + 253, A + 255, 0.0);
    A[255] = 0.1666666666666665 * sp[182] + 0.1666666666666648 * sp[181];
    A[256] = -0.1666666666666665 * sp[182] + 0.1666666666666693 * sp[181];
    A[257] = 0.1666666666666682 * sp[182] + -0.1666666666666668 * sp[181];
    A[258] = -0.1666666666666677 * sp[186] + -0.1666666666666685 * sp[185];
    std::fill(A + 259, A + 261, 0.0);
    A[261] = 0.1666666666666665 * sp[186] + 0.1666666666666648 * sp[185];
    A[262] = -0.1666666666666665 * sp[186] + 0.1666666666666693 * sp[185];
    A[263] = 0.1666666666666682 * sp[186] + -0.1666666666666668 * sp[185];
    std::fill(A + 264, A + 274, 0.0);
    A[274] = 0.1666666666666674 * sp[182];
    A[275] = 0.0;
    A[276] = 0.1666666666666663 * sp[182] + 0.3333333333333322 * sp[181];
    A[277] = -0.1666666666666663 * sp[182];
    A[278] = -0.1666666666666677 * sp[182] + -0.3333333333333345 * sp[181];
    A[279] = 0.0;
    A[280] = 0.1666666666666674 * sp[186];
    A[281] = 0.0;
    A[282] = 0.1666666666666663 * sp[186] + 0.3333333333333322 * sp[185];
    A[283] = -0.1666666666666663 * sp[186];
    A[284] = -0.1666666666666677 * sp[186] + -0.3333333333333345 * sp[185];
    std::fill(A + 285, A + 296, 0.0);
    A[296] = 0.1666666666666677 * sp[181];
    A[297] = 0.3333333333333338 * sp[182] + 0.1666666666666643 * sp[181];
    A[298] = -0.3333333333333338 * sp[182] + -0.1666666666666662 * sp[181];
    A[299] = -0.1666666666666665 * sp[181];
    std::fill(A + 300, A + 302, 0.0);
    A[302] = 0.1666666666666677 * sp[185];
    A[303] = 0.3333333333333338 * sp[186] + 0.1666666666666643 * sp[185];
    A[304] = -0.3333333333333338 * sp[186] + -0.1666666666666662 * sp[185];
    A[305] = -0.1666666666666665 * sp[185];
    std::fill(A + 306, A + 315, 0.0);
    A[315] = 0.01666666666666685 * sp[184];
    A[316] = -0.008333333333333307 * sp[184];
    A[317] = -0.008333333333333295 * sp[184];
    A[318] = 0.03333333333333315 * sp[184];
    A[319] = 0.06666666666666685 * sp[184];
    A[320] = 0.06666666666666687 * sp[184];
    A[321] = 0.01666666666666685 * sp[183];
    A[322] = -0.008333333333333307 * sp[183];
    A[323] = -0.008333333333333295 * sp[183];
    A[324] = 0.03333333333333315 * sp[183];
    A[325] = 0.06666666666666685 * sp[183];
    A[326] = 0.06666666666666687 * sp[183];
    std::fill(A + 327, A + 336, 0.0);
    A[336] = -0.008333333333333266 * sp[184];
    A[337] = 0.01666666666666684 * sp[184];
    A[338] = -0.008333333333333283 * sp[184];
    A[339] = 0.06666666666666669 * sp[184];
    A[340] = 0.03333333333333313 * sp[184];
    A[341] = 0.06666666666666683 * sp[184];
    A[342] = -0.008333333333333266 * sp[183];
    A[343] = 0.01666666666666684 * sp[183];
    A[344] = -0.008333333333333283 * sp[183];
    A[345] = 0.06666666666666669 * sp[183];
    A[346] = 0.03333333333333313 * sp[183];
    A[347] = 0.06666666666666683 * sp[183];
    std::fill(A + 348, A + 357, 0.0);
    A[357] = -0.008333333333333262 * sp[184];
    A[358] = -0.008333333333333292 * sp[184];
    A[359] = 0.01666666666666684 * sp[184];
    A[360] = 0.06666666666666671 * sp[184];
    A[361] = 0.06666666666666678 * sp[184];
    A[362] = 0.03333333333333316 * sp[184];
    A[363] = -0.008333333333333262 * sp[183];
    A[364] = -0.008333333333333292 * sp[183];
    A[365] = 0.01666666666666684 * sp[183];
    A[366] = 0.06666666666666671 * sp[183];
    A[367] = 0.06666666666666678 * sp[183];
    A[368] = 0.03333333333333316 * sp[183];
    std::fill(A + 369, A + 441, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[3] = { 0, 1, 5 };
    static const int DM3[3] = { 0, 2, 4 };
    static const int DM4[4] = { 0, 3, 4, 5 };
    static const int DM5[5] = { 6, 7, 9, 10, 11 };
    static const int DM6[3] = { 6, 7, 11 };
    static const int DM7[5] = { 6, 8, 9, 10, 11 };
    static const int DM8[3] = { 6, 8, 10 };
    static const int DM9[4] = { 6, 9, 10, 11 };
    static const int DM10[2] = { 12, 14 };
    static const int DM11[2] = { 15, 17 };
    static const int DM12[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + j] += BF0[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM0[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM1[j]] += BF2[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + (j + 6)] += BF3[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM0[i] + j] += BF4[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM0[j]] += BF5[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + DM2[j]] += FE96_C0_D02_Q12[0][0][j] * TP0[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM1[j]] += BF6[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][j] * TP1[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM0[i] + DM4[j]] += FE96_C0_D11_Q12[0][0][j] * TP2[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM0[i] + (j + 6)] += BF7[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM5[j]] += BF8[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][j] * TP3[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM7[j]] += BF9[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][j] * TP4[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM0[i] + DM9[j]] += FE96_C0_D11_Q12[0][0][j] * TP5[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP6[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP7[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP8[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + (j + 15)] += BF10[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP9[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][j] * TP10[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + (j + 18)] += BF11[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][j] * TP11[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM2[i] + j] += FE96_C0_D02_Q12[0][0][i] * TP12[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM0[j]] += FE96_C0_D02_Q12[0][0][i] * TP13[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + DM2[j]] += FE96_C0_D02_Q12[0][0][i] * TP14[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM1[j]] += FE96_C0_D02_Q12[0][0][i] * TP15[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][i] * TP16[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM2[i] + DM4[j]] += FE96_C0_D02_Q12[0][0][i] * TP17[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM2[i] + (j + 6)] += FE96_C0_D02_Q12[0][0][i] * TP18[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM5[j]] += FE96_C0_D02_Q12[0][0][i] * TP19[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][i] * TP20[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM7[j]] += FE96_C0_D02_Q12[0][0][i] * TP21[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][i] * TP22[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM2[i] + DM9[j]] += FE96_C0_D02_Q12[0][0][i] * TP23[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + (j + 12)] += FE96_C0_D02_Q12[0][0][i] * TP24[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + DM10[j]] += FE96_C0_D02_Q12[0][0][i] * TP25[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + (j + 15)] += FE96_C0_D02_Q12[0][0][i] * TP26[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + (j + 15)] += FE96_C0_D02_Q12[0][0][i] * TP27[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + DM11[j]] += FE96_C0_D02_Q12[0][0][i] * TP28[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + (j + 18)] += FE96_C0_D02_Q12[0][0][i] * TP29[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + (j + 18)] += FE96_C0_D02_Q12[0][0][i] * TP30[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + DM12[j]] += FE96_C0_D02_Q12[0][0][i] * TP31[j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM1[i] + j] += BF12[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM1[i] + DM0[j]] += BF13[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + DM2[j]] += FE96_C0_D02_Q12[0][0][j] * TP32[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM1[i] + DM1[j]] += BF14[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][j] * TP33[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM1[i] + DM4[j]] += FE96_C0_D11_Q12[0][0][j] * TP34[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM1[i] + (j + 6)] += BF15[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM1[i] + DM5[j]] += BF16[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][j] * TP35[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM1[i] + DM7[j]] += BF17[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][j] * TP36[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM1[i] + DM9[j]] += FE96_C0_D11_Q12[0][0][j] * TP37[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP38[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP39[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP40[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + (j + 15)] += BF18[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP41[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][j] * TP42[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + (j + 18)] += BF19[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][j] * TP43[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM3[i] + j] += FE96_C0_D02_Q12[0][0][i] * TP44[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM3[i] + DM0[j]] += FE96_C0_D02_Q12[0][0][i] * TP45[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + DM2[j]] += FE96_C0_D02_Q12[0][0][i] * TP16[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM3[i] + DM1[j]] += FE96_C0_D02_Q12[0][0][i] * TP46[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][i] * TP47[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM3[i] + DM4[j]] += FE96_C0_D02_Q12[0][0][i] * TP48[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM3[i] + (j + 6)] += FE96_C0_D02_Q12[0][0][i] * TP49[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM3[i] + DM5[j]] += FE96_C0_D02_Q12[0][0][i] * TP50[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][i] * TP51[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM3[i] + DM7[j]] += FE96_C0_D02_Q12[0][0][i] * TP52[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][i] * TP53[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM3[i] + DM9[j]] += FE96_C0_D02_Q12[0][0][i] * TP54[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + (j + 12)] += FE96_C0_D02_Q12[0][0][i] * TP55[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + DM10[j]] += FE96_C0_D02_Q12[0][0][i] * TP56[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + (j + 15)] += FE96_C0_D02_Q12[0][0][i] * TP57[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + (j + 15)] += FE96_C0_D02_Q12[0][0][i] * TP58[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + DM11[j]] += FE96_C0_D02_Q12[0][0][i] * TP59[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + (j + 18)] += FE96_C0_D02_Q12[0][0][i] * TP60[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + (j + 18)] += FE96_C0_D02_Q12[0][0][i] * TP61[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + DM12[j]] += FE96_C0_D02_Q12[0][0][i] * TP62[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM4[i] + j] += FE96_C0_D11_Q12[0][0][i] * TP63[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM4[i] + DM0[j]] += FE96_C0_D11_Q12[0][0][i] * TP64[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + DM2[j]] += FE96_C0_D11_Q12[0][0][i] * TP65[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM4[i] + DM1[j]] += FE96_C0_D11_Q12[0][0][i] * TP66[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + DM3[j]] += FE96_C0_D11_Q12[0][0][i] * TP67[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM4[i] + DM4[j]] += FE96_C0_D11_Q12[0][0][i] * TP68[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM4[i] + (j + 6)] += FE96_C0_D11_Q12[0][0][i] * TP69[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM4[i] + DM5[j]] += FE96_C0_D11_Q12[0][0][i] * TP70[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + DM6[j]] += FE96_C0_D11_Q12[0][0][i] * TP71[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM4[i] + DM7[j]] += FE96_C0_D11_Q12[0][0][i] * TP72[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + DM8[j]] += FE96_C0_D11_Q12[0][0][i] * TP73[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM4[i] + DM9[j]] += FE96_C0_D11_Q12[0][0][i] * TP74[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + (j + 12)] += FE96_C0_D11_Q12[0][0][i] * TP75[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + DM10[j]] += FE96_C0_D11_Q12[0][0][i] * TP76[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + (j + 15)] += FE96_C0_D11_Q12[0][0][i] * TP77[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + (j + 15)] += FE96_C0_D11_Q12[0][0][i] * TP78[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + DM11[j]] += FE96_C0_D11_Q12[0][0][i] * TP79[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + (j + 18)] += FE96_C0_D11_Q12[0][0][i] * TP80[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + (j + 18)] += FE96_C0_D11_Q12[0][0][i] * TP81[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + DM12[j]] += FE96_C0_D11_Q12[0][0][i] * TP82[j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + j] += BF20[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + (j + 6)] += BF21[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM5[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM7[j]] += BF2[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM5[i] + j] += BF22[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM0[j]] += BF8[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + DM2[j]] += FE96_C0_D02_Q12[0][0][j] * TP83[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM1[j]] += BF23[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][j] * TP84[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM5[i] + DM4[j]] += FE96_C0_D11_Q12[0][0][j] * TP85[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM5[i] + (j + 6)] += BF24[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM5[j]] += BF25[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][j] * TP86[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM7[j]] += BF26[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][j] * TP87[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM5[i] + DM9[j]] += FE96_C0_D11_Q12[0][0][j] * TP88[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP89[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP90[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP91[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 15)] += BF27[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP92[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][j] * TP93[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 18)] += BF28[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][j] * TP94[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM6[i] + j] += FE96_C0_D02_Q12[0][0][i] * TP95[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM6[i] + DM0[j]] += FE96_C0_D02_Q12[0][0][i] * TP96[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + DM2[j]] += FE96_C0_D02_Q12[0][0][i] * TP20[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM6[i] + DM1[j]] += FE96_C0_D02_Q12[0][0][i] * TP97[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][i] * TP51[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM6[i] + DM4[j]] += FE96_C0_D02_Q12[0][0][i] * TP98[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM6[i] + (j + 6)] += FE96_C0_D02_Q12[0][0][i] * TP99[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM6[i] + DM5[j]] += FE96_C0_D02_Q12[0][0][i] * TP100[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][i] * TP101[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM6[i] + DM7[j]] += FE96_C0_D02_Q12[0][0][i] * TP102[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][i] * TP103[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM6[i] + DM9[j]] += FE96_C0_D02_Q12[0][0][i] * TP104[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + (j + 12)] += FE96_C0_D02_Q12[0][0][i] * TP105[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + DM10[j]] += FE96_C0_D02_Q12[0][0][i] * TP106[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + (j + 15)] += FE96_C0_D02_Q12[0][0][i] * TP107[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + (j + 15)] += FE96_C0_D02_Q12[0][0][i] * TP108[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + DM11[j]] += FE96_C0_D02_Q12[0][0][i] * TP109[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + (j + 18)] += FE96_C0_D02_Q12[0][0][i] * TP110[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + (j + 18)] += FE96_C0_D02_Q12[0][0][i] * TP111[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + DM12[j]] += FE96_C0_D02_Q12[0][0][i] * TP112[j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM7[i] + j] += BF29[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM0[j]] += BF30[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + DM2[j]] += FE96_C0_D02_Q12[0][0][j] * TP113[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM1[j]] += BF17[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][j] * TP114[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM7[i] + DM4[j]] += FE96_C0_D11_Q12[0][0][j] * TP115[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM7[i] + (j + 6)] += BF31[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM5[j]] += BF32[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][j] * TP116[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM7[j]] += BF33[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][j] * TP117[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM7[i] + DM9[j]] += FE96_C0_D11_Q12[0][0][j] * TP118[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP119[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP120[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP121[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + (j + 15)] += BF34[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP122[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][j] * TP123[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + (j + 18)] += BF35[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][j] * TP124[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM8[i] + j] += FE96_C0_D02_Q12[0][0][i] * TP125[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM8[i] + DM0[j]] += FE96_C0_D02_Q12[0][0][i] * TP126[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + DM2[j]] += FE96_C0_D02_Q12[0][0][i] * TP22[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM8[i] + DM1[j]] += FE96_C0_D02_Q12[0][0][i] * TP127[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][i] * TP53[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM8[i] + DM4[j]] += FE96_C0_D02_Q12[0][0][i] * TP128[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM8[i] + (j + 6)] += FE96_C0_D02_Q12[0][0][i] * TP129[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM8[i] + DM5[j]] += FE96_C0_D02_Q12[0][0][i] * TP130[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][i] * TP103[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM8[i] + DM7[j]] += FE96_C0_D02_Q12[0][0][i] * TP131[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][i] * TP132[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM8[i] + DM9[j]] += FE96_C0_D02_Q12[0][0][i] * TP133[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + (j + 12)] += FE96_C0_D02_Q12[0][0][i] * TP134[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + DM10[j]] += FE96_C0_D02_Q12[0][0][i] * TP135[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + (j + 15)] += FE96_C0_D02_Q12[0][0][i] * TP136[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + (j + 15)] += FE96_C0_D02_Q12[0][0][i] * TP137[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + DM11[j]] += FE96_C0_D02_Q12[0][0][i] * TP138[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + (j + 18)] += FE96_C0_D02_Q12[0][0][i] * TP139[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + (j + 18)] += FE96_C0_D02_Q12[0][0][i] * TP140[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + DM12[j]] += FE96_C0_D02_Q12[0][0][i] * TP141[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM9[i] + j] += FE96_C0_D11_Q12[0][0][i] * TP142[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM9[i] + DM0[j]] += FE96_C0_D11_Q12[0][0][i] * TP143[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + DM2[j]] += FE96_C0_D11_Q12[0][0][i] * TP144[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM9[i] + DM1[j]] += FE96_C0_D11_Q12[0][0][i] * TP145[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + DM3[j]] += FE96_C0_D11_Q12[0][0][i] * TP146[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM9[i] + DM4[j]] += FE96_C0_D11_Q12[0][0][i] * TP74[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM9[i] + (j + 6)] += FE96_C0_D11_Q12[0][0][i] * TP147[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM9[i] + DM5[j]] += FE96_C0_D11_Q12[0][0][i] * TP148[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + DM6[j]] += FE96_C0_D11_Q12[0][0][i] * TP149[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM9[i] + DM7[j]] += FE96_C0_D11_Q12[0][0][i] * TP150[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + DM8[j]] += FE96_C0_D11_Q12[0][0][i] * TP151[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM9[i] + DM9[j]] += FE96_C0_D11_Q12[0][0][i] * TP152[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + (j + 12)] += FE96_C0_D11_Q12[0][0][i] * TP153[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + DM10[j]] += FE96_C0_D11_Q12[0][0][i] * TP154[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + (j + 15)] += FE96_C0_D11_Q12[0][0][i] * TP155[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + (j + 15)] += FE96_C0_D11_Q12[0][0][i] * TP156[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + DM11[j]] += FE96_C0_D11_Q12[0][0][i] * TP157[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + (j + 18)] += FE96_C0_D11_Q12[0][0][i] * TP158[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + (j + 18)] += FE96_C0_D11_Q12[0][0][i] * TP159[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + DM12[j]] += FE96_C0_D11_Q12[0][0][i] * TP160[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 12) + j] += FE3_C0_D01_Q12[0][0][i] * TP161[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 12) + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP162[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + DM2[j]] += FE3_C0_D01_Q12[0][0][i] * TP163[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 12) + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP164[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + DM3[j]] += FE3_C0_D01_Q12[0][0][i] * TP165[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 12) + DM4[j]] += FE3_C0_D01_Q12[0][0][i] * TP166[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 12) + (j + 6)] += FE3_C0_D01_Q12[0][0][i] * TP167[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 12) + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP168[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + DM6[j]] += FE3_C0_D01_Q12[0][0][i] * TP169[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 12) + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP170[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + DM8[j]] += FE3_C0_D01_Q12[0][0][i] * TP171[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 12) + DM9[j]] += FE3_C0_D01_Q12[0][0][i] * TP172[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + (j + 12)] += FE3_C0_D01_Q12[0][0][i] * TP173[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + DM10[j]] += FE3_C0_D01_Q12[0][0][i] * TP174[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP175[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP176[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + DM11[j]] += FE3_C0_D01_Q12[0][0][i] * TP177[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP178[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP179[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + DM12[j]] += FE3_C0_D01_Q12[0][0][i] * TP180[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM10[i] + j] += FE3_C0_D01_Q12[0][0][i] * TP181[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM10[i] + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP182[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + DM2[j]] += FE3_C0_D01_Q12[0][0][i] * TP183[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM10[i] + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP184[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + DM3[j]] += FE3_C0_D01_Q12[0][0][i] * TP185[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM10[i] + DM4[j]] += FE3_C0_D01_Q12[0][0][i] * TP186[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM10[i] + (j + 6)] += FE3_C0_D01_Q12[0][0][i] * TP187[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM10[i] + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP188[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + DM6[j]] += FE3_C0_D01_Q12[0][0][i] * TP189[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM10[i] + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP190[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + DM8[j]] += FE3_C0_D01_Q12[0][0][i] * TP191[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM10[i] + DM9[j]] += FE3_C0_D01_Q12[0][0][i] * TP192[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][i] * TP174[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][i] * TP193[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP194[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP195[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][i] * TP196[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP197[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP198[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][i] * TP199[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + j] += FE3_C0_D01_Q12[0][0][i] * TP200[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP201[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP202[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + (j + 6)] += FE3_C0_D01_Q12[0][0][i] * TP203[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP204[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP205[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP206[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP207[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM11[j]] += FE3_C0_D01_Q12[0][0][i] * TP208[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP209[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP210[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM12[j]] += FE3_C0_D01_Q12[0][0][i] * TP211[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM0[j]] += BF36[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM1[j]] += BF37[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM5[j]] += BF38[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM7[j]] += BF39[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP212[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += BF40[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP213[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += BF41[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM11[i] + j] += FE3_C0_D01_Q12[0][0][i] * TP214[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM11[i] + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP215[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM11[i] + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP216[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM11[i] + (j + 6)] += FE3_C0_D01_Q12[0][0][i] * TP217[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM11[i] + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP218[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM11[i] + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP219[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP220[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM11[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP221[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][i] * TP222[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP223[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM11[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP224[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][i] * TP225[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + j] += FE3_C0_D01_Q12[0][0][i] * TP226[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP227[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP228[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + (j + 6)] += FE3_C0_D01_Q12[0][0][i] * TP229[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP230[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP231[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP232[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP233[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM11[j]] += FE3_C0_D01_Q12[0][0][i] * TP234[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP235[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP236[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM12[j]] += FE3_C0_D01_Q12[0][0][i] * TP237[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + j] += BF42[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM0[j]] += BF43[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM1[j]] += BF44[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + (j + 6)] += BF45[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM5[j]] += BF46[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM7[j]] += BF47[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP238[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += BF48[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP239[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 18)] += FE3_C0_D01_Q12[0][0][j] * TP240[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += BF49[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM12[j]] += FE3_C0_D01_Q12[0][0][j] * TP241[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM12[i] + j] += FE3_C0_D01_Q12[0][0][i] * TP242[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM12[i] + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP243[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM12[i] + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP244[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM12[i] + (j + 6)] += FE3_C0_D01_Q12[0][0][i] * TP245[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM12[i] + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP246[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM12[i] + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP247[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP248[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM12[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP249[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][i] * TP250[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP251[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM12[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP252[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][i] * TP253[j];
  }

};


class ranspseudotimestepping_exterior_facet_integral_7_3: public ufc::exterior_facet_integral
{
public:

  ranspseudotimestepping_exterior_facet_integral_7_3() : ufc::exterior_facet_integral()
  {

  }

  ~ranspseudotimestepping_exterior_facet_integral_7_3() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, false, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 37
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.1739274225687268, 0.3260725774312731, 0.3260725774312731, 0.1739274225687268 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE47_C0_D01_F_Q4[3][4][5] =
        { { { 1.0, -0.7222726231881047, 3.722272623188091, -0.2777273768118826, -3.722272623188107 },
            { 1.0, 0.3200379128302891, 2.679962087169697, -1.320037912830275, -2.679962087169714 },
            { 1.0, 1.679962087169715, 1.320037912830271, -2.679962087169701, -1.320037912830287 },
            { 1.0, 2.722272623188108, 0.2777273768118786, -3.722272623188096, -0.2777273768118922 } },
          { { -2.72227262318811, -0.722272623188105, 0.0, 3.444545246376218, 0.0 },
            { -1.679962087169718, 0.3200379128302888, 0.0, 1.359924174339433, 0.0 },
            { -0.3200379128302928, 1.679962087169715, 0.0, -1.359924174339417, 0.0 },
            { 0.7222726231881, 2.722272623188108, 0.0, -3.444545246376202, 0.0 } },
          { { -2.72227262318811, -1.0, 0.2777273768118848, 3.722272623188112, -0.2777273768118925 },
            { -1.679962087169717, -1.0, 1.320037912830276, 2.679962087169721, -1.320037912830287 },
            { -0.3200379128302917, -1.0, 2.6799620871697, 1.320037912830298, -2.679962087169714 },
            { 0.7222726231880999, -1.0, 3.722272623188092, 0.2777273768119067, -3.722272623188106 } } };
    alignas(32) static const double FE47_C0_D10_F_Q4[3][4][5] =
        { { { 1.0, 2.722272623188104, 0.2777273768118936, -0.2777273768118936, -3.722272623188106 },
            { 1.0, 1.679962087169712, 1.320037912830285, -1.320037912830285, -2.679962087169713 },
            { 1.0, 0.3200379128302879, 2.679962087169708, -2.679962087169708, -1.320037912830288 },
            { 1.0, -0.7222726231881051, 3.722272623188099, -3.722272623188099, -0.2777273768118945 } },
          { { -2.722272623188107, -1.0, 0.277727376811893, -0.277727376811893, 3.72227262318811 },
            { -1.679962087169713, -1.0, 1.320037912830285, -1.320037912830285, 2.679962087169716 },
            { -0.3200379128302884, -1.0, 2.679962087169709, -2.679962087169709, 1.320037912830289 },
            { 0.7222726231881045, -1.0, 3.722272623188099, -3.722272623188099, 0.2777273768118963 } },
          { { -2.722272623188106, -0.7222726231881095, 0.0, 0.0, 3.444545246376216 },
            { -1.679962087169712, 0.3200379128302852, 0.0, 0.0, 1.359924174339427 },
            { -0.3200379128302857, 1.679962087169712, 0.0, 0.0, -1.359924174339426 },
            { 0.7222726231881069, 2.722272623188104, 0.0, 0.0, -3.444545246376211 } } };
    alignas(32) static const double FE47_C0_F_Q4[3][4][6] =
        { { { 0.0, 0.8013460293699309, -0.05979028222412166, 0.2584442528541909, 0.0, 0.0 },
            { 0.0, 0.2277840767909521, -0.1121969667939041, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.1121969667939041, 0.227784076790952, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.05979028222412169, 0.8013460293699309, 0.2584442528541908, 0.0, 0.0 } },
          { { 0.8013460293699309, 0.0, -0.05979028222412166, 0.0, 0.2584442528541908, 0.0 },
            { 0.2277840767909521, 0.0, -0.1121969667939041, 0.0, 0.8844128900029518, 0.0 },
            { -0.1121969667939041, 0.0, 0.2277840767909521, 0.0, 0.8844128900029519, 0.0 },
            { -0.05979028222412166, 0.0, 0.8013460293699309, 0.0, 0.2584442528541906, 0.0 } },
          { { 0.8013460293699309, -0.05979028222412169, 0.0, 0.0, 0.0, 0.2584442528541908 },
            { 0.2277840767909521, -0.1121969667939041, 0.0, 0.0, 0.0, 0.8844128900029519 },
            { -0.1121969667939041, 0.2277840767909522, 0.0, 0.0, 0.0, 0.884412890002952 },
            { -0.05979028222412169, 0.8013460293699308, 0.0, 0.0, 0.0, 0.2584442528541909 } } };
    alignas(32) static const double FE49_C2_D01_F_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE49_C2_F_Q4[3][4][3] =
        { { { 0.0, 0.9305681557970263, 0.06943184420297369 },
            { 0.0, 0.6699905217924281, 0.3300094782075718 },
            { 0.0, 0.3300094782075719, 0.6699905217924279 },
            { 0.0, 0.06943184420297382, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.0, 0.06943184420297369 },
            { 0.6699905217924281, 0.0, 0.3300094782075718 },
            { 0.3300094782075719, 0.0, 0.669990521792428 },
            { 0.06943184420297382, 0.0, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.06943184420297367, 0.0 },
            { 0.6699905217924281, 0.3300094782075718, 0.0 },
            { 0.3300094782075719, 0.6699905217924281, 0.0 },
            { 0.06943184420297374, 0.9305681557970263, 0.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE49_C2_D01_F_Q4[0][0][0] + coordinate_dofs[2] * FE49_C2_D01_F_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE49_C2_D01_F_Q4[0][0][0] + coordinate_dofs[5] * FE49_C2_D01_F_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE49_C2_D01_F_Q4[0][0][0] + coordinate_dofs[4] * FE49_C2_D01_F_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE49_C2_D01_F_Q4[0][0][0] + coordinate_dofs[3] * FE49_C2_D01_F_Q4[0][0][1];
    const double w2_d1_c3 = w[2][15] * FE49_C2_D01_F_Q4[0][0][0] + w[2][17] * FE49_C2_D01_F_Q4[0][0][1];
    double w2_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c3 += w[2][ic + 15] * FE49_C2_D01_F_Q4[0][0][ic];
    const double w2_d1_c4 = w[2][18] * FE49_C2_D01_F_Q4[0][0][0] + w[2][20] * FE49_C2_D01_F_Q4[0][0][1];
    double w2_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c4 += w[2][ic + 18] * FE49_C2_D01_F_Q4[0][0][ic];
    alignas(32) double sp[74];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = triangle_reference_facet_normals[facet][1] * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = triangle_reference_facet_normals[facet][0] * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet][0] * sp[9];
    sp[11] = -1 * J_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[20] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[21] = sp[19] + sp[20];
    sp[22] = std::sqrt(sp[21]);
    sp[23] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[24] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[25] = sp[23] + sp[24];
    sp[26] = std::sqrt(sp[25]);
    sp[27] = sp[22] * sp[26];
    sp[28] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[29] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[30] = sp[28] + sp[29];
    sp[31] = std::sqrt(sp[30]);
    sp[32] = sp[27] * sp[31];
    sp[33] = triangle_reference_cell_volume * sp[2];
    sp[34] = std::abs(sp[33]);
    sp[35] = sp[32] / (4.0 * sp[34]);
    sp[36] = sp[3] * sp[17];
    sp[37] = sp[5] * sp[17];
    sp[38] = sp[11] * sp[18];
    sp[39] = sp[9] * sp[18];
    sp[40] = sp[36] + sp[38];
    sp[41] = sp[37] + sp[39];
    sp[42] = w2_d1_c3 * sp[3];
    sp[43] = w2_d0_c3 * sp[5];
    sp[44] = sp[42] + sp[43];
    sp[45] = sp[44] * sp[17];
    sp[46] = w2_d0_c3 * sp[9];
    sp[47] = w2_d1_c3 * sp[11];
    sp[48] = sp[46] + sp[47];
    sp[49] = sp[48] * sp[18];
    sp[50] = sp[45] + sp[49];
    sp[51] = w2_d1_c4 * sp[3];
    sp[52] = w2_d0_c4 * sp[5];
    sp[53] = sp[51] + sp[52];
    sp[54] = sp[53] * sp[17];
    sp[55] = w2_d0_c4 * sp[9];
    sp[56] = w2_d1_c4 * sp[11];
    sp[57] = sp[55] + sp[56];
    sp[58] = sp[57] * sp[18];
    sp[59] = sp[54] + sp[58];
    sp[60] = sp[11] + sp[11];
    sp[61] = sp[9] + sp[9];
    sp[62] = sp[5] + sp[5];
    sp[63] = sp[3] + sp[3];
    sp[64] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[65] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[66] = sp[64] + sp[65];
    sp[67] = sp[66] * sp[66];
    sp[68] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[69] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[70] = sp[68] + sp[69];
    sp[71] = sp[70] * sp[70];
    sp[72] = sp[67] + sp[71];
    sp[73] = std::sqrt(sp[72]);
    alignas(32) double BF0[6][6] = {};
    alignas(32) double BF1[6][5] = {};
    alignas(32) double BF2[6][5] = {};
    alignas(32) double BF3[6][6] = {};
    alignas(32) double BF4[6][5] = {};
    alignas(32) double BF5[6][5] = {};
    alignas(32) double BF6[6][3] = {};
    alignas(32) double BF7[6][3] = {};
    alignas(32) double BF8[5][6] = {};
    alignas(32) double BF9[5][6] = {};
    alignas(32) double BF10[5][3] = {};
    alignas(32) double BF11[5][3] = {};
    alignas(32) double BF12[5][6] = {};
    alignas(32) double BF13[5][6] = {};
    alignas(32) double BF14[5][3] = {};
    alignas(32) double BF15[5][3] = {};
    alignas(32) double BF16[6][6] = {};
    alignas(32) double BF17[6][5] = {};
    alignas(32) double BF18[6][5] = {};
    alignas(32) double BF19[6][6] = {};
    alignas(32) double BF20[6][5] = {};
    alignas(32) double BF21[6][5] = {};
    alignas(32) double BF22[6][3] = {};
    alignas(32) double BF23[6][3] = {};
    alignas(32) double BF24[5][6] = {};
    alignas(32) double BF25[5][6] = {};
    alignas(32) double BF26[5][3] = {};
    alignas(32) double BF27[5][3] = {};
    alignas(32) double BF28[5][6] = {};
    alignas(32) double BF29[5][6] = {};
    alignas(32) double BF30[5][3] = {};
    alignas(32) double BF31[5][3] = {};
    alignas(32) double TP0[6] = {};
    alignas(32) double TP1[6] = {};
    alignas(32) double TP2[3] = {};
    alignas(32) double TP3[3] = {};
    alignas(32) double BF32[3][6] = {};
    alignas(32) double BF33[3][6] = {};
    alignas(32) double TP4[3] = {};
    alignas(32) double BF34[3][3] = {};
    alignas(32) double TP5[3] = {};
    alignas(32) double TP6[3] = {};
    alignas(32) double BF35[3][3] = {};
    alignas(32) double TP7[3] = {};
    alignas(32) double TP8[6] = {};
    alignas(32) double TP9[6] = {};
    alignas(32) double TP10[3] = {};
    alignas(32) double TP11[3] = {};
    alignas(32) double TP12[6] = {};
    alignas(32) double TP13[6] = {};
    alignas(32) double TP14[3] = {};
    alignas(32) double TP15[3] = {};
    alignas(32) double BF36[3][6] = {};
    alignas(32) double BF37[3][6] = {};
    alignas(32) double BF38[3][3] = {};
    alignas(32) double BF39[3][3] = {};
    alignas(32) double TP16[6] = {};
    alignas(32) double TP17[6] = {};
    alignas(32) double TP18[3] = {};
    alignas(32) double TP19[3] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE49_C2_F_Q4[facet][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4 += w[4][ic] * FE49_C2_F_Q4[facet][iq][ic];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE49_C2_F_Q4[facet][iq][ic];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c1 += w[3][ic + 6] * FE47_C0_F_Q4[facet][iq][ic];
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c0 += w[3][ic] * FE47_C0_F_Q4[facet][iq][ic];
        double w3_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c3 += w[3][ic + 15] * FE49_C2_F_Q4[facet][iq][ic];
        double w3_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c4 += w[3][ic + 18] * FE49_C2_F_Q4[facet][iq][ic];
        const double w2_d1_c0 = w[2][0] * FE47_C0_D01_F_Q4[facet][iq][0] + w[2][2] * FE47_C0_D01_F_Q4[facet][iq][1] + w[2][3] * FE47_C0_D01_F_Q4[facet][iq][2] + w[2][4] * FE47_C0_D01_F_Q4[facet][iq][3] + w[2][5] * FE47_C0_D01_F_Q4[facet][iq][4];
        const double w2_d0_c0 = w[2][0] * FE47_C0_D10_F_Q4[facet][iq][0] + w[2][1] * FE47_C0_D10_F_Q4[facet][iq][1] + w[2][3] * FE47_C0_D10_F_Q4[facet][iq][2] + w[2][4] * FE47_C0_D10_F_Q4[facet][iq][3] + w[2][5] * FE47_C0_D10_F_Q4[facet][iq][4];
        const double w2_d0_c1 = w[2][6] * FE47_C0_D10_F_Q4[facet][iq][0] + w[2][7] * FE47_C0_D10_F_Q4[facet][iq][1] + w[2][9] * FE47_C0_D10_F_Q4[facet][iq][2] + w[2][10] * FE47_C0_D10_F_Q4[facet][iq][3] + w[2][11] * FE47_C0_D10_F_Q4[facet][iq][4];
        const double w2_d1_c1 = w[2][6] * FE47_C0_D01_F_Q4[facet][iq][0] + w[2][8] * FE47_C0_D01_F_Q4[facet][iq][1] + w[2][9] * FE47_C0_D01_F_Q4[facet][iq][2] + w[2][10] * FE47_C0_D01_F_Q4[facet][iq][3] + w[2][11] * FE47_C0_D01_F_Q4[facet][iq][4];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE47_C0_F_Q4[facet][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE47_C0_F_Q4[facet][iq][ic];
        alignas(32) double sv4[373];
        sv4[0] = std::exp(w4);
        sv4[1] = w2_c3 * (0.09 * sv4[0]);
        sv4[2] = w2_c3 * sv4[1];
        sv4[3] = w2_c4 * w2_c4;
        sv4[4] = std::sqrt(1e-8 + sv4[3]);
        sv4[5] = w2_c4 + sv4[4];
        sv4[6] = sv4[2] / (0.5 * sv4[5]);
        sv4[7] = w3_c1 * sp[17];
        sv4[8] = w3_c0 * sp[18];
        sv4[9] = sv4[7] + sv4[8];
        sv4[10] = std::tanh(100.0 * sv4[9]);
        sv4[11] = (0.0001 + sv4[6] / 1.3) * (100000.0 * (0.5 + -1 * (0.5 * sv4[10])));
        sv4[12] = sv4[11] * (1.0 / (2.0 * sp[35]));
        sv4[13] = sv4[1] + sv4[1];
        sv4[14] = w2_c4 + w2_c4;
        sv4[15] = sv4[14] / (2 * sv4[4]);
        sv4[16] = 0.5 * (1.0 + sv4[15]) * sv4[6];
        sv4[17] = -1 * sv4[16] / (0.5 * sv4[5]);
        sv4[18] = sv4[13] / (0.5 * sv4[5]);
        sv4[19] = 100000.0 * (0.5 + -1 * (0.5 * sv4[10])) * (sv4[17] / 1.3);
        sv4[20] = 100000.0 * (0.5 + -1 * (0.5 * sv4[10])) * (sv4[18] / 1.3);
        sv4[21] = sv4[19] * (1.0 / (2.0 * sp[35]));
        sv4[22] = sv4[20] * (1.0 / (2.0 * sp[35]));
        sv4[23] = w2_c4 * sv4[21];
        sv4[24] = w2_c4 * sv4[22];
        sv4[25] = sv4[23] + sv4[12];
        sv4[26] = (0.0001 + sv4[6]) * (100000.0 * (0.5 + -1 * (0.5 * sv4[10])));
        sv4[27] = sv4[26] * (1.0 / (2.0 * sp[35]));
        sv4[28] = 100000.0 * (0.5 + -1 * (0.5 * sv4[10])) * sv4[17];
        sv4[29] = 100000.0 * (0.5 + -1 * (0.5 * sv4[10])) * sv4[18];
        sv4[30] = sv4[28] * (1.0 / (2.0 * sp[35]));
        sv4[31] = sv4[29] * (1.0 / (2.0 * sp[35]));
        sv4[32] = w2_c3 * sv4[30];
        sv4[33] = w2_c3 * sv4[31];
        sv4[34] = sv4[33] + sv4[27];
        sv4[35] = (0.5 + -1 * (0.5 * sv4[10])) * (0.0001 + sv4[6]);
        sv4[36] = sp[40] * sv4[35];
        sv4[37] = sp[41] * sv4[35];
        sv4[38] = (0.5 + -1 * (0.5 * sv4[10])) * sv4[17];
        sv4[39] = (0.5 + -1 * (0.5 * sv4[10])) * sv4[18];
        sv4[40] = sp[40] * sv4[38];
        sv4[41] = sp[40] * sv4[39];
        sv4[42] = sp[41] * sv4[38];
        sv4[43] = sp[41] * sv4[39];
        sv4[44] = w2_c3 * sv4[40];
        sv4[45] = w2_c3 * sv4[42];
        sv4[46] = w2_c3 * sv4[41];
        sv4[47] = w2_c3 * sv4[43];
        sv4[48] = sv4[36] + sv4[46];
        sv4[49] = sv4[37] + sv4[47];
        sv4[50] = (0.5 + -1 * (0.5 * sv4[10])) * (0.0001 + sv4[6] / 1.3);
        sv4[51] = sp[40] * sv4[50];
        sv4[52] = sp[41] * sv4[50];
        sv4[53] = (0.5 + -1 * (0.5 * sv4[10])) * (sv4[17] / 1.3);
        sv4[54] = (0.5 + -1 * (0.5 * sv4[10])) * (sv4[18] / 1.3);
        sv4[55] = sp[40] * sv4[53];
        sv4[56] = sp[40] * sv4[54];
        sv4[57] = sp[41] * sv4[53];
        sv4[58] = sp[41] * sv4[54];
        sv4[59] = w2_c4 * sv4[55];
        sv4[60] = w2_c4 * sv4[57];
        sv4[61] = w2_c4 * sv4[56];
        sv4[62] = w2_c4 * sv4[58];
        sv4[63] = sv4[51] + sv4[59];
        sv4[64] = sv4[52] + sv4[60];
        sv4[65] = sp[50] * sv4[38];
        sv4[66] = sp[50] * sv4[39];
        sv4[67] = -1 * sv4[65] + sv4[32];
        sv4[68] = sv4[34] + -1 * sv4[66];
        sv4[69] = sp[59] * sv4[53];
        sv4[70] = sp[59] * sv4[54];
        sv4[71] = sv4[67] + -1 * sv4[69];
        sv4[72] = sv4[68] + -1 * sv4[70];
        sv4[73] = std::cosh(100.0 * sv4[9]);
        sv4[74] = std::cosh(2.0 * (100.0 * sv4[9]));
        sv4[75] = 2.0 * sv4[73] / (1.0 + sv4[74]);
        sv4[76] = 100.0 * sp[17] * std::pow(sv4[75], 2);
        sv4[77] = 100.0 * sp[18] * std::pow(sv4[75], 2);
        sv4[78] = (0.0001 + sv4[6] / 1.3) * (100000.0 * (-1 * (0.5 * sv4[76])));
        sv4[79] = (0.0001 + sv4[6] / 1.3) * (100000.0 * (-1 * (0.5 * sv4[77])));
        sv4[80] = sv4[78] * (1.0 / (2.0 * sp[35]));
        sv4[81] = sv4[79] * (1.0 / (2.0 * sp[35]));
        sv4[82] = w2_c4 * sv4[80];
        sv4[83] = w2_c4 * sv4[81];
        sv4[84] = (0.0001 + sv4[6]) * (100000.0 * (-1 * (0.5 * sv4[76])));
        sv4[85] = (0.0001 + sv4[6]) * (100000.0 * (-1 * (0.5 * sv4[77])));
        sv4[86] = sv4[84] * (1.0 / (2.0 * sp[35]));
        sv4[87] = sv4[85] * (1.0 / (2.0 * sp[35]));
        sv4[88] = w2_c3 * sv4[86];
        sv4[89] = w2_c3 * sv4[87];
        sv4[90] = (0.0001 + sv4[6]) * (-1 * (0.5 * sv4[76]));
        sv4[91] = (0.0001 + sv4[6]) * (-1 * (0.5 * sv4[77]));
        sv4[92] = sp[40] * sv4[90];
        sv4[93] = sp[40] * sv4[91];
        sv4[94] = sp[41] * sv4[90];
        sv4[95] = sp[41] * sv4[91];
        sv4[96] = w2_c3 * sv4[92];
        sv4[97] = w2_c3 * sv4[93];
        sv4[98] = w2_c3 * sv4[94];
        sv4[99] = w2_c3 * sv4[95];
        sv4[100] = sp[50] * sv4[90];
        sv4[101] = sp[50] * sv4[91];
        sv4[102] = -1 * sv4[100] + sv4[88];
        sv4[103] = -1 * sv4[101] + sv4[89];
        sv4[104] = (0.0001 + sv4[6] / 1.3) * (-1 * (0.5 * sv4[76]));
        sv4[105] = (0.0001 + sv4[6] / 1.3) * (-1 * (0.5 * sv4[77]));
        sv4[106] = sp[40] * sv4[104];
        sv4[107] = sp[40] * sv4[105];
        sv4[108] = sp[41] * sv4[104];
        sv4[109] = sp[41] * sv4[105];
        sv4[110] = w2_c4 * sv4[106];
        sv4[111] = w2_c4 * sv4[107];
        sv4[112] = w2_c4 * sv4[108];
        sv4[113] = w2_c4 * sv4[109];
        sv4[114] = sp[59] * sv4[104];
        sv4[115] = sp[59] * sv4[105];
        sv4[116] = sv4[102] + -1 * sv4[114];
        sv4[117] = sv4[103] + -1 * sv4[115];
        sv4[118] = w3_c3 * (0.09 * sv4[0]);
        sv4[119] = w3_c3 * sv4[118];
        sv4[120] = w3_c4 * w3_c4;
        sv4[121] = std::sqrt(1e-8 + sv4[120]);
        sv4[122] = w3_c4 + sv4[121];
        sv4[123] = sv4[119] / (0.5 * sv4[122]);
        sv4[124] = 2.0 * (0.0001 + sv4[123]) * (sp[3] / 2);
        sv4[125] = 2.0 * (0.0001 + sv4[123]) * (sp[5] / 2);
        sv4[126] = 2.0 * (0.0001 + sv4[123]) * (sp[9] / 2);
        sv4[127] = 2.0 * (0.0001 + sv4[123]) * (sp[11] / 2);
        sv4[128] = sv4[124] * sp[17];
        sv4[129] = sv4[125] * sp[17];
        sv4[130] = sv4[126] * sp[17];
        sv4[131] = sv4[127] * sp[17];
        sv4[132] = 2.0 * (0.0001 + sv4[123]) * (sp[60] / 2);
        sv4[133] = 2.0 * (0.0001 + sv4[123]) * (sp[61] / 2);
        sv4[134] = sv4[132] * sp[18];
        sv4[135] = sv4[133] * sp[18];
        sv4[136] = sv4[128] + sv4[134];
        sv4[137] = sv4[129] + sv4[135];
        sv4[138] = sv4[136] * (-1 * sp[17]);
        sv4[139] = sv4[137] * (-1 * sp[17]);
        sv4[140] = -1 * sp[17] * sv4[130];
        sv4[141] = -1 * sp[17] * sv4[131];
        sv4[142] = 2.0 * (0.0001 + sv4[123]) * (sp[62] / 2);
        sv4[143] = 2.0 * (0.0001 + sv4[123]) * (sp[63] / 2);
        sv4[144] = sv4[142] * sp[17];
        sv4[145] = sv4[143] * sp[17];
        sv4[146] = sv4[124] * sp[18];
        sv4[147] = sv4[125] * sp[18];
        sv4[148] = sv4[126] * sp[18];
        sv4[149] = sv4[127] * sp[18];
        sv4[150] = sv4[144] + sv4[148];
        sv4[151] = sv4[145] + sv4[149];
        sv4[152] = sv4[146] * sp[18];
        sv4[153] = sv4[147] * sp[18];
        sv4[154] = sv4[150] * sp[18];
        sv4[155] = sv4[151] * sp[18];
        sv4[156] = sv4[138] + sv4[152];
        sv4[157] = sv4[139] + sv4[153];
        sv4[158] = sv4[140] + sv4[154];
        sv4[159] = sv4[141] + sv4[155];
        sv4[160] = sv4[156] * sp[18];
        sv4[161] = sv4[157] * sp[18];
        sv4[162] = sv4[158] * sp[18];
        sv4[163] = sv4[159] * sp[18];
        sv4[164] = sv4[156] * (-1 * sp[17]);
        sv4[165] = sv4[157] * (-1 * sp[17]);
        sv4[166] = sv4[158] * (-1 * sp[17]);
        sv4[167] = sv4[159] * (-1 * sp[17]);
        sv4[168] = sv4[118] + sv4[118];
        sv4[169] = w3_c4 + w3_c4;
        sv4[170] = sv4[169] / (2 * sv4[121]);
        sv4[171] = 0.5 * (1.0 + sv4[170]) * sv4[123];
        sv4[172] = -1 * sv4[171] / (0.5 * sv4[122]);
        sv4[173] = sv4[168] / (0.5 * sv4[122]);
        sv4[174] = w2_d1_c0 * sp[3];
        sv4[175] = w2_d0_c0 * sp[5];
        sv4[176] = sv4[174] + sv4[175];
        sv4[177] = w2_d0_c1 * sp[9];
        sv4[178] = w2_d1_c1 * sp[11];
        sv4[179] = sv4[177] + sv4[178];
        sv4[180] = sv4[176] + sv4[179];
        sv4[181] = 2.0 * sv4[172] * (sv4[180] / 2);
        sv4[182] = 2.0 * sv4[173] * (sv4[180] / 2);
        sv4[183] = sv4[181] * sp[17];
        sv4[184] = sv4[182] * sp[17];
        sv4[185] = w2_d0_c0 * sp[9];
        sv4[186] = w2_d1_c0 * sp[11];
        sv4[187] = sv4[185] + sv4[186];
        sv4[188] = sv4[187] + sv4[187];
        sv4[189] = 2.0 * sv4[172] * (sv4[188] / 2);
        sv4[190] = 2.0 * sv4[173] * (sv4[188] / 2);
        sv4[191] = sv4[189] * sp[18];
        sv4[192] = sv4[190] * sp[18];
        sv4[193] = sv4[183] + sv4[191];
        sv4[194] = sv4[184] + sv4[192];
        sv4[195] = sv4[193] * (-1 * sp[17]);
        sv4[196] = sv4[194] * (-1 * sp[17]);
        sv4[197] = w2_d1_c1 * sp[3];
        sv4[198] = w2_d0_c1 * sp[5];
        sv4[199] = sv4[197] + sv4[198];
        sv4[200] = sv4[199] + sv4[199];
        sv4[201] = 2.0 * sv4[172] * (sv4[200] / 2);
        sv4[202] = 2.0 * sv4[173] * (sv4[200] / 2);
        sv4[203] = sv4[201] * sp[17];
        sv4[204] = sv4[202] * sp[17];
        sv4[205] = sv4[181] * sp[18];
        sv4[206] = sv4[182] * sp[18];
        sv4[207] = sv4[203] + sv4[205];
        sv4[208] = sv4[204] + sv4[206];
        sv4[209] = sv4[207] * sp[18];
        sv4[210] = sv4[208] * sp[18];
        sv4[211] = sv4[195] + sv4[209];
        sv4[212] = sv4[196] + sv4[210];
        sv4[213] = sv4[211] * (-1 * sp[17]);
        sv4[214] = sv4[212] * (-1 * sp[17]);
        sv4[215] = sv4[211] * sp[18];
        sv4[216] = sv4[212] * sp[18];
        sv4[217] = w2_c0 + -1 * w[0][0];
        sv4[218] = sv4[217] * (-1 * sp[17]);
        sv4[219] = w2_c1 + -1 * w[0][1];
        sv4[220] = sv4[219] * sp[18];
        sv4[221] = sv4[218] + sv4[220];
        sv4[222] = 2.0 * sv4[172] * (sp[3] / 2);
        sv4[223] = 2.0 * sv4[172] * (sp[5] / 2);
        sv4[224] = 2.0 * sv4[172] * (sp[9] / 2);
        sv4[225] = 2.0 * sv4[172] * (sp[11] / 2);
        sv4[226] = 2.0 * sv4[173] * (sp[3] / 2);
        sv4[227] = 2.0 * sv4[173] * (sp[5] / 2);
        sv4[228] = 2.0 * sv4[173] * (sp[9] / 2);
        sv4[229] = 2.0 * sv4[173] * (sp[11] / 2);
        sv4[230] = sv4[222] * sp[17];
        sv4[231] = sv4[223] * sp[17];
        sv4[232] = sv4[224] * sp[17];
        sv4[233] = sv4[225] * sp[17];
        sv4[234] = sv4[226] * sp[17];
        sv4[235] = sv4[227] * sp[17];
        sv4[236] = sv4[228] * sp[17];
        sv4[237] = sv4[229] * sp[17];
        sv4[238] = 2.0 * sv4[172] * (sp[60] / 2);
        sv4[239] = 2.0 * sv4[172] * (sp[61] / 2);
        sv4[240] = 2.0 * sv4[173] * (sp[60] / 2);
        sv4[241] = 2.0 * sv4[173] * (sp[61] / 2);
        sv4[242] = sv4[238] * sp[18];
        sv4[243] = sv4[239] * sp[18];
        sv4[244] = sv4[240] * sp[18];
        sv4[245] = sv4[241] * sp[18];
        sv4[246] = sv4[230] + sv4[242];
        sv4[247] = sv4[231] + sv4[243];
        sv4[248] = sv4[234] + sv4[244];
        sv4[249] = sv4[235] + sv4[245];
        sv4[250] = sv4[246] * (-1 * sp[17]);
        sv4[251] = sv4[247] * (-1 * sp[17]);
        sv4[252] = -1 * sp[17] * sv4[232];
        sv4[253] = -1 * sp[17] * sv4[233];
        sv4[254] = sv4[248] * (-1 * sp[17]);
        sv4[255] = sv4[249] * (-1 * sp[17]);
        sv4[256] = -1 * sp[17] * sv4[236];
        sv4[257] = -1 * sp[17] * sv4[237];
        sv4[258] = 2.0 * sv4[172] * (sp[62] / 2);
        sv4[259] = 2.0 * sv4[172] * (sp[63] / 2);
        sv4[260] = 2.0 * sv4[173] * (sp[62] / 2);
        sv4[261] = 2.0 * sv4[173] * (sp[63] / 2);
        sv4[262] = sv4[258] * sp[17];
        sv4[263] = sv4[259] * sp[17];
        sv4[264] = sv4[260] * sp[17];
        sv4[265] = sv4[261] * sp[17];
        sv4[266] = sv4[222] * sp[18];
        sv4[267] = sv4[223] * sp[18];
        sv4[268] = sv4[224] * sp[18];
        sv4[269] = sv4[225] * sp[18];
        sv4[270] = sv4[226] * sp[18];
        sv4[271] = sv4[227] * sp[18];
        sv4[272] = sv4[228] * sp[18];
        sv4[273] = sv4[229] * sp[18];
        sv4[274] = sv4[262] + sv4[268];
        sv4[275] = sv4[263] + sv4[269];
        sv4[276] = sv4[264] + sv4[272];
        sv4[277] = sv4[265] + sv4[273];
        sv4[278] = sv4[266] * sp[18];
        sv4[279] = sv4[267] * sp[18];
        sv4[280] = sv4[274] * sp[18];
        sv4[281] = sv4[275] * sp[18];
        sv4[282] = sv4[270] * sp[18];
        sv4[283] = sv4[271] * sp[18];
        sv4[284] = sv4[276] * sp[18];
        sv4[285] = sv4[277] * sp[18];
        sv4[286] = sv4[250] + sv4[278];
        sv4[287] = sv4[251] + sv4[279];
        sv4[288] = sv4[252] + sv4[280];
        sv4[289] = sv4[253] + sv4[281];
        sv4[290] = sv4[254] + sv4[282];
        sv4[291] = sv4[255] + sv4[283];
        sv4[292] = sv4[256] + sv4[284];
        sv4[293] = sv4[257] + sv4[285];
        sv4[294] = sv4[221] * sv4[286];
        sv4[295] = sv4[221] * sv4[287];
        sv4[296] = sv4[221] * sv4[288];
        sv4[297] = sv4[221] * sv4[289];
        sv4[298] = sv4[221] * sv4[290];
        sv4[299] = sv4[221] * sv4[291];
        sv4[300] = sv4[221] * sv4[292];
        sv4[301] = sv4[221] * sv4[293];
        sv4[302] = 100000.0 * (0.0001 + sv4[123]) * (1.0 / (2.0 * sp[35]));
        sv4[303] = sv4[302] * sp[18];
        sv4[304] = sv4[302] * (-1 * sp[17]);
        sv4[305] = -1 * sp[17] * sv4[303];
        sv4[306] = sv4[304] * (-1 * sp[17]);
        sv4[307] = sv4[303] * sp[18];
        sv4[308] = sv4[304] * sp[18];
        sv4[309] = 100000.0 * sv4[172] * (1.0 / (2.0 * sp[35]));
        sv4[310] = 100000.0 * sv4[173] * (1.0 / (2.0 * sp[35]));
        sv4[311] = sv4[221] * sv4[309];
        sv4[312] = sv4[221] * sv4[310];
        sv4[313] = sv4[311] * (-1 * sp[17]);
        sv4[314] = sv4[312] * (-1 * sp[17]);
        sv4[315] = sv4[311] * sp[18];
        sv4[316] = sv4[312] * sp[18];
        sv4[317] = -1 * sv4[213] + sv4[313];
        sv4[318] = -1 * sv4[215] + sv4[315];
        sv4[319] = -1 * sv4[214] + sv4[314];
        sv4[320] = -1 * sv4[216] + sv4[316];
        sv4[321] = sv4[25] * sp[73];
        sv4[322] = sv4[24] * sp[73];
        sv4[323] = sv4[82] * sp[73];
        sv4[324] = sv4[83] * sp[73];
        sv4[325] = sv4[71] * sp[73];
        sv4[326] = -1 * sv4[44] * sp[73];
        sv4[327] = -1 * sv4[45] * sp[73];
        sv4[328] = -1 * sv4[63] * sp[73];
        sv4[329] = -1 * sv4[64] * sp[73];
        sv4[330] = -1 * sv4[294] * sp[73];
        sv4[331] = -1 * sv4[295] * sp[73];
        sv4[332] = -1 * sv4[296] * sp[73];
        sv4[333] = -1 * sv4[297] * sp[73];
        sv4[334] = sv4[317] * sp[73];
        sv4[335] = sv4[318] * sp[73];
        sv4[336] = sv4[72] * sp[73];
        sv4[337] = -1 * sv4[48] * sp[73];
        sv4[338] = -1 * sv4[49] * sp[73];
        sv4[339] = -1 * sv4[61] * sp[73];
        sv4[340] = -1 * sv4[62] * sp[73];
        sv4[341] = -1 * sv4[298] * sp[73];
        sv4[342] = -1 * sv4[299] * sp[73];
        sv4[343] = -1 * sv4[300] * sp[73];
        sv4[344] = -1 * sv4[301] * sp[73];
        sv4[345] = sv4[319] * sp[73];
        sv4[346] = sv4[320] * sp[73];
        sv4[347] = -1 * sv4[36] * sp[73];
        sv4[348] = -1 * sv4[37] * sp[73];
        sv4[349] = -1 * sv4[51] * sp[73];
        sv4[350] = -1 * sv4[52] * sp[73];
        sv4[351] = sv4[116] * sp[73];
        sv4[352] = sv4[117] * sp[73];
        sv4[353] = -1 * sv4[96] * sp[73];
        sv4[354] = -1 * sv4[97] * sp[73];
        sv4[355] = -1 * sv4[98] * sp[73];
        sv4[356] = -1 * sv4[99] * sp[73];
        sv4[357] = -1 * sv4[110] * sp[73];
        sv4[358] = -1 * sv4[111] * sp[73];
        sv4[359] = -1 * sv4[112] * sp[73];
        sv4[360] = -1 * sv4[113] * sp[73];
        sv4[361] = -1 * sv4[160] * sp[73];
        sv4[362] = -1 * sv4[161] * sp[73];
        sv4[363] = -1 * sv4[162] * sp[73];
        sv4[364] = -1 * sv4[163] * sp[73];
        sv4[365] = sv4[305] * sp[73];
        sv4[366] = sv4[307] * sp[73];
        sv4[367] = -1 * sv4[164] * sp[73];
        sv4[368] = -1 * sv4[165] * sp[73];
        sv4[369] = -1 * sv4[166] * sp[73];
        sv4[370] = -1 * sv4[167] * sp[73];
        sv4[371] = sv4[306] * sp[73];
        sv4[372] = sv4[308] * sp[73];
        const double fw0 = sv4[371] * weights4[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF0[i][j] += TF0[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw1 = sv4[368] * weights4[iq];
        alignas(32) double TF1[6];
        for (int i = 0; i < 6; ++i)
            TF1[i] = fw1 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF1[i][j] += TF1[i] * FE47_C0_D10_F_Q4[facet][iq][j];
        const double fw2 = sv4[367] * weights4[iq];
        alignas(32) double TF2[6];
        for (int i = 0; i < 6; ++i)
            TF2[i] = fw2 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF2[i][j] += TF2[i] * FE47_C0_D01_F_Q4[facet][iq][j];
        const double fw3 = sv4[365] * weights4[iq];
        alignas(32) double TF3[6];
        for (int i = 0; i < 6; ++i)
            TF3[i] = fw3 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF3[i][j] += TF3[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw4 = sv4[369] * weights4[iq];
        alignas(32) double TF4[6];
        for (int i = 0; i < 6; ++i)
            TF4[i] = fw4 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF4[i][j] += TF4[i] * FE47_C0_D10_F_Q4[facet][iq][j];
        const double fw5 = sv4[370] * weights4[iq];
        alignas(32) double TF5[6];
        for (int i = 0; i < 6; ++i)
            TF5[i] = fw5 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF5[i][j] += TF5[i] * FE47_C0_D01_F_Q4[facet][iq][j];
        const double fw6 = sv4[345] * weights4[iq];
        alignas(32) double TF6[6];
        for (int i = 0; i < 6; ++i)
            TF6[i] = fw6 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF6[i][j] += TF6[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw7 = sv4[334] * weights4[iq];
        alignas(32) double TF7[6];
        for (int i = 0; i < 6; ++i)
            TF7[i] = fw7 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF7[i][j] += TF7[i] * FE49_C2_F_Q4[facet][iq][j];
        alignas(32) double TF8[5];
        for (int i = 0; i < 5; ++i)
            TF8[i] = fw1 * FE47_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF8[i][j] += TF8[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw8 = sv4[362] * weights4[iq];
        alignas(32) double TF9[5];
        for (int i = 0; i < 5; ++i)
            TF9[i] = fw8 * FE47_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF9[i][j] += TF9[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw9 = sv4[342] * weights4[iq];
        alignas(32) double TF10[5];
        for (int i = 0; i < 5; ++i)
            TF10[i] = fw9 * FE47_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF10[i][j] += TF10[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw10 = sv4[331] * weights4[iq];
        alignas(32) double TF11[5];
        for (int i = 0; i < 5; ++i)
            TF11[i] = fw10 * FE47_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF11[i][j] += TF11[i] * FE49_C2_F_Q4[facet][iq][j];
        alignas(32) double TF12[5];
        for (int i = 0; i < 5; ++i)
            TF12[i] = fw2 * FE47_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF12[i][j] += TF12[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw11 = sv4[361] * weights4[iq];
        alignas(32) double TF13[5];
        for (int i = 0; i < 5; ++i)
            TF13[i] = fw11 * FE47_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF13[i][j] += TF13[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw12 = sv4[341] * weights4[iq];
        alignas(32) double TF14[5];
        for (int i = 0; i < 5; ++i)
            TF14[i] = fw12 * FE47_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF14[i][j] += TF14[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw13 = sv4[330] * weights4[iq];
        alignas(32) double TF15[5];
        for (int i = 0; i < 5; ++i)
            TF15[i] = fw13 * FE47_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF15[i][j] += TF15[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw14 = sv4[372] * weights4[iq];
        alignas(32) double TF16[6];
        for (int i = 0; i < 6; ++i)
            TF16[i] = fw14 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF16[i][j] += TF16[i] * FE47_C0_F_Q4[facet][iq][j];
        alignas(32) double TF17[6];
        for (int i = 0; i < 6; ++i)
            TF17[i] = fw8 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF17[i][j] += TF17[i] * FE47_C0_D10_F_Q4[facet][iq][j];
        alignas(32) double TF18[6];
        for (int i = 0; i < 6; ++i)
            TF18[i] = fw11 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF18[i][j] += TF18[i] * FE47_C0_D01_F_Q4[facet][iq][j];
        const double fw15 = sv4[366] * weights4[iq];
        alignas(32) double TF19[6];
        for (int i = 0; i < 6; ++i)
            TF19[i] = fw15 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF19[i][j] += TF19[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw16 = sv4[363] * weights4[iq];
        alignas(32) double TF20[6];
        for (int i = 0; i < 6; ++i)
            TF20[i] = fw16 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF20[i][j] += TF20[i] * FE47_C0_D10_F_Q4[facet][iq][j];
        const double fw17 = sv4[364] * weights4[iq];
        alignas(32) double TF21[6];
        for (int i = 0; i < 6; ++i)
            TF21[i] = fw17 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF21[i][j] += TF21[i] * FE47_C0_D01_F_Q4[facet][iq][j];
        const double fw18 = sv4[346] * weights4[iq];
        alignas(32) double TF22[6];
        for (int i = 0; i < 6; ++i)
            TF22[i] = fw18 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF22[i][j] += TF22[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw19 = sv4[335] * weights4[iq];
        alignas(32) double TF23[6];
        for (int i = 0; i < 6; ++i)
            TF23[i] = fw19 * FE47_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF23[i][j] += TF23[i] * FE49_C2_F_Q4[facet][iq][j];
        alignas(32) double TF24[5];
        for (int i = 0; i < 5; ++i)
            TF24[i] = fw4 * FE47_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF24[i][j] += TF24[i] * FE47_C0_F_Q4[facet][iq][j];
        alignas(32) double TF25[5];
        for (int i = 0; i < 5; ++i)
            TF25[i] = fw16 * FE47_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF25[i][j] += TF25[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw20 = sv4[343] * weights4[iq];
        alignas(32) double TF26[5];
        for (int i = 0; i < 5; ++i)
            TF26[i] = fw20 * FE47_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF26[i][j] += TF26[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw21 = sv4[332] * weights4[iq];
        alignas(32) double TF27[5];
        for (int i = 0; i < 5; ++i)
            TF27[i] = fw21 * FE47_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF27[i][j] += TF27[i] * FE49_C2_F_Q4[facet][iq][j];
        alignas(32) double TF28[5];
        for (int i = 0; i < 5; ++i)
            TF28[i] = fw5 * FE47_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF28[i][j] += TF28[i] * FE47_C0_F_Q4[facet][iq][j];
        alignas(32) double TF29[5];
        for (int i = 0; i < 5; ++i)
            TF29[i] = fw17 * FE47_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF29[i][j] += TF29[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw22 = sv4[344] * weights4[iq];
        alignas(32) double TF30[5];
        for (int i = 0; i < 5; ++i)
            TF30[i] = fw22 * FE47_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF30[i][j] += TF30[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw23 = sv4[333] * weights4[iq];
        alignas(32) double TF31[5];
        for (int i = 0; i < 5; ++i)
            TF31[i] = fw23 * FE47_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF31[i][j] += TF31[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw24 = sv4[356] * weights4[iq];
        for (int j = 0; j < 6; ++j)
            TP0[j] += fw24 * FE47_C0_F_Q4[facet][iq][j];
        const double fw25 = sv4[355] * weights4[iq];
        for (int j = 0; j < 6; ++j)
            TP1[j] += fw25 * FE47_C0_F_Q4[facet][iq][j];
        const double fw26 = sv4[338] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP2[j] += fw26 * FE49_C2_F_Q4[facet][iq][j];
        const double fw27 = sv4[327] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP3[j] += fw27 * FE49_C2_F_Q4[facet][iq][j];
        const double fw28 = sv4[352] * weights4[iq];
        alignas(32) double TF32[3];
        for (int i = 0; i < 3; ++i)
            TF32[i] = fw28 * FE49_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF32[i][j] += TF32[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw29 = sv4[351] * weights4[iq];
        alignas(32) double TF33[3];
        for (int i = 0; i < 3; ++i)
            TF33[i] = fw29 * FE49_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF33[i][j] += TF33[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw30 = sv4[348] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP4[i] += fw30 * FE49_C2_F_Q4[facet][iq][i];
        const double fw31 = sv4[336] * weights4[iq];
        alignas(32) double TF34[3];
        for (int i = 0; i < 3; ++i)
            TF34[i] = fw31 * FE49_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF34[i][j] += TF34[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw32 = sv4[347] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP5[i] += fw32 * FE49_C2_F_Q4[facet][iq][i];
        const double fw33 = sv4[350] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP6[i] += fw33 * FE49_C2_F_Q4[facet][iq][i];
        const double fw34 = sv4[325] * weights4[iq];
        alignas(32) double TF35[3];
        for (int i = 0; i < 3; ++i)
            TF35[i] = fw34 * FE49_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF35[i][j] += TF35[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw35 = sv4[349] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP7[i] += fw35 * FE49_C2_F_Q4[facet][iq][i];
        const double fw36 = sv4[354] * weights4[iq];
        for (int j = 0; j < 6; ++j)
            TP8[j] += fw36 * FE47_C0_F_Q4[facet][iq][j];
        const double fw37 = sv4[353] * weights4[iq];
        for (int j = 0; j < 6; ++j)
            TP9[j] += fw37 * FE47_C0_F_Q4[facet][iq][j];
        const double fw38 = sv4[337] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP10[j] += fw38 * FE49_C2_F_Q4[facet][iq][j];
        const double fw39 = sv4[326] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP11[j] += fw39 * FE49_C2_F_Q4[facet][iq][j];
        const double fw40 = sv4[360] * weights4[iq];
        for (int j = 0; j < 6; ++j)
            TP12[j] += fw40 * FE47_C0_F_Q4[facet][iq][j];
        const double fw41 = sv4[359] * weights4[iq];
        for (int j = 0; j < 6; ++j)
            TP13[j] += fw41 * FE47_C0_F_Q4[facet][iq][j];
        const double fw42 = sv4[340] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP14[j] += fw42 * FE49_C2_F_Q4[facet][iq][j];
        const double fw43 = sv4[329] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP15[j] += fw43 * FE49_C2_F_Q4[facet][iq][j];
        const double fw44 = sv4[324] * weights4[iq];
        alignas(32) double TF36[3];
        for (int i = 0; i < 3; ++i)
            TF36[i] = fw44 * FE49_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF36[i][j] += TF36[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw45 = sv4[323] * weights4[iq];
        alignas(32) double TF37[3];
        for (int i = 0; i < 3; ++i)
            TF37[i] = fw45 * FE49_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF37[i][j] += TF37[i] * FE47_C0_F_Q4[facet][iq][j];
        const double fw46 = sv4[322] * weights4[iq];
        alignas(32) double TF38[3];
        for (int i = 0; i < 3; ++i)
            TF38[i] = fw46 * FE49_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF38[i][j] += TF38[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw47 = sv4[321] * weights4[iq];
        alignas(32) double TF39[3];
        for (int i = 0; i < 3; ++i)
            TF39[i] = fw47 * FE49_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF39[i][j] += TF39[i] * FE49_C2_F_Q4[facet][iq][j];
        const double fw48 = sv4[358] * weights4[iq];
        for (int j = 0; j < 6; ++j)
            TP16[j] += fw48 * FE47_C0_F_Q4[facet][iq][j];
        const double fw49 = sv4[357] * weights4[iq];
        for (int j = 0; j < 6; ++j)
            TP17[j] += fw49 * FE47_C0_F_Q4[facet][iq][j];
        const double fw50 = sv4[339] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP18[j] += fw50 * FE49_C2_F_Q4[facet][iq][j];
        const double fw51 = sv4[328] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP19[j] += fw51 * FE49_C2_F_Q4[facet][iq][j];
    }
    std::fill(A, A + 441, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    static const int DM4[2] = { 15, 17 };
    static const int DM5[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + j] += BF0[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM0[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM1[j]] += BF2[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + (j + 6)] += BF3[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM2[j]] += BF4[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM3[j]] += BF5[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + (j + 15)] += BF6[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + (j + 18)] += BF7[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM0[i] + j] += BF8[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM0[i] + (j + 6)] += BF9[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + (j + 15)] += BF10[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + (j + 18)] += BF11[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM1[i] + j] += BF12[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM1[i] + (j + 6)] += BF13[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + (j + 15)] += BF14[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + (j + 18)] += BF15[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + j] += BF16[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM0[j]] += BF17[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM1[j]] += BF18[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + (j + 6)] += BF19[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM2[j]] += BF20[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM3[j]] += BF21[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + (j + 15)] += BF22[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + (j + 18)] += BF23[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM2[i] + j] += BF24[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM2[i] + (j + 6)] += BF25[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + (j + 15)] += BF26[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + (j + 18)] += BF27[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM3[i] + j] += BF28[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM3[i] + (j + 6)] += BF29[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + (j + 15)] += BF30[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + (j + 18)] += BF31[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + j] += FE49_C2_D01_F_Q4[0][0][i] * TP0[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + (j + 6)] += FE49_C2_D01_F_Q4[0][0][i] * TP1[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += FE49_C2_D01_F_Q4[0][0][i] * TP2[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += FE49_C2_D01_F_Q4[0][0][i] * TP3[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + j] += BF32[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + (j + 6)] += BF33[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 15)] += FE49_C2_D01_F_Q4[0][0][j] * TP4[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += BF34[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM4[j]] += FE49_C2_D01_F_Q4[0][0][j] * TP5[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 18)] += FE49_C2_D01_F_Q4[0][0][j] * TP6[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += BF35[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM5[j]] += FE49_C2_D01_F_Q4[0][0][j] * TP7[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM4[i] + j] += FE49_C2_D01_F_Q4[0][0][i] * TP8[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM4[i] + (j + 6)] += FE49_C2_D01_F_Q4[0][0][i] * TP9[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + (j + 15)] += FE49_C2_D01_F_Q4[0][0][i] * TP10[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + (j + 18)] += FE49_C2_D01_F_Q4[0][0][i] * TP11[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + j] += FE49_C2_D01_F_Q4[0][0][i] * TP12[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + (j + 6)] += FE49_C2_D01_F_Q4[0][0][i] * TP13[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += FE49_C2_D01_F_Q4[0][0][i] * TP14[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += FE49_C2_D01_F_Q4[0][0][i] * TP15[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + j] += BF36[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + (j + 6)] += BF37[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += BF38[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += BF39[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM5[i] + j] += FE49_C2_D01_F_Q4[0][0][i] * TP16[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM5[i] + (j + 6)] += FE49_C2_D01_F_Q4[0][0][i] * TP17[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 15)] += FE49_C2_D01_F_Q4[0][0][i] * TP18[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 18)] += FE49_C2_D01_F_Q4[0][0][i] * TP19[j];
  }

};


class ranspseudotimestepping_cell_integral_8_otherwise: public ufc::cell_integral
{
public:

  ranspseudotimestepping_cell_integral_8_otherwise() : ufc::cell_integral()
  {

  }

  ~ranspseudotimestepping_cell_integral_8_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({false, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 194
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    alignas(32) static const double FE64_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE64_C0_D02_Q12[1][1][3] = { { { 3.999999999999998, 4.000000000000004, -7.999999999999995 } } };
    alignas(32) static const double FE64_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE64_C0_D11_Q12[1][1][4] = { { { 4.0, 3.999999999999997, -3.999999999999997, -4.000000000000005 } } };
    alignas(32) static const double FE64_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803568, 0.2205142679699366 },
            { -0.05512856699248404, -0.05512856699248409, 0.6533077030470597, 0.2205142679699364, 0.2205142679699362, 0.01592089499803596 },
            { 0.6533077030470594, -0.05512856699248415, -0.05512856699248411, 0.01592089499803581, 0.2205142679699364, 0.2205142679699366 },
            { -0.1249989825350975, 0.001430579517788794, -0.1249989825350975, 0.4999959301403892, 0.2485755252716258, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788821, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880001, 0.173768363654174, -0.1177151633084292, 0.790160442765823, 0.06597478591860526, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880001, 0.1353078281686267, 0.06597478591860512, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860538 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880001, 0.06597478591860524, 0.1353078281686266, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860538 },
            { 0.1737683636541741, -0.04749625719880015, -0.1177151633084292, 0.06597478591860535, 0.7901604427658229, 0.1353078281686269 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q12[0][0][1];
    const double w3_d1 = w[3][0] * FE3_C0_D01_Q12[0][0][0] + w[3][2] * FE3_C0_D01_Q12[0][0][1];
    double w3_d0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0 += w[3][ic] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c3 = w[2][15] * FE3_C0_D01_Q12[0][0][0] + w[2][17] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c3 += w[2][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c4 = w[2][18] * FE3_C0_D01_Q12[0][0][0] + w[2][20] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c4 += w[2][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    const double w1_d11_c1 = w[1][6] * FE64_C0_D02_Q12[0][0][0] + w[1][8] * FE64_C0_D02_Q12[0][0][1] + w[1][10] * FE64_C0_D02_Q12[0][0][2];
    const double w1_d01_c1 = w[1][6] * FE64_C0_D11_Q12[0][0][0] + w[1][9] * FE64_C0_D11_Q12[0][0][1] + w[1][10] * FE64_C0_D11_Q12[0][0][2] + w[1][11] * FE64_C0_D11_Q12[0][0][3];
    const double w1_d00_c1 = w[1][6] * FE64_C0_D02_Q12[0][0][0] + w[1][7] * FE64_C0_D02_Q12[0][0][1] + w[1][11] * FE64_C0_D02_Q12[0][0][2];
    const double w1_d01_c0 = w[1][0] * FE64_C0_D11_Q12[0][0][0] + w[1][3] * FE64_C0_D11_Q12[0][0][1] + w[1][4] * FE64_C0_D11_Q12[0][0][2] + w[1][5] * FE64_C0_D11_Q12[0][0][3];
    const double w1_d11_c0 = w[1][0] * FE64_C0_D02_Q12[0][0][0] + w[1][2] * FE64_C0_D02_Q12[0][0][1] + w[1][4] * FE64_C0_D02_Q12[0][0][2];
    const double w1_d00_c0 = w[1][0] * FE64_C0_D02_Q12[0][0][0] + w[1][1] * FE64_C0_D02_Q12[0][0][1] + w[1][5] * FE64_C0_D02_Q12[0][0][2];
    const double w1_d1_c2 = w[1][12] * FE3_C0_D01_Q12[0][0][0] + w[1][14] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c2 += w[1][ic + 12] * FE3_C0_D01_Q12[0][0][ic];
    const double w1_d1_c3 = w[1][15] * FE3_C0_D01_Q12[0][0][0] + w[1][17] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c3 += w[1][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w1_d1_c4 = w[1][18] * FE3_C0_D01_Q12[0][0][0] + w[1][20] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c4 += w[1][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    alignas(32) double sp[142];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = w3_d1 * sp[3];
    sp[8] = w3_d0 * sp[4];
    sp[9] = sp[7] + sp[8];
    sp[10] = w2_d1_c3 * sp[3];
    sp[11] = w2_d0_c3 * sp[4];
    sp[12] = sp[10] + sp[11];
    sp[13] = w2_d1_c4 * sp[3];
    sp[14] = w2_d0_c4 * sp[4];
    sp[15] = sp[13] + sp[14];
    sp[16] = sp[3] + sp[3];
    sp[17] = sp[4] + sp[4];
    sp[18] = sp[3] * sp[3];
    sp[19] = sp[3] * sp[4];
    sp[20] = sp[4] * sp[4];
    sp[21] = sp[19] + sp[19];
    sp[22] = sp[18] + sp[18];
    sp[23] = sp[21] + sp[21];
    sp[24] = sp[20] + sp[20];
    sp[25] = w3_d0 * sp[5];
    sp[26] = w3_d1 * sp[6];
    sp[27] = sp[25] + sp[26];
    sp[28] = w2_d0_c3 * sp[5];
    sp[29] = w2_d1_c3 * sp[6];
    sp[30] = sp[28] + sp[29];
    sp[31] = w2_d0_c4 * sp[5];
    sp[32] = w2_d1_c4 * sp[6];
    sp[33] = sp[31] + sp[32];
    sp[34] = sp[3] * sp[5];
    sp[35] = sp[3] * sp[6];
    sp[36] = sp[4] * sp[6];
    sp[37] = sp[5] * sp[4];
    sp[38] = sp[34] + sp[36];
    sp[39] = sp[5] * sp[6];
    sp[40] = sp[5] * sp[5];
    sp[41] = sp[6] * sp[6];
    sp[42] = sp[39] + sp[39];
    sp[43] = w1_d11_c1 * sp[3];
    sp[44] = w1_d01_c1 * sp[4];
    sp[45] = sp[43] + sp[44];
    sp[46] = sp[45] * sp[3];
    sp[47] = w1_d01_c1 * sp[3];
    sp[48] = w1_d00_c1 * sp[4];
    sp[49] = sp[47] + sp[48];
    sp[50] = sp[49] * sp[4];
    sp[51] = sp[46] + sp[50];
    sp[52] = sp[51] + sp[51];
    sp[53] = w1_d01_c0 * sp[5];
    sp[54] = w1_d11_c0 * sp[6];
    sp[55] = sp[53] + sp[54];
    sp[56] = sp[55] * sp[3];
    sp[57] = w1_d00_c0 * sp[5];
    sp[58] = w1_d01_c0 * sp[6];
    sp[59] = sp[57] + sp[58];
    sp[60] = sp[59] * sp[4];
    sp[61] = sp[56] + sp[60];
    sp[62] = w1_d00_c1 * sp[5];
    sp[63] = w1_d01_c1 * sp[6];
    sp[64] = sp[62] + sp[63];
    sp[65] = sp[64] * sp[5];
    sp[66] = w1_d01_c1 * sp[5];
    sp[67] = w1_d11_c1 * sp[6];
    sp[68] = sp[66] + sp[67];
    sp[69] = sp[68] * sp[6];
    sp[70] = sp[65] + sp[69];
    sp[71] = sp[61] + sp[70];
    sp[72] = w1_d1_c2 * sp[3];
    sp[73] = w1_d0_c2 * sp[4];
    sp[74] = sp[72] + sp[73];
    sp[75] = sp[6] + sp[6];
    sp[76] = sp[5] + sp[5];
    sp[77] = sp[42] + sp[42];
    sp[78] = sp[41] + sp[41];
    sp[79] = sp[40] + sp[40];
    sp[80] = w1_d11_c0 * sp[3];
    sp[81] = w1_d01_c0 * sp[4];
    sp[82] = sp[80] + sp[81];
    sp[83] = sp[82] * sp[3];
    sp[84] = w1_d01_c0 * sp[3];
    sp[85] = w1_d00_c0 * sp[4];
    sp[86] = sp[84] + sp[85];
    sp[87] = sp[86] * sp[4];
    sp[88] = sp[83] + sp[87];
    sp[89] = sp[49] * sp[5];
    sp[90] = sp[45] * sp[6];
    sp[91] = sp[89] + sp[90];
    sp[92] = sp[88] + sp[91];
    sp[93] = sp[59] * sp[5];
    sp[94] = sp[55] * sp[6];
    sp[95] = sp[93] + sp[94];
    sp[96] = sp[95] + sp[95];
    sp[97] = w1_d0_c2 * sp[5];
    sp[98] = w1_d1_c2 * sp[6];
    sp[99] = sp[97] + sp[98];
    sp[100] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[101] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[102] = sp[100] + sp[101];
    sp[103] = std::sqrt(sp[102]);
    sp[104] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[105] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[106] = sp[104] + sp[105];
    sp[107] = std::sqrt(sp[106]);
    sp[108] = sp[103] * sp[107];
    sp[109] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[110] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[111] = sp[109] + sp[110];
    sp[112] = std::sqrt(sp[111]);
    sp[113] = sp[108] * sp[112];
    sp[114] = triangle_reference_cell_volume * sp[2];
    sp[115] = std::abs(sp[114]);
    sp[116] = sp[113] / (4.0 * sp[115]);
    sp[117] = w1_d1_c3 * sp[3];
    sp[118] = w1_d0_c3 * sp[4];
    sp[119] = sp[117] + sp[118];
    sp[120] = w1_d0_c3 * sp[5];
    sp[121] = w1_d1_c3 * sp[6];
    sp[122] = sp[120] + sp[121];
    sp[123] = w1_d1_c4 * sp[3];
    sp[124] = w1_d0_c4 * sp[4];
    sp[125] = sp[123] + sp[124];
    sp[126] = w1_d0_c4 * sp[5];
    sp[127] = w1_d1_c4 * sp[6];
    sp[128] = sp[126] + sp[127];
    sp[129] = sp[119] * sp[3];
    sp[130] = sp[119] * sp[4];
    sp[131] = sp[122] * sp[6];
    sp[132] = sp[122] * sp[5];
    sp[133] = sp[129] + sp[131];
    sp[134] = sp[132] + sp[130];
    sp[135] = sp[125] * sp[3];
    sp[136] = sp[125] * sp[4];
    sp[137] = sp[128] * sp[6];
    sp[138] = sp[128] * sp[5];
    sp[139] = sp[135] + sp[137];
    sp[140] = sp[138] + sp[136];
    sp[141] = std::abs(sp[2]);
    alignas(32) double TP0[5] = {};
    alignas(32) double BF0[5][3] = {};
    alignas(32) double TP1[5] = {};
    alignas(32) double TP2[2] = {};
    alignas(32) double TP3[3] = {};
    alignas(32) double TP4[2] = {};
    alignas(32) double TP5[5] = {};
    alignas(32) double BF1[5][3] = {};
    alignas(32) double TP6[5] = {};
    alignas(32) double TP7[2] = {};
    alignas(32) double TP8[3] = {};
    alignas(32) double TP9[2] = {};
    alignas(32) double TP10[2] = {};
    alignas(32) double TP11[3] = {};
    alignas(32) double TP12[2] = {};
    alignas(32) double TP13[5] = {};
    alignas(32) double BF2[5][3] = {};
    alignas(32) double TP14[5] = {};
    alignas(32) double TP15[2] = {};
    alignas(32) double TP16[3] = {};
    alignas(32) double TP17[2] = {};
    alignas(32) double TP18[5] = {};
    alignas(32) double BF3[5][3] = {};
    alignas(32) double TP19[5] = {};
    alignas(32) double TP20[2] = {};
    alignas(32) double TP21[3] = {};
    alignas(32) double TP22[2] = {};
    alignas(32) double TP23[2] = {};
    alignas(32) double TP24[3] = {};
    alignas(32) double TP25[2] = {};
    alignas(32) double TP26[2] = {};
    alignas(32) double TP27[3] = {};
    alignas(32) double TP28[2] = {};
    alignas(32) double TP29[2] = {};
    alignas(32) double TP30[3] = {};
    alignas(32) double TP31[2] = {};
    alignas(32) double TP32[2] = {};
    alignas(32) double TP33[3] = {};
    alignas(32) double TP34[2] = {};
    alignas(32) double BF4[3][3] = {};
    alignas(32) double TP35[2] = {};
    alignas(32) double TP36[3] = {};
    alignas(32) double TP37[2] = {};
    alignas(32) double TP38[2] = {};
    alignas(32) double TP39[3] = {};
    alignas(32) double TP40[2] = {};
    alignas(32) double TP41[3] = {};
    alignas(32) double BF5[3][3] = {};
    alignas(32) double TP42[3] = {};
    alignas(32) double TP43[2] = {};
    alignas(32) double TP44[3] = {};
    alignas(32) double TP45[2] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE64_C0_Q12[0][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE64_C0_Q12[0][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3 += w[3][ic] * FE3_C0_Q12[0][iq][ic];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE3_C0_Q12[0][iq][ic];
        const double w1_d1_c1 = w[1][6] * FE64_C0_D01_Q12[0][iq][0] + w[1][8] * FE64_C0_D01_Q12[0][iq][1] + w[1][9] * FE64_C0_D01_Q12[0][iq][2] + w[1][10] * FE64_C0_D01_Q12[0][iq][3] + w[1][11] * FE64_C0_D01_Q12[0][iq][4];
        const double w1_d0_c1 = w[1][6] * FE64_C0_D10_Q12[0][iq][0] + w[1][7] * FE64_C0_D10_Q12[0][iq][1] + w[1][9] * FE64_C0_D10_Q12[0][iq][2] + w[1][10] * FE64_C0_D10_Q12[0][iq][3] + w[1][11] * FE64_C0_D10_Q12[0][iq][4];
        const double w1_d1_c0 = w[1][0] * FE64_C0_D01_Q12[0][iq][0] + w[1][2] * FE64_C0_D01_Q12[0][iq][1] + w[1][3] * FE64_C0_D01_Q12[0][iq][2] + w[1][4] * FE64_C0_D01_Q12[0][iq][3] + w[1][5] * FE64_C0_D01_Q12[0][iq][4];
        const double w1_d0_c0 = w[1][0] * FE64_C0_D10_Q12[0][iq][0] + w[1][1] * FE64_C0_D10_Q12[0][iq][1] + w[1][3] * FE64_C0_D10_Q12[0][iq][2] + w[1][4] * FE64_C0_D10_Q12[0][iq][3] + w[1][5] * FE64_C0_D10_Q12[0][iq][4];
        const double w2_d1_c1 = w[2][6] * FE64_C0_D01_Q12[0][iq][0] + w[2][8] * FE64_C0_D01_Q12[0][iq][1] + w[2][9] * FE64_C0_D01_Q12[0][iq][2] + w[2][10] * FE64_C0_D01_Q12[0][iq][3] + w[2][11] * FE64_C0_D01_Q12[0][iq][4];
        const double w2_d0_c1 = w[2][6] * FE64_C0_D10_Q12[0][iq][0] + w[2][7] * FE64_C0_D10_Q12[0][iq][1] + w[2][9] * FE64_C0_D10_Q12[0][iq][2] + w[2][10] * FE64_C0_D10_Q12[0][iq][3] + w[2][11] * FE64_C0_D10_Q12[0][iq][4];
        const double w2_d1_c0 = w[2][0] * FE64_C0_D01_Q12[0][iq][0] + w[2][2] * FE64_C0_D01_Q12[0][iq][1] + w[2][3] * FE64_C0_D01_Q12[0][iq][2] + w[2][4] * FE64_C0_D01_Q12[0][iq][3] + w[2][5] * FE64_C0_D01_Q12[0][iq][4];
        const double w2_d0_c0 = w[2][0] * FE64_C0_D10_Q12[0][iq][0] + w[2][1] * FE64_C0_D10_Q12[0][iq][1] + w[2][3] * FE64_C0_D10_Q12[0][iq][2] + w[2][4] * FE64_C0_D10_Q12[0][iq][3] + w[2][5] * FE64_C0_D10_Q12[0][iq][4];
        double w1_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c4 += w[1][ic + 18] * FE3_C0_Q12[0][iq][ic];
        double w1_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c3 += w[1][ic + 15] * FE3_C0_Q12[0][iq][ic];
        alignas(32) double sv12[809];
        sv12[0] = w2_c1 * sp[3];
        sv12[1] = w2_c1 * sp[4];
        sv12[2] = w2_c0 * sp[6];
        sv12[3] = w2_c0 * sp[5];
        sv12[4] = sv12[0] + sv12[2];
        sv12[5] = sv12[3] + sv12[1];
        sv12[6] = std::exp(w3);
        sv12[7] = sp[9] * sv12[6];
        sv12[8] = w2_c3 * (0.09 * sv12[7]);
        sv12[9] = sp[12] * (0.09 * sv12[6]);
        sv12[10] = sv12[8] + sv12[9];
        sv12[11] = w2_c3 * sv12[10];
        sv12[12] = w2_c3 * (0.09 * sv12[6]);
        sv12[13] = sp[12] * sv12[12];
        sv12[14] = sv12[11] + sv12[13];
        sv12[15] = w2_c4 * sp[15];
        sv12[16] = sv12[15] + sv12[15];
        sv12[17] = w2_c4 * w2_c4;
        sv12[18] = std::sqrt(1e-8 + sv12[17]);
        sv12[19] = sv12[16] / (2 * sv12[18]);
        sv12[20] = sp[15] + sv12[19];
        sv12[21] = w2_c3 * sv12[12];
        sv12[22] = w2_c4 + sv12[18];
        sv12[23] = sv12[21] / (0.5 * sv12[22]);
        sv12[24] = 0.5 * sv12[20] * sv12[23];
        sv12[25] = sv12[14] + -1 * sv12[24];
        sv12[26] = sv12[25] / (0.5 * sv12[22]);
        sv12[27] = 2.0 * sv12[26] * (sp[16] / 2);
        sv12[28] = 2.0 * sv12[26] * (sp[17] / 2);
        sv12[29] = 2.0 * (0.0001 + sv12[23]) * (sp[22] / 2);
        sv12[30] = 2.0 * (0.0001 + sv12[23]) * (sp[23] / 2);
        sv12[31] = 2.0 * (0.0001 + sv12[23]) * (sp[24] / 2);
        sv12[32] = sp[27] * sv12[6];
        sv12[33] = w2_c3 * (0.09 * sv12[32]);
        sv12[34] = sp[30] * (0.09 * sv12[6]);
        sv12[35] = sv12[33] + sv12[34];
        sv12[36] = w2_c3 * sv12[35];
        sv12[37] = sp[30] * sv12[12];
        sv12[38] = sv12[36] + sv12[37];
        sv12[39] = w2_c4 * sp[33];
        sv12[40] = sv12[39] + sv12[39];
        sv12[41] = sv12[40] / (2 * sv12[18]);
        sv12[42] = sp[33] + sv12[41];
        sv12[43] = 0.5 * sv12[42] * sv12[23];
        sv12[44] = sv12[38] + -1 * sv12[43];
        sv12[45] = sv12[44] / (0.5 * sv12[22]);
        sv12[46] = 2.0 * sv12[45] * (sp[6] / 2);
        sv12[47] = 2.0 * sv12[45] * (sp[5] / 2);
        sv12[48] = 2.0 * sv12[45] * (sp[3] / 2);
        sv12[49] = 2.0 * sv12[45] * (sp[4] / 2);
        sv12[50] = 2.0 * (0.0001 + sv12[23]) * (sp[41] / 2);
        sv12[51] = 2.0 * (0.0001 + sv12[23]) * (sp[42] / 2);
        sv12[52] = 2.0 * (0.0001 + sv12[23]) * (sp[40] / 2);
        sv12[53] = 2.0 * (0.0001 + sv12[23]) * (sp[38] / 2);
        sv12[54] = 2.0 * (0.0001 + sv12[23]) * (sp[35] / 2);
        sv12[55] = 2.0 * (0.0001 + sv12[23]) * (sp[37] / 2);
        sv12[56] = sv12[27] + sv12[46];
        sv12[57] = sv12[28] + sv12[47];
        sv12[58] = sv12[29] + sv12[50];
        sv12[59] = sv12[30] + sv12[51];
        sv12[60] = sv12[31] + sv12[52];
        sv12[61] = sv12[4] + -1 * sv12[56];
        sv12[62] = sv12[5] + -1 * sv12[57];
        sv12[63] = w1_d1_c1 * sp[3];
        sv12[64] = w1_d0_c1 * sp[4];
        sv12[65] = sv12[63] + sv12[64];
        sv12[66] = w2_c1 * sv12[65];
        sv12[67] = w1_d0_c1 * sp[5];
        sv12[68] = w1_d1_c1 * sp[6];
        sv12[69] = sv12[67] + sv12[68];
        sv12[70] = w2_c0 * sv12[69];
        sv12[71] = sv12[66] + sv12[70];
        sv12[72] = sv12[65] + sv12[65];
        sv12[73] = 2.0 * sv12[26] * (sv12[72] / 2);
        sv12[74] = 2.0 * (0.0001 + sv12[23]) * (sp[52] / 2);
        sv12[75] = sv12[73] + sv12[74];
        sv12[76] = w1_d1_c0 * sp[3];
        sv12[77] = w1_d0_c0 * sp[4];
        sv12[78] = sv12[76] + sv12[77];
        sv12[79] = sv12[78] + sv12[69];
        sv12[80] = 2.0 * sv12[45] * (sv12[79] / 2);
        sv12[81] = 2.0 * (0.0001 + sv12[23]) * (sp[71] / 2);
        sv12[82] = sv12[80] + sv12[81];
        sv12[83] = sv12[75] + sv12[82];
        sv12[84] = sv12[71] + -1 * sv12[83];
        sv12[85] = sv12[84] + sp[74];
        sv12[86] = sv12[85] * sv12[61];
        sv12[87] = sv12[85] * sv12[62];
        sv12[88] = sv12[85] * (-1 * sv12[58]);
        sv12[89] = sv12[85] * (-1 * sv12[59]);
        sv12[90] = sv12[85] * (-1 * sv12[60]);
        sv12[91] = sv12[85] * (-1 * sv12[48]);
        sv12[92] = sv12[85] * (-1 * sv12[49]);
        sv12[93] = sv12[85] * (-1 * sv12[53]);
        sv12[94] = sv12[85] * (-1 * sv12[54]);
        sv12[95] = sv12[85] * (-1 * sv12[55]);
        sv12[96] = sv12[85] * sp[3];
        sv12[97] = sv12[85] * sp[4];
        sv12[98] = 2.0 * sv12[26] * (sp[6] / 2);
        sv12[99] = 2.0 * sv12[26] * (sp[5] / 2);
        sv12[100] = 2.0 * sv12[26] * (sp[3] / 2);
        sv12[101] = 2.0 * sv12[26] * (sp[4] / 2);
        sv12[102] = 2.0 * (0.0001 + sv12[23]) * (sp[21] / 2);
        sv12[103] = 2.0 * (0.0001 + sv12[23]) * (sp[18] / 2);
        sv12[104] = 2.0 * (0.0001 + sv12[23]) * (sp[20] / 2);
        sv12[105] = 2.0 * sv12[45] * (sp[75] / 2);
        sv12[106] = 2.0 * sv12[45] * (sp[76] / 2);
        sv12[107] = 2.0 * (0.0001 + sv12[23]) * (sp[77] / 2);
        sv12[108] = 2.0 * (0.0001 + sv12[23]) * (sp[78] / 2);
        sv12[109] = 2.0 * (0.0001 + sv12[23]) * (sp[79] / 2);
        sv12[110] = sv12[105] + sv12[100];
        sv12[111] = sv12[106] + sv12[101];
        sv12[112] = sv12[107] + sv12[102];
        sv12[113] = sv12[108] + sv12[103];
        sv12[114] = sv12[109] + sv12[104];
        sv12[115] = sv12[4] + -1 * sv12[110];
        sv12[116] = sv12[5] + -1 * sv12[111];
        sv12[117] = w2_c1 * sv12[78];
        sv12[118] = w1_d0_c0 * sp[5];
        sv12[119] = w1_d1_c0 * sp[6];
        sv12[120] = sv12[118] + sv12[119];
        sv12[121] = w2_c0 * sv12[120];
        sv12[122] = sv12[117] + sv12[121];
        sv12[123] = 2.0 * sv12[26] * (sv12[79] / 2);
        sv12[124] = 2.0 * (0.0001 + sv12[23]) * (sp[92] / 2);
        sv12[125] = sv12[123] + sv12[124];
        sv12[126] = sv12[120] + sv12[120];
        sv12[127] = 2.0 * sv12[45] * (sv12[126] / 2);
        sv12[128] = 2.0 * (0.0001 + sv12[23]) * (sp[96] / 2);
        sv12[129] = sv12[127] + sv12[128];
        sv12[130] = sv12[125] + sv12[129];
        sv12[131] = sv12[122] + -1 * sv12[130];
        sv12[132] = sv12[131] + sp[99];
        sv12[133] = sv12[132] * (-1 * sv12[98]);
        sv12[134] = sv12[132] * (-1 * sv12[99]);
        sv12[135] = sv12[132] * (-1 * sv12[54]);
        sv12[136] = sv12[132] * (-1 * sv12[53]);
        sv12[137] = sv12[132] * (-1 * sv12[55]);
        sv12[138] = sv12[132] * sv12[115];
        sv12[139] = sv12[132] * sv12[116];
        sv12[140] = sv12[132] * (-1 * sv12[112]);
        sv12[141] = sv12[132] * (-1 * sv12[113]);
        sv12[142] = sv12[132] * (-1 * sv12[114]);
        sv12[143] = sv12[132] * sp[6];
        sv12[144] = sv12[132] * sp[5];
        sv12[145] = sv12[86] + sv12[133];
        sv12[146] = sv12[87] + sv12[134];
        sv12[147] = sv12[88] + sv12[135];
        sv12[148] = sv12[89] + sv12[136];
        sv12[149] = sv12[90] + sv12[137];
        sv12[150] = sv12[138] + sv12[91];
        sv12[151] = sv12[139] + sv12[92];
        sv12[152] = sv12[140] + sv12[93];
        sv12[153] = sv12[141] + sv12[94];
        sv12[154] = sv12[142] + sv12[95];
        sv12[155] = sv12[96] + sv12[143];
        sv12[156] = sv12[144] + sv12[97];
        sv12[157] = w2_c0 * w2_c0;
        sv12[158] = w2_c1 * w2_c1;
        sv12[159] = sv12[157] + sv12[158];
        sv12[160] = std::sqrt(sv12[159]);
        sv12[161] = 0.5 * (2.0 * sp[116]) * sv12[160];
        sv12[162] = sv12[161] / (0.0001 + sv12[23]);
        sv12[163] = sv12[162] * sv12[23];
        sv12[164] = -1 * sv12[163] / (0.0001 + sv12[23]);
        sv12[165] = sv12[164] * (1.0 / sv12[162]);
        sv12[166] = -1 * sv12[165] / sv12[162];
        sv12[167] = std::exp(-2.0 * sv12[162]);
        sv12[168] = -2.0 * sv12[164] * sv12[167];
        sv12[169] = (1.0 + sv12[167]) / (1.0 + -1 * sv12[167]);
        sv12[170] = -1 * sv12[168] * sv12[169];
        sv12[171] = -1 * sv12[170] + sv12[168];
        sv12[172] = sv12[171] / (1.0 + -1 * sv12[167]);
        sv12[173] = -1 * sv12[166] + sv12[172];
        sv12[174] = sv12[173] * (2.0 * sp[116]);
        sv12[175] = sv12[174] / sv12[160];
        sv12[176] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[162]) * (2.0 * sp[116]);
        sv12[177] = sv12[176] * (2.0 * sp[116]);
        sv12[178] = sv12[177] / (0.0001 + sv12[23]);
        sv12[179] = sv12[178] * sv12[23];
        sv12[180] = 0.5 * (-0.004435991517475 * sv12[164]) * (2.0 * sp[116]);
        sv12[181] = sv12[180] * (2.0 * sp[116]);
        sv12[182] = -1 * sv12[179] + sv12[181];
        sv12[183] = sv12[182] / (0.0001 + sv12[23]);
        sv12[184] = (sv12[162] >= 0.1 ? sv12[175] : sv12[183]);
        sv12[185] = sv12[145] * sv12[184];
        sv12[186] = sv12[146] * sv12[184];
        sv12[187] = sv12[147] * sv12[184];
        sv12[188] = sv12[148] * sv12[184];
        sv12[189] = sv12[149] * sv12[184];
        sv12[190] = sv12[150] * sv12[184];
        sv12[191] = sv12[151] * sv12[184];
        sv12[192] = sv12[152] * sv12[184];
        sv12[193] = sv12[153] * sv12[184];
        sv12[194] = sv12[154] * sv12[184];
        sv12[195] = sv12[155] * sv12[184];
        sv12[196] = sv12[156] * sv12[184];
        sv12[197] = sp[3] * sv12[6];
        sv12[198] = sp[4] * sv12[6];
        sv12[199] = w2_c3 * (0.09 * sv12[197]);
        sv12[200] = w2_c3 * (0.09 * sv12[198]);
        sv12[201] = w2_c3 * sv12[199];
        sv12[202] = w2_c3 * sv12[200];
        sv12[203] = sv12[201] / (0.5 * sv12[22]);
        sv12[204] = sv12[202] / (0.5 * sv12[22]);
        sv12[205] = 2.0 * sv12[203] * (sp[6] / 2);
        sv12[206] = 2.0 * sv12[203] * (sp[5] / 2);
        sv12[207] = 2.0 * sv12[203] * (sp[3] / 2);
        sv12[208] = 2.0 * sv12[203] * (sp[4] / 2);
        sv12[209] = 2.0 * sv12[204] * (sp[6] / 2);
        sv12[210] = 2.0 * sv12[204] * (sp[5] / 2);
        sv12[211] = 2.0 * sv12[204] * (sp[3] / 2);
        sv12[212] = 2.0 * sv12[204] * (sp[4] / 2);
        sv12[213] = 2.0 * sv12[23] * (sp[35] / 2);
        sv12[214] = 2.0 * sv12[23] * (sp[38] / 2);
        sv12[215] = 2.0 * sv12[23] * (sp[37] / 2);
        sv12[216] = 2.0 * sv12[23] * (sp[21] / 2);
        sv12[217] = 2.0 * sv12[23] * (sp[18] / 2);
        sv12[218] = 2.0 * sv12[23] * (sp[20] / 2);
        sv12[219] = sp[6] * sv12[6];
        sv12[220] = sp[5] * sv12[6];
        sv12[221] = w2_c3 * (0.09 * sv12[219]);
        sv12[222] = w2_c3 * (0.09 * sv12[220]);
        sv12[223] = w2_c3 * sv12[221];
        sv12[224] = w2_c3 * sv12[222];
        sv12[225] = sv12[223] / (0.5 * sv12[22]);
        sv12[226] = sv12[224] / (0.5 * sv12[22]);
        sv12[227] = 2.0 * sv12[225] * (sp[75] / 2);
        sv12[228] = 2.0 * sv12[225] * (sp[76] / 2);
        sv12[229] = 2.0 * sv12[226] * (sp[75] / 2);
        sv12[230] = 2.0 * sv12[226] * (sp[76] / 2);
        sv12[231] = 2.0 * sv12[23] * (sp[77] / 2);
        sv12[232] = 2.0 * sv12[23] * (sp[78] / 2);
        sv12[233] = 2.0 * sv12[23] * (sp[79] / 2);
        sv12[234] = sv12[227] + sv12[207];
        sv12[235] = sv12[229] + sv12[211];
        sv12[236] = sv12[228] + sv12[208];
        sv12[237] = sv12[230] + sv12[212];
        sv12[238] = sv12[231] + sv12[216];
        sv12[239] = sv12[232] + sv12[217];
        sv12[240] = sv12[233] + sv12[218];
        sv12[241] = sv12[132] * (-1 * sv12[205]);
        sv12[242] = sv12[132] * (-1 * sv12[209]);
        sv12[243] = sv12[132] * (-1 * sv12[206]);
        sv12[244] = sv12[132] * (-1 * sv12[210]);
        sv12[245] = sv12[132] * (-1 * sv12[213]);
        sv12[246] = sv12[132] * (-1 * sv12[214]);
        sv12[247] = sv12[132] * (-1 * sv12[215]);
        sv12[248] = sv12[132] * (-1 * sv12[110]);
        sv12[249] = sv12[132] * (-1 * sv12[234]);
        sv12[250] = sv12[132] * (-1 * sv12[235]);
        sv12[251] = sv12[132] * (-1 * sv12[111]);
        sv12[252] = sv12[132] * (-1 * sv12[236]);
        sv12[253] = sv12[132] * (-1 * sv12[237]);
        sv12[254] = sv12[132] * (-1 * sv12[238]);
        sv12[255] = sv12[132] * (-1 * sv12[239]);
        sv12[256] = sv12[132] * (-1 * sv12[240]);
        sv12[257] = 2.0 * sv12[203] * (sv12[79] / 2);
        sv12[258] = 2.0 * sv12[204] * (sv12[79] / 2);
        sv12[259] = 2.0 * sv12[23] * (sp[92] / 2);
        sv12[260] = sv12[123] + sv12[259];
        sv12[261] = 2.0 * sv12[225] * (sv12[126] / 2);
        sv12[262] = 2.0 * sv12[226] * (sv12[126] / 2);
        sv12[263] = 2.0 * sv12[23] * (sp[96] / 2);
        sv12[264] = sv12[127] + sv12[263];
        sv12[265] = sv12[260] + sv12[264];
        sv12[266] = sv12[261] + sv12[257];
        sv12[267] = sv12[262] + sv12[258];
        sv12[268] = -1 * sv12[265] * (-1 * sv12[98]);
        sv12[269] = -1 * sv12[266] * (-1 * sv12[98]);
        sv12[270] = -1 * sv12[267] * (-1 * sv12[98]);
        sv12[271] = -1 * sv12[265] * (-1 * sv12[99]);
        sv12[272] = -1 * sv12[266] * (-1 * sv12[99]);
        sv12[273] = -1 * sv12[267] * (-1 * sv12[99]);
        sv12[274] = -1 * sv12[265] * (-1 * sv12[54]);
        sv12[275] = -1 * sv12[266] * (-1 * sv12[54]);
        sv12[276] = -1 * sv12[267] * (-1 * sv12[54]);
        sv12[277] = -1 * sv12[265] * (-1 * sv12[53]);
        sv12[278] = -1 * sv12[266] * (-1 * sv12[53]);
        sv12[279] = -1 * sv12[267] * (-1 * sv12[53]);
        sv12[280] = -1 * sv12[265] * (-1 * sv12[55]);
        sv12[281] = -1 * sv12[266] * (-1 * sv12[55]);
        sv12[282] = -1 * sv12[267] * (-1 * sv12[55]);
        sv12[283] = sv12[115] * (-1 * sv12[265]);
        sv12[284] = sv12[115] * (-1 * sv12[266]);
        sv12[285] = sv12[115] * (-1 * sv12[267]);
        sv12[286] = sv12[116] * (-1 * sv12[265]);
        sv12[287] = sv12[116] * (-1 * sv12[266]);
        sv12[288] = sv12[116] * (-1 * sv12[267]);
        sv12[289] = -1 * sv12[265] * (-1 * sv12[112]);
        sv12[290] = -1 * sv12[266] * (-1 * sv12[112]);
        sv12[291] = -1 * sv12[267] * (-1 * sv12[112]);
        sv12[292] = -1 * sv12[265] * (-1 * sv12[113]);
        sv12[293] = -1 * sv12[266] * (-1 * sv12[113]);
        sv12[294] = -1 * sv12[267] * (-1 * sv12[113]);
        sv12[295] = -1 * sv12[265] * (-1 * sv12[114]);
        sv12[296] = -1 * sv12[266] * (-1 * sv12[114]);
        sv12[297] = -1 * sv12[267] * (-1 * sv12[114]);
        sv12[298] = -1 * sv12[265] * sp[6];
        sv12[299] = -1 * sv12[266] * sp[6];
        sv12[300] = -1 * sv12[267] * sp[6];
        sv12[301] = -1 * sv12[265] * sp[5];
        sv12[302] = -1 * sv12[266] * sp[5];
        sv12[303] = -1 * sv12[267] * sp[5];
        sv12[304] = sv12[133] + sv12[268];
        sv12[305] = sv12[269] + sv12[241];
        sv12[306] = sv12[270] + sv12[242];
        sv12[307] = sv12[134] + sv12[271];
        sv12[308] = sv12[272] + sv12[243];
        sv12[309] = sv12[273] + sv12[244];
        sv12[310] = sv12[274] + sv12[245];
        sv12[311] = sv12[277] + sv12[246];
        sv12[312] = sv12[280] + sv12[247];
        sv12[313] = sv12[283] + sv12[248];
        sv12[314] = sv12[284] + sv12[249];
        sv12[315] = sv12[285] + sv12[250];
        sv12[316] = sv12[286] + sv12[251];
        sv12[317] = sv12[287] + sv12[252];
        sv12[318] = sv12[288] + sv12[253];
        sv12[319] = sv12[289] + sv12[254];
        sv12[320] = sv12[292] + sv12[255];
        sv12[321] = sv12[295] + sv12[256];
        sv12[322] = 2.0 * sv12[203] * (sp[16] / 2);
        sv12[323] = 2.0 * sv12[203] * (sp[17] / 2);
        sv12[324] = 2.0 * sv12[204] * (sp[16] / 2);
        sv12[325] = 2.0 * sv12[204] * (sp[17] / 2);
        sv12[326] = 2.0 * sv12[23] * (sp[22] / 2);
        sv12[327] = 2.0 * sv12[23] * (sp[23] / 2);
        sv12[328] = 2.0 * sv12[23] * (sp[24] / 2);
        sv12[329] = 2.0 * sv12[225] * (sp[6] / 2);
        sv12[330] = 2.0 * sv12[225] * (sp[5] / 2);
        sv12[331] = 2.0 * sv12[225] * (sp[3] / 2);
        sv12[332] = 2.0 * sv12[225] * (sp[4] / 2);
        sv12[333] = 2.0 * sv12[226] * (sp[6] / 2);
        sv12[334] = 2.0 * sv12[226] * (sp[5] / 2);
        sv12[335] = 2.0 * sv12[226] * (sp[3] / 2);
        sv12[336] = 2.0 * sv12[226] * (sp[4] / 2);
        sv12[337] = 2.0 * sv12[23] * (sp[41] / 2);
        sv12[338] = 2.0 * sv12[23] * (sp[42] / 2);
        sv12[339] = 2.0 * sv12[23] * (sp[40] / 2);
        sv12[340] = sv12[322] + sv12[329];
        sv12[341] = sv12[324] + sv12[333];
        sv12[342] = sv12[323] + sv12[330];
        sv12[343] = sv12[325] + sv12[334];
        sv12[344] = sv12[326] + sv12[337];
        sv12[345] = sv12[327] + sv12[338];
        sv12[346] = sv12[328] + sv12[339];
        sv12[347] = sv12[85] * (-1 * sv12[56]);
        sv12[348] = sv12[85] * (-1 * sv12[340]);
        sv12[349] = sv12[85] * (-1 * sv12[341]);
        sv12[350] = sv12[85] * (-1 * sv12[57]);
        sv12[351] = sv12[85] * (-1 * sv12[342]);
        sv12[352] = sv12[85] * (-1 * sv12[343]);
        sv12[353] = sv12[85] * (-1 * sv12[344]);
        sv12[354] = sv12[85] * (-1 * sv12[345]);
        sv12[355] = sv12[85] * (-1 * sv12[346]);
        sv12[356] = sv12[85] * (-1 * sv12[331]);
        sv12[357] = sv12[85] * (-1 * sv12[335]);
        sv12[358] = sv12[85] * (-1 * sv12[332]);
        sv12[359] = sv12[85] * (-1 * sv12[336]);
        sv12[360] = sv12[85] * (-1 * sv12[214]);
        sv12[361] = sv12[85] * (-1 * sv12[213]);
        sv12[362] = sv12[85] * (-1 * sv12[215]);
        sv12[363] = 2.0 * sv12[203] * (sv12[72] / 2);
        sv12[364] = 2.0 * sv12[204] * (sv12[72] / 2);
        sv12[365] = 2.0 * sv12[23] * (sp[52] / 2);
        sv12[366] = sv12[73] + sv12[365];
        sv12[367] = 2.0 * sv12[225] * (sv12[79] / 2);
        sv12[368] = 2.0 * sv12[226] * (sv12[79] / 2);
        sv12[369] = 2.0 * sv12[23] * (sp[71] / 2);
        sv12[370] = sv12[80] + sv12[369];
        sv12[371] = sv12[366] + sv12[370];
        sv12[372] = sv12[363] + sv12[367];
        sv12[373] = sv12[364] + sv12[368];
        sv12[374] = sv12[61] * (-1 * sv12[371]);
        sv12[375] = sv12[61] * (-1 * sv12[372]);
        sv12[376] = sv12[61] * (-1 * sv12[373]);
        sv12[377] = sv12[62] * (-1 * sv12[371]);
        sv12[378] = sv12[62] * (-1 * sv12[372]);
        sv12[379] = sv12[62] * (-1 * sv12[373]);
        sv12[380] = -1 * sv12[371] * (-1 * sv12[58]);
        sv12[381] = -1 * sv12[372] * (-1 * sv12[58]);
        sv12[382] = -1 * sv12[373] * (-1 * sv12[58]);
        sv12[383] = -1 * sv12[371] * (-1 * sv12[59]);
        sv12[384] = -1 * sv12[372] * (-1 * sv12[59]);
        sv12[385] = -1 * sv12[373] * (-1 * sv12[59]);
        sv12[386] = -1 * sv12[371] * (-1 * sv12[60]);
        sv12[387] = -1 * sv12[372] * (-1 * sv12[60]);
        sv12[388] = -1 * sv12[373] * (-1 * sv12[60]);
        sv12[389] = -1 * sv12[371] * (-1 * sv12[48]);
        sv12[390] = -1 * sv12[372] * (-1 * sv12[48]);
        sv12[391] = -1 * sv12[373] * (-1 * sv12[48]);
        sv12[392] = -1 * sv12[371] * (-1 * sv12[49]);
        sv12[393] = -1 * sv12[372] * (-1 * sv12[49]);
        sv12[394] = -1 * sv12[373] * (-1 * sv12[49]);
        sv12[395] = -1 * sv12[371] * (-1 * sv12[53]);
        sv12[396] = -1 * sv12[372] * (-1 * sv12[53]);
        sv12[397] = -1 * sv12[373] * (-1 * sv12[53]);
        sv12[398] = -1 * sv12[371] * (-1 * sv12[54]);
        sv12[399] = -1 * sv12[372] * (-1 * sv12[54]);
        sv12[400] = -1 * sv12[373] * (-1 * sv12[54]);
        sv12[401] = -1 * sv12[371] * (-1 * sv12[55]);
        sv12[402] = -1 * sv12[372] * (-1 * sv12[55]);
        sv12[403] = -1 * sv12[373] * (-1 * sv12[55]);
        sv12[404] = -1 * sv12[371] * sp[3];
        sv12[405] = -1 * sv12[372] * sp[3];
        sv12[406] = -1 * sv12[373] * sp[3];
        sv12[407] = -1 * sv12[371] * sp[4];
        sv12[408] = -1 * sv12[372] * sp[4];
        sv12[409] = -1 * sv12[373] * sp[4];
        sv12[410] = sv12[374] + sv12[347];
        sv12[411] = sv12[375] + sv12[348];
        sv12[412] = sv12[376] + sv12[349];
        sv12[413] = sv12[377] + sv12[350];
        sv12[414] = sv12[378] + sv12[351];
        sv12[415] = sv12[379] + sv12[352];
        sv12[416] = sv12[380] + sv12[353];
        sv12[417] = sv12[383] + sv12[354];
        sv12[418] = sv12[386] + sv12[355];
        sv12[419] = sv12[91] + sv12[389];
        sv12[420] = sv12[390] + sv12[356];
        sv12[421] = sv12[391] + sv12[357];
        sv12[422] = sv12[92] + sv12[392];
        sv12[423] = sv12[393] + sv12[358];
        sv12[424] = sv12[394] + sv12[359];
        sv12[425] = sv12[395] + sv12[360];
        sv12[426] = sv12[398] + sv12[361];
        sv12[427] = sv12[401] + sv12[362];
        sv12[428] = sv12[410] + sv12[304];
        sv12[429] = sv12[411] + sv12[305];
        sv12[430] = sv12[412] + sv12[306];
        sv12[431] = sv12[413] + sv12[307];
        sv12[432] = sv12[414] + sv12[308];
        sv12[433] = sv12[415] + sv12[309];
        sv12[434] = sv12[416] + sv12[310];
        sv12[435] = sv12[381] + sv12[275];
        sv12[436] = sv12[382] + sv12[276];
        sv12[437] = sv12[417] + sv12[311];
        sv12[438] = sv12[384] + sv12[278];
        sv12[439] = sv12[385] + sv12[279];
        sv12[440] = sv12[418] + sv12[312];
        sv12[441] = sv12[387] + sv12[281];
        sv12[442] = sv12[388] + sv12[282];
        sv12[443] = sv12[313] + sv12[419];
        sv12[444] = sv12[314] + sv12[420];
        sv12[445] = sv12[315] + sv12[421];
        sv12[446] = sv12[316] + sv12[422];
        sv12[447] = sv12[317] + sv12[423];
        sv12[448] = sv12[318] + sv12[424];
        sv12[449] = sv12[319] + sv12[425];
        sv12[450] = sv12[290] + sv12[396];
        sv12[451] = sv12[291] + sv12[397];
        sv12[452] = sv12[320] + sv12[426];
        sv12[453] = sv12[293] + sv12[399];
        sv12[454] = sv12[294] + sv12[400];
        sv12[455] = sv12[321] + sv12[427];
        sv12[456] = sv12[296] + sv12[402];
        sv12[457] = sv12[297] + sv12[403];
        sv12[458] = sv12[404] + sv12[298];
        sv12[459] = sv12[405] + sv12[299];
        sv12[460] = sv12[406] + sv12[300];
        sv12[461] = sv12[301] + sv12[407];
        sv12[462] = sv12[302] + sv12[408];
        sv12[463] = sv12[303] + sv12[409];
        sv12[464] = -1 * (1.0 / sv12[162]) + sv12[169];
        sv12[465] = sv12[464] * (2.0 * sp[116]);
        sv12[466] = sv12[465] / sv12[160];
        sv12[467] = (sv12[162] >= 0.1 ? sv12[466] : sv12[178]);
        sv12[468] = sv12[428] * sv12[467];
        sv12[469] = sv12[429] * sv12[467];
        sv12[470] = sv12[430] * sv12[467];
        sv12[471] = sv12[431] * sv12[467];
        sv12[472] = sv12[432] * sv12[467];
        sv12[473] = sv12[433] * sv12[467];
        sv12[474] = sv12[434] * sv12[467];
        sv12[475] = sv12[435] * sv12[467];
        sv12[476] = sv12[436] * sv12[467];
        sv12[477] = sv12[437] * sv12[467];
        sv12[478] = sv12[438] * sv12[467];
        sv12[479] = sv12[439] * sv12[467];
        sv12[480] = sv12[440] * sv12[467];
        sv12[481] = sv12[441] * sv12[467];
        sv12[482] = sv12[442] * sv12[467];
        sv12[483] = sv12[443] * sv12[467];
        sv12[484] = sv12[444] * sv12[467];
        sv12[485] = sv12[445] * sv12[467];
        sv12[486] = sv12[446] * sv12[467];
        sv12[487] = sv12[447] * sv12[467];
        sv12[488] = sv12[448] * sv12[467];
        sv12[489] = sv12[449] * sv12[467];
        sv12[490] = sv12[450] * sv12[467];
        sv12[491] = sv12[451] * sv12[467];
        sv12[492] = sv12[452] * sv12[467];
        sv12[493] = sv12[453] * sv12[467];
        sv12[494] = sv12[454] * sv12[467];
        sv12[495] = sv12[455] * sv12[467];
        sv12[496] = sv12[456] * sv12[467];
        sv12[497] = sv12[457] * sv12[467];
        sv12[498] = sv12[458] * sv12[467];
        sv12[499] = sv12[459] * sv12[467];
        sv12[500] = sv12[460] * sv12[467];
        sv12[501] = sv12[461] * sv12[467];
        sv12[502] = sv12[462] * sv12[467];
        sv12[503] = sv12[463] * sv12[467];
        sv12[504] = sv12[185] + sv12[468];
        sv12[505] = sv12[186] + sv12[471];
        sv12[506] = sv12[187] + sv12[474];
        sv12[507] = sv12[188] + sv12[477];
        sv12[508] = sv12[189] + sv12[480];
        sv12[509] = sv12[190] + sv12[483];
        sv12[510] = sv12[191] + sv12[486];
        sv12[511] = sv12[192] + sv12[489];
        sv12[512] = sv12[193] + sv12[492];
        sv12[513] = sv12[194] + sv12[495];
        sv12[514] = sv12[195] + sv12[498];
        sv12[515] = sv12[196] + sv12[501];
        sv12[516] = sp[3] * sv12[26];
        sv12[517] = sp[4] * sv12[26];
        sv12[518] = sp[6] * sv12[45];
        sv12[519] = sp[5] * sv12[45];
        sv12[520] = sv12[516] + sv12[518];
        sv12[521] = sv12[517] + sv12[519];
        sv12[522] = sv12[4] + -1 * sv12[520];
        sv12[523] = sv12[5] + -1 * sv12[521];
        sv12[524] = w2_c1 * sp[119];
        sv12[525] = w2_c0 * sp[122];
        sv12[526] = sv12[524] + sv12[525];
        sv12[527] = sp[119] * sv12[26];
        sv12[528] = sp[122] * sv12[45];
        sv12[529] = sv12[527] + sv12[528];
        sv12[530] = sv12[526] + -1 * sv12[529];
        sv12[531] = w2_c4 + sv12[530];
        sv12[532] = w2_d1_c1 * sp[3];
        sv12[533] = w2_d0_c1 * sp[4];
        sv12[534] = sv12[532] + sv12[533];
        sv12[535] = sv12[534] + sv12[534];
        sv12[536] = sv12[535] / 2 * (sv12[535] / 2);
        sv12[537] = w2_d1_c0 * sp[3];
        sv12[538] = w2_d0_c0 * sp[4];
        sv12[539] = sv12[537] + sv12[538];
        sv12[540] = w2_d0_c1 * sp[5];
        sv12[541] = w2_d1_c1 * sp[6];
        sv12[542] = sv12[540] + sv12[541];
        sv12[543] = sv12[539] + sv12[542];
        sv12[544] = sv12[543] / 2 * (sv12[543] / 2);
        sv12[545] = sv12[536] + sv12[544];
        sv12[546] = w2_d0_c0 * sp[5];
        sv12[547] = w2_d1_c0 * sp[6];
        sv12[548] = sv12[546] + sv12[547];
        sv12[549] = sv12[548] + sv12[548];
        sv12[550] = sv12[549] / 2 * (sv12[549] / 2);
        sv12[551] = sv12[550] + sv12[544];
        sv12[552] = sv12[545] + sv12[551];
        sv12[553] = 2.0 * sv12[552] * sv12[23];
        sv12[554] = sv12[531] + -1 * sv12[553];
        sv12[555] = sv12[522] * sv12[554];
        sv12[556] = sv12[523] * sv12[554];
        sv12[557] = sv12[555] * sv12[184];
        sv12[558] = sv12[556] * sv12[184];
        sv12[559] = sp[119] * sv12[203];
        sv12[560] = sp[119] * sv12[204];
        sv12[561] = sp[122] * sv12[225];
        sv12[562] = sp[122] * sv12[226];
        sv12[563] = sv12[559] + sv12[561];
        sv12[564] = sv12[562] + sv12[560];
        sv12[565] = -1 * sv12[529] + -1 * sv12[553];
        sv12[566] = sv12[522] * sv12[565];
        sv12[567] = sv12[522] * (-1 * sv12[563]);
        sv12[568] = sv12[522] * (-1 * sv12[564]);
        sv12[569] = sv12[523] * sv12[565];
        sv12[570] = sv12[523] * (-1 * sv12[563]);
        sv12[571] = sv12[523] * (-1 * sv12[564]);
        sv12[572] = sp[3] * sv12[203];
        sv12[573] = sp[3] * sv12[204];
        sv12[574] = sp[4] * sv12[203];
        sv12[575] = sp[4] * sv12[204];
        sv12[576] = sp[6] * sv12[225];
        sv12[577] = sp[6] * sv12[226];
        sv12[578] = sp[5] * sv12[225];
        sv12[579] = sp[5] * sv12[226];
        sv12[580] = sv12[572] + sv12[576];
        sv12[581] = sv12[574] + sv12[578];
        sv12[582] = sv12[577] + sv12[573];
        sv12[583] = sv12[579] + sv12[575];
        sv12[584] = sv12[554] * (-1 * sv12[520]);
        sv12[585] = sv12[554] * (-1 * sv12[521]);
        sv12[586] = sv12[554] * (-1 * sv12[580]);
        sv12[587] = sv12[554] * (-1 * sv12[581]);
        sv12[588] = sv12[554] * (-1 * sv12[582]);
        sv12[589] = sv12[554] * (-1 * sv12[583]);
        sv12[590] = sv12[566] + sv12[584];
        sv12[591] = sv12[569] + sv12[585];
        sv12[592] = sv12[567] + sv12[586];
        sv12[593] = sv12[570] + sv12[587];
        sv12[594] = sv12[568] + sv12[588];
        sv12[595] = sv12[571] + sv12[589];
        sv12[596] = sv12[590] * sv12[467];
        sv12[597] = sv12[591] * sv12[467];
        sv12[598] = sv12[592] * sv12[467];
        sv12[599] = sv12[593] * sv12[467];
        sv12[600] = sv12[594] * sv12[467];
        sv12[601] = sv12[595] * sv12[467];
        sv12[602] = sv12[557] + sv12[596];
        sv12[603] = sv12[558] + sv12[597];
        sv12[604] = sv12[26] / 1.3 * sp[3];
        sv12[605] = sv12[26] / 1.3 * sp[4];
        sv12[606] = sv12[45] / 1.3 * sp[6];
        sv12[607] = sv12[45] / 1.3 * sp[5];
        sv12[608] = sv12[604] + sv12[606];
        sv12[609] = sv12[607] + sv12[605];
        sv12[610] = sv12[4] + -1 * sv12[608];
        sv12[611] = sv12[5] + -1 * sv12[609];
        sv12[612] = w2_c3 * w2_c3;
        sv12[613] = std::sqrt(1e-8 + sv12[612]);
        sv12[614] = w2_c3 + sv12[613];
        sv12[615] = 1.92 * w1_c4 * (1.0 / (0.5 * sv12[614]));
        sv12[616] = w1_c4 / (0.5 * sv12[614]);
        sv12[617] = sv12[615] + 1.92 * sv12[616];
        sv12[618] = w2_c1 * sp[125];
        sv12[619] = w2_c0 * sp[128];
        sv12[620] = sv12[618] + sv12[619];
        sv12[621] = sp[125] * (sv12[26] / 1.3);
        sv12[622] = sp[128] * (sv12[45] / 1.3);
        sv12[623] = sv12[621] + sv12[622];
        sv12[624] = sv12[620] + -1 * sv12[623];
        sv12[625] = 1.92 * w1_c4 * sv12[616];
        sv12[626] = sv12[624] + sv12[625];
        sv12[627] = w2_c3 * (0.09 * (1.44 * sv12[6]));
        sv12[628] = 2.0 * sv12[552] * sv12[627];
        sv12[629] = sv12[626] + -1 * sv12[628];
        sv12[630] = sv12[610] * sv12[629];
        sv12[631] = sv12[611] * sv12[629];
        sv12[632] = sv12[629] * sv12[617];
        sv12[633] = sv12[161] / (0.0001 + sv12[23] / 1.3);
        sv12[634] = sv12[23] / 1.3 * sv12[633];
        sv12[635] = -1 * sv12[634] / (0.0001 + sv12[23] / 1.3);
        sv12[636] = sv12[635] * (1.0 / sv12[633]);
        sv12[637] = -1 * sv12[636] / sv12[633];
        sv12[638] = std::exp(-2.0 * sv12[633]);
        sv12[639] = -2.0 * sv12[635] * sv12[638];
        sv12[640] = (1.0 + sv12[638]) / (1.0 + -1 * sv12[638]);
        sv12[641] = -1 * sv12[639] * sv12[640];
        sv12[642] = -1 * sv12[641] + sv12[639];
        sv12[643] = sv12[642] / (1.0 + -1 * sv12[638]);
        sv12[644] = -1 * sv12[637] + sv12[643];
        sv12[645] = sv12[644] * (2.0 * sp[116]);
        sv12[646] = sv12[645] / sv12[160];
        sv12[647] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[633]) * (2.0 * sp[116]);
        sv12[648] = sv12[647] * (2.0 * sp[116]);
        sv12[649] = sv12[648] / (0.0001 + sv12[23] / 1.3);
        sv12[650] = sv12[23] / 1.3 * sv12[649];
        sv12[651] = 0.5 * (-0.004435991517475 * sv12[635]) * (2.0 * sp[116]);
        sv12[652] = sv12[651] * (2.0 * sp[116]);
        sv12[653] = -1 * sv12[650] + sv12[652];
        sv12[654] = sv12[653] / (0.0001 + sv12[23] / 1.3);
        sv12[655] = (sv12[633] >= 0.1 ? sv12[646] : sv12[654]);
        sv12[656] = sv12[630] * sv12[655];
        sv12[657] = sv12[631] * sv12[655];
        sv12[658] = sv12[632] * sv12[655];
        sv12[659] = sp[125] * (sv12[203] / 1.3);
        sv12[660] = sp[125] * (sv12[204] / 1.3);
        sv12[661] = sp[128] * (sv12[225] / 1.3);
        sv12[662] = sp[128] * (sv12[226] / 1.3);
        sv12[663] = sv12[659] + sv12[661];
        sv12[664] = sv12[662] + sv12[660];
        sv12[665] = -1 * sv12[623] + -1 * sv12[628];
        sv12[666] = sv12[610] * sv12[665];
        sv12[667] = sv12[610] * (-1 * sv12[663]);
        sv12[668] = sv12[610] * (-1 * sv12[664]);
        sv12[669] = sv12[611] * sv12[665];
        sv12[670] = sv12[611] * (-1 * sv12[663]);
        sv12[671] = sv12[611] * (-1 * sv12[664]);
        sv12[672] = sv12[665] * sv12[617];
        sv12[673] = sv12[617] * (-1 * sv12[663]);
        sv12[674] = sv12[617] * (-1 * sv12[664]);
        sv12[675] = sv12[203] / 1.3 * sp[3];
        sv12[676] = sv12[204] / 1.3 * sp[3];
        sv12[677] = sv12[203] / 1.3 * sp[4];
        sv12[678] = sv12[204] / 1.3 * sp[4];
        sv12[679] = sv12[225] / 1.3 * sp[6];
        sv12[680] = sv12[226] / 1.3 * sp[6];
        sv12[681] = sv12[225] / 1.3 * sp[5];
        sv12[682] = sv12[226] / 1.3 * sp[5];
        sv12[683] = sv12[675] + sv12[679];
        sv12[684] = sv12[681] + sv12[677];
        sv12[685] = sv12[676] + sv12[680];
        sv12[686] = sv12[682] + sv12[678];
        sv12[687] = sv12[629] * (-1 * sv12[608]);
        sv12[688] = sv12[629] * (-1 * sv12[609]);
        sv12[689] = sv12[629] * (-1 * sv12[683]);
        sv12[690] = sv12[629] * (-1 * sv12[684]);
        sv12[691] = sv12[629] * (-1 * sv12[685]);
        sv12[692] = sv12[629] * (-1 * sv12[686]);
        sv12[693] = sv12[666] + sv12[687];
        sv12[694] = sv12[669] + sv12[688];
        sv12[695] = sv12[667] + sv12[689];
        sv12[696] = sv12[670] + sv12[690];
        sv12[697] = sv12[668] + sv12[691];
        sv12[698] = sv12[671] + sv12[692];
        sv12[699] = -1 * (1.0 / sv12[633]) + sv12[640];
        sv12[700] = sv12[699] * (2.0 * sp[116]);
        sv12[701] = sv12[700] / sv12[160];
        sv12[702] = (sv12[633] >= 0.1 ? sv12[701] : sv12[649]);
        sv12[703] = sv12[693] * sv12[702];
        sv12[704] = sv12[694] * sv12[702];
        sv12[705] = sv12[672] * sv12[702];
        sv12[706] = sv12[695] * sv12[702];
        sv12[707] = sv12[696] * sv12[702];
        sv12[708] = sv12[673] * sv12[702];
        sv12[709] = sv12[697] * sv12[702];
        sv12[710] = sv12[698] * sv12[702];
        sv12[711] = sv12[674] * sv12[702];
        sv12[712] = sv12[656] + sv12[703];
        sv12[713] = sv12[657] + sv12[704];
        sv12[714] = sv12[658] + sv12[705];
        sv12[715] = w1_c3 * (0.09 * (1.44 * sv12[6]));
        sv12[716] = 2.0 * sv12[552] * sv12[715];
        sv12[717] = sv12[714] + -1 * sv12[716];
        sv12[718] = w1_c3 * (0.09 * sv12[6]);
        sv12[719] = w1_c3 * sv12[718];
        sv12[720] = w1_c4 * w1_c4;
        sv12[721] = std::sqrt(1e-8 + sv12[720]);
        sv12[722] = w1_c4 + sv12[721];
        sv12[723] = sv12[719] / (0.5 * sv12[722]);
        sv12[724] = 2.0 * sv12[552] * sv12[723];
        sv12[725] = sp[133] * sv12[723];
        sv12[726] = sp[134] * sv12[723];
        sv12[727] = sv12[602] + sv12[725];
        sv12[728] = sv12[603] + sv12[726];
        sv12[729] = sp[139] * (sv12[723] / 1.3);
        sv12[730] = sp[140] * (sv12[723] / 1.3);
        sv12[731] = sv12[712] + sv12[729];
        sv12[732] = sv12[713] + sv12[730];
        sv12[733] = sv12[72] / 2 * (sp[16] / 2);
        sv12[734] = sv12[72] / 2 * (sp[17] / 2);
        sv12[735] = sv12[79] / 2 * (sp[6] / 2);
        sv12[736] = sv12[79] / 2 * (sp[5] / 2);
        sv12[737] = sv12[79] / 2 * (sp[3] / 2);
        sv12[738] = sv12[79] / 2 * (sp[4] / 2);
        sv12[739] = sv12[733] + sv12[735];
        sv12[740] = sv12[734] + sv12[736];
        sv12[741] = sv12[126] / 2 * (sp[75] / 2);
        sv12[742] = sv12[126] / 2 * (sp[76] / 2);
        sv12[743] = sv12[741] + sv12[737];
        sv12[744] = sv12[742] + sv12[738];
        sv12[745] = sv12[739] + sv12[735];
        sv12[746] = sv12[740] + sv12[736];
        sv12[747] = sv12[743] + sv12[737];
        sv12[748] = sv12[744] + sv12[738];
        sv12[749] = sv12[745] * (2.0 * sv12[23]);
        sv12[750] = sv12[746] * (2.0 * sv12[23]);
        sv12[751] = sv12[747] * (2.0 * sv12[23]);
        sv12[752] = sv12[748] * (2.0 * sv12[23]);
        sv12[753] = sv12[504] + sv12[749];
        sv12[754] = sv12[505] + sv12[750];
        sv12[755] = sv12[509] + sv12[751];
        sv12[756] = sv12[510] + sv12[752];
        sv12[757] = sv12[753] * sp[141];
        sv12[758] = sv12[469] * sp[141];
        sv12[759] = sv12[470] * sp[141];
        sv12[760] = sv12[754] * sp[141];
        sv12[761] = sv12[472] * sp[141];
        sv12[762] = sv12[473] * sp[141];
        sv12[763] = sv12[506] * sp[141];
        sv12[764] = sv12[475] * sp[141];
        sv12[765] = sv12[476] * sp[141];
        sv12[766] = sv12[507] * sp[141];
        sv12[767] = sv12[478] * sp[141];
        sv12[768] = sv12[479] * sp[141];
        sv12[769] = sv12[508] * sp[141];
        sv12[770] = sv12[481] * sp[141];
        sv12[771] = sv12[482] * sp[141];
        sv12[772] = sv12[755] * sp[141];
        sv12[773] = sv12[484] * sp[141];
        sv12[774] = sv12[485] * sp[141];
        sv12[775] = sv12[756] * sp[141];
        sv12[776] = sv12[487] * sp[141];
        sv12[777] = sv12[488] * sp[141];
        sv12[778] = sv12[511] * sp[141];
        sv12[779] = sv12[490] * sp[141];
        sv12[780] = sv12[491] * sp[141];
        sv12[781] = sv12[512] * sp[141];
        sv12[782] = sv12[493] * sp[141];
        sv12[783] = sv12[494] * sp[141];
        sv12[784] = sv12[513] * sp[141];
        sv12[785] = sv12[496] * sp[141];
        sv12[786] = sv12[497] * sp[141];
        sv12[787] = sv12[514] * sp[141];
        sv12[788] = sv12[499] * sp[141];
        sv12[789] = sv12[500] * sp[141];
        sv12[790] = sv12[515] * sp[141];
        sv12[791] = sv12[502] * sp[141];
        sv12[792] = sv12[503] * sp[141];
        sv12[793] = sv12[727] * sp[141];
        sv12[794] = sv12[728] * sp[141];
        sv12[795] = sv12[731] * sp[141];
        sv12[796] = sv12[732] * sp[141];
        sv12[797] = sv12[717] * sp[141];
        sv12[798] = -1 * sv12[724] * sp[141];
        sv12[799] = sv12[598] * sp[141];
        sv12[800] = sv12[599] * sp[141];
        sv12[801] = sv12[706] * sp[141];
        sv12[802] = sv12[707] * sp[141];
        sv12[803] = sv12[708] * sp[141];
        sv12[804] = sv12[600] * sp[141];
        sv12[805] = sv12[601] * sp[141];
        sv12[806] = sv12[709] * sp[141];
        sv12[807] = sv12[710] * sp[141];
        sv12[808] = sv12[711] * sp[141];
        const double fw0 = sv12[777] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP0[i] += fw0 * FE64_C0_D10_Q12[0][iq][i];
        const double fw1 = sv12[775] * weights12[iq];
        alignas(32) double TF0[5];
        for (int i = 0; i < 5; ++i)
            TF0[i] = fw1 * FE64_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF0[i][j] += TF0[i] * FE3_C0_Q12[0][iq][j];
        const double fw2 = sv12[776] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP1[i] += fw2 * FE64_C0_D10_Q12[0][iq][i];
        const double fw3 = sv12[786] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP2[j] += fw3 * FE3_C0_D01_Q12[0][0][j];
        const double fw4 = sv12[784] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP3[j] += fw4 * FE3_C0_Q12[0][iq][j];
        const double fw5 = sv12[785] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP4[j] += fw5 * FE3_C0_D01_Q12[0][0][j];
        const double fw6 = sv12[774] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP5[i] += fw6 * FE64_C0_D01_Q12[0][iq][i];
        const double fw7 = sv12[772] * weights12[iq];
        alignas(32) double TF1[5];
        for (int i = 0; i < 5; ++i)
            TF1[i] = fw7 * FE64_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF1[i][j] += TF1[i] * FE3_C0_Q12[0][iq][j];
        const double fw8 = sv12[773] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP6[i] += fw8 * FE64_C0_D01_Q12[0][iq][i];
        const double fw9 = sv12[783] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP7[j] += fw9 * FE3_C0_D01_Q12[0][0][j];
        const double fw10 = sv12[781] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP8[j] += fw10 * FE3_C0_Q12[0][iq][j];
        const double fw11 = sv12[782] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP9[j] += fw11 * FE3_C0_D01_Q12[0][0][j];
        const double fw12 = sv12[780] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP10[j] += fw12 * FE3_C0_D01_Q12[0][0][j];
        const double fw13 = sv12[778] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP11[j] += fw13 * FE3_C0_Q12[0][iq][j];
        const double fw14 = sv12[779] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP12[j] += fw14 * FE3_C0_D01_Q12[0][0][j];
        const double fw15 = sv12[762] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP13[i] += fw15 * FE64_C0_D10_Q12[0][iq][i];
        const double fw16 = sv12[760] * weights12[iq];
        alignas(32) double TF2[5];
        for (int i = 0; i < 5; ++i)
            TF2[i] = fw16 * FE64_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF2[i][j] += TF2[i] * FE3_C0_Q12[0][iq][j];
        const double fw17 = sv12[761] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP14[i] += fw17 * FE64_C0_D10_Q12[0][iq][i];
        const double fw18 = sv12[771] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP15[j] += fw18 * FE3_C0_D01_Q12[0][0][j];
        const double fw19 = sv12[769] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP16[j] += fw19 * FE3_C0_Q12[0][iq][j];
        const double fw20 = sv12[770] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP17[j] += fw20 * FE3_C0_D01_Q12[0][0][j];
        const double fw21 = sv12[759] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP18[i] += fw21 * FE64_C0_D01_Q12[0][iq][i];
        const double fw22 = sv12[757] * weights12[iq];
        alignas(32) double TF3[5];
        for (int i = 0; i < 5; ++i)
            TF3[i] = fw22 * FE64_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF3[i][j] += TF3[i] * FE3_C0_Q12[0][iq][j];
        const double fw23 = sv12[758] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP19[i] += fw23 * FE64_C0_D01_Q12[0][iq][i];
        const double fw24 = sv12[765] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP20[j] += fw24 * FE3_C0_D01_Q12[0][0][j];
        const double fw25 = sv12[763] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP21[j] += fw25 * FE3_C0_Q12[0][iq][j];
        const double fw26 = sv12[764] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP22[j] += fw26 * FE3_C0_D01_Q12[0][0][j];
        const double fw27 = sv12[768] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP23[j] += fw27 * FE3_C0_D01_Q12[0][0][j];
        const double fw28 = sv12[766] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP24[j] += fw28 * FE3_C0_Q12[0][iq][j];
        const double fw29 = sv12[767] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP25[j] += fw29 * FE3_C0_D01_Q12[0][0][j];
        const double fw30 = sv12[792] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP26[j] += fw30 * FE3_C0_D01_Q12[0][0][j];
        const double fw31 = sv12[790] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP27[j] += fw31 * FE3_C0_Q12[0][iq][j];
        const double fw32 = sv12[791] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP28[j] += fw32 * FE3_C0_D01_Q12[0][0][j];
        const double fw33 = sv12[789] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP29[j] += fw33 * FE3_C0_D01_Q12[0][0][j];
        const double fw34 = sv12[787] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP30[j] += fw34 * FE3_C0_Q12[0][iq][j];
        const double fw35 = sv12[788] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP31[j] += fw35 * FE3_C0_D01_Q12[0][0][j];
        const double fw36 = sv12[805] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP32[j] += fw36 * FE3_C0_D01_Q12[0][0][j];
        const double fw37 = sv12[794] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP33[j] += fw37 * FE3_C0_Q12[0][iq][j];
        const double fw38 = sv12[800] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP34[j] += fw38 * FE3_C0_D01_Q12[0][0][j];
        const double fw39 = sv12[798] * weights12[iq];
        alignas(32) double TF4[3];
        for (int i = 0; i < 3; ++i)
            TF4[i] = fw39 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF4[i][j] += TF4[i] * FE3_C0_Q12[0][iq][j];
        const double fw40 = sv12[804] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP35[j] += fw40 * FE3_C0_D01_Q12[0][0][j];
        const double fw41 = sv12[793] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP36[j] += fw41 * FE3_C0_Q12[0][iq][j];
        const double fw42 = sv12[799] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP37[j] += fw42 * FE3_C0_D01_Q12[0][0][j];
        const double fw43 = sv12[807] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP38[j] += fw43 * FE3_C0_D01_Q12[0][0][j];
        const double fw44 = sv12[796] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP39[j] += fw44 * FE3_C0_Q12[0][iq][j];
        const double fw45 = sv12[802] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP40[j] += fw45 * FE3_C0_D01_Q12[0][0][j];
        const double fw46 = sv12[808] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP41[i] += fw46 * FE3_C0_Q12[0][iq][i];
        const double fw47 = sv12[797] * weights12[iq];
        alignas(32) double TF5[3];
        for (int i = 0; i < 3; ++i)
            TF5[i] = fw47 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF5[i][j] += TF5[i] * FE3_C0_Q12[0][iq][j];
        const double fw48 = sv12[803] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP42[i] += fw48 * FE3_C0_Q12[0][iq][i];
        const double fw49 = sv12[806] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP43[j] += fw49 * FE3_C0_D01_Q12[0][0][j];
        const double fw50 = sv12[795] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP44[j] += fw50 * FE3_C0_Q12[0][iq][j];
        const double fw51 = sv12[801] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP45[j] += fw51 * FE3_C0_D01_Q12[0][0][j];
    }
    std::fill(A, A + 63, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[2] = { 0, 2 };
    static const int DM2[3] = { 0, 1, 5 };
    static const int DM3[5] = { 0, 2, 3, 4, 5 };
    static const int DM4[3] = { 0, 2, 4 };
    static const int DM5[4] = { 0, 3, 4, 5 };
    static const int DM6[5] = { 6, 7, 9, 10, 11 };
    static const int DM7[3] = { 6, 7, 11 };
    static const int DM8[5] = { 6, 8, 9, 10, 11 };
    static const int DM9[3] = { 6, 8, 10 };
    static const int DM10[4] = { 6, 9, 10, 11 };
    static const int DM11[2] = { 12, 14 };
    static const int DM12[2] = { 15, 17 };
    static const int DM13[2] = { 18, 20 };
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM0[i] + j] += FE3_C0_D01_Q12[0][0][j] * TP0[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM0[i] + j] += BF0[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM0[i] + DM1[j]] += FE3_C0_D01_Q12[0][0][j] * TP1[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM2[i] + j] += FE64_C0_D02_Q12[0][0][i] * TP2[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM2[i] + j] += FE64_C0_D02_Q12[0][0][i] * TP3[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM2[i] + DM1[j]] += FE64_C0_D02_Q12[0][0][i] * TP4[j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM3[i] + j] += FE3_C0_D01_Q12[0][0][j] * TP5[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM3[i] + j] += BF1[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM3[i] + DM1[j]] += FE3_C0_D01_Q12[0][0][j] * TP6[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM4[i] + j] += FE64_C0_D02_Q12[0][0][i] * TP7[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM4[i] + j] += FE64_C0_D02_Q12[0][0][i] * TP8[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM4[i] + DM1[j]] += FE64_C0_D02_Q12[0][0][i] * TP9[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM5[i] + j] += FE64_C0_D11_Q12[0][0][i] * TP10[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM5[i] + j] += FE64_C0_D11_Q12[0][0][i] * TP11[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM5[i] + DM1[j]] += FE64_C0_D11_Q12[0][0][i] * TP12[j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM6[i] + j] += FE3_C0_D01_Q12[0][0][j] * TP13[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM6[i] + j] += BF2[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM6[i] + DM1[j]] += FE3_C0_D01_Q12[0][0][j] * TP14[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM7[i] + j] += FE64_C0_D02_Q12[0][0][i] * TP15[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM7[i] + j] += FE64_C0_D02_Q12[0][0][i] * TP16[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM7[i] + DM1[j]] += FE64_C0_D02_Q12[0][0][i] * TP17[j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM8[i] + j] += FE3_C0_D01_Q12[0][0][j] * TP18[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM8[i] + j] += BF3[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM8[i] + DM1[j]] += FE3_C0_D01_Q12[0][0][j] * TP19[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM9[i] + j] += FE64_C0_D02_Q12[0][0][i] * TP20[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM9[i] + j] += FE64_C0_D02_Q12[0][0][i] * TP21[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM9[i] + DM1[j]] += FE64_C0_D02_Q12[0][0][i] * TP22[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM10[i] + j] += FE64_C0_D11_Q12[0][0][i] * TP23[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM10[i] + j] += FE64_C0_D11_Q12[0][0][i] * TP24[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM10[i] + DM1[j]] += FE64_C0_D11_Q12[0][0][i] * TP25[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * (i + 12) + j] += FE3_C0_D01_Q12[0][0][i] * TP26[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * (i + 12) + j] += FE3_C0_D01_Q12[0][0][i] * TP27[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * (i + 12) + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP28[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM11[i] + j] += FE3_C0_D01_Q12[0][0][i] * TP29[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM11[i] + j] += FE3_C0_D01_Q12[0][0][i] * TP30[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM11[i] + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP31[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * (i + 15) + j] += FE3_C0_D01_Q12[0][0][i] * TP32[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * (i + 15) + j] += FE3_C0_D01_Q12[0][0][i] * TP33[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * (i + 15) + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP34[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * (i + 15) + j] += BF4[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM12[i] + j] += FE3_C0_D01_Q12[0][0][i] * TP35[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM12[i] + j] += FE3_C0_D01_Q12[0][0][i] * TP36[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM12[i] + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP37[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * (i + 18) + j] += FE3_C0_D01_Q12[0][0][i] * TP38[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * (i + 18) + j] += FE3_C0_D01_Q12[0][0][i] * TP39[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * (i + 18) + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP40[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * (i + 18) + j] += FE3_C0_D01_Q12[0][0][j] * TP41[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * (i + 18) + j] += BF5[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * (i + 18) + DM1[j]] += FE3_C0_D01_Q12[0][0][j] * TP42[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM13[i] + j] += FE3_C0_D01_Q12[0][0][i] * TP43[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM13[i] + j] += FE3_C0_D01_Q12[0][0][i] * TP44[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[3 * DM13[i] + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP45[j];
  }

};


class ranspseudotimestepping_exterior_facet_integral_8_3: public ufc::exterior_facet_integral
{
public:

  ranspseudotimestepping_exterior_facet_integral_8_3() : ufc::exterior_facet_integral()
  {

  }

  ~ranspseudotimestepping_exterior_facet_integral_8_3() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 22
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.1739274225687268, 0.3260725774312731, 0.3260725774312731, 0.1739274225687268 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE35_C0_D01_F_Q4[3][4][5] =
        { { { 1.0, -0.7222726231881047, 3.722272623188091, -0.2777273768118826, -3.722272623188107 },
            { 1.0, 0.3200379128302891, 2.679962087169697, -1.320037912830275, -2.679962087169714 },
            { 1.0, 1.679962087169715, 1.320037912830271, -2.679962087169701, -1.320037912830287 },
            { 1.0, 2.722272623188108, 0.2777273768118786, -3.722272623188096, -0.2777273768118922 } },
          { { -2.72227262318811, -0.722272623188105, 0.0, 3.444545246376218, 0.0 },
            { -1.679962087169718, 0.3200379128302888, 0.0, 1.359924174339433, 0.0 },
            { -0.3200379128302928, 1.679962087169715, 0.0, -1.359924174339417, 0.0 },
            { 0.7222726231881, 2.722272623188108, 0.0, -3.444545246376202, 0.0 } },
          { { -2.72227262318811, -1.0, 0.2777273768118848, 3.722272623188112, -0.2777273768118925 },
            { -1.679962087169717, -1.0, 1.320037912830276, 2.679962087169721, -1.320037912830287 },
            { -0.3200379128302917, -1.0, 2.6799620871697, 1.320037912830298, -2.679962087169714 },
            { 0.7222726231880999, -1.0, 3.722272623188092, 0.2777273768119067, -3.722272623188106 } } };
    alignas(32) static const double FE35_C0_D10_F_Q4[3][4][5] =
        { { { 1.0, 2.722272623188104, 0.2777273768118936, -0.2777273768118936, -3.722272623188106 },
            { 1.0, 1.679962087169712, 1.320037912830285, -1.320037912830285, -2.679962087169713 },
            { 1.0, 0.3200379128302879, 2.679962087169708, -2.679962087169708, -1.320037912830288 },
            { 1.0, -0.7222726231881051, 3.722272623188099, -3.722272623188099, -0.2777273768118945 } },
          { { -2.722272623188107, -1.0, 0.277727376811893, -0.277727376811893, 3.72227262318811 },
            { -1.679962087169713, -1.0, 1.320037912830285, -1.320037912830285, 2.679962087169716 },
            { -0.3200379128302884, -1.0, 2.679962087169709, -2.679962087169709, 1.320037912830289 },
            { 0.7222726231881045, -1.0, 3.722272623188099, -3.722272623188099, 0.2777273768118963 } },
          { { -2.722272623188106, -0.7222726231881095, 0.0, 0.0, 3.444545246376216 },
            { -1.679962087169712, 0.3200379128302852, 0.0, 0.0, 1.359924174339427 },
            { -0.3200379128302857, 1.679962087169712, 0.0, 0.0, -1.359924174339426 },
            { 0.7222726231881069, 2.722272623188104, 0.0, 0.0, -3.444545246376211 } } };
    alignas(32) static const double FE35_C0_F_Q4[3][4][6] =
        { { { 0.0, 0.8013460293699309, -0.05979028222412166, 0.2584442528541909, 0.0, 0.0 },
            { 0.0, 0.2277840767909521, -0.1121969667939041, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.1121969667939041, 0.227784076790952, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.05979028222412169, 0.8013460293699309, 0.2584442528541908, 0.0, 0.0 } },
          { { 0.8013460293699309, 0.0, -0.05979028222412166, 0.0, 0.2584442528541908, 0.0 },
            { 0.2277840767909521, 0.0, -0.1121969667939041, 0.0, 0.8844128900029518, 0.0 },
            { -0.1121969667939041, 0.0, 0.2277840767909521, 0.0, 0.8844128900029519, 0.0 },
            { -0.05979028222412166, 0.0, 0.8013460293699309, 0.0, 0.2584442528541906, 0.0 } },
          { { 0.8013460293699309, -0.05979028222412169, 0.0, 0.0, 0.0, 0.2584442528541908 },
            { 0.2277840767909521, -0.1121969667939041, 0.0, 0.0, 0.0, 0.8844128900029519 },
            { -0.1121969667939041, 0.2277840767909522, 0.0, 0.0, 0.0, 0.884412890002952 },
            { -0.05979028222412169, 0.8013460293699308, 0.0, 0.0, 0.0, 0.2584442528541909 } } };
    alignas(32) static const double FE37_C2_D01_F_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE37_C2_F_Q4[3][4][3] =
        { { { 0.0, 0.9305681557970263, 0.06943184420297369 },
            { 0.0, 0.6699905217924281, 0.3300094782075718 },
            { 0.0, 0.3300094782075719, 0.6699905217924279 },
            { 0.0, 0.06943184420297382, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.0, 0.06943184420297369 },
            { 0.6699905217924281, 0.0, 0.3300094782075718 },
            { 0.3300094782075719, 0.0, 0.669990521792428 },
            { 0.06943184420297382, 0.0, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.06943184420297367, 0.0 },
            { 0.6699905217924281, 0.3300094782075718, 0.0 },
            { 0.3300094782075719, 0.6699905217924281, 0.0 },
            { 0.06943184420297374, 0.9305681557970263, 0.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE37_C2_D01_F_Q4[0][0][0] + coordinate_dofs[2] * FE37_C2_D01_F_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE37_C2_D01_F_Q4[0][0][0] + coordinate_dofs[5] * FE37_C2_D01_F_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE37_C2_D01_F_Q4[0][0][0] + coordinate_dofs[4] * FE37_C2_D01_F_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE37_C2_D01_F_Q4[0][0][0] + coordinate_dofs[3] * FE37_C2_D01_F_Q4[0][0][1];
    const double w1_d1_c3 = w[1][15] * FE37_C2_D01_F_Q4[0][0][0] + w[1][17] * FE37_C2_D01_F_Q4[0][0][1];
    double w1_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c3 += w[1][ic + 15] * FE37_C2_D01_F_Q4[0][0][ic];
    const double w1_d1_c4 = w[1][18] * FE37_C2_D01_F_Q4[0][0][0] + w[1][20] * FE37_C2_D01_F_Q4[0][0][1];
    double w1_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c4 += w[1][ic + 18] * FE37_C2_D01_F_Q4[0][0][ic];
    alignas(32) double sp[74];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = triangle_reference_facet_normals[facet][1] * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = triangle_reference_facet_normals[facet][0] * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet][0] * sp[9];
    sp[11] = -1 * J_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[20] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[21] = sp[19] + sp[20];
    sp[22] = std::sqrt(sp[21]);
    sp[23] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[24] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[25] = sp[23] + sp[24];
    sp[26] = std::sqrt(sp[25]);
    sp[27] = sp[22] * sp[26];
    sp[28] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[29] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[30] = sp[28] + sp[29];
    sp[31] = std::sqrt(sp[30]);
    sp[32] = sp[27] * sp[31];
    sp[33] = triangle_reference_cell_volume * sp[2];
    sp[34] = std::abs(sp[33]);
    sp[35] = sp[32] / (4.0 * sp[34]);
    sp[36] = sp[3] * sp[17];
    sp[37] = sp[5] * sp[17];
    sp[38] = sp[11] * sp[18];
    sp[39] = sp[9] * sp[18];
    sp[40] = sp[36] + sp[38];
    sp[41] = sp[37] + sp[39];
    sp[42] = w1_d1_c3 * sp[3];
    sp[43] = w1_d0_c3 * sp[5];
    sp[44] = sp[42] + sp[43];
    sp[45] = sp[44] * sp[17];
    sp[46] = w1_d0_c3 * sp[9];
    sp[47] = w1_d1_c3 * sp[11];
    sp[48] = sp[46] + sp[47];
    sp[49] = sp[48] * sp[18];
    sp[50] = sp[45] + sp[49];
    sp[51] = w1_d1_c4 * sp[3];
    sp[52] = w1_d0_c4 * sp[5];
    sp[53] = sp[51] + sp[52];
    sp[54] = sp[53] * sp[17];
    sp[55] = w1_d0_c4 * sp[9];
    sp[56] = w1_d1_c4 * sp[11];
    sp[57] = sp[55] + sp[56];
    sp[58] = sp[57] * sp[18];
    sp[59] = sp[54] + sp[58];
    sp[60] = sp[11] + sp[11];
    sp[61] = sp[9] + sp[9];
    sp[62] = sp[5] + sp[5];
    sp[63] = sp[3] + sp[3];
    sp[64] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[65] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[66] = sp[64] + sp[65];
    sp[67] = sp[66] * sp[66];
    sp[68] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[69] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[70] = sp[68] + sp[69];
    sp[71] = sp[70] * sp[70];
    sp[72] = sp[67] + sp[71];
    sp[73] = std::sqrt(sp[72]);
    alignas(32) double BF0[6][3] = {};
    alignas(32) double BF1[5][3] = {};
    alignas(32) double BF2[5][3] = {};
    alignas(32) double BF3[6][3] = {};
    alignas(32) double BF4[5][3] = {};
    alignas(32) double BF5[5][3] = {};
    alignas(32) double TP0[3] = {};
    alignas(32) double BF6[3][3] = {};
    alignas(32) double TP1[3] = {};
    alignas(32) double TP2[3] = {};
    alignas(32) double BF7[3][3] = {};
    alignas(32) double TP3[3] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w1_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c4 += w[1][ic + 18] * FE37_C2_F_Q4[facet][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE35_C0_F_Q4[facet][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE35_C0_F_Q4[facet][iq][ic];
        double w1_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c3 += w[1][ic + 15] * FE37_C2_F_Q4[facet][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3 += w[3][ic] * FE37_C2_F_Q4[facet][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE37_C2_F_Q4[facet][iq][ic];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE37_C2_F_Q4[facet][iq][ic];
        const double w1_d1_c0 = w[1][0] * FE35_C0_D01_F_Q4[facet][iq][0] + w[1][2] * FE35_C0_D01_F_Q4[facet][iq][1] + w[1][3] * FE35_C0_D01_F_Q4[facet][iq][2] + w[1][4] * FE35_C0_D01_F_Q4[facet][iq][3] + w[1][5] * FE35_C0_D01_F_Q4[facet][iq][4];
        const double w1_d0_c0 = w[1][0] * FE35_C0_D10_F_Q4[facet][iq][0] + w[1][1] * FE35_C0_D10_F_Q4[facet][iq][1] + w[1][3] * FE35_C0_D10_F_Q4[facet][iq][2] + w[1][4] * FE35_C0_D10_F_Q4[facet][iq][3] + w[1][5] * FE35_C0_D10_F_Q4[facet][iq][4];
        const double w1_d0_c1 = w[1][6] * FE35_C0_D10_F_Q4[facet][iq][0] + w[1][7] * FE35_C0_D10_F_Q4[facet][iq][1] + w[1][9] * FE35_C0_D10_F_Q4[facet][iq][2] + w[1][10] * FE35_C0_D10_F_Q4[facet][iq][3] + w[1][11] * FE35_C0_D10_F_Q4[facet][iq][4];
        const double w1_d1_c1 = w[1][6] * FE35_C0_D01_F_Q4[facet][iq][0] + w[1][8] * FE35_C0_D01_F_Q4[facet][iq][1] + w[1][9] * FE35_C0_D01_F_Q4[facet][iq][2] + w[1][10] * FE35_C0_D01_F_Q4[facet][iq][3] + w[1][11] * FE35_C0_D01_F_Q4[facet][iq][4];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c0 += w[1][ic] * FE35_C0_F_Q4[facet][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c1 += w[1][ic + 6] * FE35_C0_F_Q4[facet][iq][ic];
        alignas(32) double sv4[129];
        sv4[0] = w2_c1 * sp[17];
        sv4[1] = w2_c0 * sp[18];
        sv4[2] = sv4[0] + sv4[1];
        sv4[3] = std::tanh(100.0 * sv4[2]);
        sv4[4] = std::exp(w3);
        sv4[5] = w1_c3 * (0.09 * sv4[4]);
        sv4[6] = w1_c3 * sv4[5];
        sv4[7] = w1_c4 * w1_c4;
        sv4[8] = std::sqrt(1e-8 + sv4[7]);
        sv4[9] = w1_c4 + sv4[8];
        sv4[10] = sv4[6] / (0.5 * sv4[9]);
        sv4[11] = 100000.0 * (0.5 + -1 * (0.5 * sv4[3])) * (sv4[10] / 1.3);
        sv4[12] = sv4[11] * (1.0 / (2.0 * sp[35]));
        sv4[13] = w1_c4 * sv4[12];
        sv4[14] = 100000.0 * (0.5 + -1 * (0.5 * sv4[3])) * sv4[10];
        sv4[15] = sv4[14] * (1.0 / (2.0 * sp[35]));
        sv4[16] = w1_c3 * sv4[15];
        sv4[17] = (0.5 + -1 * (0.5 * sv4[3])) * sv4[10];
        sv4[18] = sp[40] * sv4[17];
        sv4[19] = sp[41] * sv4[17];
        sv4[20] = w1_c3 * sv4[18];
        sv4[21] = w1_c3 * sv4[19];
        sv4[22] = sp[50] * sv4[17];
        sv4[23] = -1 * sv4[22] + sv4[16];
        sv4[24] = (0.5 + -1 * (0.5 * sv4[3])) * (sv4[10] / 1.3);
        sv4[25] = sp[40] * sv4[24];
        sv4[26] = sp[41] * sv4[24];
        sv4[27] = w1_c4 * sv4[25];
        sv4[28] = w1_c4 * sv4[26];
        sv4[29] = sp[59] * sv4[24];
        sv4[30] = sv4[23] + -1 * sv4[29];
        sv4[31] = w2_c3 * (0.09 * sv4[4]);
        sv4[32] = w2_c3 * sv4[31];
        sv4[33] = w2_c4 * w2_c4;
        sv4[34] = std::sqrt(1e-8 + sv4[33]);
        sv4[35] = w2_c4 + sv4[34];
        sv4[36] = sv4[32] / (0.5 * sv4[35]);
        sv4[37] = w1_d1_c0 * sp[3];
        sv4[38] = w1_d0_c0 * sp[5];
        sv4[39] = sv4[37] + sv4[38];
        sv4[40] = w1_d0_c1 * sp[9];
        sv4[41] = w1_d1_c1 * sp[11];
        sv4[42] = sv4[40] + sv4[41];
        sv4[43] = sv4[39] + sv4[42];
        sv4[44] = 2.0 * sv4[36] * (sv4[43] / 2);
        sv4[45] = sv4[44] * sp[17];
        sv4[46] = w1_d0_c0 * sp[9];
        sv4[47] = w1_d1_c0 * sp[11];
        sv4[48] = sv4[46] + sv4[47];
        sv4[49] = sv4[48] + sv4[48];
        sv4[50] = 2.0 * sv4[36] * (sv4[49] / 2);
        sv4[51] = sv4[50] * sp[18];
        sv4[52] = sv4[45] + sv4[51];
        sv4[53] = sv4[52] * (-1 * sp[17]);
        sv4[54] = w1_d1_c1 * sp[3];
        sv4[55] = w1_d0_c1 * sp[5];
        sv4[56] = sv4[54] + sv4[55];
        sv4[57] = sv4[56] + sv4[56];
        sv4[58] = 2.0 * sv4[36] * (sv4[57] / 2);
        sv4[59] = sv4[58] * sp[17];
        sv4[60] = sv4[44] * sp[18];
        sv4[61] = sv4[59] + sv4[60];
        sv4[62] = sv4[61] * sp[18];
        sv4[63] = sv4[53] + sv4[62];
        sv4[64] = sv4[63] * (-1 * sp[17]);
        sv4[65] = sv4[63] * sp[18];
        sv4[66] = w1_c0 + -1 * w[0][0];
        sv4[67] = sv4[66] * (-1 * sp[17]);
        sv4[68] = w1_c1 + -1 * w[0][1];
        sv4[69] = sv4[68] * sp[18];
        sv4[70] = sv4[67] + sv4[69];
        sv4[71] = 2.0 * sv4[36] * (sp[3] / 2);
        sv4[72] = 2.0 * sv4[36] * (sp[5] / 2);
        sv4[73] = 2.0 * sv4[36] * (sp[9] / 2);
        sv4[74] = 2.0 * sv4[36] * (sp[11] / 2);
        sv4[75] = sv4[71] * sp[17];
        sv4[76] = sv4[72] * sp[17];
        sv4[77] = sv4[73] * sp[17];
        sv4[78] = sv4[74] * sp[17];
        sv4[79] = 2.0 * sv4[36] * (sp[60] / 2);
        sv4[80] = 2.0 * sv4[36] * (sp[61] / 2);
        sv4[81] = sv4[79] * sp[18];
        sv4[82] = sv4[80] * sp[18];
        sv4[83] = sv4[75] + sv4[81];
        sv4[84] = sv4[76] + sv4[82];
        sv4[85] = sv4[83] * (-1 * sp[17]);
        sv4[86] = sv4[84] * (-1 * sp[17]);
        sv4[87] = -1 * sp[17] * sv4[77];
        sv4[88] = -1 * sp[17] * sv4[78];
        sv4[89] = 2.0 * sv4[36] * (sp[62] / 2);
        sv4[90] = 2.0 * sv4[36] * (sp[63] / 2);
        sv4[91] = sv4[89] * sp[17];
        sv4[92] = sv4[90] * sp[17];
        sv4[93] = sv4[71] * sp[18];
        sv4[94] = sv4[72] * sp[18];
        sv4[95] = sv4[73] * sp[18];
        sv4[96] = sv4[74] * sp[18];
        sv4[97] = sv4[91] + sv4[95];
        sv4[98] = sv4[92] + sv4[96];
        sv4[99] = sv4[93] * sp[18];
        sv4[100] = sv4[94] * sp[18];
        sv4[101] = sv4[97] * sp[18];
        sv4[102] = sv4[98] * sp[18];
        sv4[103] = sv4[85] + sv4[99];
        sv4[104] = sv4[86] + sv4[100];
        sv4[105] = sv4[87] + sv4[101];
        sv4[106] = sv4[88] + sv4[102];
        sv4[107] = sv4[70] * sv4[103];
        sv4[108] = sv4[70] * sv4[104];
        sv4[109] = sv4[70] * sv4[105];
        sv4[110] = sv4[70] * sv4[106];
        sv4[111] = 100000.0 * sv4[36] * (1.0 / (2.0 * sp[35]));
        sv4[112] = sv4[70] * sv4[111];
        sv4[113] = sv4[112] * (-1 * sp[17]);
        sv4[114] = sv4[112] * sp[18];
        sv4[115] = -1 * sv4[64] + sv4[113];
        sv4[116] = -1 * sv4[65] + sv4[114];
        sv4[117] = sv4[13] * sp[73];
        sv4[118] = sv4[30] * sp[73];
        sv4[119] = -1 * sv4[20] * sp[73];
        sv4[120] = -1 * sv4[21] * sp[73];
        sv4[121] = -1 * sv4[27] * sp[73];
        sv4[122] = -1 * sv4[28] * sp[73];
        sv4[123] = sv4[115] * sp[73];
        sv4[124] = sv4[116] * sp[73];
        sv4[125] = -1 * sv4[107] * sp[73];
        sv4[126] = -1 * sv4[108] * sp[73];
        sv4[127] = -1 * sv4[109] * sp[73];
        sv4[128] = -1 * sv4[110] * sp[73];
        const double fw0 = sv4[123] * weights4[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE35_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF0[i][j] += TF0[i] * FE37_C2_F_Q4[facet][iq][j];
        const double fw1 = sv4[126] * weights4[iq];
        alignas(32) double TF1[5];
        for (int i = 0; i < 5; ++i)
            TF1[i] = fw1 * FE35_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF1[i][j] += TF1[i] * FE37_C2_F_Q4[facet][iq][j];
        const double fw2 = sv4[125] * weights4[iq];
        alignas(32) double TF2[5];
        for (int i = 0; i < 5; ++i)
            TF2[i] = fw2 * FE35_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF2[i][j] += TF2[i] * FE37_C2_F_Q4[facet][iq][j];
        const double fw3 = sv4[124] * weights4[iq];
        alignas(32) double TF3[6];
        for (int i = 0; i < 6; ++i)
            TF3[i] = fw3 * FE35_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF3[i][j] += TF3[i] * FE37_C2_F_Q4[facet][iq][j];
        const double fw4 = sv4[127] * weights4[iq];
        alignas(32) double TF4[5];
        for (int i = 0; i < 5; ++i)
            TF4[i] = fw4 * FE35_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF4[i][j] += TF4[i] * FE37_C2_F_Q4[facet][iq][j];
        const double fw5 = sv4[128] * weights4[iq];
        alignas(32) double TF5[5];
        for (int i = 0; i < 5; ++i)
            TF5[i] = fw5 * FE35_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF5[i][j] += TF5[i] * FE37_C2_F_Q4[facet][iq][j];
        const double fw6 = sv4[120] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP0[j] += fw6 * FE37_C2_F_Q4[facet][iq][j];
        const double fw7 = sv4[118] * weights4[iq];
        alignas(32) double TF6[3];
        for (int i = 0; i < 3; ++i)
            TF6[i] = fw7 * FE37_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF6[i][j] += TF6[i] * FE37_C2_F_Q4[facet][iq][j];
        const double fw8 = sv4[119] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP1[j] += fw8 * FE37_C2_F_Q4[facet][iq][j];
        const double fw9 = sv4[122] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP2[j] += fw9 * FE37_C2_F_Q4[facet][iq][j];
        const double fw10 = sv4[117] * weights4[iq];
        alignas(32) double TF7[3];
        for (int i = 0; i < 3; ++i)
            TF7[i] = fw10 * FE37_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF7[i][j] += TF7[i] * FE37_C2_F_Q4[facet][iq][j];
        const double fw11 = sv4[121] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP3[j] += fw11 * FE37_C2_F_Q4[facet][iq][j];
    }
    std::fill(A, A + 63, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    static const int DM4[2] = { 15, 17 };
    static const int DM5[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * i + j] += BF0[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM0[i] + j] += BF1[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM1[i] + j] += BF2[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * (i + 6) + j] += BF3[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM2[i] + j] += BF4[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM3[i] + j] += BF5[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * (i + 15) + j] += FE37_C2_D01_F_Q4[0][0][i] * TP0[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * (i + 15) + j] += BF6[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM4[i] + j] += FE37_C2_D01_F_Q4[0][0][i] * TP1[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * (i + 18) + j] += FE37_C2_D01_F_Q4[0][0][i] * TP2[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * (i + 18) + j] += BF7[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM5[i] + j] += FE37_C2_D01_F_Q4[0][0][i] * TP3[j];
  }

};


class ranspseudotimestepping_cell_integral_9_otherwise: public ufc::cell_integral
{
public:

  ranspseudotimestepping_cell_integral_9_otherwise() : ufc::cell_integral()
  {

  }

  ~ranspseudotimestepping_cell_integral_9_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({false, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 312
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE118_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE118_C0_D02_Q12[1][1][3] = { { { 3.999999999999998, 4.000000000000004, -7.999999999999995 } } };
    alignas(32) static const double FE118_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE118_C0_D11_Q12[1][1][4] = { { { 4.0, 3.999999999999997, -3.999999999999997, -4.000000000000005 } } };
    alignas(32) static const double FE118_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803568, 0.2205142679699366 },
            { -0.05512856699248404, -0.05512856699248409, 0.6533077030470597, 0.2205142679699364, 0.2205142679699362, 0.01592089499803596 },
            { 0.6533077030470594, -0.05512856699248415, -0.05512856699248411, 0.01592089499803581, 0.2205142679699364, 0.2205142679699366 },
            { -0.1249989825350975, 0.001430579517788794, -0.1249989825350975, 0.4999959301403892, 0.2485755252716258, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788821, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880001, 0.173768363654174, -0.1177151633084292, 0.790160442765823, 0.06597478591860526, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880001, 0.1353078281686267, 0.06597478591860512, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860538 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880001, 0.06597478591860524, 0.1353078281686266, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860538 },
            { 0.1737683636541741, -0.04749625719880015, -0.1177151633084292, 0.06597478591860535, 0.7901604427658229, 0.1353078281686269 } } };
    alignas(32) static const double FE120_C2_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE120_C2_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE120_C2_D01_Q12[0][0][0] + coordinate_dofs[2] * FE120_C2_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE120_C2_D01_Q12[0][0][0] + coordinate_dofs[5] * FE120_C2_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE120_C2_D01_Q12[0][0][0] + coordinate_dofs[4] * FE120_C2_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE120_C2_D01_Q12[0][0][0] + coordinate_dofs[3] * FE120_C2_D01_Q12[0][0][1];
    const double w3_d1_c3 = w[3][15] * FE120_C2_D01_Q12[0][0][0] + w[3][17] * FE120_C2_D01_Q12[0][0][1];
    double w3_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c3 += w[3][ic + 15] * FE120_C2_D01_Q12[0][0][ic];
    const double w4_d1 = w[4][0] * FE120_C2_D01_Q12[0][0][0] + w[4][2] * FE120_C2_D01_Q12[0][0][1];
    double w4_d0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w4_d0 += w[4][ic] * FE120_C2_D01_Q12[0][0][ic];
    const double w2_d1_c3 = w[2][15] * FE120_C2_D01_Q12[0][0][0] + w[2][17] * FE120_C2_D01_Q12[0][0][1];
    double w2_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c3 += w[2][ic + 15] * FE120_C2_D01_Q12[0][0][ic];
    const double w2_d1_c4 = w[2][18] * FE120_C2_D01_Q12[0][0][0] + w[2][20] * FE120_C2_D01_Q12[0][0][1];
    double w2_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c4 += w[2][ic + 18] * FE120_C2_D01_Q12[0][0][ic];
    const double w1_d1_c3 = w[1][15] * FE120_C2_D01_Q12[0][0][0] + w[1][17] * FE120_C2_D01_Q12[0][0][1];
    double w1_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c3 += w[1][ic + 15] * FE120_C2_D01_Q12[0][0][ic];
    const double w1_d11_c1 = w[1][6] * FE118_C0_D02_Q12[0][0][0] + w[1][8] * FE118_C0_D02_Q12[0][0][1] + w[1][10] * FE118_C0_D02_Q12[0][0][2];
    const double w1_d01_c1 = w[1][6] * FE118_C0_D11_Q12[0][0][0] + w[1][9] * FE118_C0_D11_Q12[0][0][1] + w[1][10] * FE118_C0_D11_Q12[0][0][2] + w[1][11] * FE118_C0_D11_Q12[0][0][3];
    const double w1_d00_c1 = w[1][6] * FE118_C0_D02_Q12[0][0][0] + w[1][7] * FE118_C0_D02_Q12[0][0][1] + w[1][11] * FE118_C0_D02_Q12[0][0][2];
    const double w1_d01_c0 = w[1][0] * FE118_C0_D11_Q12[0][0][0] + w[1][3] * FE118_C0_D11_Q12[0][0][1] + w[1][4] * FE118_C0_D11_Q12[0][0][2] + w[1][5] * FE118_C0_D11_Q12[0][0][3];
    const double w1_d11_c0 = w[1][0] * FE118_C0_D02_Q12[0][0][0] + w[1][2] * FE118_C0_D02_Q12[0][0][1] + w[1][4] * FE118_C0_D02_Q12[0][0][2];
    const double w1_d00_c0 = w[1][0] * FE118_C0_D02_Q12[0][0][0] + w[1][1] * FE118_C0_D02_Q12[0][0][1] + w[1][5] * FE118_C0_D02_Q12[0][0][2];
    const double w1_d1_c2 = w[1][12] * FE120_C2_D01_Q12[0][0][0] + w[1][14] * FE120_C2_D01_Q12[0][0][1];
    double w1_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c2 += w[1][ic + 12] * FE120_C2_D01_Q12[0][0][ic];
    const double w3_d11_c1 = w[3][6] * FE118_C0_D02_Q12[0][0][0] + w[3][8] * FE118_C0_D02_Q12[0][0][1] + w[3][10] * FE118_C0_D02_Q12[0][0][2];
    const double w3_d01_c1 = w[3][6] * FE118_C0_D11_Q12[0][0][0] + w[3][9] * FE118_C0_D11_Q12[0][0][1] + w[3][10] * FE118_C0_D11_Q12[0][0][2] + w[3][11] * FE118_C0_D11_Q12[0][0][3];
    const double w3_d00_c1 = w[3][6] * FE118_C0_D02_Q12[0][0][0] + w[3][7] * FE118_C0_D02_Q12[0][0][1] + w[3][11] * FE118_C0_D02_Q12[0][0][2];
    const double w3_d01_c0 = w[3][0] * FE118_C0_D11_Q12[0][0][0] + w[3][3] * FE118_C0_D11_Q12[0][0][1] + w[3][4] * FE118_C0_D11_Q12[0][0][2] + w[3][5] * FE118_C0_D11_Q12[0][0][3];
    const double w3_d11_c0 = w[3][0] * FE118_C0_D02_Q12[0][0][0] + w[3][2] * FE118_C0_D02_Q12[0][0][1] + w[3][4] * FE118_C0_D02_Q12[0][0][2];
    const double w3_d00_c0 = w[3][0] * FE118_C0_D02_Q12[0][0][0] + w[3][1] * FE118_C0_D02_Q12[0][0][1] + w[3][5] * FE118_C0_D02_Q12[0][0][2];
    const double w3_d1_c2 = w[3][12] * FE120_C2_D01_Q12[0][0][0] + w[3][14] * FE120_C2_D01_Q12[0][0][1];
    double w3_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c2 += w[3][ic + 12] * FE120_C2_D01_Q12[0][0][ic];
    const double w3_d1_c4 = w[3][18] * FE120_C2_D01_Q12[0][0][0] + w[3][20] * FE120_C2_D01_Q12[0][0][1];
    double w3_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c4 += w[3][ic + 18] * FE120_C2_D01_Q12[0][0][ic];
    const double w1_d1_c4 = w[1][18] * FE120_C2_D01_Q12[0][0][0] + w[1][20] * FE120_C2_D01_Q12[0][0][1];
    double w1_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c4 += w[1][ic + 18] * FE120_C2_D01_Q12[0][0][ic];
    alignas(32) double sp[273];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = w3_d1_c3 * sp[3];
    sp[8] = w3_d0_c3 * sp[4];
    sp[9] = sp[7] + sp[8];
    sp[10] = w3_d0_c3 * sp[5];
    sp[11] = w3_d1_c3 * sp[6];
    sp[12] = sp[10] + sp[11];
    sp[13] = w4_d1 * sp[3];
    sp[14] = w4_d0 * sp[4];
    sp[15] = sp[13] + sp[14];
    sp[16] = w2_d1_c3 * sp[3];
    sp[17] = w2_d0_c3 * sp[4];
    sp[18] = sp[16] + sp[17];
    sp[19] = w2_d1_c4 * sp[3];
    sp[20] = w2_d0_c4 * sp[4];
    sp[21] = sp[19] + sp[20];
    sp[22] = w4_d0 * sp[5];
    sp[23] = w4_d1 * sp[6];
    sp[24] = sp[22] + sp[23];
    sp[25] = w2_d0_c3 * sp[5];
    sp[26] = w2_d1_c3 * sp[6];
    sp[27] = sp[25] + sp[26];
    sp[28] = w2_d0_c4 * sp[5];
    sp[29] = w2_d1_c4 * sp[6];
    sp[30] = sp[28] + sp[29];
    sp[31] = w1_d1_c3 * sp[3];
    sp[32] = w1_d0_c3 * sp[4];
    sp[33] = sp[31] + sp[32];
    sp[34] = w1_d0_c3 * sp[5];
    sp[35] = w1_d1_c3 * sp[6];
    sp[36] = sp[34] + sp[35];
    sp[37] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[38] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[39] = sp[37] + sp[38];
    sp[40] = std::sqrt(sp[39]);
    sp[41] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[42] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[43] = sp[41] + sp[42];
    sp[44] = std::sqrt(sp[43]);
    sp[45] = sp[40] * sp[44];
    sp[46] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[47] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[48] = sp[46] + sp[47];
    sp[49] = std::sqrt(sp[48]);
    sp[50] = sp[45] * sp[49];
    sp[51] = triangle_reference_cell_volume * sp[2];
    sp[52] = std::abs(sp[51]);
    sp[53] = sp[50] / (4.0 * sp[52]);
    sp[54] = sp[21] + sp[21];
    sp[55] = sp[30] + sp[30];
    sp[56] = sp[3] + sp[3];
    sp[57] = sp[4] + sp[4];
    sp[58] = sp[6] + sp[6];
    sp[59] = sp[5] + sp[5];
    sp[60] = sp[56] / 2 * (sp[56] / 2);
    sp[61] = sp[56] / 2 * (sp[57] / 2);
    sp[62] = sp[57] / 2 * (sp[57] / 2);
    sp[63] = sp[60] + sp[60];
    sp[64] = sp[61] + sp[61];
    sp[65] = sp[62] + sp[62];
    sp[66] = sp[3] / 2 * (sp[3] / 2);
    sp[67] = sp[3] / 2 * (sp[4] / 2);
    sp[68] = sp[3] / 2 * (sp[6] / 2);
    sp[69] = sp[3] / 2 * (sp[5] / 2);
    sp[70] = sp[4] / 2 * (sp[4] / 2);
    sp[71] = sp[4] / 2 * (sp[6] / 2);
    sp[72] = sp[5] / 2 * (sp[4] / 2);
    sp[73] = sp[6] / 2 * (sp[6] / 2);
    sp[74] = sp[5] / 2 * (sp[6] / 2);
    sp[75] = sp[5] / 2 * (sp[5] / 2);
    sp[76] = sp[66] + sp[66];
    sp[77] = sp[67] + sp[67];
    sp[78] = sp[68] + sp[68];
    sp[79] = sp[69] + sp[69];
    sp[80] = sp[70] + sp[70];
    sp[81] = sp[71] + sp[71];
    sp[82] = sp[72] + sp[72];
    sp[83] = sp[73] + sp[73];
    sp[84] = sp[74] + sp[74];
    sp[85] = sp[75] + sp[75];
    sp[86] = sp[63] + sp[83];
    sp[87] = sp[64] + sp[84];
    sp[88] = sp[65] + sp[85];
    sp[89] = sp[58] / 2 * (sp[58] / 2);
    sp[90] = sp[59] / 2 * (sp[58] / 2);
    sp[91] = sp[59] / 2 * (sp[59] / 2);
    sp[92] = sp[89] + sp[89];
    sp[93] = sp[90] + sp[90];
    sp[94] = sp[91] + sp[91];
    sp[95] = sp[92] + sp[76];
    sp[96] = sp[93] + sp[77];
    sp[97] = sp[94] + sp[80];
    sp[98] = sp[95] + sp[76];
    sp[99] = sp[96] + sp[77];
    sp[100] = sp[78] + sp[78];
    sp[101] = sp[79] + sp[79];
    sp[102] = sp[97] + sp[80];
    sp[103] = sp[81] + sp[81];
    sp[104] = sp[82] + sp[82];
    sp[105] = sp[86] + sp[83];
    sp[106] = sp[87] + sp[84];
    sp[107] = sp[88] + sp[85];
    sp[108] = sp[33] * sp[9];
    sp[109] = sp[9] * sp[36];
    sp[110] = sp[33] * sp[12];
    sp[111] = sp[36] * sp[12];
    sp[112] = sp[108] + sp[108];
    sp[113] = sp[109] + sp[110];
    sp[114] = sp[111] + sp[111];
    sp[115] = w1_d11_c1 * sp[3];
    sp[116] = w1_d01_c1 * sp[4];
    sp[117] = sp[115] + sp[116];
    sp[118] = sp[117] * sp[3];
    sp[119] = w1_d01_c1 * sp[3];
    sp[120] = w1_d00_c1 * sp[4];
    sp[121] = sp[119] + sp[120];
    sp[122] = sp[121] * sp[4];
    sp[123] = sp[118] + sp[122];
    sp[124] = sp[123] + sp[123];
    sp[125] = w1_d01_c0 * sp[5];
    sp[126] = w1_d11_c0 * sp[6];
    sp[127] = sp[125] + sp[126];
    sp[128] = sp[127] * sp[3];
    sp[129] = w1_d00_c0 * sp[5];
    sp[130] = w1_d01_c0 * sp[6];
    sp[131] = sp[129] + sp[130];
    sp[132] = sp[131] * sp[4];
    sp[133] = sp[128] + sp[132];
    sp[134] = w1_d00_c1 * sp[5];
    sp[135] = w1_d01_c1 * sp[6];
    sp[136] = sp[134] + sp[135];
    sp[137] = sp[136] * sp[5];
    sp[138] = w1_d01_c1 * sp[5];
    sp[139] = w1_d11_c1 * sp[6];
    sp[140] = sp[138] + sp[139];
    sp[141] = sp[140] * sp[6];
    sp[142] = sp[137] + sp[141];
    sp[143] = sp[133] + sp[142];
    sp[144] = w1_d1_c2 * sp[3];
    sp[145] = w1_d0_c2 * sp[4];
    sp[146] = sp[144] + sp[145];
    sp[147] = w3_d11_c1 * sp[3];
    sp[148] = w3_d01_c1 * sp[4];
    sp[149] = sp[147] + sp[148];
    sp[150] = sp[149] * sp[3];
    sp[151] = w3_d01_c1 * sp[3];
    sp[152] = w3_d00_c1 * sp[4];
    sp[153] = sp[151] + sp[152];
    sp[154] = sp[153] * sp[4];
    sp[155] = sp[150] + sp[154];
    sp[156] = sp[155] + sp[155];
    sp[157] = w3_d01_c0 * sp[5];
    sp[158] = w3_d11_c0 * sp[6];
    sp[159] = sp[157] + sp[158];
    sp[160] = sp[159] * sp[3];
    sp[161] = w3_d00_c0 * sp[5];
    sp[162] = w3_d01_c0 * sp[6];
    sp[163] = sp[161] + sp[162];
    sp[164] = sp[163] * sp[4];
    sp[165] = sp[160] + sp[164];
    sp[166] = w3_d00_c1 * sp[5];
    sp[167] = w3_d01_c1 * sp[6];
    sp[168] = sp[166] + sp[167];
    sp[169] = sp[168] * sp[5];
    sp[170] = w3_d01_c1 * sp[5];
    sp[171] = w3_d11_c1 * sp[6];
    sp[172] = sp[170] + sp[171];
    sp[173] = sp[172] * sp[6];
    sp[174] = sp[169] + sp[173];
    sp[175] = sp[165] + sp[174];
    sp[176] = w3_d1_c2 * sp[3];
    sp[177] = w3_d0_c2 * sp[4];
    sp[178] = sp[176] + sp[177];
    sp[179] = w1_d11_c0 * sp[3];
    sp[180] = w1_d01_c0 * sp[4];
    sp[181] = sp[179] + sp[180];
    sp[182] = sp[181] * sp[3];
    sp[183] = w1_d01_c0 * sp[3];
    sp[184] = w1_d00_c0 * sp[4];
    sp[185] = sp[183] + sp[184];
    sp[186] = sp[185] * sp[4];
    sp[187] = sp[182] + sp[186];
    sp[188] = sp[121] * sp[5];
    sp[189] = sp[117] * sp[6];
    sp[190] = sp[188] + sp[189];
    sp[191] = sp[187] + sp[190];
    sp[192] = sp[131] * sp[5];
    sp[193] = sp[127] * sp[6];
    sp[194] = sp[192] + sp[193];
    sp[195] = sp[194] + sp[194];
    sp[196] = w1_d0_c2 * sp[5];
    sp[197] = w1_d1_c2 * sp[6];
    sp[198] = sp[196] + sp[197];
    sp[199] = w3_d11_c0 * sp[3];
    sp[200] = w3_d01_c0 * sp[4];
    sp[201] = sp[199] + sp[200];
    sp[202] = sp[201] * sp[3];
    sp[203] = w3_d01_c0 * sp[3];
    sp[204] = w3_d00_c0 * sp[4];
    sp[205] = sp[203] + sp[204];
    sp[206] = sp[205] * sp[4];
    sp[207] = sp[202] + sp[206];
    sp[208] = sp[153] * sp[5];
    sp[209] = sp[149] * sp[6];
    sp[210] = sp[208] + sp[209];
    sp[211] = sp[207] + sp[210];
    sp[212] = sp[163] * sp[5];
    sp[213] = sp[159] * sp[6];
    sp[214] = sp[212] + sp[213];
    sp[215] = sp[214] + sp[214];
    sp[216] = w3_d0_c2 * sp[5];
    sp[217] = w3_d1_c2 * sp[6];
    sp[218] = sp[216] + sp[217];
    sp[219] = 2.0 * sp[53] * (2.0 * sp[53]);
    sp[220] = w3_d1_c4 * sp[3];
    sp[221] = w3_d0_c4 * sp[4];
    sp[222] = sp[220] + sp[221];
    sp[223] = w3_d0_c4 * sp[5];
    sp[224] = w3_d1_c4 * sp[6];
    sp[225] = sp[223] + sp[224];
    sp[226] = w1_d1_c4 * sp[3];
    sp[227] = w1_d0_c4 * sp[4];
    sp[228] = sp[226] + sp[227];
    sp[229] = w1_d0_c4 * sp[5];
    sp[230] = w1_d1_c4 * sp[6];
    sp[231] = sp[229] + sp[230];
    sp[232] = sp[228] * sp[222];
    sp[233] = sp[222] * sp[231];
    sp[234] = sp[228] * sp[225];
    sp[235] = sp[231] * sp[225];
    sp[236] = sp[232] + sp[232];
    sp[237] = sp[233] + sp[234];
    sp[238] = sp[235] + sp[235];
    sp[239] = sp[3] * sp[3];
    sp[240] = sp[3] * sp[4];
    sp[241] = sp[4] * sp[4];
    sp[242] = sp[240] + sp[240];
    sp[243] = sp[239] + sp[239];
    sp[244] = sp[242] + sp[242];
    sp[245] = sp[241] + sp[241];
    sp[246] = sp[3] * sp[5];
    sp[247] = sp[3] * sp[6];
    sp[248] = sp[4] * sp[6];
    sp[249] = sp[5] * sp[4];
    sp[250] = sp[246] + sp[248];
    sp[251] = sp[5] * sp[6];
    sp[252] = sp[5] * sp[5];
    sp[253] = sp[6] * sp[6];
    sp[254] = sp[251] + sp[251];
    sp[255] = sp[254] + sp[254];
    sp[256] = sp[253] + sp[253];
    sp[257] = sp[252] + sp[252];
    sp[258] = sp[108] + sp[111];
    sp[259] = sp[9] * sp[3];
    sp[260] = sp[9] * sp[4];
    sp[261] = sp[12] * sp[6];
    sp[262] = sp[12] * sp[5];
    sp[263] = sp[259] + sp[261];
    sp[264] = sp[262] + sp[260];
    sp[265] = sp[232] + sp[235];
    sp[266] = sp[222] * sp[3];
    sp[267] = sp[222] * sp[4];
    sp[268] = sp[225] * sp[6];
    sp[269] = sp[225] * sp[5];
    sp[270] = sp[266] + sp[268];
    sp[271] = sp[269] + sp[267];
    sp[272] = std::abs(sp[2]);
    alignas(32) double BF0[6][6] = {};
    alignas(32) double BF1[6][5] = {};
    alignas(32) double TP0[6] = {};
    alignas(32) double BF2[6][5] = {};
    alignas(32) double TP1[6] = {};
    alignas(32) double TP2[6] = {};
    alignas(32) double BF3[6][6] = {};
    alignas(32) double BF4[6][5] = {};
    alignas(32) double TP3[6] = {};
    alignas(32) double BF5[6][5] = {};
    alignas(32) double TP4[6] = {};
    alignas(32) double TP5[6] = {};
    alignas(32) double TP6[6] = {};
    alignas(32) double TP7[6] = {};
    alignas(32) double TP8[6] = {};
    alignas(32) double BF6[6][3] = {};
    alignas(32) double TP9[6] = {};
    alignas(32) double TP10[6] = {};
    alignas(32) double BF7[6][3] = {};
    alignas(32) double TP11[6] = {};
    alignas(32) double BF8[5][6] = {};
    alignas(32) double BF9[5][5] = {};
    alignas(32) double BF10[5][5] = {};
    alignas(32) double BF11[5][6] = {};
    alignas(32) double BF12[5][5] = {};
    alignas(32) double BF13[5][5] = {};
    alignas(32) double TP12[5] = {};
    alignas(32) double BF14[5][3] = {};
    alignas(32) double TP13[5] = {};
    alignas(32) double TP14[5] = {};
    alignas(32) double BF15[5][3] = {};
    alignas(32) double TP15[5] = {};
    alignas(32) double TP16[6] = {};
    alignas(32) double TP17[6] = {};
    alignas(32) double TP18[2] = {};
    alignas(32) double TP19[3] = {};
    alignas(32) double TP20[2] = {};
    alignas(32) double TP21[2] = {};
    alignas(32) double TP22[3] = {};
    alignas(32) double TP23[2] = {};
    alignas(32) double BF16[5][6] = {};
    alignas(32) double BF17[5][5] = {};
    alignas(32) double BF18[5][5] = {};
    alignas(32) double BF19[5][6] = {};
    alignas(32) double BF20[5][5] = {};
    alignas(32) double BF21[5][5] = {};
    alignas(32) double TP24[5] = {};
    alignas(32) double BF22[5][3] = {};
    alignas(32) double TP25[5] = {};
    alignas(32) double TP26[5] = {};
    alignas(32) double BF23[5][3] = {};
    alignas(32) double TP27[5] = {};
    alignas(32) double TP28[6] = {};
    alignas(32) double TP29[6] = {};
    alignas(32) double TP30[2] = {};
    alignas(32) double TP31[3] = {};
    alignas(32) double TP32[2] = {};
    alignas(32) double TP33[2] = {};
    alignas(32) double TP34[3] = {};
    alignas(32) double TP35[2] = {};
    alignas(32) double TP36[6] = {};
    alignas(32) double TP37[6] = {};
    alignas(32) double TP38[2] = {};
    alignas(32) double TP39[3] = {};
    alignas(32) double TP40[2] = {};
    alignas(32) double TP41[2] = {};
    alignas(32) double TP42[3] = {};
    alignas(32) double TP43[2] = {};
    alignas(32) double BF24[6][6] = {};
    alignas(32) double BF25[6][5] = {};
    alignas(32) double TP44[6] = {};
    alignas(32) double BF26[6][5] = {};
    alignas(32) double TP45[6] = {};
    alignas(32) double TP46[6] = {};
    alignas(32) double BF27[6][6] = {};
    alignas(32) double BF28[6][5] = {};
    alignas(32) double TP47[6] = {};
    alignas(32) double BF29[6][5] = {};
    alignas(32) double TP48[6] = {};
    alignas(32) double TP49[6] = {};
    alignas(32) double TP50[6] = {};
    alignas(32) double TP51[6] = {};
    alignas(32) double TP52[6] = {};
    alignas(32) double BF30[6][3] = {};
    alignas(32) double TP53[6] = {};
    alignas(32) double TP54[6] = {};
    alignas(32) double BF31[6][3] = {};
    alignas(32) double TP55[6] = {};
    alignas(32) double BF32[5][6] = {};
    alignas(32) double BF33[5][5] = {};
    alignas(32) double BF34[5][6] = {};
    alignas(32) double BF35[5][5] = {};
    alignas(32) double BF36[5][5] = {};
    alignas(32) double TP56[5] = {};
    alignas(32) double BF37[5][3] = {};
    alignas(32) double TP57[5] = {};
    alignas(32) double TP58[5] = {};
    alignas(32) double BF38[5][3] = {};
    alignas(32) double TP59[5] = {};
    alignas(32) double TP60[6] = {};
    alignas(32) double TP61[6] = {};
    alignas(32) double TP62[2] = {};
    alignas(32) double TP63[3] = {};
    alignas(32) double TP64[2] = {};
    alignas(32) double TP65[2] = {};
    alignas(32) double TP66[3] = {};
    alignas(32) double TP67[2] = {};
    alignas(32) double BF39[5][6] = {};
    alignas(32) double BF40[5][5] = {};
    alignas(32) double BF41[5][6] = {};
    alignas(32) double BF42[5][5] = {};
    alignas(32) double BF43[5][5] = {};
    alignas(32) double TP68[5] = {};
    alignas(32) double BF44[5][3] = {};
    alignas(32) double TP69[5] = {};
    alignas(32) double TP70[5] = {};
    alignas(32) double BF45[5][3] = {};
    alignas(32) double TP71[5] = {};
    alignas(32) double TP72[6] = {};
    alignas(32) double TP73[6] = {};
    alignas(32) double TP74[2] = {};
    alignas(32) double TP75[3] = {};
    alignas(32) double TP76[2] = {};
    alignas(32) double TP77[2] = {};
    alignas(32) double TP78[3] = {};
    alignas(32) double TP79[2] = {};
    alignas(32) double TP80[6] = {};
    alignas(32) double TP81[6] = {};
    alignas(32) double TP82[2] = {};
    alignas(32) double TP83[3] = {};
    alignas(32) double TP84[2] = {};
    alignas(32) double TP85[2] = {};
    alignas(32) double TP86[3] = {};
    alignas(32) double TP87[2] = {};
    alignas(32) double TP88[6] = {};
    alignas(32) double TP89[6] = {};
    alignas(32) double TP90[2] = {};
    alignas(32) double TP91[3] = {};
    alignas(32) double TP92[2] = {};
    alignas(32) double TP93[2] = {};
    alignas(32) double TP94[3] = {};
    alignas(32) double TP95[2] = {};
    alignas(32) double TP96[6] = {};
    alignas(32) double TP97[6] = {};
    alignas(32) double TP98[2] = {};
    alignas(32) double TP99[3] = {};
    alignas(32) double TP100[2] = {};
    alignas(32) double TP101[2] = {};
    alignas(32) double TP102[3] = {};
    alignas(32) double TP103[2] = {};
    alignas(32) double TP104[6] = {};
    alignas(32) double TP105[5] = {};
    alignas(32) double TP106[3] = {};
    alignas(32) double TP107[5] = {};
    alignas(32) double TP108[3] = {};
    alignas(32) double TP109[4] = {};
    alignas(32) double TP110[6] = {};
    alignas(32) double TP111[5] = {};
    alignas(32) double TP112[3] = {};
    alignas(32) double TP113[5] = {};
    alignas(32) double TP114[3] = {};
    alignas(32) double TP115[4] = {};
    alignas(32) double TP116[2] = {};
    alignas(32) double TP117[3] = {};
    alignas(32) double TP118[2] = {};
    alignas(32) double TP119[2] = {};
    alignas(32) double TP120[3] = {};
    alignas(32) double TP121[2] = {};
    alignas(32) double BF46[3][6] = {};
    alignas(32) double BF47[3][5] = {};
    alignas(32) double TP122[3] = {};
    alignas(32) double BF48[3][5] = {};
    alignas(32) double TP123[3] = {};
    alignas(32) double TP124[3] = {};
    alignas(32) double BF49[3][6] = {};
    alignas(32) double BF50[3][5] = {};
    alignas(32) double TP125[3] = {};
    alignas(32) double BF51[3][5] = {};
    alignas(32) double TP126[3] = {};
    alignas(32) double TP127[3] = {};
    alignas(32) double TP128[3] = {};
    alignas(32) double TP129[3] = {};
    alignas(32) double TP130[3] = {};
    alignas(32) double BF52[3][3] = {};
    alignas(32) double TP131[3] = {};
    alignas(32) double TP132[3] = {};
    alignas(32) double BF53[3][3] = {};
    alignas(32) double TP133[3] = {};
    alignas(32) double TP134[6] = {};
    alignas(32) double TP135[5] = {};
    alignas(32) double TP136[3] = {};
    alignas(32) double TP137[5] = {};
    alignas(32) double TP138[3] = {};
    alignas(32) double TP139[4] = {};
    alignas(32) double TP140[6] = {};
    alignas(32) double TP141[5] = {};
    alignas(32) double TP142[3] = {};
    alignas(32) double TP143[5] = {};
    alignas(32) double TP144[3] = {};
    alignas(32) double TP145[4] = {};
    alignas(32) double TP146[2] = {};
    alignas(32) double TP147[3] = {};
    alignas(32) double TP148[2] = {};
    alignas(32) double TP149[2] = {};
    alignas(32) double TP150[3] = {};
    alignas(32) double TP151[2] = {};
    alignas(32) double TP152[6] = {};
    alignas(32) double TP153[5] = {};
    alignas(32) double TP154[3] = {};
    alignas(32) double TP155[5] = {};
    alignas(32) double TP156[3] = {};
    alignas(32) double TP157[4] = {};
    alignas(32) double TP158[6] = {};
    alignas(32) double TP159[5] = {};
    alignas(32) double TP160[3] = {};
    alignas(32) double TP161[5] = {};
    alignas(32) double TP162[3] = {};
    alignas(32) double TP163[4] = {};
    alignas(32) double TP164[2] = {};
    alignas(32) double TP165[3] = {};
    alignas(32) double TP166[2] = {};
    alignas(32) double TP167[2] = {};
    alignas(32) double TP168[3] = {};
    alignas(32) double TP169[2] = {};
    alignas(32) double BF54[3][6] = {};
    alignas(32) double BF55[3][5] = {};
    alignas(32) double TP170[3] = {};
    alignas(32) double BF56[3][5] = {};
    alignas(32) double TP171[3] = {};
    alignas(32) double TP172[3] = {};
    alignas(32) double BF57[3][6] = {};
    alignas(32) double BF58[3][5] = {};
    alignas(32) double TP173[3] = {};
    alignas(32) double BF59[3][5] = {};
    alignas(32) double TP174[3] = {};
    alignas(32) double TP175[3] = {};
    alignas(32) double TP176[3] = {};
    alignas(32) double TP177[3] = {};
    alignas(32) double TP178[3] = {};
    alignas(32) double BF60[3][3] = {};
    alignas(32) double TP179[3] = {};
    alignas(32) double TP180[3] = {};
    alignas(32) double BF61[3][3] = {};
    alignas(32) double TP181[3] = {};
    alignas(32) double TP182[6] = {};
    alignas(32) double TP183[5] = {};
    alignas(32) double TP184[3] = {};
    alignas(32) double TP185[5] = {};
    alignas(32) double TP186[3] = {};
    alignas(32) double TP187[4] = {};
    alignas(32) double TP188[6] = {};
    alignas(32) double TP189[5] = {};
    alignas(32) double TP190[3] = {};
    alignas(32) double TP191[5] = {};
    alignas(32) double TP192[3] = {};
    alignas(32) double TP193[4] = {};
    alignas(32) double TP194[2] = {};
    alignas(32) double TP195[3] = {};
    alignas(32) double TP196[2] = {};
    alignas(32) double TP197[2] = {};
    alignas(32) double TP198[3] = {};
    alignas(32) double TP199[2] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c0 += w[3][ic] * FE118_C0_Q12[0][iq][ic];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c1 += w[3][ic + 6] * FE118_C0_Q12[0][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE118_C0_Q12[0][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE118_C0_Q12[0][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE120_C2_Q12[0][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4 += w[4][ic] * FE120_C2_Q12[0][iq][ic];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE120_C2_Q12[0][iq][ic];
        const double w2_d1_c1 = w[2][6] * FE118_C0_D01_Q12[0][iq][0] + w[2][8] * FE118_C0_D01_Q12[0][iq][1] + w[2][9] * FE118_C0_D01_Q12[0][iq][2] + w[2][10] * FE118_C0_D01_Q12[0][iq][3] + w[2][11] * FE118_C0_D01_Q12[0][iq][4];
        const double w2_d0_c1 = w[2][6] * FE118_C0_D10_Q12[0][iq][0] + w[2][7] * FE118_C0_D10_Q12[0][iq][1] + w[2][9] * FE118_C0_D10_Q12[0][iq][2] + w[2][10] * FE118_C0_D10_Q12[0][iq][3] + w[2][11] * FE118_C0_D10_Q12[0][iq][4];
        const double w2_d1_c0 = w[2][0] * FE118_C0_D01_Q12[0][iq][0] + w[2][2] * FE118_C0_D01_Q12[0][iq][1] + w[2][3] * FE118_C0_D01_Q12[0][iq][2] + w[2][4] * FE118_C0_D01_Q12[0][iq][3] + w[2][5] * FE118_C0_D01_Q12[0][iq][4];
        const double w2_d0_c0 = w[2][0] * FE118_C0_D10_Q12[0][iq][0] + w[2][1] * FE118_C0_D10_Q12[0][iq][1] + w[2][3] * FE118_C0_D10_Q12[0][iq][2] + w[2][4] * FE118_C0_D10_Q12[0][iq][3] + w[2][5] * FE118_C0_D10_Q12[0][iq][4];
        const double w1_d1_c1 = w[1][6] * FE118_C0_D01_Q12[0][iq][0] + w[1][8] * FE118_C0_D01_Q12[0][iq][1] + w[1][9] * FE118_C0_D01_Q12[0][iq][2] + w[1][10] * FE118_C0_D01_Q12[0][iq][3] + w[1][11] * FE118_C0_D01_Q12[0][iq][4];
        const double w1_d0_c1 = w[1][6] * FE118_C0_D10_Q12[0][iq][0] + w[1][7] * FE118_C0_D10_Q12[0][iq][1] + w[1][9] * FE118_C0_D10_Q12[0][iq][2] + w[1][10] * FE118_C0_D10_Q12[0][iq][3] + w[1][11] * FE118_C0_D10_Q12[0][iq][4];
        const double w1_d1_c0 = w[1][0] * FE118_C0_D01_Q12[0][iq][0] + w[1][2] * FE118_C0_D01_Q12[0][iq][1] + w[1][3] * FE118_C0_D01_Q12[0][iq][2] + w[1][4] * FE118_C0_D01_Q12[0][iq][3] + w[1][5] * FE118_C0_D01_Q12[0][iq][4];
        const double w1_d0_c0 = w[1][0] * FE118_C0_D10_Q12[0][iq][0] + w[1][1] * FE118_C0_D10_Q12[0][iq][1] + w[1][3] * FE118_C0_D10_Q12[0][iq][2] + w[1][4] * FE118_C0_D10_Q12[0][iq][3] + w[1][5] * FE118_C0_D10_Q12[0][iq][4];
        const double w3_d1_c1 = w[3][6] * FE118_C0_D01_Q12[0][iq][0] + w[3][8] * FE118_C0_D01_Q12[0][iq][1] + w[3][9] * FE118_C0_D01_Q12[0][iq][2] + w[3][10] * FE118_C0_D01_Q12[0][iq][3] + w[3][11] * FE118_C0_D01_Q12[0][iq][4];
        const double w3_d0_c1 = w[3][6] * FE118_C0_D10_Q12[0][iq][0] + w[3][7] * FE118_C0_D10_Q12[0][iq][1] + w[3][9] * FE118_C0_D10_Q12[0][iq][2] + w[3][10] * FE118_C0_D10_Q12[0][iq][3] + w[3][11] * FE118_C0_D10_Q12[0][iq][4];
        const double w3_d1_c0 = w[3][0] * FE118_C0_D01_Q12[0][iq][0] + w[3][2] * FE118_C0_D01_Q12[0][iq][1] + w[3][3] * FE118_C0_D01_Q12[0][iq][2] + w[3][4] * FE118_C0_D01_Q12[0][iq][3] + w[3][5] * FE118_C0_D01_Q12[0][iq][4];
        const double w3_d0_c0 = w[3][0] * FE118_C0_D10_Q12[0][iq][0] + w[3][1] * FE118_C0_D10_Q12[0][iq][1] + w[3][3] * FE118_C0_D10_Q12[0][iq][2] + w[3][4] * FE118_C0_D10_Q12[0][iq][3] + w[3][5] * FE118_C0_D10_Q12[0][iq][4];
        double w3_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c4 += w[3][ic + 18] * FE120_C2_Q12[0][iq][ic];
        double w1_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c4 += w[1][ic + 18] * FE120_C2_Q12[0][iq][ic];
        double w1_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c3 += w[1][ic + 15] * FE120_C2_Q12[0][iq][ic];
        double w3_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c3 += w[3][ic + 15] * FE120_C2_Q12[0][iq][ic];
        alignas(32) double sv12[5488];
        sv12[0] = w3_c0 * sp[3];
        sv12[1] = w3_c0 * sp[4];
        sv12[2] = w3_c0 * sp[6];
        sv12[3] = w3_c0 * sp[5];
        sv12[4] = w3_c1 * sp[3];
        sv12[5] = w3_c1 * sp[4];
        sv12[6] = w3_c1 * sp[6];
        sv12[7] = w3_c1 * sp[5];
        sv12[8] = w2_c1 * sp[9];
        sv12[9] = w2_c0 * sp[12];
        sv12[10] = sv12[8] + sv12[9];
        sv12[11] = std::exp(w4);
        sv12[12] = sp[15] * sv12[11];
        sv12[13] = w2_c3 * (0.09 * sv12[12]);
        sv12[14] = sp[18] * (0.09 * sv12[11]);
        sv12[15] = sv12[13] + sv12[14];
        sv12[16] = w2_c3 * sv12[15];
        sv12[17] = w2_c3 * (0.09 * sv12[11]);
        sv12[18] = sp[18] * sv12[17];
        sv12[19] = sv12[16] + sv12[18];
        sv12[20] = w2_c4 * sp[21];
        sv12[21] = sv12[20] + sv12[20];
        sv12[22] = w2_c4 * w2_c4;
        sv12[23] = std::sqrt(1e-8 + sv12[22]);
        sv12[24] = sv12[21] / (2 * sv12[23]);
        sv12[25] = sp[21] + sv12[24];
        sv12[26] = w2_c3 * sv12[17];
        sv12[27] = w2_c4 + sv12[23];
        sv12[28] = sv12[26] / (0.5 * sv12[27]);
        sv12[29] = 0.5 * sv12[25] * sv12[28];
        sv12[30] = sv12[19] + -1 * sv12[29];
        sv12[31] = sv12[30] / (0.5 * sv12[27]);
        sv12[32] = sp[9] * sv12[31];
        sv12[33] = sp[24] * sv12[11];
        sv12[34] = w2_c3 * (0.09 * sv12[33]);
        sv12[35] = sp[27] * (0.09 * sv12[11]);
        sv12[36] = sv12[34] + sv12[35];
        sv12[37] = w2_c3 * sv12[36];
        sv12[38] = sp[27] * sv12[17];
        sv12[39] = sv12[37] + sv12[38];
        sv12[40] = w2_c4 * sp[30];
        sv12[41] = sv12[40] + sv12[40];
        sv12[42] = sv12[41] / (2 * sv12[23]);
        sv12[43] = sp[30] + sv12[42];
        sv12[44] = 0.5 * sv12[43] * sv12[28];
        sv12[45] = sv12[39] + -1 * sv12[44];
        sv12[46] = sv12[45] / (0.5 * sv12[27]);
        sv12[47] = sp[12] * sv12[46];
        sv12[48] = sv12[32] + sv12[47];
        sv12[49] = sv12[10] + -1 * sv12[48];
        sv12[50] = w2_c1 * sp[33];
        sv12[51] = w2_c0 * sp[36];
        sv12[52] = sv12[50] + sv12[51];
        sv12[53] = sp[33] * sv12[31];
        sv12[54] = sp[36] * sv12[46];
        sv12[55] = sv12[53] + sv12[54];
        sv12[56] = sv12[52] + -1 * sv12[55];
        sv12[57] = w2_c4 + sv12[56];
        sv12[58] = w2_d1_c1 * sp[3];
        sv12[59] = w2_d0_c1 * sp[4];
        sv12[60] = sv12[58] + sv12[59];
        sv12[61] = sv12[60] + sv12[60];
        sv12[62] = sv12[61] / 2 * (sv12[61] / 2);
        sv12[63] = w2_d1_c0 * sp[3];
        sv12[64] = w2_d0_c0 * sp[4];
        sv12[65] = sv12[63] + sv12[64];
        sv12[66] = w2_d0_c1 * sp[5];
        sv12[67] = w2_d1_c1 * sp[6];
        sv12[68] = sv12[66] + sv12[67];
        sv12[69] = sv12[65] + sv12[68];
        sv12[70] = sv12[69] / 2 * (sv12[69] / 2);
        sv12[71] = sv12[62] + sv12[70];
        sv12[72] = w2_d0_c0 * sp[5];
        sv12[73] = w2_d1_c0 * sp[6];
        sv12[74] = sv12[72] + sv12[73];
        sv12[75] = sv12[74] + sv12[74];
        sv12[76] = sv12[75] / 2 * (sv12[75] / 2);
        sv12[77] = sv12[76] + sv12[70];
        sv12[78] = sv12[71] + sv12[77];
        sv12[79] = 2.0 * sv12[78] * sv12[28];
        sv12[80] = sv12[57] + -1 * sv12[79];
        sv12[81] = sv12[49] * sv12[80];
        sv12[82] = w2_c0 * w2_c0;
        sv12[83] = w2_c1 * w2_c1;
        sv12[84] = sv12[82] + sv12[83];
        sv12[85] = std::sqrt(sv12[84]);
        sv12[86] = 0.5 * (2.0 * sp[53]) * sv12[85];
        sv12[87] = sv12[86] / (0.0001 + sv12[28]);
        sv12[88] = w2_c0 + w2_c0;
        sv12[89] = w2_c1 + w2_c1;
        sv12[90] = sv12[89] / (2 * sv12[85]);
        sv12[91] = sv12[88] / (2 * sv12[85]);
        sv12[92] = sv12[17] + sv12[17];
        sv12[93] = w2_c4 + w2_c4;
        sv12[94] = sv12[93] / (2 * sv12[23]);
        sv12[95] = 0.5 * (1.0 + sv12[94]) * sv12[28];
        sv12[96] = sv12[92] / (0.5 * sv12[27]);
        sv12[97] = -1 * sv12[95] / (0.5 * sv12[27]);
        sv12[98] = sv12[87] * sv12[96];
        sv12[99] = sv12[87] * sv12[97];
        sv12[100] = 0.5 * (2.0 * sp[53]) * sv12[90];
        sv12[101] = 0.5 * (2.0 * sp[53]) * sv12[91];
        sv12[102] = sv12[100] / (0.0001 + sv12[28]);
        sv12[103] = sv12[101] / (0.0001 + sv12[28]);
        sv12[104] = -1 * sv12[98] / (0.0001 + sv12[28]);
        sv12[105] = -1 * sv12[99] / (0.0001 + sv12[28]);
        sv12[106] = sv12[102] * (1.0 / sv12[87]);
        sv12[107] = sv12[103] * (1.0 / sv12[87]);
        sv12[108] = sv12[104] * (1.0 / sv12[87]);
        sv12[109] = sv12[105] * (1.0 / sv12[87]);
        sv12[110] = -1 * sv12[106] / sv12[87];
        sv12[111] = -1 * sv12[107] / sv12[87];
        sv12[112] = -1 * sv12[108] / sv12[87];
        sv12[113] = -1 * sv12[109] / sv12[87];
        sv12[114] = std::exp(-2.0 * sv12[87]);
        sv12[115] = -2.0 * sv12[102] * sv12[114];
        sv12[116] = -2.0 * sv12[103] * sv12[114];
        sv12[117] = -2.0 * sv12[104] * sv12[114];
        sv12[118] = -2.0 * sv12[105] * sv12[114];
        sv12[119] = (1.0 + sv12[114]) / (1.0 + -1 * sv12[114]);
        sv12[120] = -1 * sv12[115] * sv12[119];
        sv12[121] = -1 * sv12[116] * sv12[119];
        sv12[122] = -1 * sv12[117] * sv12[119];
        sv12[123] = -1 * sv12[118] * sv12[119];
        sv12[124] = -1 * sv12[120] + sv12[115];
        sv12[125] = -1 * sv12[121] + sv12[116];
        sv12[126] = -1 * sv12[122] + sv12[117];
        sv12[127] = -1 * sv12[123] + sv12[118];
        sv12[128] = sv12[124] / (1.0 + -1 * sv12[114]);
        sv12[129] = sv12[125] / (1.0 + -1 * sv12[114]);
        sv12[130] = sv12[126] / (1.0 + -1 * sv12[114]);
        sv12[131] = sv12[127] / (1.0 + -1 * sv12[114]);
        sv12[132] = -1 * sv12[110] + sv12[128];
        sv12[133] = -1 * sv12[111] + sv12[129];
        sv12[134] = -1 * sv12[112] + sv12[130];
        sv12[135] = -1 * sv12[113] + sv12[131];
        sv12[136] = sv12[132] * (2.0 * sp[53]);
        sv12[137] = sv12[133] * (2.0 * sp[53]);
        sv12[138] = sv12[134] * (2.0 * sp[53]);
        sv12[139] = sv12[135] * (2.0 * sp[53]);
        sv12[140] = -1 * (1.0 / sv12[87]) + sv12[119];
        sv12[141] = sv12[140] * (2.0 * sp[53]);
        sv12[142] = sv12[141] / sv12[85];
        sv12[143] = sv12[90] * sv12[142];
        sv12[144] = sv12[91] * sv12[142];
        sv12[145] = sv12[136] + -1 * sv12[143];
        sv12[146] = sv12[137] + -1 * sv12[144];
        sv12[147] = sv12[145] / sv12[85];
        sv12[148] = sv12[146] / sv12[85];
        sv12[149] = sv12[138] / sv12[85];
        sv12[150] = sv12[139] / sv12[85];
        sv12[151] = sv12[90] * sv12[147];
        sv12[152] = sv12[90] * sv12[148];
        sv12[153] = sv12[90] * sv12[149];
        sv12[154] = sv12[90] * sv12[150];
        sv12[155] = sv12[91] * sv12[147];
        sv12[156] = sv12[91] * sv12[148];
        sv12[157] = sv12[91] * sv12[149];
        sv12[158] = sv12[91] * sv12[150];
        sv12[159] = 2 * sv12[90] * sv12[90];
        sv12[160] = 2 * sv12[90] * sv12[91];
        sv12[161] = 2 * sv12[91] * sv12[90];
        sv12[162] = 2 * sv12[91] * sv12[91];
        sv12[163] = (2.0 + -1 * sv12[159]) / (2 * sv12[85]);
        sv12[164] = -1 * sv12[160] / (2 * sv12[85]);
        sv12[165] = -1 * sv12[161] / (2 * sv12[85]);
        sv12[166] = (2.0 + -1 * sv12[162]) / (2 * sv12[85]);
        sv12[167] = sv12[163] * sv12[142];
        sv12[168] = sv12[164] * sv12[142];
        sv12[169] = sv12[165] * sv12[142];
        sv12[170] = sv12[166] * sv12[142];
        sv12[171] = sv12[151] + sv12[167];
        sv12[172] = sv12[155] + sv12[168];
        sv12[173] = sv12[152] + sv12[169];
        sv12[174] = sv12[156] + sv12[170];
        sv12[175] = 0.09 * sv12[11] + 0.09 * sv12[11];
        sv12[176] = 0.5 * (1.0 + sv12[94]) * sv12[96];
        sv12[177] = 0.5 * (1.0 + sv12[94]) * sv12[97];
        sv12[178] = 2 * sv12[94] * sv12[94];
        sv12[179] = (2.0 + -1 * sv12[178]) / (2 * sv12[23]);
        sv12[180] = 0.5 * sv12[179] * sv12[28];
        sv12[181] = sv12[180] + sv12[177];
        sv12[182] = -1 * sv12[181] + -1 * sv12[177];
        sv12[183] = sv12[175] / (0.5 * sv12[27]);
        sv12[184] = -1 * sv12[176] / (0.5 * sv12[27]);
        sv12[185] = sv12[182] / (0.5 * sv12[27]);
        sv12[186] = sv12[87] * sv12[183];
        sv12[187] = sv12[87] * sv12[184];
        sv12[188] = sv12[87] * sv12[185];
        sv12[189] = sv12[102] * sv12[96];
        sv12[190] = sv12[102] * sv12[97];
        sv12[191] = sv12[103] * sv12[96];
        sv12[192] = sv12[103] * sv12[97];
        sv12[193] = sv12[104] * sv12[96];
        sv12[194] = sv12[104] * sv12[97];
        sv12[195] = sv12[105] * sv12[96];
        sv12[196] = sv12[105] * sv12[97];
        sv12[197] = sv12[193] + sv12[186];
        sv12[198] = sv12[187] + sv12[194];
        sv12[199] = sv12[195] + sv12[187];
        sv12[200] = sv12[188] + sv12[196];
        sv12[201] = 0.5 * (2.0 * sp[53]) * sv12[163];
        sv12[202] = 0.5 * (2.0 * sp[53]) * sv12[164];
        sv12[203] = 0.5 * (2.0 * sp[53]) * sv12[165];
        sv12[204] = 0.5 * (2.0 * sp[53]) * sv12[166];
        sv12[205] = -1 * sv12[197] + -1 * sv12[193];
        sv12[206] = -1 * sv12[198] + -1 * sv12[195];
        sv12[207] = -1 * sv12[199] + -1 * sv12[194];
        sv12[208] = -1 * sv12[200] + -1 * sv12[196];
        sv12[209] = sv12[201] / (0.0001 + sv12[28]);
        sv12[210] = sv12[202] / (0.0001 + sv12[28]);
        sv12[211] = -1 * sv12[189] / (0.0001 + sv12[28]);
        sv12[212] = -1 * sv12[190] / (0.0001 + sv12[28]);
        sv12[213] = sv12[203] / (0.0001 + sv12[28]);
        sv12[214] = sv12[204] / (0.0001 + sv12[28]);
        sv12[215] = -1 * sv12[191] / (0.0001 + sv12[28]);
        sv12[216] = -1 * sv12[192] / (0.0001 + sv12[28]);
        sv12[217] = sv12[205] / (0.0001 + sv12[28]);
        sv12[218] = sv12[206] / (0.0001 + sv12[28]);
        sv12[219] = sv12[207] / (0.0001 + sv12[28]);
        sv12[220] = sv12[208] / (0.0001 + sv12[28]);
        sv12[221] = sv12[209] * (1.0 / sv12[87]);
        sv12[222] = sv12[210] * (1.0 / sv12[87]);
        sv12[223] = sv12[211] * (1.0 / sv12[87]);
        sv12[224] = sv12[212] * (1.0 / sv12[87]);
        sv12[225] = sv12[213] * (1.0 / sv12[87]);
        sv12[226] = sv12[214] * (1.0 / sv12[87]);
        sv12[227] = sv12[215] * (1.0 / sv12[87]);
        sv12[228] = sv12[216] * (1.0 / sv12[87]);
        sv12[229] = sv12[217] * (1.0 / sv12[87]);
        sv12[230] = sv12[218] * (1.0 / sv12[87]);
        sv12[231] = sv12[219] * (1.0 / sv12[87]);
        sv12[232] = sv12[220] * (1.0 / sv12[87]);
        sv12[233] = sv12[102] * sv12[110];
        sv12[234] = sv12[102] * sv12[111];
        sv12[235] = sv12[102] * sv12[112];
        sv12[236] = sv12[102] * sv12[113];
        sv12[237] = sv12[103] * sv12[110];
        sv12[238] = sv12[103] * sv12[111];
        sv12[239] = sv12[103] * sv12[112];
        sv12[240] = sv12[103] * sv12[113];
        sv12[241] = sv12[104] * sv12[110];
        sv12[242] = sv12[104] * sv12[111];
        sv12[243] = sv12[104] * sv12[112];
        sv12[244] = sv12[104] * sv12[113];
        sv12[245] = sv12[105] * sv12[110];
        sv12[246] = sv12[105] * sv12[111];
        sv12[247] = sv12[105] * sv12[112];
        sv12[248] = sv12[105] * sv12[113];
        sv12[249] = sv12[221] + sv12[233];
        sv12[250] = sv12[222] + sv12[237];
        sv12[251] = sv12[223] + sv12[241];
        sv12[252] = sv12[224] + sv12[245];
        sv12[253] = sv12[225] + sv12[234];
        sv12[254] = sv12[223] + sv12[235];
        sv12[255] = sv12[224] + sv12[236];
        sv12[256] = sv12[226] + sv12[238];
        sv12[257] = sv12[227] + sv12[242];
        sv12[258] = sv12[228] + sv12[246];
        sv12[259] = sv12[227] + sv12[239];
        sv12[260] = sv12[228] + sv12[240];
        sv12[261] = sv12[229] + sv12[243];
        sv12[262] = sv12[230] + sv12[247];
        sv12[263] = sv12[231] + sv12[244];
        sv12[264] = sv12[232] + sv12[248];
        sv12[265] = -1 * sv12[249] + -1 * sv12[233];
        sv12[266] = -1 * sv12[250] + -1 * sv12[234];
        sv12[267] = -1 * sv12[251] + -1 * sv12[235];
        sv12[268] = -1 * sv12[252] + -1 * sv12[236];
        sv12[269] = -1 * sv12[253] + -1 * sv12[237];
        sv12[270] = -1 * sv12[254] + -1 * sv12[241];
        sv12[271] = -1 * sv12[255] + -1 * sv12[245];
        sv12[272] = -1 * sv12[256] + -1 * sv12[238];
        sv12[273] = -1 * sv12[257] + -1 * sv12[239];
        sv12[274] = -1 * sv12[258] + -1 * sv12[240];
        sv12[275] = -1 * sv12[259] + -1 * sv12[242];
        sv12[276] = -1 * sv12[260] + -1 * sv12[246];
        sv12[277] = -1 * sv12[261] + -1 * sv12[243];
        sv12[278] = -1 * sv12[262] + -1 * sv12[244];
        sv12[279] = -1 * sv12[263] + -1 * sv12[247];
        sv12[280] = -1 * sv12[264] + -1 * sv12[248];
        sv12[281] = sv12[265] / sv12[87];
        sv12[282] = sv12[266] / sv12[87];
        sv12[283] = sv12[267] / sv12[87];
        sv12[284] = sv12[268] / sv12[87];
        sv12[285] = sv12[269] / sv12[87];
        sv12[286] = sv12[270] / sv12[87];
        sv12[287] = sv12[271] / sv12[87];
        sv12[288] = sv12[272] / sv12[87];
        sv12[289] = sv12[273] / sv12[87];
        sv12[290] = sv12[274] / sv12[87];
        sv12[291] = sv12[275] / sv12[87];
        sv12[292] = sv12[276] / sv12[87];
        sv12[293] = sv12[277] / sv12[87];
        sv12[294] = sv12[278] / sv12[87];
        sv12[295] = sv12[279] / sv12[87];
        sv12[296] = sv12[280] / sv12[87];
        sv12[297] = -2.0 * sv12[102] * sv12[115];
        sv12[298] = -2.0 * sv12[102] * sv12[116];
        sv12[299] = -2.0 * sv12[102] * sv12[117];
        sv12[300] = -2.0 * sv12[102] * sv12[118];
        sv12[301] = -2.0 * sv12[103] * sv12[115];
        sv12[302] = -2.0 * sv12[103] * sv12[116];
        sv12[303] = -2.0 * sv12[103] * sv12[117];
        sv12[304] = -2.0 * sv12[103] * sv12[118];
        sv12[305] = -2.0 * sv12[104] * sv12[115];
        sv12[306] = -2.0 * sv12[104] * sv12[116];
        sv12[307] = -2.0 * sv12[104] * sv12[117];
        sv12[308] = -2.0 * sv12[104] * sv12[118];
        sv12[309] = -2.0 * sv12[105] * sv12[115];
        sv12[310] = -2.0 * sv12[105] * sv12[116];
        sv12[311] = -2.0 * sv12[105] * sv12[117];
        sv12[312] = -2.0 * sv12[105] * sv12[118];
        sv12[313] = -2.0 * sv12[209] * sv12[114];
        sv12[314] = -2.0 * sv12[210] * sv12[114];
        sv12[315] = -2.0 * sv12[211] * sv12[114];
        sv12[316] = -2.0 * sv12[212] * sv12[114];
        sv12[317] = -2.0 * sv12[213] * sv12[114];
        sv12[318] = -2.0 * sv12[214] * sv12[114];
        sv12[319] = -2.0 * sv12[215] * sv12[114];
        sv12[320] = -2.0 * sv12[216] * sv12[114];
        sv12[321] = -2.0 * sv12[217] * sv12[114];
        sv12[322] = -2.0 * sv12[218] * sv12[114];
        sv12[323] = -2.0 * sv12[219] * sv12[114];
        sv12[324] = -2.0 * sv12[220] * sv12[114];
        sv12[325] = sv12[297] + sv12[313];
        sv12[326] = sv12[301] + sv12[314];
        sv12[327] = sv12[305] + sv12[315];
        sv12[328] = sv12[309] + sv12[316];
        sv12[329] = sv12[298] + sv12[317];
        sv12[330] = sv12[299] + sv12[315];
        sv12[331] = sv12[300] + sv12[316];
        sv12[332] = sv12[302] + sv12[318];
        sv12[333] = sv12[306] + sv12[319];
        sv12[334] = sv12[310] + sv12[320];
        sv12[335] = sv12[303] + sv12[319];
        sv12[336] = sv12[304] + sv12[320];
        sv12[337] = sv12[307] + sv12[321];
        sv12[338] = sv12[311] + sv12[322];
        sv12[339] = sv12[308] + sv12[323];
        sv12[340] = sv12[312] + sv12[324];
        sv12[341] = -1 * sv12[115] * sv12[128];
        sv12[342] = -1 * sv12[115] * sv12[129];
        sv12[343] = -1 * sv12[115] * sv12[130];
        sv12[344] = -1 * sv12[115] * sv12[131];
        sv12[345] = -1 * sv12[116] * sv12[128];
        sv12[346] = -1 * sv12[116] * sv12[129];
        sv12[347] = -1 * sv12[116] * sv12[130];
        sv12[348] = -1 * sv12[116] * sv12[131];
        sv12[349] = -1 * sv12[117] * sv12[128];
        sv12[350] = -1 * sv12[117] * sv12[129];
        sv12[351] = -1 * sv12[117] * sv12[130];
        sv12[352] = -1 * sv12[117] * sv12[131];
        sv12[353] = -1 * sv12[118] * sv12[128];
        sv12[354] = -1 * sv12[118] * sv12[129];
        sv12[355] = -1 * sv12[118] * sv12[130];
        sv12[356] = -1 * sv12[118] * sv12[131];
        sv12[357] = -1 * sv12[325] * sv12[119];
        sv12[358] = -1 * sv12[326] * sv12[119];
        sv12[359] = -1 * sv12[327] * sv12[119];
        sv12[360] = -1 * sv12[328] * sv12[119];
        sv12[361] = -1 * sv12[329] * sv12[119];
        sv12[362] = -1 * sv12[330] * sv12[119];
        sv12[363] = -1 * sv12[331] * sv12[119];
        sv12[364] = -1 * sv12[332] * sv12[119];
        sv12[365] = -1 * sv12[333] * sv12[119];
        sv12[366] = -1 * sv12[334] * sv12[119];
        sv12[367] = -1 * sv12[335] * sv12[119];
        sv12[368] = -1 * sv12[336] * sv12[119];
        sv12[369] = -1 * sv12[337] * sv12[119];
        sv12[370] = -1 * sv12[338] * sv12[119];
        sv12[371] = -1 * sv12[339] * sv12[119];
        sv12[372] = -1 * sv12[340] * sv12[119];
        sv12[373] = sv12[341] + sv12[357];
        sv12[374] = sv12[345] + sv12[358];
        sv12[375] = sv12[349] + sv12[359];
        sv12[376] = sv12[353] + sv12[360];
        sv12[377] = sv12[342] + sv12[361];
        sv12[378] = sv12[343] + sv12[362];
        sv12[379] = sv12[344] + sv12[363];
        sv12[380] = sv12[346] + sv12[364];
        sv12[381] = sv12[350] + sv12[365];
        sv12[382] = sv12[354] + sv12[366];
        sv12[383] = sv12[347] + sv12[367];
        sv12[384] = sv12[348] + sv12[368];
        sv12[385] = sv12[351] + sv12[369];
        sv12[386] = sv12[355] + sv12[370];
        sv12[387] = sv12[352] + sv12[371];
        sv12[388] = sv12[356] + sv12[372];
        sv12[389] = sv12[325] + -1 * sv12[373];
        sv12[390] = sv12[326] + -1 * sv12[374];
        sv12[391] = sv12[327] + -1 * sv12[375];
        sv12[392] = sv12[328] + -1 * sv12[376];
        sv12[393] = sv12[329] + -1 * sv12[377];
        sv12[394] = sv12[330] + -1 * sv12[378];
        sv12[395] = sv12[331] + -1 * sv12[379];
        sv12[396] = sv12[332] + -1 * sv12[380];
        sv12[397] = sv12[333] + -1 * sv12[381];
        sv12[398] = sv12[334] + -1 * sv12[382];
        sv12[399] = sv12[335] + -1 * sv12[383];
        sv12[400] = sv12[336] + -1 * sv12[384];
        sv12[401] = sv12[337] + -1 * sv12[385];
        sv12[402] = sv12[338] + -1 * sv12[386];
        sv12[403] = sv12[339] + -1 * sv12[387];
        sv12[404] = sv12[340] + -1 * sv12[388];
        sv12[405] = sv12[389] + -1 * sv12[341];
        sv12[406] = sv12[390] + -1 * sv12[342];
        sv12[407] = sv12[391] + -1 * sv12[343];
        sv12[408] = sv12[392] + -1 * sv12[344];
        sv12[409] = sv12[393] + -1 * sv12[345];
        sv12[410] = sv12[394] + -1 * sv12[349];
        sv12[411] = sv12[395] + -1 * sv12[353];
        sv12[412] = sv12[396] + -1 * sv12[346];
        sv12[413] = sv12[397] + -1 * sv12[347];
        sv12[414] = sv12[398] + -1 * sv12[348];
        sv12[415] = sv12[399] + -1 * sv12[350];
        sv12[416] = sv12[400] + -1 * sv12[354];
        sv12[417] = sv12[401] + -1 * sv12[351];
        sv12[418] = sv12[402] + -1 * sv12[352];
        sv12[419] = sv12[403] + -1 * sv12[355];
        sv12[420] = sv12[404] + -1 * sv12[356];
        sv12[421] = sv12[405] / (1.0 + -1 * sv12[114]);
        sv12[422] = sv12[406] / (1.0 + -1 * sv12[114]);
        sv12[423] = sv12[407] / (1.0 + -1 * sv12[114]);
        sv12[424] = sv12[408] / (1.0 + -1 * sv12[114]);
        sv12[425] = sv12[409] / (1.0 + -1 * sv12[114]);
        sv12[426] = sv12[410] / (1.0 + -1 * sv12[114]);
        sv12[427] = sv12[411] / (1.0 + -1 * sv12[114]);
        sv12[428] = sv12[412] / (1.0 + -1 * sv12[114]);
        sv12[429] = sv12[413] / (1.0 + -1 * sv12[114]);
        sv12[430] = sv12[414] / (1.0 + -1 * sv12[114]);
        sv12[431] = sv12[415] / (1.0 + -1 * sv12[114]);
        sv12[432] = sv12[416] / (1.0 + -1 * sv12[114]);
        sv12[433] = sv12[417] / (1.0 + -1 * sv12[114]);
        sv12[434] = sv12[418] / (1.0 + -1 * sv12[114]);
        sv12[435] = sv12[419] / (1.0 + -1 * sv12[114]);
        sv12[436] = sv12[420] / (1.0 + -1 * sv12[114]);
        sv12[437] = -1 * sv12[281] + sv12[421];
        sv12[438] = -1 * sv12[282] + sv12[422];
        sv12[439] = -1 * sv12[283] + sv12[423];
        sv12[440] = -1 * sv12[284] + sv12[424];
        sv12[441] = -1 * sv12[285] + sv12[425];
        sv12[442] = -1 * sv12[286] + sv12[426];
        sv12[443] = -1 * sv12[287] + sv12[427];
        sv12[444] = -1 * sv12[288] + sv12[428];
        sv12[445] = -1 * sv12[289] + sv12[429];
        sv12[446] = -1 * sv12[290] + sv12[430];
        sv12[447] = -1 * sv12[291] + sv12[431];
        sv12[448] = -1 * sv12[292] + sv12[432];
        sv12[449] = -1 * sv12[293] + sv12[433];
        sv12[450] = -1 * sv12[294] + sv12[434];
        sv12[451] = -1 * sv12[295] + sv12[435];
        sv12[452] = -1 * sv12[296] + sv12[436];
        sv12[453] = sv12[437] * (2.0 * sp[53]);
        sv12[454] = sv12[438] * (2.0 * sp[53]);
        sv12[455] = sv12[439] * (2.0 * sp[53]);
        sv12[456] = sv12[440] * (2.0 * sp[53]);
        sv12[457] = sv12[441] * (2.0 * sp[53]);
        sv12[458] = sv12[442] * (2.0 * sp[53]);
        sv12[459] = sv12[443] * (2.0 * sp[53]);
        sv12[460] = sv12[444] * (2.0 * sp[53]);
        sv12[461] = sv12[445] * (2.0 * sp[53]);
        sv12[462] = sv12[446] * (2.0 * sp[53]);
        sv12[463] = sv12[447] * (2.0 * sp[53]);
        sv12[464] = sv12[448] * (2.0 * sp[53]);
        sv12[465] = sv12[449] * (2.0 * sp[53]);
        sv12[466] = sv12[450] * (2.0 * sp[53]);
        sv12[467] = sv12[451] * (2.0 * sp[53]);
        sv12[468] = sv12[452] * (2.0 * sp[53]);
        sv12[469] = -1 * sv12[171] + sv12[453];
        sv12[470] = -1 * sv12[172] + sv12[454];
        sv12[471] = -1 * sv12[173] + sv12[457];
        sv12[472] = sv12[458] + -1 * sv12[153];
        sv12[473] = sv12[459] + -1 * sv12[154];
        sv12[474] = -1 * sv12[174] + sv12[460];
        sv12[475] = sv12[463] + -1 * sv12[157];
        sv12[476] = sv12[464] + -1 * sv12[158];
        sv12[477] = sv12[469] + -1 * sv12[151];
        sv12[478] = sv12[470] + -1 * sv12[152];
        sv12[479] = sv12[455] + -1 * sv12[153];
        sv12[480] = sv12[456] + -1 * sv12[154];
        sv12[481] = sv12[471] + -1 * sv12[155];
        sv12[482] = sv12[474] + -1 * sv12[156];
        sv12[483] = sv12[461] + -1 * sv12[157];
        sv12[484] = sv12[462] + -1 * sv12[158];
        sv12[485] = sv12[477] / sv12[85];
        sv12[486] = sv12[478] / sv12[85];
        sv12[487] = sv12[479] / sv12[85];
        sv12[488] = sv12[480] / sv12[85];
        sv12[489] = sv12[481] / sv12[85];
        sv12[490] = sv12[472] / sv12[85];
        sv12[491] = sv12[473] / sv12[85];
        sv12[492] = sv12[482] / sv12[85];
        sv12[493] = sv12[483] / sv12[85];
        sv12[494] = sv12[484] / sv12[85];
        sv12[495] = sv12[475] / sv12[85];
        sv12[496] = sv12[476] / sv12[85];
        sv12[497] = sv12[465] / sv12[85];
        sv12[498] = sv12[466] / sv12[85];
        sv12[499] = sv12[467] / sv12[85];
        sv12[500] = sv12[468] / sv12[85];
        sv12[501] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[87]) * (2.0 * sp[53]);
        sv12[502] = sv12[501] * (2.0 * sp[53]);
        sv12[503] = sv12[502] / (0.0001 + sv12[28]);
        sv12[504] = sv12[503] * sv12[183];
        sv12[505] = sv12[503] * sv12[184];
        sv12[506] = sv12[503] * sv12[185];
        sv12[507] = sv12[503] * sv12[96];
        sv12[508] = sv12[503] * sv12[97];
        sv12[509] = 0.5 * (-0.004435991517475 * sv12[102]) * (2.0 * sp[53]);
        sv12[510] = 0.5 * (-0.004435991517475 * sv12[103]) * (2.0 * sp[53]);
        sv12[511] = 0.5 * (-0.004435991517475 * sv12[104]) * (2.0 * sp[53]);
        sv12[512] = 0.5 * (-0.004435991517475 * sv12[105]) * (2.0 * sp[53]);
        sv12[513] = sv12[509] * (2.0 * sp[53]);
        sv12[514] = sv12[510] * (2.0 * sp[53]);
        sv12[515] = sv12[511] * (2.0 * sp[53]);
        sv12[516] = sv12[512] * (2.0 * sp[53]);
        sv12[517] = -1 * sv12[507] + sv12[515];
        sv12[518] = -1 * sv12[508] + sv12[516];
        sv12[519] = sv12[513] / (0.0001 + sv12[28]);
        sv12[520] = sv12[514] / (0.0001 + sv12[28]);
        sv12[521] = sv12[517] / (0.0001 + sv12[28]);
        sv12[522] = sv12[518] / (0.0001 + sv12[28]);
        sv12[523] = sv12[519] * sv12[96];
        sv12[524] = sv12[519] * sv12[97];
        sv12[525] = sv12[520] * sv12[96];
        sv12[526] = sv12[520] * sv12[97];
        sv12[527] = sv12[521] * sv12[96];
        sv12[528] = sv12[521] * sv12[97];
        sv12[529] = sv12[522] * sv12[96];
        sv12[530] = sv12[522] * sv12[97];
        sv12[531] = sv12[527] + sv12[504];
        sv12[532] = sv12[505] + sv12[528];
        sv12[533] = sv12[529] + sv12[505];
        sv12[534] = sv12[506] + sv12[530];
        sv12[535] = 0.5 * (-0.004435991517475 * sv12[209]) * (2.0 * sp[53]);
        sv12[536] = 0.5 * (-0.004435991517475 * sv12[210]) * (2.0 * sp[53]);
        sv12[537] = 0.5 * (-0.004435991517475 * sv12[211]) * (2.0 * sp[53]);
        sv12[538] = 0.5 * (-0.004435991517475 * sv12[212]) * (2.0 * sp[53]);
        sv12[539] = 0.5 * (-0.004435991517475 * sv12[213]) * (2.0 * sp[53]);
        sv12[540] = 0.5 * (-0.004435991517475 * sv12[214]) * (2.0 * sp[53]);
        sv12[541] = 0.5 * (-0.004435991517475 * sv12[215]) * (2.0 * sp[53]);
        sv12[542] = 0.5 * (-0.004435991517475 * sv12[216]) * (2.0 * sp[53]);
        sv12[543] = 0.5 * (-0.004435991517475 * sv12[217]) * (2.0 * sp[53]);
        sv12[544] = 0.5 * (-0.004435991517475 * sv12[218]) * (2.0 * sp[53]);
        sv12[545] = 0.5 * (-0.004435991517475 * sv12[219]) * (2.0 * sp[53]);
        sv12[546] = 0.5 * (-0.004435991517475 * sv12[220]) * (2.0 * sp[53]);
        sv12[547] = sv12[535] * (2.0 * sp[53]);
        sv12[548] = sv12[536] * (2.0 * sp[53]);
        sv12[549] = sv12[537] * (2.0 * sp[53]);
        sv12[550] = sv12[538] * (2.0 * sp[53]);
        sv12[551] = sv12[539] * (2.0 * sp[53]);
        sv12[552] = sv12[540] * (2.0 * sp[53]);
        sv12[553] = sv12[541] * (2.0 * sp[53]);
        sv12[554] = sv12[542] * (2.0 * sp[53]);
        sv12[555] = sv12[543] * (2.0 * sp[53]);
        sv12[556] = sv12[544] * (2.0 * sp[53]);
        sv12[557] = sv12[545] * (2.0 * sp[53]);
        sv12[558] = sv12[546] * (2.0 * sp[53]);
        sv12[559] = -1 * sv12[523] + sv12[549];
        sv12[560] = -1 * sv12[524] + sv12[550];
        sv12[561] = -1 * sv12[525] + sv12[553];
        sv12[562] = -1 * sv12[526] + sv12[554];
        sv12[563] = -1 * sv12[531] + sv12[555];
        sv12[564] = -1 * sv12[532] + sv12[556];
        sv12[565] = -1 * sv12[533] + sv12[557];
        sv12[566] = -1 * sv12[534] + sv12[558];
        sv12[567] = sv12[563] + -1 * sv12[527];
        sv12[568] = sv12[564] + -1 * sv12[529];
        sv12[569] = sv12[565] + -1 * sv12[528];
        sv12[570] = sv12[566] + -1 * sv12[530];
        sv12[571] = sv12[547] / (0.0001 + sv12[28]);
        sv12[572] = sv12[548] / (0.0001 + sv12[28]);
        sv12[573] = sv12[559] / (0.0001 + sv12[28]);
        sv12[574] = sv12[560] / (0.0001 + sv12[28]);
        sv12[575] = sv12[551] / (0.0001 + sv12[28]);
        sv12[576] = sv12[552] / (0.0001 + sv12[28]);
        sv12[577] = sv12[561] / (0.0001 + sv12[28]);
        sv12[578] = sv12[562] / (0.0001 + sv12[28]);
        sv12[579] = sv12[567] / (0.0001 + sv12[28]);
        sv12[580] = sv12[568] / (0.0001 + sv12[28]);
        sv12[581] = sv12[569] / (0.0001 + sv12[28]);
        sv12[582] = sv12[570] / (0.0001 + sv12[28]);
        sv12[583] = (sv12[87] >= 0.1 ? sv12[485] : sv12[571]);
        sv12[584] = (sv12[87] >= 0.1 ? sv12[486] : sv12[572]);
        sv12[585] = (sv12[87] >= 0.1 ? sv12[487] : sv12[573]);
        sv12[586] = (sv12[87] >= 0.1 ? sv12[488] : sv12[574]);
        sv12[587] = (sv12[87] >= 0.1 ? sv12[489] : sv12[575]);
        sv12[588] = (sv12[87] >= 0.1 ? sv12[490] : sv12[573]);
        sv12[589] = (sv12[87] >= 0.1 ? sv12[491] : sv12[574]);
        sv12[590] = (sv12[87] >= 0.1 ? sv12[492] : sv12[576]);
        sv12[591] = (sv12[87] >= 0.1 ? sv12[493] : sv12[577]);
        sv12[592] = (sv12[87] >= 0.1 ? sv12[494] : sv12[578]);
        sv12[593] = (sv12[87] >= 0.1 ? sv12[495] : sv12[577]);
        sv12[594] = (sv12[87] >= 0.1 ? sv12[496] : sv12[578]);
        sv12[595] = (sv12[87] >= 0.1 ? sv12[497] : sv12[579]);
        sv12[596] = (sv12[87] >= 0.1 ? sv12[498] : sv12[580]);
        sv12[597] = (sv12[87] >= 0.1 ? sv12[499] : sv12[581]);
        sv12[598] = (sv12[87] >= 0.1 ? sv12[500] : sv12[582]);
        sv12[599] = sv12[81] * sv12[583];
        sv12[600] = sv12[81] * sv12[584];
        sv12[601] = sv12[81] * sv12[585];
        sv12[602] = sv12[81] * sv12[586];
        sv12[603] = sv12[81] * sv12[587];
        sv12[604] = sv12[81] * sv12[588];
        sv12[605] = sv12[81] * sv12[589];
        sv12[606] = sv12[81] * sv12[590];
        sv12[607] = sv12[81] * sv12[591];
        sv12[608] = sv12[81] * sv12[592];
        sv12[609] = sv12[81] * sv12[593];
        sv12[610] = sv12[81] * sv12[594];
        sv12[611] = sv12[81] * sv12[595];
        sv12[612] = sv12[81] * sv12[596];
        sv12[613] = sv12[81] * sv12[597];
        sv12[614] = sv12[81] * sv12[598];
        sv12[615] = 0.09 * sv12[11] * sp[3];
        sv12[616] = 0.09 * sv12[11] * sp[4];
        sv12[617] = w2_c3 * sv12[615];
        sv12[618] = w2_c3 * sv12[616];
        sv12[619] = sv12[15] + sv12[13];
        sv12[620] = sv12[17] * sp[3];
        sv12[621] = sv12[17] * sp[4];
        sv12[622] = sv12[619] + sv12[14];
        sv12[623] = sv12[617] + sv12[620];
        sv12[624] = sv12[618] + sv12[621];
        sv12[625] = 0.5 * sv12[25] * sv12[96];
        sv12[626] = 0.5 * sv12[25] * sv12[97];
        sv12[627] = w2_c4 * sp[3];
        sv12[628] = w2_c4 * sp[4];
        sv12[629] = sv12[627] + sv12[627];
        sv12[630] = sv12[628] + sv12[628];
        sv12[631] = 2 * sv12[94] * sv12[24];
        sv12[632] = sp[54] + -1 * sv12[631];
        sv12[633] = sv12[632] / (2 * sv12[23]);
        sv12[634] = sv12[629] / (2 * sv12[23]);
        sv12[635] = sv12[630] / (2 * sv12[23]);
        sv12[636] = sp[3] + sv12[634];
        sv12[637] = sp[4] + sv12[635];
        sv12[638] = 0.5 * sv12[633] * sv12[28];
        sv12[639] = 0.5 * sv12[636] * sv12[28];
        sv12[640] = 0.5 * sv12[637] * sv12[28];
        sv12[641] = sv12[638] + sv12[626];
        sv12[642] = sv12[622] + -1 * sv12[625];
        sv12[643] = 0.5 * (1.0 + sv12[94]) * sv12[31];
        sv12[644] = -1 * sv12[641] + -1 * sv12[643];
        sv12[645] = sv12[642] / (0.5 * sv12[27]);
        sv12[646] = sv12[644] / (0.5 * sv12[27]);
        sv12[647] = sv12[623] / (0.5 * sv12[27]);
        sv12[648] = sv12[624] / (0.5 * sv12[27]);
        sv12[649] = -1 * sv12[639] / (0.5 * sv12[27]);
        sv12[650] = -1 * sv12[640] / (0.5 * sv12[27]);
        sv12[651] = sp[33] * sv12[645];
        sv12[652] = sp[33] * sv12[646];
        sv12[653] = sp[33] * sv12[647];
        sv12[654] = sp[33] * sv12[648];
        sv12[655] = sp[33] * sv12[649];
        sv12[656] = sp[33] * sv12[650];
        sv12[657] = 0.09 * sv12[11] * sp[6];
        sv12[658] = 0.09 * sv12[11] * sp[5];
        sv12[659] = w2_c3 * sv12[657];
        sv12[660] = w2_c3 * sv12[658];
        sv12[661] = sv12[36] + sv12[34];
        sv12[662] = sv12[17] * sp[6];
        sv12[663] = sv12[17] * sp[5];
        sv12[664] = sv12[661] + sv12[35];
        sv12[665] = sv12[659] + sv12[662];
        sv12[666] = sv12[660] + sv12[663];
        sv12[667] = 0.5 * sv12[43] * sv12[96];
        sv12[668] = 0.5 * sv12[43] * sv12[97];
        sv12[669] = w2_c4 * sp[6];
        sv12[670] = w2_c4 * sp[5];
        sv12[671] = sv12[669] + sv12[669];
        sv12[672] = sv12[670] + sv12[670];
        sv12[673] = 2 * sv12[94] * sv12[42];
        sv12[674] = sp[55] + -1 * sv12[673];
        sv12[675] = sv12[674] / (2 * sv12[23]);
        sv12[676] = sv12[671] / (2 * sv12[23]);
        sv12[677] = sv12[672] / (2 * sv12[23]);
        sv12[678] = sp[6] + sv12[676];
        sv12[679] = sp[5] + sv12[677];
        sv12[680] = 0.5 * sv12[675] * sv12[28];
        sv12[681] = 0.5 * sv12[678] * sv12[28];
        sv12[682] = 0.5 * sv12[679] * sv12[28];
        sv12[683] = sv12[680] + sv12[668];
        sv12[684] = sv12[664] + -1 * sv12[667];
        sv12[685] = 0.5 * (1.0 + sv12[94]) * sv12[46];
        sv12[686] = -1 * sv12[683] + -1 * sv12[685];
        sv12[687] = sv12[684] / (0.5 * sv12[27]);
        sv12[688] = sv12[686] / (0.5 * sv12[27]);
        sv12[689] = sv12[665] / (0.5 * sv12[27]);
        sv12[690] = sv12[666] / (0.5 * sv12[27]);
        sv12[691] = -1 * sv12[681] / (0.5 * sv12[27]);
        sv12[692] = -1 * sv12[682] / (0.5 * sv12[27]);
        sv12[693] = sp[36] * sv12[687];
        sv12[694] = sp[36] * sv12[688];
        sv12[695] = sp[36] * sv12[689];
        sv12[696] = sp[36] * sv12[690];
        sv12[697] = sp[36] * sv12[691];
        sv12[698] = sp[36] * sv12[692];
        sv12[699] = sv12[651] + sv12[693];
        sv12[700] = sv12[652] + sv12[694];
        sv12[701] = sv12[653] + sv12[695];
        sv12[702] = sv12[696] + sv12[654];
        sv12[703] = sv12[655] + sv12[697];
        sv12[704] = sv12[698] + sv12[656];
        sv12[705] = 2.0 * sv12[78] * sv12[96];
        sv12[706] = 2.0 * sv12[78] * sv12[97];
        sv12[707] = sv12[61] / 2 * (sp[56] / 2);
        sv12[708] = sv12[61] / 2 * (sp[57] / 2);
        sv12[709] = sv12[707] + sv12[707];
        sv12[710] = sv12[708] + sv12[708];
        sv12[711] = sv12[69] / 2 * (sp[3] / 2);
        sv12[712] = sv12[69] / 2 * (sp[4] / 2);
        sv12[713] = sv12[69] / 2 * (sp[6] / 2);
        sv12[714] = sv12[69] / 2 * (sp[5] / 2);
        sv12[715] = sv12[711] + sv12[711];
        sv12[716] = sv12[712] + sv12[712];
        sv12[717] = sv12[713] + sv12[713];
        sv12[718] = sv12[714] + sv12[714];
        sv12[719] = sv12[709] + sv12[717];
        sv12[720] = sv12[710] + sv12[718];
        sv12[721] = sv12[75] / 2 * (sp[58] / 2);
        sv12[722] = sv12[75] / 2 * (sp[59] / 2);
        sv12[723] = sv12[721] + sv12[721];
        sv12[724] = sv12[722] + sv12[722];
        sv12[725] = sv12[723] + sv12[715];
        sv12[726] = sv12[724] + sv12[716];
        sv12[727] = sv12[725] + sv12[715];
        sv12[728] = sv12[726] + sv12[716];
        sv12[729] = sv12[719] + sv12[717];
        sv12[730] = sv12[720] + sv12[718];
        sv12[731] = 2.0 * sv12[727] * sv12[28];
        sv12[732] = 2.0 * sv12[728] * sv12[28];
        sv12[733] = 2.0 * sv12[729] * sv12[28];
        sv12[734] = 2.0 * sv12[730] * sv12[28];
        sv12[735] = -1 * sv12[699] + -1 * sv12[705];
        sv12[736] = 1.0 + -1 * sv12[700] + -1 * sv12[706];
        sv12[737] = sv12[49] * sp[33];
        sv12[738] = sv12[49] * (-1 * sv12[731]);
        sv12[739] = sv12[49] * (-1 * sv12[732]);
        sv12[740] = sv12[49] * sp[36];
        sv12[741] = sv12[49] * (-1 * sv12[733]);
        sv12[742] = sv12[49] * (-1 * sv12[734]);
        sv12[743] = sv12[49] * sv12[735];
        sv12[744] = sv12[49] * sv12[736];
        sv12[745] = sv12[49] * (-1 * sv12[701]);
        sv12[746] = sv12[49] * (-1 * sv12[702]);
        sv12[747] = sv12[49] * (-1 * sv12[703]);
        sv12[748] = sv12[49] * (-1 * sv12[704]);
        sv12[749] = sp[9] * sv12[645];
        sv12[750] = sp[9] * sv12[646];
        sv12[751] = sp[9] * sv12[647];
        sv12[752] = sp[9] * sv12[648];
        sv12[753] = sp[9] * sv12[649];
        sv12[754] = sp[9] * sv12[650];
        sv12[755] = sp[12] * sv12[687];
        sv12[756] = sp[12] * sv12[688];
        sv12[757] = sp[12] * sv12[689];
        sv12[758] = sp[12] * sv12[690];
        sv12[759] = sp[12] * sv12[691];
        sv12[760] = sp[12] * sv12[692];
        sv12[761] = sv12[749] + sv12[755];
        sv12[762] = sv12[750] + sv12[756];
        sv12[763] = sv12[751] + sv12[757];
        sv12[764] = sv12[758] + sv12[752];
        sv12[765] = sv12[753] + sv12[759];
        sv12[766] = sv12[760] + sv12[754];
        sv12[767] = sv12[80] * sp[9];
        sv12[768] = sv12[80] * sp[12];
        sv12[769] = sv12[80] * (-1 * sv12[761]);
        sv12[770] = sv12[80] * (-1 * sv12[762]);
        sv12[771] = sv12[80] * (-1 * sv12[763]);
        sv12[772] = sv12[80] * (-1 * sv12[764]);
        sv12[773] = sv12[80] * (-1 * sv12[765]);
        sv12[774] = sv12[80] * (-1 * sv12[766]);
        sv12[775] = sv12[737] + sv12[767];
        sv12[776] = sv12[740] + sv12[768];
        sv12[777] = sv12[743] + sv12[769];
        sv12[778] = sv12[744] + sv12[770];
        sv12[779] = sv12[745] + sv12[771];
        sv12[780] = sv12[746] + sv12[772];
        sv12[781] = sv12[747] + sv12[773];
        sv12[782] = sv12[748] + sv12[774];
        sv12[783] = (sv12[87] >= 0.1 ? sv12[147] : sv12[519]);
        sv12[784] = (sv12[87] >= 0.1 ? sv12[148] : sv12[520]);
        sv12[785] = (sv12[87] >= 0.1 ? sv12[149] : sv12[521]);
        sv12[786] = (sv12[87] >= 0.1 ? sv12[150] : sv12[522]);
        sv12[787] = sv12[775] * sv12[783];
        sv12[788] = sv12[775] * sv12[784];
        sv12[789] = sv12[775] * sv12[785];
        sv12[790] = sv12[775] * sv12[786];
        sv12[791] = sv12[738] * sv12[783];
        sv12[792] = sv12[738] * sv12[784];
        sv12[793] = sv12[738] * sv12[785];
        sv12[794] = sv12[738] * sv12[786];
        sv12[795] = sv12[739] * sv12[783];
        sv12[796] = sv12[739] * sv12[784];
        sv12[797] = sv12[739] * sv12[785];
        sv12[798] = sv12[739] * sv12[786];
        sv12[799] = sv12[776] * sv12[783];
        sv12[800] = sv12[776] * sv12[784];
        sv12[801] = sv12[776] * sv12[785];
        sv12[802] = sv12[776] * sv12[786];
        sv12[803] = sv12[741] * sv12[783];
        sv12[804] = sv12[741] * sv12[784];
        sv12[805] = sv12[741] * sv12[785];
        sv12[806] = sv12[741] * sv12[786];
        sv12[807] = sv12[742] * sv12[783];
        sv12[808] = sv12[742] * sv12[784];
        sv12[809] = sv12[742] * sv12[785];
        sv12[810] = sv12[742] * sv12[786];
        sv12[811] = sv12[777] * sv12[783];
        sv12[812] = sv12[777] * sv12[784];
        sv12[813] = sv12[777] * sv12[785];
        sv12[814] = sv12[777] * sv12[786];
        sv12[815] = sv12[778] * sv12[783];
        sv12[816] = sv12[778] * sv12[784];
        sv12[817] = sv12[778] * sv12[785];
        sv12[818] = sv12[778] * sv12[786];
        sv12[819] = sv12[779] * sv12[783];
        sv12[820] = sv12[779] * sv12[784];
        sv12[821] = sv12[779] * sv12[785];
        sv12[822] = sv12[779] * sv12[786];
        sv12[823] = sv12[780] * sv12[783];
        sv12[824] = sv12[780] * sv12[784];
        sv12[825] = sv12[780] * sv12[785];
        sv12[826] = sv12[780] * sv12[786];
        sv12[827] = sv12[781] * sv12[783];
        sv12[828] = sv12[781] * sv12[784];
        sv12[829] = sv12[781] * sv12[785];
        sv12[830] = sv12[781] * sv12[786];
        sv12[831] = sv12[782] * sv12[783];
        sv12[832] = sv12[782] * sv12[784];
        sv12[833] = sv12[782] * sv12[785];
        sv12[834] = sv12[782] * sv12[786];
        sv12[835] = sv12[787] + sv12[599];
        sv12[836] = sv12[788] + sv12[600];
        sv12[837] = sv12[601] + sv12[789];
        sv12[838] = sv12[602] + sv12[790];
        sv12[839] = sv12[799] + sv12[603];
        sv12[840] = sv12[604] + sv12[811];
        sv12[841] = sv12[605] + sv12[815];
        sv12[842] = sv12[800] + sv12[606];
        sv12[843] = sv12[607] + sv12[801];
        sv12[844] = sv12[608] + sv12[802];
        sv12[845] = sv12[609] + sv12[812];
        sv12[846] = sv12[610] + sv12[816];
        sv12[847] = sv12[611] + sv12[813];
        sv12[848] = sv12[612] + sv12[814];
        sv12[849] = sv12[613] + sv12[817];
        sv12[850] = sv12[614] + sv12[818];
        sv12[851] = 2.0 * sv12[78] * sv12[183];
        sv12[852] = 2.0 * sv12[78] * sv12[184];
        sv12[853] = 2.0 * sv12[78] * sv12[185];
        sv12[854] = 2.0 * sv12[727] * sv12[96];
        sv12[855] = 2.0 * sv12[727] * sv12[97];
        sv12[856] = 2.0 * sv12[728] * sv12[96];
        sv12[857] = 2.0 * sv12[728] * sv12[97];
        sv12[858] = 2.0 * sv12[729] * sv12[96];
        sv12[859] = 2.0 * sv12[729] * sv12[97];
        sv12[860] = 2.0 * sv12[730] * sv12[96];
        sv12[861] = 2.0 * sv12[730] * sv12[97];
        sv12[862] = 2.0 * sp[98] * sv12[28];
        sv12[863] = 2.0 * sp[99] * sv12[28];
        sv12[864] = 2.0 * sp[100] * sv12[28];
        sv12[865] = 2.0 * sp[101] * sv12[28];
        sv12[866] = 2.0 * sp[102] * sv12[28];
        sv12[867] = 2.0 * sp[103] * sv12[28];
        sv12[868] = 2.0 * sp[104] * sv12[28];
        sv12[869] = 2.0 * sp[105] * sv12[28];
        sv12[870] = 2.0 * sp[106] * sv12[28];
        sv12[871] = 2.0 * sp[107] * sv12[28];
        sv12[872] = 0.09 * sv12[12] + 0.09 * sv12[12];
        sv12[873] = sv12[615] + sv12[615];
        sv12[874] = sv12[616] + sv12[616];
        sv12[875] = 0.5 * sv12[25] * sv12[183];
        sv12[876] = 0.5 * sv12[25] * sv12[184];
        sv12[877] = 0.5 * sv12[25] * sv12[185];
        sv12[878] = 0.5 * sv12[633] * sv12[96];
        sv12[879] = 0.5 * sv12[633] * sv12[97];
        sv12[880] = 0.5 * sv12[636] * sv12[96];
        sv12[881] = 0.5 * sv12[636] * sv12[97];
        sv12[882] = 0.5 * sv12[637] * sv12[96];
        sv12[883] = 0.5 * sv12[637] * sv12[97];
        sv12[884] = sv12[878] + sv12[876];
        sv12[885] = sv12[877] + sv12[879];
        sv12[886] = 2 * sv12[179] * sv12[24];
        sv12[887] = 2 * sv12[94] * sv12[633];
        sv12[888] = 2 * sv12[94] * sv12[634];
        sv12[889] = 2 * sv12[94] * sv12[635];
        sv12[890] = sv12[886] + sv12[887];
        sv12[891] = sp[56] + -1 * sv12[888];
        sv12[892] = sp[57] + -1 * sv12[889];
        sv12[893] = -1 * sv12[890] + -1 * sv12[887];
        sv12[894] = sv12[893] / (2 * sv12[23]);
        sv12[895] = sv12[891] / (2 * sv12[23]);
        sv12[896] = sv12[892] / (2 * sv12[23]);
        sv12[897] = 0.5 * sv12[894] * sv12[28];
        sv12[898] = 0.5 * sv12[895] * sv12[28];
        sv12[899] = 0.5 * sv12[896] * sv12[28];
        sv12[900] = sv12[897] + sv12[879];
        sv12[901] = sv12[898] + sv12[881];
        sv12[902] = sv12[899] + sv12[883];
        sv12[903] = sv12[885] + sv12[900];
        sv12[904] = sv12[872] + -1 * sv12[875];
        sv12[905] = 0.5 * (1.0 + sv12[94]) * sv12[645];
        sv12[906] = 0.5 * (1.0 + sv12[94]) * sv12[646];
        sv12[907] = 0.5 * (1.0 + sv12[94]) * sv12[647];
        sv12[908] = 0.5 * (1.0 + sv12[94]) * sv12[648];
        sv12[909] = 0.5 * (1.0 + sv12[94]) * sv12[649];
        sv12[910] = 0.5 * (1.0 + sv12[94]) * sv12[650];
        sv12[911] = 0.5 * sv12[179] * sv12[31];
        sv12[912] = sv12[906] + sv12[911];
        sv12[913] = -1 * sv12[884] + -1 * sv12[905];
        sv12[914] = -1 * sv12[903] + -1 * sv12[912];
        sv12[915] = -1 * sv12[901] + -1 * sv12[909];
        sv12[916] = -1 * sv12[902] + -1 * sv12[910];
        sv12[917] = sv12[914] + -1 * sv12[906];
        sv12[918] = sv12[904] / (0.5 * sv12[27]);
        sv12[919] = sv12[913] / (0.5 * sv12[27]);
        sv12[920] = sv12[873] / (0.5 * sv12[27]);
        sv12[921] = sv12[874] / (0.5 * sv12[27]);
        sv12[922] = -1 * sv12[880] / (0.5 * sv12[27]);
        sv12[923] = -1 * sv12[882] / (0.5 * sv12[27]);
        sv12[924] = sv12[917] / (0.5 * sv12[27]);
        sv12[925] = -1 * sv12[907] / (0.5 * sv12[27]);
        sv12[926] = -1 * sv12[908] / (0.5 * sv12[27]);
        sv12[927] = sv12[915] / (0.5 * sv12[27]);
        sv12[928] = sv12[916] / (0.5 * sv12[27]);
        sv12[929] = sp[33] * sv12[918];
        sv12[930] = sp[33] * sv12[919];
        sv12[931] = sp[33] * sv12[920];
        sv12[932] = sp[33] * sv12[921];
        sv12[933] = sp[33] * sv12[922];
        sv12[934] = sp[33] * sv12[923];
        sv12[935] = sp[33] * sv12[924];
        sv12[936] = sp[33] * sv12[925];
        sv12[937] = sp[33] * sv12[926];
        sv12[938] = sp[33] * sv12[927];
        sv12[939] = sp[33] * sv12[928];
        sv12[940] = 0.09 * sv12[33] + 0.09 * sv12[33];
        sv12[941] = sv12[657] + sv12[657];
        sv12[942] = sv12[658] + sv12[658];
        sv12[943] = 0.5 * sv12[43] * sv12[183];
        sv12[944] = 0.5 * sv12[43] * sv12[184];
        sv12[945] = 0.5 * sv12[43] * sv12[185];
        sv12[946] = 0.5 * sv12[675] * sv12[96];
        sv12[947] = 0.5 * sv12[675] * sv12[97];
        sv12[948] = 0.5 * sv12[678] * sv12[96];
        sv12[949] = 0.5 * sv12[678] * sv12[97];
        sv12[950] = 0.5 * sv12[679] * sv12[96];
        sv12[951] = 0.5 * sv12[679] * sv12[97];
        sv12[952] = sv12[946] + sv12[944];
        sv12[953] = sv12[945] + sv12[947];
        sv12[954] = 2 * sv12[179] * sv12[42];
        sv12[955] = 2 * sv12[94] * sv12[675];
        sv12[956] = 2 * sv12[94] * sv12[676];
        sv12[957] = 2 * sv12[94] * sv12[677];
        sv12[958] = sv12[954] + sv12[955];
        sv12[959] = sp[58] + -1 * sv12[956];
        sv12[960] = sp[59] + -1 * sv12[957];
        sv12[961] = -1 * sv12[958] + -1 * sv12[955];
        sv12[962] = sv12[961] / (2 * sv12[23]);
        sv12[963] = sv12[959] / (2 * sv12[23]);
        sv12[964] = sv12[960] / (2 * sv12[23]);
        sv12[965] = 0.5 * sv12[962] * sv12[28];
        sv12[966] = 0.5 * sv12[963] * sv12[28];
        sv12[967] = 0.5 * sv12[964] * sv12[28];
        sv12[968] = sv12[965] + sv12[947];
        sv12[969] = sv12[966] + sv12[949];
        sv12[970] = sv12[967] + sv12[951];
        sv12[971] = sv12[953] + sv12[968];
        sv12[972] = sv12[940] + -1 * sv12[943];
        sv12[973] = 0.5 * (1.0 + sv12[94]) * sv12[687];
        sv12[974] = 0.5 * (1.0 + sv12[94]) * sv12[688];
        sv12[975] = 0.5 * (1.0 + sv12[94]) * sv12[689];
        sv12[976] = 0.5 * (1.0 + sv12[94]) * sv12[690];
        sv12[977] = 0.5 * (1.0 + sv12[94]) * sv12[691];
        sv12[978] = 0.5 * (1.0 + sv12[94]) * sv12[692];
        sv12[979] = 0.5 * sv12[179] * sv12[46];
        sv12[980] = sv12[974] + sv12[979];
        sv12[981] = -1 * sv12[952] + -1 * sv12[973];
        sv12[982] = -1 * sv12[971] + -1 * sv12[980];
        sv12[983] = -1 * sv12[969] + -1 * sv12[977];
        sv12[984] = -1 * sv12[970] + -1 * sv12[978];
        sv12[985] = sv12[982] + -1 * sv12[974];
        sv12[986] = sv12[972] / (0.5 * sv12[27]);
        sv12[987] = sv12[981] / (0.5 * sv12[27]);
        sv12[988] = sv12[941] / (0.5 * sv12[27]);
        sv12[989] = sv12[942] / (0.5 * sv12[27]);
        sv12[990] = -1 * sv12[948] / (0.5 * sv12[27]);
        sv12[991] = -1 * sv12[950] / (0.5 * sv12[27]);
        sv12[992] = sv12[985] / (0.5 * sv12[27]);
        sv12[993] = -1 * sv12[975] / (0.5 * sv12[27]);
        sv12[994] = -1 * sv12[976] / (0.5 * sv12[27]);
        sv12[995] = sv12[983] / (0.5 * sv12[27]);
        sv12[996] = sv12[984] / (0.5 * sv12[27]);
        sv12[997] = sp[36] * sv12[986];
        sv12[998] = sp[36] * sv12[987];
        sv12[999] = sp[36] * sv12[988];
        sv12[1000] = sp[36] * sv12[989];
        sv12[1001] = sp[36] * sv12[990];
        sv12[1002] = sp[36] * sv12[991];
        sv12[1003] = sp[36] * sv12[992];
        sv12[1004] = sp[36] * sv12[993];
        sv12[1005] = sp[36] * sv12[994];
        sv12[1006] = sp[36] * sv12[995];
        sv12[1007] = sp[36] * sv12[996];
        sv12[1008] = sv12[929] + sv12[997];
        sv12[1009] = sv12[930] + sv12[998];
        sv12[1010] = sv12[931] + sv12[999];
        sv12[1011] = sv12[1000] + sv12[932];
        sv12[1012] = sv12[933] + sv12[1001];
        sv12[1013] = sv12[1002] + sv12[934];
        sv12[1014] = sv12[935] + sv12[1003];
        sv12[1015] = sv12[936] + sv12[1004];
        sv12[1016] = sv12[1005] + sv12[937];
        sv12[1017] = sv12[938] + sv12[1006];
        sv12[1018] = sv12[1007] + sv12[939];
        sv12[1019] = -1 * sv12[1008] + -1 * sv12[851];
        sv12[1020] = -1 * sv12[1009] + -1 * sv12[852];
        sv12[1021] = -1 * sv12[1014] + -1 * sv12[853];
        sv12[1022] = sv12[49] * (-1 * sv12[862]);
        sv12[1023] = sv12[49] * (-1 * sv12[863]);
        sv12[1024] = sv12[49] * (-1 * sv12[864]);
        sv12[1025] = sv12[49] * (-1 * sv12[865]);
        sv12[1026] = sv12[49] * (-1 * sv12[854]);
        sv12[1027] = sv12[49] * (-1 * sv12[855]);
        sv12[1028] = sv12[49] * (-1 * sv12[866]);
        sv12[1029] = sv12[49] * (-1 * sv12[867]);
        sv12[1030] = sv12[49] * (-1 * sv12[868]);
        sv12[1031] = sv12[49] * (-1 * sv12[856]);
        sv12[1032] = sv12[49] * (-1 * sv12[857]);
        sv12[1033] = sv12[49] * (-1 * sv12[869]);
        sv12[1034] = sv12[49] * (-1 * sv12[870]);
        sv12[1035] = sv12[49] * (-1 * sv12[858]);
        sv12[1036] = sv12[49] * (-1 * sv12[859]);
        sv12[1037] = sv12[49] * (-1 * sv12[871]);
        sv12[1038] = sv12[49] * (-1 * sv12[860]);
        sv12[1039] = sv12[49] * (-1 * sv12[861]);
        sv12[1040] = sv12[49] * sv12[1019];
        sv12[1041] = sv12[49] * sv12[1020];
        sv12[1042] = sv12[49] * (-1 * sv12[1010]);
        sv12[1043] = sv12[49] * (-1 * sv12[1011]);
        sv12[1044] = sv12[49] * (-1 * sv12[1012]);
        sv12[1045] = sv12[49] * (-1 * sv12[1013]);
        sv12[1046] = sv12[49] * sv12[1021];
        sv12[1047] = sv12[49] * (-1 * sv12[1015]);
        sv12[1048] = sv12[49] * (-1 * sv12[1016]);
        sv12[1049] = sv12[49] * (-1 * sv12[1017]);
        sv12[1050] = sv12[49] * (-1 * sv12[1018]);
        sv12[1051] = sp[9] * (-1 * sv12[731]);
        sv12[1052] = sp[9] * (-1 * sv12[732]);
        sv12[1053] = sp[9] * (-1 * sv12[733]);
        sv12[1054] = sp[9] * (-1 * sv12[734]);
        sv12[1055] = sv12[735] * sp[9];
        sv12[1056] = sv12[736] * sp[9];
        sv12[1057] = sp[9] * (-1 * sv12[701]);
        sv12[1058] = sp[9] * (-1 * sv12[702]);
        sv12[1059] = sp[9] * (-1 * sv12[703]);
        sv12[1060] = sp[9] * (-1 * sv12[704]);
        sv12[1061] = sp[12] * (-1 * sv12[731]);
        sv12[1062] = sp[12] * (-1 * sv12[732]);
        sv12[1063] = sp[12] * (-1 * sv12[733]);
        sv12[1064] = sp[12] * (-1 * sv12[734]);
        sv12[1065] = sv12[735] * sp[12];
        sv12[1066] = sv12[736] * sp[12];
        sv12[1067] = sp[12] * (-1 * sv12[701]);
        sv12[1068] = sp[12] * (-1 * sv12[702]);
        sv12[1069] = sp[12] * (-1 * sv12[703]);
        sv12[1070] = sp[12] * (-1 * sv12[704]);
        sv12[1071] = -1 * sv12[761] * (-1 * sv12[731]);
        sv12[1072] = -1 * sv12[761] * (-1 * sv12[732]);
        sv12[1073] = sp[33] * (-1 * sv12[761]);
        sv12[1074] = sp[36] * (-1 * sv12[761]);
        sv12[1075] = -1 * sv12[761] * (-1 * sv12[733]);
        sv12[1076] = -1 * sv12[761] * (-1 * sv12[734]);
        sv12[1077] = sv12[735] * (-1 * sv12[761]);
        sv12[1078] = sv12[736] * (-1 * sv12[761]);
        sv12[1079] = -1 * sv12[761] * (-1 * sv12[701]);
        sv12[1080] = -1 * sv12[761] * (-1 * sv12[702]);
        sv12[1081] = -1 * sv12[761] * (-1 * sv12[703]);
        sv12[1082] = -1 * sv12[761] * (-1 * sv12[704]);
        sv12[1083] = -1 * sv12[762] * (-1 * sv12[731]);
        sv12[1084] = -1 * sv12[762] * (-1 * sv12[732]);
        sv12[1085] = sp[33] * (-1 * sv12[762]);
        sv12[1086] = sp[36] * (-1 * sv12[762]);
        sv12[1087] = -1 * sv12[762] * (-1 * sv12[733]);
        sv12[1088] = -1 * sv12[762] * (-1 * sv12[734]);
        sv12[1089] = sv12[735] * (-1 * sv12[762]);
        sv12[1090] = sv12[736] * (-1 * sv12[762]);
        sv12[1091] = -1 * sv12[762] * (-1 * sv12[701]);
        sv12[1092] = -1 * sv12[762] * (-1 * sv12[702]);
        sv12[1093] = -1 * sv12[762] * (-1 * sv12[703]);
        sv12[1094] = -1 * sv12[762] * (-1 * sv12[704]);
        sv12[1095] = -1 * sv12[763] * (-1 * sv12[731]);
        sv12[1096] = -1 * sv12[763] * (-1 * sv12[732]);
        sv12[1097] = sp[33] * (-1 * sv12[763]);
        sv12[1098] = sp[36] * (-1 * sv12[763]);
        sv12[1099] = -1 * sv12[763] * (-1 * sv12[733]);
        sv12[1100] = -1 * sv12[763] * (-1 * sv12[734]);
        sv12[1101] = sv12[735] * (-1 * sv12[763]);
        sv12[1102] = sv12[736] * (-1 * sv12[763]);
        sv12[1103] = -1 * sv12[701] * (-1 * sv12[763]);
        sv12[1104] = -1 * sv12[702] * (-1 * sv12[763]);
        sv12[1105] = -1 * sv12[763] * (-1 * sv12[703]);
        sv12[1106] = -1 * sv12[763] * (-1 * sv12[704]);
        sv12[1107] = -1 * sv12[764] * (-1 * sv12[731]);
        sv12[1108] = -1 * sv12[764] * (-1 * sv12[732]);
        sv12[1109] = sp[33] * (-1 * sv12[764]);
        sv12[1110] = sp[36] * (-1 * sv12[764]);
        sv12[1111] = -1 * sv12[764] * (-1 * sv12[733]);
        sv12[1112] = -1 * sv12[764] * (-1 * sv12[734]);
        sv12[1113] = sv12[735] * (-1 * sv12[764]);
        sv12[1114] = sv12[736] * (-1 * sv12[764]);
        sv12[1115] = -1 * sv12[764] * (-1 * sv12[701]);
        sv12[1116] = -1 * sv12[702] * (-1 * sv12[764]);
        sv12[1117] = -1 * sv12[764] * (-1 * sv12[703]);
        sv12[1118] = -1 * sv12[764] * (-1 * sv12[704]);
        sv12[1119] = -1 * sv12[765] * (-1 * sv12[731]);
        sv12[1120] = -1 * sv12[765] * (-1 * sv12[732]);
        sv12[1121] = sp[33] * (-1 * sv12[765]);
        sv12[1122] = sp[36] * (-1 * sv12[765]);
        sv12[1123] = -1 * sv12[765] * (-1 * sv12[733]);
        sv12[1124] = -1 * sv12[765] * (-1 * sv12[734]);
        sv12[1125] = sv12[735] * (-1 * sv12[765]);
        sv12[1126] = sv12[736] * (-1 * sv12[765]);
        sv12[1127] = -1 * sv12[701] * (-1 * sv12[765]);
        sv12[1128] = -1 * sv12[702] * (-1 * sv12[765]);
        sv12[1129] = -1 * sv12[703] * (-1 * sv12[765]);
        sv12[1130] = -1 * sv12[704] * (-1 * sv12[765]);
        sv12[1131] = -1 * sv12[766] * (-1 * sv12[731]);
        sv12[1132] = -1 * sv12[766] * (-1 * sv12[732]);
        sv12[1133] = sp[33] * (-1 * sv12[766]);
        sv12[1134] = sp[36] * (-1 * sv12[766]);
        sv12[1135] = -1 * sv12[766] * (-1 * sv12[733]);
        sv12[1136] = -1 * sv12[766] * (-1 * sv12[734]);
        sv12[1137] = sv12[735] * (-1 * sv12[766]);
        sv12[1138] = sv12[736] * (-1 * sv12[766]);
        sv12[1139] = -1 * sv12[701] * (-1 * sv12[766]);
        sv12[1140] = -1 * sv12[702] * (-1 * sv12[766]);
        sv12[1141] = -1 * sv12[766] * (-1 * sv12[703]);
        sv12[1142] = -1 * sv12[704] * (-1 * sv12[766]);
        sv12[1143] = sv12[1026] + sv12[1071];
        sv12[1144] = sv12[1083] + sv12[1027];
        sv12[1145] = sv12[1031] + sv12[1072];
        sv12[1146] = sv12[1084] + sv12[1032];
        sv12[1147] = sv12[1035] + sv12[1075];
        sv12[1148] = sv12[1087] + sv12[1036];
        sv12[1149] = sv12[1038] + sv12[1076];
        sv12[1150] = sv12[1088] + sv12[1039];
        sv12[1151] = sv12[1040] + sv12[1077];
        sv12[1152] = sv12[1041] + sv12[1078];
        sv12[1153] = sv12[1079] + sv12[1042];
        sv12[1154] = sv12[1080] + sv12[1043];
        sv12[1155] = sv12[1044] + sv12[1081];
        sv12[1156] = sv12[1045] + sv12[1082];
        sv12[1157] = sv12[1041] + sv12[1089];
        sv12[1158] = sv12[1046] + sv12[1090];
        sv12[1159] = sv12[1091] + sv12[1047];
        sv12[1160] = sv12[1092] + sv12[1048];
        sv12[1161] = sv12[1049] + sv12[1093];
        sv12[1162] = sv12[1050] + sv12[1094];
        sv12[1163] = sv12[1101] + sv12[1042];
        sv12[1164] = sv12[1113] + sv12[1043];
        sv12[1165] = sv12[1044] + sv12[1125];
        sv12[1166] = sv12[1045] + sv12[1137];
        sv12[1167] = sv12[1102] + sv12[1047];
        sv12[1168] = sv12[1114] + sv12[1048];
        sv12[1169] = sv12[1049] + sv12[1126];
        sv12[1170] = sv12[1050] + sv12[1138];
        sv12[1171] = sp[9] * sv12[918];
        sv12[1172] = sp[9] * sv12[919];
        sv12[1173] = sp[9] * sv12[920];
        sv12[1174] = sp[9] * sv12[921];
        sv12[1175] = sp[9] * sv12[922];
        sv12[1176] = sp[9] * sv12[923];
        sv12[1177] = sp[9] * sv12[924];
        sv12[1178] = sp[9] * sv12[925];
        sv12[1179] = sp[9] * sv12[926];
        sv12[1180] = sp[9] * sv12[927];
        sv12[1181] = sp[9] * sv12[928];
        sv12[1182] = sp[12] * sv12[986];
        sv12[1183] = sp[12] * sv12[987];
        sv12[1184] = sp[12] * sv12[988];
        sv12[1185] = sp[12] * sv12[989];
        sv12[1186] = sp[12] * sv12[990];
        sv12[1187] = sp[12] * sv12[991];
        sv12[1188] = sp[12] * sv12[992];
        sv12[1189] = sp[12] * sv12[993];
        sv12[1190] = sp[12] * sv12[994];
        sv12[1191] = sp[12] * sv12[995];
        sv12[1192] = sp[12] * sv12[996];
        sv12[1193] = sv12[1171] + sv12[1182];
        sv12[1194] = sv12[1172] + sv12[1183];
        sv12[1195] = sv12[1173] + sv12[1184];
        sv12[1196] = sv12[1185] + sv12[1174];
        sv12[1197] = sv12[1175] + sv12[1186];
        sv12[1198] = sv12[1187] + sv12[1176];
        sv12[1199] = sv12[1177] + sv12[1188];
        sv12[1200] = sv12[1178] + sv12[1189];
        sv12[1201] = sv12[1190] + sv12[1179];
        sv12[1202] = sv12[1180] + sv12[1191];
        sv12[1203] = sv12[1192] + sv12[1181];
        sv12[1204] = sv12[80] * (-1 * sv12[1193]);
        sv12[1205] = sv12[80] * (-1 * sv12[1194]);
        sv12[1206] = sv12[80] * (-1 * sv12[1195]);
        sv12[1207] = sv12[80] * (-1 * sv12[1196]);
        sv12[1208] = sv12[80] * (-1 * sv12[1197]);
        sv12[1209] = sv12[80] * (-1 * sv12[1198]);
        sv12[1210] = sv12[80] * (-1 * sv12[1199]);
        sv12[1211] = sv12[80] * (-1 * sv12[1200]);
        sv12[1212] = sv12[80] * (-1 * sv12[1201]);
        sv12[1213] = sv12[80] * (-1 * sv12[1202]);
        sv12[1214] = sv12[80] * (-1 * sv12[1203]);
        sv12[1215] = sv12[1077] + sv12[1204];
        sv12[1216] = sv12[1205] + sv12[1089];
        sv12[1217] = sv12[1101] + sv12[1206];
        sv12[1218] = sv12[1113] + sv12[1207];
        sv12[1219] = sv12[1208] + sv12[1125];
        sv12[1220] = sv12[1209] + sv12[1137];
        sv12[1221] = sv12[1205] + sv12[1078];
        sv12[1222] = sv12[1210] + sv12[1090];
        sv12[1223] = sv12[1102] + sv12[1211];
        sv12[1224] = sv12[1114] + sv12[1212];
        sv12[1225] = sv12[1213] + sv12[1126];
        sv12[1226] = sv12[1214] + sv12[1138];
        sv12[1227] = sv12[1079] + sv12[1206];
        sv12[1228] = sv12[1080] + sv12[1207];
        sv12[1229] = sv12[1208] + sv12[1081];
        sv12[1230] = sv12[1209] + sv12[1082];
        sv12[1231] = sv12[1091] + sv12[1211];
        sv12[1232] = sv12[1092] + sv12[1212];
        sv12[1233] = sv12[1213] + sv12[1093];
        sv12[1234] = sv12[1214] + sv12[1094];
        sv12[1235] = sv12[1055] + sv12[1073];
        sv12[1236] = sv12[1056] + sv12[1085];
        sv12[1237] = sv12[1057] + sv12[1097];
        sv12[1238] = sv12[1058] + sv12[1109];
        sv12[1239] = sv12[1059] + sv12[1121];
        sv12[1240] = sv12[1060] + sv12[1133];
        sv12[1241] = sv12[1065] + sv12[1074];
        sv12[1242] = sv12[1066] + sv12[1086];
        sv12[1243] = sv12[1067] + sv12[1098];
        sv12[1244] = sv12[1068] + sv12[1110];
        sv12[1245] = sv12[1069] + sv12[1122];
        sv12[1246] = sv12[1070] + sv12[1134];
        sv12[1247] = sv12[1151] + sv12[1215];
        sv12[1248] = sv12[1216] + sv12[1152];
        sv12[1249] = sv12[1153] + sv12[1217];
        sv12[1250] = sv12[1154] + sv12[1218];
        sv12[1251] = sv12[1155] + sv12[1219];
        sv12[1252] = sv12[1156] + sv12[1220];
        sv12[1253] = sv12[1157] + sv12[1221];
        sv12[1254] = sv12[1158] + sv12[1222];
        sv12[1255] = sv12[1159] + sv12[1223];
        sv12[1256] = sv12[1160] + sv12[1224];
        sv12[1257] = sv12[1161] + sv12[1225];
        sv12[1258] = sv12[1162] + sv12[1226];
        sv12[1259] = sv12[1163] + sv12[1227];
        sv12[1260] = sv12[1164] + sv12[1228];
        sv12[1261] = sv12[1229] + sv12[1165];
        sv12[1262] = sv12[1230] + sv12[1166];
        sv12[1263] = sv12[1167] + sv12[1231];
        sv12[1264] = sv12[1168] + sv12[1232];
        sv12[1265] = sv12[1233] + sv12[1169];
        sv12[1266] = sv12[1234] + sv12[1170];
        sv12[1267] = sv12[1103] + sv12[1103];
        sv12[1268] = sv12[1115] + sv12[1104];
        sv12[1269] = sv12[1105] + sv12[1127];
        sv12[1270] = sv12[1106] + sv12[1139];
        sv12[1271] = sv12[1116] + sv12[1116];
        sv12[1272] = sv12[1117] + sv12[1128];
        sv12[1273] = sv12[1118] + sv12[1140];
        sv12[1274] = sv12[1129] + sv12[1129];
        sv12[1275] = sv12[1141] + sv12[1130];
        sv12[1276] = sv12[1142] + sv12[1142];
        sv12[1277] = (sv12[87] >= 0.1 ? sv12[142] : sv12[503]);
        sv12[1278] = sv12[1051] * sv12[1277];
        sv12[1279] = sv12[1052] * sv12[1277];
        sv12[1280] = sp[112] * sv12[1277];
        sv12[1281] = sp[113] * sv12[1277];
        sv12[1282] = sv12[1053] * sv12[1277];
        sv12[1283] = sv12[1054] * sv12[1277];
        sv12[1284] = sv12[1235] * sv12[1277];
        sv12[1285] = sv12[1236] * sv12[1277];
        sv12[1286] = sv12[1237] * sv12[1277];
        sv12[1287] = sv12[1238] * sv12[1277];
        sv12[1288] = sv12[1239] * sv12[1277];
        sv12[1289] = sv12[1240] * sv12[1277];
        sv12[1290] = sv12[1022] * sv12[1277];
        sv12[1291] = sv12[1023] * sv12[1277];
        sv12[1292] = sv12[1061] * sv12[1277];
        sv12[1293] = sv12[1024] * sv12[1277];
        sv12[1294] = sv12[1025] * sv12[1277];
        sv12[1295] = sv12[1143] * sv12[1277];
        sv12[1296] = sv12[1144] * sv12[1277];
        sv12[1297] = sv12[1095] * sv12[1277];
        sv12[1298] = sv12[1107] * sv12[1277];
        sv12[1299] = sv12[1119] * sv12[1277];
        sv12[1300] = sv12[1131] * sv12[1277];
        sv12[1301] = sv12[1028] * sv12[1277];
        sv12[1302] = sv12[1062] * sv12[1277];
        sv12[1303] = sv12[1029] * sv12[1277];
        sv12[1304] = sv12[1030] * sv12[1277];
        sv12[1305] = sv12[1145] * sv12[1277];
        sv12[1306] = sv12[1146] * sv12[1277];
        sv12[1307] = sv12[1096] * sv12[1277];
        sv12[1308] = sv12[1108] * sv12[1277];
        sv12[1309] = sv12[1120] * sv12[1277];
        sv12[1310] = sv12[1132] * sv12[1277];
        sv12[1311] = sp[114] * sv12[1277];
        sv12[1312] = sv12[1063] * sv12[1277];
        sv12[1313] = sv12[1064] * sv12[1277];
        sv12[1314] = sv12[1241] * sv12[1277];
        sv12[1315] = sv12[1242] * sv12[1277];
        sv12[1316] = sv12[1243] * sv12[1277];
        sv12[1317] = sv12[1244] * sv12[1277];
        sv12[1318] = sv12[1245] * sv12[1277];
        sv12[1319] = sv12[1246] * sv12[1277];
        sv12[1320] = sv12[1033] * sv12[1277];
        sv12[1321] = sv12[1034] * sv12[1277];
        sv12[1322] = sv12[1147] * sv12[1277];
        sv12[1323] = sv12[1148] * sv12[1277];
        sv12[1324] = sv12[1099] * sv12[1277];
        sv12[1325] = sv12[1111] * sv12[1277];
        sv12[1326] = sv12[1123] * sv12[1277];
        sv12[1327] = sv12[1135] * sv12[1277];
        sv12[1328] = sv12[1037] * sv12[1277];
        sv12[1329] = sv12[1149] * sv12[1277];
        sv12[1330] = sv12[1150] * sv12[1277];
        sv12[1331] = sv12[1100] * sv12[1277];
        sv12[1332] = sv12[1112] * sv12[1277];
        sv12[1333] = sv12[1124] * sv12[1277];
        sv12[1334] = sv12[1136] * sv12[1277];
        sv12[1335] = sv12[1247] * sv12[1277];
        sv12[1336] = sv12[1248] * sv12[1277];
        sv12[1337] = sv12[1249] * sv12[1277];
        sv12[1338] = sv12[1250] * sv12[1277];
        sv12[1339] = sv12[1251] * sv12[1277];
        sv12[1340] = sv12[1252] * sv12[1277];
        sv12[1341] = sv12[1253] * sv12[1277];
        sv12[1342] = sv12[1254] * sv12[1277];
        sv12[1343] = sv12[1255] * sv12[1277];
        sv12[1344] = sv12[1256] * sv12[1277];
        sv12[1345] = sv12[1257] * sv12[1277];
        sv12[1346] = sv12[1258] * sv12[1277];
        sv12[1347] = sv12[1259] * sv12[1277];
        sv12[1348] = sv12[1260] * sv12[1277];
        sv12[1349] = sv12[1261] * sv12[1277];
        sv12[1350] = sv12[1262] * sv12[1277];
        sv12[1351] = sv12[1263] * sv12[1277];
        sv12[1352] = sv12[1264] * sv12[1277];
        sv12[1353] = sv12[1265] * sv12[1277];
        sv12[1354] = sv12[1266] * sv12[1277];
        sv12[1355] = sv12[1267] * sv12[1277];
        sv12[1356] = sv12[1268] * sv12[1277];
        sv12[1357] = sv12[1269] * sv12[1277];
        sv12[1358] = sv12[1270] * sv12[1277];
        sv12[1359] = sv12[1271] * sv12[1277];
        sv12[1360] = sv12[1272] * sv12[1277];
        sv12[1361] = sv12[1273] * sv12[1277];
        sv12[1362] = sv12[1274] * sv12[1277];
        sv12[1363] = sv12[1275] * sv12[1277];
        sv12[1364] = sv12[1276] * sv12[1277];
        sv12[1365] = sv12[1278] + sv12[791];
        sv12[1366] = sv12[1279] + sv12[795];
        sv12[1367] = sv12[1280] + sv12[787];
        sv12[1368] = sv12[1281] + sv12[799];
        sv12[1369] = sv12[1282] + sv12[803];
        sv12[1370] = sv12[1283] + sv12[807];
        sv12[1371] = sv12[1284] + sv12[811];
        sv12[1372] = sv12[1285] + sv12[815];
        sv12[1373] = sv12[1286] + sv12[819];
        sv12[1374] = sv12[1287] + sv12[823];
        sv12[1375] = sv12[1288] + sv12[827];
        sv12[1376] = sv12[1289] + sv12[831];
        sv12[1377] = sv12[1292] + sv12[792];
        sv12[1378] = sv12[793] + sv12[1295];
        sv12[1379] = sv12[794] + sv12[1296];
        sv12[1380] = sv12[1302] + sv12[796];
        sv12[1381] = sv12[797] + sv12[1305];
        sv12[1382] = sv12[798] + sv12[1306];
        sv12[1383] = sv12[1281] + sv12[788];
        sv12[1384] = sv12[789] + sv12[1284];
        sv12[1385] = sv12[790] + sv12[1285];
        sv12[1386] = sv12[1311] + sv12[800];
        sv12[1387] = sv12[1312] + sv12[804];
        sv12[1388] = sv12[1313] + sv12[808];
        sv12[1389] = sv12[1314] + sv12[812];
        sv12[1390] = sv12[1315] + sv12[816];
        sv12[1391] = sv12[1316] + sv12[820];
        sv12[1392] = sv12[1317] + sv12[824];
        sv12[1393] = sv12[1318] + sv12[828];
        sv12[1394] = sv12[1319] + sv12[832];
        sv12[1395] = sv12[801] + sv12[1314];
        sv12[1396] = sv12[802] + sv12[1315];
        sv12[1397] = sv12[805] + sv12[1322];
        sv12[1398] = sv12[806] + sv12[1323];
        sv12[1399] = sv12[809] + sv12[1329];
        sv12[1400] = sv12[810] + sv12[1330];
        sv12[1401] = sv12[813] + sv12[1335];
        sv12[1402] = sv12[817] + sv12[1336];
        sv12[1403] = sv12[821] + sv12[1337];
        sv12[1404] = sv12[825] + sv12[1338];
        sv12[1405] = sv12[829] + sv12[1339];
        sv12[1406] = sv12[833] + sv12[1340];
        sv12[1407] = sv12[814] + sv12[1341];
        sv12[1408] = sv12[818] + sv12[1342];
        sv12[1409] = sv12[822] + sv12[1343];
        sv12[1410] = sv12[826] + sv12[1344];
        sv12[1411] = sv12[830] + sv12[1345];
        sv12[1412] = sv12[834] + sv12[1346];
        sv12[1413] = sv12[1367] + sv12[835];
        sv12[1414] = sv12[1368] + sv12[836];
        sv12[1415] = sv12[837] + sv12[1371];
        sv12[1416] = sv12[838] + sv12[1372];
        sv12[1417] = sv12[1383] + sv12[839];
        sv12[1418] = sv12[1384] + sv12[840];
        sv12[1419] = sv12[1385] + sv12[841];
        sv12[1420] = sv12[1386] + sv12[842];
        sv12[1421] = sv12[843] + sv12[1389];
        sv12[1422] = sv12[844] + sv12[1390];
        sv12[1423] = sv12[1395] + sv12[845];
        sv12[1424] = sv12[1396] + sv12[846];
        sv12[1425] = sv12[847] + sv12[1401];
        sv12[1426] = sv12[848] + sv12[1402];
        sv12[1427] = sv12[849] + sv12[1407];
        sv12[1428] = sv12[850] + sv12[1408];
        sv12[1429] = sv12[821] + sv12[1347];
        sv12[1430] = sv12[825] + sv12[1348];
        sv12[1431] = sv12[829] + sv12[1349];
        sv12[1432] = sv12[833] + sv12[1350];
        sv12[1433] = sv12[822] + sv12[1351];
        sv12[1434] = sv12[826] + sv12[1352];
        sv12[1435] = sv12[830] + sv12[1353];
        sv12[1436] = sv12[834] + sv12[1354];
        sv12[1437] = w1_d1_c1 * sp[3];
        sv12[1438] = w1_d0_c1 * sp[4];
        sv12[1439] = sv12[1437] + sv12[1438];
        sv12[1440] = w2_c1 * sv12[1439];
        sv12[1441] = w1_d0_c1 * sp[5];
        sv12[1442] = w1_d1_c1 * sp[6];
        sv12[1443] = sv12[1441] + sv12[1442];
        sv12[1444] = w2_c0 * sv12[1443];
        sv12[1445] = sv12[1440] + sv12[1444];
        sv12[1446] = sv12[1439] + sv12[1439];
        sv12[1447] = 2.0 * sv12[31] * (sv12[1446] / 2);
        sv12[1448] = 2.0 * (0.0001 + sv12[28]) * (sp[124] / 2);
        sv12[1449] = sv12[1447] + sv12[1448];
        sv12[1450] = w1_d1_c0 * sp[3];
        sv12[1451] = w1_d0_c0 * sp[4];
        sv12[1452] = sv12[1450] + sv12[1451];
        sv12[1453] = sv12[1452] + sv12[1443];
        sv12[1454] = 2.0 * sv12[46] * (sv12[1453] / 2);
        sv12[1455] = 2.0 * (0.0001 + sv12[28]) * (sp[143] / 2);
        sv12[1456] = sv12[1454] + sv12[1455];
        sv12[1457] = sv12[1449] + sv12[1456];
        sv12[1458] = sv12[1445] + -1 * sv12[1457];
        sv12[1459] = sv12[1458] + sp[146];
        sv12[1460] = w3_d1_c1 * sp[3];
        sv12[1461] = w3_d0_c1 * sp[4];
        sv12[1462] = sv12[1460] + sv12[1461];
        sv12[1463] = w2_c1 * sv12[1462];
        sv12[1464] = w3_d0_c1 * sp[5];
        sv12[1465] = w3_d1_c1 * sp[6];
        sv12[1466] = sv12[1464] + sv12[1465];
        sv12[1467] = w2_c0 * sv12[1466];
        sv12[1468] = sv12[1463] + sv12[1467];
        sv12[1469] = sv12[1462] + sv12[1462];
        sv12[1470] = 2.0 * sv12[31] * (sv12[1469] / 2);
        sv12[1471] = 2.0 * (0.0001 + sv12[28]) * (sp[156] / 2);
        sv12[1472] = sv12[1470] + sv12[1471];
        sv12[1473] = w3_d1_c0 * sp[3];
        sv12[1474] = w3_d0_c0 * sp[4];
        sv12[1475] = sv12[1473] + sv12[1474];
        sv12[1476] = sv12[1475] + sv12[1466];
        sv12[1477] = 2.0 * sv12[46] * (sv12[1476] / 2);
        sv12[1478] = 2.0 * (0.0001 + sv12[28]) * (sp[175] / 2);
        sv12[1479] = sv12[1477] + sv12[1478];
        sv12[1480] = sv12[1472] + sv12[1479];
        sv12[1481] = sv12[1468] + -1 * sv12[1480];
        sv12[1482] = sv12[1481] + sp[178];
        sv12[1483] = sv12[1459] * sv12[1482];
        sv12[1484] = w2_c1 * sv12[1452];
        sv12[1485] = w1_d0_c0 * sp[5];
        sv12[1486] = w1_d1_c0 * sp[6];
        sv12[1487] = sv12[1485] + sv12[1486];
        sv12[1488] = w2_c0 * sv12[1487];
        sv12[1489] = sv12[1484] + sv12[1488];
        sv12[1490] = 2.0 * sv12[31] * (sv12[1453] / 2);
        sv12[1491] = 2.0 * (0.0001 + sv12[28]) * (sp[191] / 2);
        sv12[1492] = sv12[1490] + sv12[1491];
        sv12[1493] = sv12[1487] + sv12[1487];
        sv12[1494] = 2.0 * sv12[46] * (sv12[1493] / 2);
        sv12[1495] = 2.0 * (0.0001 + sv12[28]) * (sp[195] / 2);
        sv12[1496] = sv12[1494] + sv12[1495];
        sv12[1497] = sv12[1492] + sv12[1496];
        sv12[1498] = sv12[1489] + -1 * sv12[1497];
        sv12[1499] = sv12[1498] + sp[198];
        sv12[1500] = w2_c1 * sv12[1475];
        sv12[1501] = w3_d0_c0 * sp[5];
        sv12[1502] = w3_d1_c0 * sp[6];
        sv12[1503] = sv12[1501] + sv12[1502];
        sv12[1504] = w2_c0 * sv12[1503];
        sv12[1505] = sv12[1500] + sv12[1504];
        sv12[1506] = 2.0 * sv12[31] * (sv12[1476] / 2);
        sv12[1507] = 2.0 * (0.0001 + sv12[28]) * (sp[211] / 2);
        sv12[1508] = sv12[1506] + sv12[1507];
        sv12[1509] = sv12[1503] + sv12[1503];
        sv12[1510] = 2.0 * sv12[46] * (sv12[1509] / 2);
        sv12[1511] = 2.0 * (0.0001 + sv12[28]) * (sp[215] / 2);
        sv12[1512] = sv12[1510] + sv12[1511];
        sv12[1513] = sv12[1508] + sv12[1512];
        sv12[1514] = sv12[1505] + -1 * sv12[1513];
        sv12[1515] = sv12[1514] + sp[218];
        sv12[1516] = sv12[1499] * sv12[1515];
        sv12[1517] = sv12[1483] + sv12[1516];
        sv12[1518] = sv12[1517] * sv12[583];
        sv12[1519] = sv12[1517] * sv12[584];
        sv12[1520] = sv12[1517] * sv12[585];
        sv12[1521] = sv12[1517] * sv12[586];
        sv12[1522] = sv12[1517] * sv12[587];
        sv12[1523] = sv12[1517] * sv12[588];
        sv12[1524] = sv12[1517] * sv12[589];
        sv12[1525] = sv12[1517] * sv12[590];
        sv12[1526] = sv12[1517] * sv12[591];
        sv12[1527] = sv12[1517] * sv12[592];
        sv12[1528] = sv12[1517] * sv12[593];
        sv12[1529] = sv12[1517] * sv12[594];
        sv12[1530] = sv12[1517] * sv12[595];
        sv12[1531] = sv12[1517] * sv12[596];
        sv12[1532] = sv12[1517] * sv12[597];
        sv12[1533] = sv12[1517] * sv12[598];
        sv12[1534] = 2.0 * sv12[645] * (sv12[1453] / 2);
        sv12[1535] = 2.0 * sv12[646] * (sv12[1453] / 2);
        sv12[1536] = 2.0 * sv12[647] * (sv12[1453] / 2);
        sv12[1537] = 2.0 * sv12[648] * (sv12[1453] / 2);
        sv12[1538] = 2.0 * sv12[649] * (sv12[1453] / 2);
        sv12[1539] = 2.0 * sv12[650] * (sv12[1453] / 2);
        sv12[1540] = 2.0 * sv12[96] * (sp[191] / 2);
        sv12[1541] = 2.0 * sv12[97] * (sp[191] / 2);
        sv12[1542] = sv12[1534] + sv12[1540];
        sv12[1543] = sv12[1535] + sv12[1541];
        sv12[1544] = 2.0 * sv12[687] * (sv12[1493] / 2);
        sv12[1545] = 2.0 * sv12[688] * (sv12[1493] / 2);
        sv12[1546] = 2.0 * sv12[689] * (sv12[1493] / 2);
        sv12[1547] = 2.0 * sv12[690] * (sv12[1493] / 2);
        sv12[1548] = 2.0 * sv12[691] * (sv12[1493] / 2);
        sv12[1549] = 2.0 * sv12[692] * (sv12[1493] / 2);
        sv12[1550] = 2.0 * sv12[96] * (sp[195] / 2);
        sv12[1551] = 2.0 * sv12[97] * (sp[195] / 2);
        sv12[1552] = sv12[1544] + sv12[1550];
        sv12[1553] = sv12[1545] + sv12[1551];
        sv12[1554] = sv12[1542] + sv12[1552];
        sv12[1555] = sv12[1543] + sv12[1553];
        sv12[1556] = sv12[1546] + sv12[1536];
        sv12[1557] = sv12[1547] + sv12[1537];
        sv12[1558] = sv12[1548] + sv12[1538];
        sv12[1559] = sv12[1549] + sv12[1539];
        sv12[1560] = sv12[1515] * sv12[1452];
        sv12[1561] = sv12[1515] * sv12[1487];
        sv12[1562] = sv12[1515] * (-1 * sv12[1554]);
        sv12[1563] = sv12[1515] * (-1 * sv12[1555]);
        sv12[1564] = sv12[1515] * (-1 * sv12[1556]);
        sv12[1565] = sv12[1515] * (-1 * sv12[1557]);
        sv12[1566] = sv12[1515] * (-1 * sv12[1558]);
        sv12[1567] = sv12[1515] * (-1 * sv12[1559]);
        sv12[1568] = 2.0 * sv12[645] * (sv12[1476] / 2);
        sv12[1569] = 2.0 * sv12[646] * (sv12[1476] / 2);
        sv12[1570] = 2.0 * sv12[647] * (sv12[1476] / 2);
        sv12[1571] = 2.0 * sv12[648] * (sv12[1476] / 2);
        sv12[1572] = 2.0 * sv12[649] * (sv12[1476] / 2);
        sv12[1573] = 2.0 * sv12[650] * (sv12[1476] / 2);
        sv12[1574] = 2.0 * sv12[96] * (sp[211] / 2);
        sv12[1575] = 2.0 * sv12[97] * (sp[211] / 2);
        sv12[1576] = sv12[1568] + sv12[1574];
        sv12[1577] = sv12[1569] + sv12[1575];
        sv12[1578] = 2.0 * sv12[687] * (sv12[1509] / 2);
        sv12[1579] = 2.0 * sv12[688] * (sv12[1509] / 2);
        sv12[1580] = 2.0 * sv12[689] * (sv12[1509] / 2);
        sv12[1581] = 2.0 * sv12[690] * (sv12[1509] / 2);
        sv12[1582] = 2.0 * sv12[691] * (sv12[1509] / 2);
        sv12[1583] = 2.0 * sv12[692] * (sv12[1509] / 2);
        sv12[1584] = 2.0 * sv12[96] * (sp[215] / 2);
        sv12[1585] = 2.0 * sv12[97] * (sp[215] / 2);
        sv12[1586] = sv12[1578] + sv12[1584];
        sv12[1587] = sv12[1579] + sv12[1585];
        sv12[1588] = sv12[1576] + sv12[1586];
        sv12[1589] = sv12[1577] + sv12[1587];
        sv12[1590] = sv12[1580] + sv12[1570];
        sv12[1591] = sv12[1581] + sv12[1571];
        sv12[1592] = sv12[1582] + sv12[1572];
        sv12[1593] = sv12[1583] + sv12[1573];
        sv12[1594] = sv12[1499] * sv12[1475];
        sv12[1595] = sv12[1499] * sv12[1503];
        sv12[1596] = sv12[1499] * (-1 * sv12[1588]);
        sv12[1597] = sv12[1499] * (-1 * sv12[1589]);
        sv12[1598] = sv12[1499] * (-1 * sv12[1590]);
        sv12[1599] = sv12[1499] * (-1 * sv12[1591]);
        sv12[1600] = sv12[1499] * (-1 * sv12[1592]);
        sv12[1601] = sv12[1499] * (-1 * sv12[1593]);
        sv12[1602] = sv12[1560] + sv12[1594];
        sv12[1603] = sv12[1561] + sv12[1595];
        sv12[1604] = sv12[1562] + sv12[1596];
        sv12[1605] = sv12[1563] + sv12[1597];
        sv12[1606] = sv12[1564] + sv12[1598];
        sv12[1607] = sv12[1565] + sv12[1599];
        sv12[1608] = sv12[1566] + sv12[1600];
        sv12[1609] = sv12[1567] + sv12[1601];
        sv12[1610] = 2.0 * sv12[645] * (sv12[1446] / 2);
        sv12[1611] = 2.0 * sv12[646] * (sv12[1446] / 2);
        sv12[1612] = 2.0 * sv12[647] * (sv12[1446] / 2);
        sv12[1613] = 2.0 * sv12[648] * (sv12[1446] / 2);
        sv12[1614] = 2.0 * sv12[649] * (sv12[1446] / 2);
        sv12[1615] = 2.0 * sv12[650] * (sv12[1446] / 2);
        sv12[1616] = 2.0 * sv12[96] * (sp[124] / 2);
        sv12[1617] = 2.0 * sv12[97] * (sp[124] / 2);
        sv12[1618] = sv12[1610] + sv12[1616];
        sv12[1619] = sv12[1611] + sv12[1617];
        sv12[1620] = 2.0 * sv12[687] * (sv12[1453] / 2);
        sv12[1621] = 2.0 * sv12[688] * (sv12[1453] / 2);
        sv12[1622] = 2.0 * sv12[689] * (sv12[1453] / 2);
        sv12[1623] = 2.0 * sv12[690] * (sv12[1453] / 2);
        sv12[1624] = 2.0 * sv12[691] * (sv12[1453] / 2);
        sv12[1625] = 2.0 * sv12[692] * (sv12[1453] / 2);
        sv12[1626] = 2.0 * sv12[96] * (sp[143] / 2);
        sv12[1627] = 2.0 * sv12[97] * (sp[143] / 2);
        sv12[1628] = sv12[1620] + sv12[1626];
        sv12[1629] = sv12[1621] + sv12[1627];
        sv12[1630] = sv12[1618] + sv12[1628];
        sv12[1631] = sv12[1619] + sv12[1629];
        sv12[1632] = sv12[1612] + sv12[1622];
        sv12[1633] = sv12[1613] + sv12[1623];
        sv12[1634] = sv12[1614] + sv12[1624];
        sv12[1635] = sv12[1615] + sv12[1625];
        sv12[1636] = sv12[1482] * sv12[1439];
        sv12[1637] = sv12[1482] * sv12[1443];
        sv12[1638] = sv12[1482] * (-1 * sv12[1630]);
        sv12[1639] = sv12[1482] * (-1 * sv12[1631]);
        sv12[1640] = sv12[1482] * (-1 * sv12[1632]);
        sv12[1641] = sv12[1482] * (-1 * sv12[1633]);
        sv12[1642] = sv12[1482] * (-1 * sv12[1634]);
        sv12[1643] = sv12[1482] * (-1 * sv12[1635]);
        sv12[1644] = 2.0 * sv12[645] * (sv12[1469] / 2);
        sv12[1645] = 2.0 * sv12[646] * (sv12[1469] / 2);
        sv12[1646] = 2.0 * sv12[647] * (sv12[1469] / 2);
        sv12[1647] = 2.0 * sv12[648] * (sv12[1469] / 2);
        sv12[1648] = 2.0 * sv12[649] * (sv12[1469] / 2);
        sv12[1649] = 2.0 * sv12[650] * (sv12[1469] / 2);
        sv12[1650] = 2.0 * sv12[96] * (sp[156] / 2);
        sv12[1651] = 2.0 * sv12[97] * (sp[156] / 2);
        sv12[1652] = sv12[1644] + sv12[1650];
        sv12[1653] = sv12[1645] + sv12[1651];
        sv12[1654] = 2.0 * sv12[687] * (sv12[1476] / 2);
        sv12[1655] = 2.0 * sv12[688] * (sv12[1476] / 2);
        sv12[1656] = 2.0 * sv12[689] * (sv12[1476] / 2);
        sv12[1657] = 2.0 * sv12[690] * (sv12[1476] / 2);
        sv12[1658] = 2.0 * sv12[691] * (sv12[1476] / 2);
        sv12[1659] = 2.0 * sv12[692] * (sv12[1476] / 2);
        sv12[1660] = 2.0 * sv12[96] * (sp[175] / 2);
        sv12[1661] = 2.0 * sv12[97] * (sp[175] / 2);
        sv12[1662] = sv12[1654] + sv12[1660];
        sv12[1663] = sv12[1655] + sv12[1661];
        sv12[1664] = sv12[1652] + sv12[1662];
        sv12[1665] = sv12[1653] + sv12[1663];
        sv12[1666] = sv12[1646] + sv12[1656];
        sv12[1667] = sv12[1647] + sv12[1657];
        sv12[1668] = sv12[1648] + sv12[1658];
        sv12[1669] = sv12[1649] + sv12[1659];
        sv12[1670] = sv12[1459] * sv12[1462];
        sv12[1671] = sv12[1459] * sv12[1466];
        sv12[1672] = sv12[1459] * (-1 * sv12[1664]);
        sv12[1673] = sv12[1459] * (-1 * sv12[1665]);
        sv12[1674] = sv12[1459] * (-1 * sv12[1666]);
        sv12[1675] = sv12[1459] * (-1 * sv12[1667]);
        sv12[1676] = sv12[1459] * (-1 * sv12[1668]);
        sv12[1677] = sv12[1459] * (-1 * sv12[1669]);
        sv12[1678] = sv12[1636] + sv12[1670];
        sv12[1679] = sv12[1637] + sv12[1671];
        sv12[1680] = sv12[1638] + sv12[1672];
        sv12[1681] = sv12[1639] + sv12[1673];
        sv12[1682] = sv12[1640] + sv12[1674];
        sv12[1683] = sv12[1641] + sv12[1675];
        sv12[1684] = sv12[1642] + sv12[1676];
        sv12[1685] = sv12[1643] + sv12[1677];
        sv12[1686] = sv12[1602] + sv12[1678];
        sv12[1687] = sv12[1603] + sv12[1679];
        sv12[1688] = sv12[1604] + sv12[1680];
        sv12[1689] = sv12[1605] + sv12[1681];
        sv12[1690] = sv12[1606] + sv12[1682];
        sv12[1691] = sv12[1683] + sv12[1607];
        sv12[1692] = sv12[1608] + sv12[1684];
        sv12[1693] = sv12[1685] + sv12[1609];
        sv12[1694] = sv12[1686] * sv12[783];
        sv12[1695] = sv12[1686] * sv12[784];
        sv12[1696] = sv12[1686] * sv12[785];
        sv12[1697] = sv12[1686] * sv12[786];
        sv12[1698] = sv12[1687] * sv12[783];
        sv12[1699] = sv12[1687] * sv12[784];
        sv12[1700] = sv12[1687] * sv12[785];
        sv12[1701] = sv12[1687] * sv12[786];
        sv12[1702] = sv12[1688] * sv12[783];
        sv12[1703] = sv12[1688] * sv12[784];
        sv12[1704] = sv12[1688] * sv12[785];
        sv12[1705] = sv12[1688] * sv12[786];
        sv12[1706] = sv12[1689] * sv12[783];
        sv12[1707] = sv12[1689] * sv12[784];
        sv12[1708] = sv12[1689] * sv12[785];
        sv12[1709] = sv12[1689] * sv12[786];
        sv12[1710] = sv12[1690] * sv12[783];
        sv12[1711] = sv12[1690] * sv12[784];
        sv12[1712] = sv12[1690] * sv12[785];
        sv12[1713] = sv12[1690] * sv12[786];
        sv12[1714] = sv12[1691] * sv12[783];
        sv12[1715] = sv12[1691] * sv12[784];
        sv12[1716] = sv12[1691] * sv12[785];
        sv12[1717] = sv12[1691] * sv12[786];
        sv12[1718] = sv12[1692] * sv12[783];
        sv12[1719] = sv12[1692] * sv12[784];
        sv12[1720] = sv12[1692] * sv12[785];
        sv12[1721] = sv12[1692] * sv12[786];
        sv12[1722] = sv12[1693] * sv12[783];
        sv12[1723] = sv12[1693] * sv12[784];
        sv12[1724] = sv12[1693] * sv12[785];
        sv12[1725] = sv12[1693] * sv12[786];
        sv12[1726] = sv12[1694] + sv12[1518];
        sv12[1727] = sv12[1695] + sv12[1519];
        sv12[1728] = sv12[1520] + sv12[1696];
        sv12[1729] = sv12[1521] + sv12[1697];
        sv12[1730] = sv12[1698] + sv12[1522];
        sv12[1731] = sv12[1523] + sv12[1702];
        sv12[1732] = sv12[1524] + sv12[1706];
        sv12[1733] = sv12[1699] + sv12[1525];
        sv12[1734] = sv12[1526] + sv12[1700];
        sv12[1735] = sv12[1527] + sv12[1701];
        sv12[1736] = sv12[1528] + sv12[1703];
        sv12[1737] = sv12[1529] + sv12[1707];
        sv12[1738] = sv12[1530] + sv12[1704];
        sv12[1739] = sv12[1531] + sv12[1705];
        sv12[1740] = sv12[1532] + sv12[1708];
        sv12[1741] = sv12[1533] + sv12[1709];
        sv12[1742] = sv12[1452] * sv12[1475];
        sv12[1743] = sv12[1452] * sv12[1503];
        sv12[1744] = sv12[1452] * (-1 * sv12[1588]);
        sv12[1745] = sv12[1452] * (-1 * sv12[1589]);
        sv12[1746] = sv12[1452] * (-1 * sv12[1590]);
        sv12[1747] = sv12[1452] * (-1 * sv12[1591]);
        sv12[1748] = sv12[1452] * (-1 * sv12[1592]);
        sv12[1749] = sv12[1452] * (-1 * sv12[1593]);
        sv12[1750] = sv12[1475] * sv12[1487];
        sv12[1751] = sv12[1487] * sv12[1503];
        sv12[1752] = sv12[1487] * (-1 * sv12[1588]);
        sv12[1753] = sv12[1487] * (-1 * sv12[1589]);
        sv12[1754] = sv12[1487] * (-1 * sv12[1590]);
        sv12[1755] = sv12[1487] * (-1 * sv12[1591]);
        sv12[1756] = sv12[1487] * (-1 * sv12[1592]);
        sv12[1757] = sv12[1487] * (-1 * sv12[1593]);
        sv12[1758] = sv12[1475] * (-1 * sv12[1554]);
        sv12[1759] = sv12[1503] * (-1 * sv12[1554]);
        sv12[1760] = -1 * sv12[1554] * (-1 * sv12[1588]);
        sv12[1761] = -1 * sv12[1554] * (-1 * sv12[1589]);
        sv12[1762] = -1 * sv12[1554] * (-1 * sv12[1590]);
        sv12[1763] = -1 * sv12[1554] * (-1 * sv12[1591]);
        sv12[1764] = -1 * sv12[1554] * (-1 * sv12[1592]);
        sv12[1765] = -1 * sv12[1554] * (-1 * sv12[1593]);
        sv12[1766] = sv12[1475] * (-1 * sv12[1555]);
        sv12[1767] = sv12[1503] * (-1 * sv12[1555]);
        sv12[1768] = -1 * sv12[1555] * (-1 * sv12[1588]);
        sv12[1769] = -1 * sv12[1555] * (-1 * sv12[1589]);
        sv12[1770] = -1 * sv12[1555] * (-1 * sv12[1590]);
        sv12[1771] = -1 * sv12[1555] * (-1 * sv12[1591]);
        sv12[1772] = -1 * sv12[1555] * (-1 * sv12[1592]);
        sv12[1773] = -1 * sv12[1555] * (-1 * sv12[1593]);
        sv12[1774] = sv12[1475] * (-1 * sv12[1556]);
        sv12[1775] = sv12[1503] * (-1 * sv12[1556]);
        sv12[1776] = -1 * sv12[1588] * (-1 * sv12[1556]);
        sv12[1777] = -1 * sv12[1589] * (-1 * sv12[1556]);
        sv12[1778] = -1 * sv12[1556] * (-1 * sv12[1590]);
        sv12[1779] = -1 * sv12[1556] * (-1 * sv12[1591]);
        sv12[1780] = -1 * sv12[1556] * (-1 * sv12[1592]);
        sv12[1781] = -1 * sv12[1556] * (-1 * sv12[1593]);
        sv12[1782] = sv12[1475] * (-1 * sv12[1557]);
        sv12[1783] = sv12[1503] * (-1 * sv12[1557]);
        sv12[1784] = -1 * sv12[1588] * (-1 * sv12[1557]);
        sv12[1785] = -1 * sv12[1589] * (-1 * sv12[1557]);
        sv12[1786] = -1 * sv12[1557] * (-1 * sv12[1590]);
        sv12[1787] = -1 * sv12[1557] * (-1 * sv12[1591]);
        sv12[1788] = -1 * sv12[1557] * (-1 * sv12[1592]);
        sv12[1789] = -1 * sv12[1557] * (-1 * sv12[1593]);
        sv12[1790] = sv12[1475] * (-1 * sv12[1558]);
        sv12[1791] = sv12[1503] * (-1 * sv12[1558]);
        sv12[1792] = -1 * sv12[1588] * (-1 * sv12[1558]);
        sv12[1793] = -1 * sv12[1589] * (-1 * sv12[1558]);
        sv12[1794] = -1 * sv12[1558] * (-1 * sv12[1590]);
        sv12[1795] = -1 * sv12[1558] * (-1 * sv12[1591]);
        sv12[1796] = -1 * sv12[1558] * (-1 * sv12[1592]);
        sv12[1797] = -1 * sv12[1558] * (-1 * sv12[1593]);
        sv12[1798] = sv12[1475] * (-1 * sv12[1559]);
        sv12[1799] = sv12[1503] * (-1 * sv12[1559]);
        sv12[1800] = -1 * sv12[1588] * (-1 * sv12[1559]);
        sv12[1801] = -1 * sv12[1589] * (-1 * sv12[1559]);
        sv12[1802] = -1 * sv12[1559] * (-1 * sv12[1590]);
        sv12[1803] = -1 * sv12[1559] * (-1 * sv12[1591]);
        sv12[1804] = -1 * sv12[1559] * (-1 * sv12[1592]);
        sv12[1805] = -1 * sv12[1559] * (-1 * sv12[1593]);
        sv12[1806] = 2.0 * sv12[918] * (sv12[1453] / 2);
        sv12[1807] = 2.0 * sv12[919] * (sv12[1453] / 2);
        sv12[1808] = 2.0 * sv12[920] * (sv12[1453] / 2);
        sv12[1809] = 2.0 * sv12[921] * (sv12[1453] / 2);
        sv12[1810] = 2.0 * sv12[922] * (sv12[1453] / 2);
        sv12[1811] = 2.0 * sv12[923] * (sv12[1453] / 2);
        sv12[1812] = 2.0 * sv12[924] * (sv12[1453] / 2);
        sv12[1813] = 2.0 * sv12[925] * (sv12[1453] / 2);
        sv12[1814] = 2.0 * sv12[926] * (sv12[1453] / 2);
        sv12[1815] = 2.0 * sv12[927] * (sv12[1453] / 2);
        sv12[1816] = 2.0 * sv12[928] * (sv12[1453] / 2);
        sv12[1817] = 2.0 * sv12[183] * (sp[191] / 2);
        sv12[1818] = 2.0 * sv12[184] * (sp[191] / 2);
        sv12[1819] = 2.0 * sv12[185] * (sp[191] / 2);
        sv12[1820] = sv12[1806] + sv12[1817];
        sv12[1821] = sv12[1807] + sv12[1818];
        sv12[1822] = sv12[1812] + sv12[1819];
        sv12[1823] = 2.0 * sv12[986] * (sv12[1493] / 2);
        sv12[1824] = 2.0 * sv12[987] * (sv12[1493] / 2);
        sv12[1825] = 2.0 * sv12[988] * (sv12[1493] / 2);
        sv12[1826] = 2.0 * sv12[989] * (sv12[1493] / 2);
        sv12[1827] = 2.0 * sv12[990] * (sv12[1493] / 2);
        sv12[1828] = 2.0 * sv12[991] * (sv12[1493] / 2);
        sv12[1829] = 2.0 * sv12[992] * (sv12[1493] / 2);
        sv12[1830] = 2.0 * sv12[993] * (sv12[1493] / 2);
        sv12[1831] = 2.0 * sv12[994] * (sv12[1493] / 2);
        sv12[1832] = 2.0 * sv12[995] * (sv12[1493] / 2);
        sv12[1833] = 2.0 * sv12[996] * (sv12[1493] / 2);
        sv12[1834] = 2.0 * sv12[183] * (sp[195] / 2);
        sv12[1835] = 2.0 * sv12[184] * (sp[195] / 2);
        sv12[1836] = 2.0 * sv12[185] * (sp[195] / 2);
        sv12[1837] = sv12[1823] + sv12[1834];
        sv12[1838] = sv12[1824] + sv12[1835];
        sv12[1839] = sv12[1829] + sv12[1836];
        sv12[1840] = sv12[1820] + sv12[1837];
        sv12[1841] = sv12[1821] + sv12[1838];
        sv12[1842] = sv12[1825] + sv12[1808];
        sv12[1843] = sv12[1826] + sv12[1809];
        sv12[1844] = sv12[1827] + sv12[1810];
        sv12[1845] = sv12[1828] + sv12[1811];
        sv12[1846] = sv12[1822] + sv12[1839];
        sv12[1847] = sv12[1830] + sv12[1813];
        sv12[1848] = sv12[1831] + sv12[1814];
        sv12[1849] = sv12[1832] + sv12[1815];
        sv12[1850] = sv12[1833] + sv12[1816];
        sv12[1851] = sv12[1515] * (-1 * sv12[1840]);
        sv12[1852] = sv12[1515] * (-1 * sv12[1841]);
        sv12[1853] = sv12[1515] * (-1 * sv12[1842]);
        sv12[1854] = sv12[1515] * (-1 * sv12[1843]);
        sv12[1855] = sv12[1515] * (-1 * sv12[1844]);
        sv12[1856] = sv12[1515] * (-1 * sv12[1845]);
        sv12[1857] = sv12[1515] * (-1 * sv12[1846]);
        sv12[1858] = sv12[1515] * (-1 * sv12[1847]);
        sv12[1859] = sv12[1515] * (-1 * sv12[1848]);
        sv12[1860] = sv12[1515] * (-1 * sv12[1849]);
        sv12[1861] = sv12[1515] * (-1 * sv12[1850]);
        sv12[1862] = sv12[1851] + sv12[1760];
        sv12[1863] = sv12[1852] + sv12[1768];
        sv12[1864] = sv12[1776] + sv12[1853];
        sv12[1865] = sv12[1784] + sv12[1854];
        sv12[1866] = sv12[1855] + sv12[1792];
        sv12[1867] = sv12[1856] + sv12[1800];
        sv12[1868] = sv12[1852] + sv12[1761];
        sv12[1869] = sv12[1857] + sv12[1769];
        sv12[1870] = sv12[1777] + sv12[1858];
        sv12[1871] = sv12[1785] + sv12[1859];
        sv12[1872] = sv12[1860] + sv12[1793];
        sv12[1873] = sv12[1861] + sv12[1801];
        sv12[1874] = sv12[1853] + sv12[1762];
        sv12[1875] = sv12[1854] + sv12[1763];
        sv12[1876] = sv12[1855] + sv12[1764];
        sv12[1877] = sv12[1856] + sv12[1765];
        sv12[1878] = sv12[1858] + sv12[1770];
        sv12[1879] = sv12[1859] + sv12[1771];
        sv12[1880] = sv12[1860] + sv12[1772];
        sv12[1881] = sv12[1861] + sv12[1773];
        sv12[1882] = 2.0 * sv12[918] * (sv12[1476] / 2);
        sv12[1883] = 2.0 * sv12[919] * (sv12[1476] / 2);
        sv12[1884] = 2.0 * sv12[920] * (sv12[1476] / 2);
        sv12[1885] = 2.0 * sv12[921] * (sv12[1476] / 2);
        sv12[1886] = 2.0 * sv12[922] * (sv12[1476] / 2);
        sv12[1887] = 2.0 * sv12[923] * (sv12[1476] / 2);
        sv12[1888] = 2.0 * sv12[924] * (sv12[1476] / 2);
        sv12[1889] = 2.0 * sv12[925] * (sv12[1476] / 2);
        sv12[1890] = 2.0 * sv12[926] * (sv12[1476] / 2);
        sv12[1891] = 2.0 * sv12[927] * (sv12[1476] / 2);
        sv12[1892] = 2.0 * sv12[928] * (sv12[1476] / 2);
        sv12[1893] = 2.0 * sv12[183] * (sp[211] / 2);
        sv12[1894] = 2.0 * sv12[184] * (sp[211] / 2);
        sv12[1895] = 2.0 * sv12[185] * (sp[211] / 2);
        sv12[1896] = sv12[1882] + sv12[1893];
        sv12[1897] = sv12[1883] + sv12[1894];
        sv12[1898] = sv12[1888] + sv12[1895];
        sv12[1899] = 2.0 * sv12[986] * (sv12[1509] / 2);
        sv12[1900] = 2.0 * sv12[987] * (sv12[1509] / 2);
        sv12[1901] = 2.0 * sv12[988] * (sv12[1509] / 2);
        sv12[1902] = 2.0 * sv12[989] * (sv12[1509] / 2);
        sv12[1903] = 2.0 * sv12[990] * (sv12[1509] / 2);
        sv12[1904] = 2.0 * sv12[991] * (sv12[1509] / 2);
        sv12[1905] = 2.0 * sv12[992] * (sv12[1509] / 2);
        sv12[1906] = 2.0 * sv12[993] * (sv12[1509] / 2);
        sv12[1907] = 2.0 * sv12[994] * (sv12[1509] / 2);
        sv12[1908] = 2.0 * sv12[995] * (sv12[1509] / 2);
        sv12[1909] = 2.0 * sv12[996] * (sv12[1509] / 2);
        sv12[1910] = 2.0 * sv12[183] * (sp[215] / 2);
        sv12[1911] = 2.0 * sv12[184] * (sp[215] / 2);
        sv12[1912] = 2.0 * sv12[185] * (sp[215] / 2);
        sv12[1913] = sv12[1899] + sv12[1910];
        sv12[1914] = sv12[1900] + sv12[1911];
        sv12[1915] = sv12[1905] + sv12[1912];
        sv12[1916] = sv12[1896] + sv12[1913];
        sv12[1917] = sv12[1897] + sv12[1914];
        sv12[1918] = sv12[1901] + sv12[1884];
        sv12[1919] = sv12[1902] + sv12[1885];
        sv12[1920] = sv12[1903] + sv12[1886];
        sv12[1921] = sv12[1904] + sv12[1887];
        sv12[1922] = sv12[1898] + sv12[1915];
        sv12[1923] = sv12[1906] + sv12[1889];
        sv12[1924] = sv12[1907] + sv12[1890];
        sv12[1925] = sv12[1908] + sv12[1891];
        sv12[1926] = sv12[1909] + sv12[1892];
        sv12[1927] = sv12[1499] * (-1 * sv12[1916]);
        sv12[1928] = sv12[1499] * (-1 * sv12[1917]);
        sv12[1929] = sv12[1499] * (-1 * sv12[1918]);
        sv12[1930] = sv12[1499] * (-1 * sv12[1919]);
        sv12[1931] = sv12[1499] * (-1 * sv12[1920]);
        sv12[1932] = sv12[1499] * (-1 * sv12[1921]);
        sv12[1933] = sv12[1499] * (-1 * sv12[1922]);
        sv12[1934] = sv12[1499] * (-1 * sv12[1923]);
        sv12[1935] = sv12[1499] * (-1 * sv12[1924]);
        sv12[1936] = sv12[1499] * (-1 * sv12[1925]);
        sv12[1937] = sv12[1499] * (-1 * sv12[1926]);
        sv12[1938] = sv12[1760] + sv12[1927];
        sv12[1939] = sv12[1928] + sv12[1761];
        sv12[1940] = sv12[1762] + sv12[1929];
        sv12[1941] = sv12[1763] + sv12[1930];
        sv12[1942] = sv12[1931] + sv12[1764];
        sv12[1943] = sv12[1932] + sv12[1765];
        sv12[1944] = sv12[1768] + sv12[1928];
        sv12[1945] = sv12[1933] + sv12[1769];
        sv12[1946] = sv12[1770] + sv12[1934];
        sv12[1947] = sv12[1771] + sv12[1935];
        sv12[1948] = sv12[1936] + sv12[1772];
        sv12[1949] = sv12[1937] + sv12[1773];
        sv12[1950] = sv12[1776] + sv12[1929];
        sv12[1951] = sv12[1784] + sv12[1930];
        sv12[1952] = sv12[1792] + sv12[1931];
        sv12[1953] = sv12[1800] + sv12[1932];
        sv12[1954] = sv12[1777] + sv12[1934];
        sv12[1955] = sv12[1785] + sv12[1935];
        sv12[1956] = sv12[1793] + sv12[1936];
        sv12[1957] = sv12[1801] + sv12[1937];
        sv12[1958] = sv12[1742] + sv12[1742];
        sv12[1959] = sv12[1750] + sv12[1743];
        sv12[1960] = sv12[1758] + sv12[1744];
        sv12[1961] = sv12[1766] + sv12[1745];
        sv12[1962] = sv12[1774] + sv12[1746];
        sv12[1963] = sv12[1782] + sv12[1747];
        sv12[1964] = sv12[1790] + sv12[1748];
        sv12[1965] = sv12[1798] + sv12[1749];
        sv12[1966] = sv12[1751] + sv12[1751];
        sv12[1967] = sv12[1759] + sv12[1752];
        sv12[1968] = sv12[1767] + sv12[1753];
        sv12[1969] = sv12[1775] + sv12[1754];
        sv12[1970] = sv12[1783] + sv12[1755];
        sv12[1971] = sv12[1791] + sv12[1756];
        sv12[1972] = sv12[1799] + sv12[1757];
        sv12[1973] = sv12[1862] + sv12[1938];
        sv12[1974] = sv12[1863] + sv12[1939];
        sv12[1975] = sv12[1864] + sv12[1940];
        sv12[1976] = sv12[1865] + sv12[1941];
        sv12[1977] = sv12[1866] + sv12[1942];
        sv12[1978] = sv12[1867] + sv12[1943];
        sv12[1979] = sv12[1944] + sv12[1868];
        sv12[1980] = sv12[1869] + sv12[1945];
        sv12[1981] = sv12[1870] + sv12[1946];
        sv12[1982] = sv12[1871] + sv12[1947];
        sv12[1983] = sv12[1872] + sv12[1948];
        sv12[1984] = sv12[1873] + sv12[1949];
        sv12[1985] = sv12[1874] + sv12[1950];
        sv12[1986] = sv12[1875] + sv12[1951];
        sv12[1987] = sv12[1952] + sv12[1876];
        sv12[1988] = sv12[1953] + sv12[1877];
        sv12[1989] = sv12[1878] + sv12[1954];
        sv12[1990] = sv12[1879] + sv12[1955];
        sv12[1991] = sv12[1956] + sv12[1880];
        sv12[1992] = sv12[1957] + sv12[1881];
        sv12[1993] = sv12[1778] + sv12[1778];
        sv12[1994] = sv12[1786] + sv12[1779];
        sv12[1995] = sv12[1794] + sv12[1780];
        sv12[1996] = sv12[1802] + sv12[1781];
        sv12[1997] = sv12[1787] + sv12[1787];
        sv12[1998] = sv12[1795] + sv12[1788];
        sv12[1999] = sv12[1803] + sv12[1789];
        sv12[2000] = sv12[1796] + sv12[1796];
        sv12[2001] = sv12[1804] + sv12[1797];
        sv12[2002] = sv12[1805] + sv12[1805];
        sv12[2003] = sv12[1439] * sv12[1462];
        sv12[2004] = sv12[1439] * sv12[1466];
        sv12[2005] = sv12[1439] * (-1 * sv12[1664]);
        sv12[2006] = sv12[1439] * (-1 * sv12[1665]);
        sv12[2007] = sv12[1439] * (-1 * sv12[1666]);
        sv12[2008] = sv12[1439] * (-1 * sv12[1667]);
        sv12[2009] = sv12[1439] * (-1 * sv12[1668]);
        sv12[2010] = sv12[1439] * (-1 * sv12[1669]);
        sv12[2011] = sv12[1462] * sv12[1443];
        sv12[2012] = sv12[1443] * sv12[1466];
        sv12[2013] = sv12[1443] * (-1 * sv12[1664]);
        sv12[2014] = sv12[1443] * (-1 * sv12[1665]);
        sv12[2015] = sv12[1443] * (-1 * sv12[1666]);
        sv12[2016] = sv12[1443] * (-1 * sv12[1667]);
        sv12[2017] = sv12[1443] * (-1 * sv12[1668]);
        sv12[2018] = sv12[1443] * (-1 * sv12[1669]);
        sv12[2019] = sv12[1462] * (-1 * sv12[1630]);
        sv12[2020] = sv12[1466] * (-1 * sv12[1630]);
        sv12[2021] = -1 * sv12[1630] * (-1 * sv12[1664]);
        sv12[2022] = -1 * sv12[1630] * (-1 * sv12[1665]);
        sv12[2023] = -1 * sv12[1630] * (-1 * sv12[1666]);
        sv12[2024] = -1 * sv12[1630] * (-1 * sv12[1667]);
        sv12[2025] = -1 * sv12[1630] * (-1 * sv12[1668]);
        sv12[2026] = -1 * sv12[1630] * (-1 * sv12[1669]);
        sv12[2027] = sv12[1462] * (-1 * sv12[1631]);
        sv12[2028] = sv12[1466] * (-1 * sv12[1631]);
        sv12[2029] = -1 * sv12[1631] * (-1 * sv12[1664]);
        sv12[2030] = -1 * sv12[1631] * (-1 * sv12[1665]);
        sv12[2031] = -1 * sv12[1631] * (-1 * sv12[1666]);
        sv12[2032] = -1 * sv12[1631] * (-1 * sv12[1667]);
        sv12[2033] = -1 * sv12[1631] * (-1 * sv12[1668]);
        sv12[2034] = -1 * sv12[1631] * (-1 * sv12[1669]);
        sv12[2035] = sv12[1462] * (-1 * sv12[1632]);
        sv12[2036] = sv12[1466] * (-1 * sv12[1632]);
        sv12[2037] = -1 * sv12[1664] * (-1 * sv12[1632]);
        sv12[2038] = -1 * sv12[1665] * (-1 * sv12[1632]);
        sv12[2039] = -1 * sv12[1632] * (-1 * sv12[1666]);
        sv12[2040] = -1 * sv12[1632] * (-1 * sv12[1667]);
        sv12[2041] = -1 * sv12[1632] * (-1 * sv12[1668]);
        sv12[2042] = -1 * sv12[1632] * (-1 * sv12[1669]);
        sv12[2043] = sv12[1462] * (-1 * sv12[1633]);
        sv12[2044] = sv12[1466] * (-1 * sv12[1633]);
        sv12[2045] = -1 * sv12[1664] * (-1 * sv12[1633]);
        sv12[2046] = -1 * sv12[1665] * (-1 * sv12[1633]);
        sv12[2047] = -1 * sv12[1633] * (-1 * sv12[1666]);
        sv12[2048] = -1 * sv12[1633] * (-1 * sv12[1667]);
        sv12[2049] = -1 * sv12[1633] * (-1 * sv12[1668]);
        sv12[2050] = -1 * sv12[1633] * (-1 * sv12[1669]);
        sv12[2051] = sv12[1462] * (-1 * sv12[1634]);
        sv12[2052] = sv12[1466] * (-1 * sv12[1634]);
        sv12[2053] = -1 * sv12[1664] * (-1 * sv12[1634]);
        sv12[2054] = -1 * sv12[1665] * (-1 * sv12[1634]);
        sv12[2055] = -1 * sv12[1634] * (-1 * sv12[1666]);
        sv12[2056] = -1 * sv12[1634] * (-1 * sv12[1667]);
        sv12[2057] = -1 * sv12[1634] * (-1 * sv12[1668]);
        sv12[2058] = -1 * sv12[1634] * (-1 * sv12[1669]);
        sv12[2059] = sv12[1462] * (-1 * sv12[1635]);
        sv12[2060] = sv12[1466] * (-1 * sv12[1635]);
        sv12[2061] = -1 * sv12[1664] * (-1 * sv12[1635]);
        sv12[2062] = -1 * sv12[1665] * (-1 * sv12[1635]);
        sv12[2063] = -1 * sv12[1635] * (-1 * sv12[1666]);
        sv12[2064] = -1 * sv12[1635] * (-1 * sv12[1667]);
        sv12[2065] = -1 * sv12[1635] * (-1 * sv12[1668]);
        sv12[2066] = -1 * sv12[1635] * (-1 * sv12[1669]);
        sv12[2067] = 2.0 * sv12[918] * (sv12[1446] / 2);
        sv12[2068] = 2.0 * sv12[919] * (sv12[1446] / 2);
        sv12[2069] = 2.0 * sv12[920] * (sv12[1446] / 2);
        sv12[2070] = 2.0 * sv12[921] * (sv12[1446] / 2);
        sv12[2071] = 2.0 * sv12[922] * (sv12[1446] / 2);
        sv12[2072] = 2.0 * sv12[923] * (sv12[1446] / 2);
        sv12[2073] = 2.0 * sv12[924] * (sv12[1446] / 2);
        sv12[2074] = 2.0 * sv12[925] * (sv12[1446] / 2);
        sv12[2075] = 2.0 * sv12[926] * (sv12[1446] / 2);
        sv12[2076] = 2.0 * sv12[927] * (sv12[1446] / 2);
        sv12[2077] = 2.0 * sv12[928] * (sv12[1446] / 2);
        sv12[2078] = 2.0 * sv12[183] * (sp[124] / 2);
        sv12[2079] = 2.0 * sv12[184] * (sp[124] / 2);
        sv12[2080] = 2.0 * sv12[185] * (sp[124] / 2);
        sv12[2081] = sv12[2067] + sv12[2078];
        sv12[2082] = sv12[2068] + sv12[2079];
        sv12[2083] = sv12[2073] + sv12[2080];
        sv12[2084] = 2.0 * sv12[986] * (sv12[1453] / 2);
        sv12[2085] = 2.0 * sv12[987] * (sv12[1453] / 2);
        sv12[2086] = 2.0 * sv12[988] * (sv12[1453] / 2);
        sv12[2087] = 2.0 * sv12[989] * (sv12[1453] / 2);
        sv12[2088] = 2.0 * sv12[990] * (sv12[1453] / 2);
        sv12[2089] = 2.0 * sv12[991] * (sv12[1453] / 2);
        sv12[2090] = 2.0 * sv12[992] * (sv12[1453] / 2);
        sv12[2091] = 2.0 * sv12[993] * (sv12[1453] / 2);
        sv12[2092] = 2.0 * sv12[994] * (sv12[1453] / 2);
        sv12[2093] = 2.0 * sv12[995] * (sv12[1453] / 2);
        sv12[2094] = 2.0 * sv12[996] * (sv12[1453] / 2);
        sv12[2095] = 2.0 * sv12[183] * (sp[143] / 2);
        sv12[2096] = 2.0 * sv12[184] * (sp[143] / 2);
        sv12[2097] = 2.0 * sv12[185] * (sp[143] / 2);
        sv12[2098] = sv12[2084] + sv12[2095];
        sv12[2099] = sv12[2085] + sv12[2096];
        sv12[2100] = sv12[2090] + sv12[2097];
        sv12[2101] = sv12[2081] + sv12[2098];
        sv12[2102] = sv12[2082] + sv12[2099];
        sv12[2103] = sv12[2069] + sv12[2086];
        sv12[2104] = sv12[2070] + sv12[2087];
        sv12[2105] = sv12[2071] + sv12[2088];
        sv12[2106] = sv12[2072] + sv12[2089];
        sv12[2107] = sv12[2083] + sv12[2100];
        sv12[2108] = sv12[2074] + sv12[2091];
        sv12[2109] = sv12[2075] + sv12[2092];
        sv12[2110] = sv12[2076] + sv12[2093];
        sv12[2111] = sv12[2077] + sv12[2094];
        sv12[2112] = sv12[1482] * (-1 * sv12[2101]);
        sv12[2113] = sv12[1482] * (-1 * sv12[2102]);
        sv12[2114] = sv12[1482] * (-1 * sv12[2103]);
        sv12[2115] = sv12[1482] * (-1 * sv12[2104]);
        sv12[2116] = sv12[1482] * (-1 * sv12[2105]);
        sv12[2117] = sv12[1482] * (-1 * sv12[2106]);
        sv12[2118] = sv12[1482] * (-1 * sv12[2107]);
        sv12[2119] = sv12[1482] * (-1 * sv12[2108]);
        sv12[2120] = sv12[1482] * (-1 * sv12[2109]);
        sv12[2121] = sv12[1482] * (-1 * sv12[2110]);
        sv12[2122] = sv12[1482] * (-1 * sv12[2111]);
        sv12[2123] = sv12[2112] + sv12[2021];
        sv12[2124] = sv12[2113] + sv12[2029];
        sv12[2125] = sv12[2037] + sv12[2114];
        sv12[2126] = sv12[2045] + sv12[2115];
        sv12[2127] = sv12[2116] + sv12[2053];
        sv12[2128] = sv12[2117] + sv12[2061];
        sv12[2129] = sv12[2113] + sv12[2022];
        sv12[2130] = sv12[2118] + sv12[2030];
        sv12[2131] = sv12[2038] + sv12[2119];
        sv12[2132] = sv12[2046] + sv12[2120];
        sv12[2133] = sv12[2121] + sv12[2054];
        sv12[2134] = sv12[2122] + sv12[2062];
        sv12[2135] = sv12[2114] + sv12[2023];
        sv12[2136] = sv12[2115] + sv12[2024];
        sv12[2137] = sv12[2116] + sv12[2025];
        sv12[2138] = sv12[2117] + sv12[2026];
        sv12[2139] = sv12[2119] + sv12[2031];
        sv12[2140] = sv12[2120] + sv12[2032];
        sv12[2141] = sv12[2121] + sv12[2033];
        sv12[2142] = sv12[2122] + sv12[2034];
        sv12[2143] = 2.0 * sv12[918] * (sv12[1469] / 2);
        sv12[2144] = 2.0 * sv12[919] * (sv12[1469] / 2);
        sv12[2145] = 2.0 * sv12[920] * (sv12[1469] / 2);
        sv12[2146] = 2.0 * sv12[921] * (sv12[1469] / 2);
        sv12[2147] = 2.0 * sv12[922] * (sv12[1469] / 2);
        sv12[2148] = 2.0 * sv12[923] * (sv12[1469] / 2);
        sv12[2149] = 2.0 * sv12[924] * (sv12[1469] / 2);
        sv12[2150] = 2.0 * sv12[925] * (sv12[1469] / 2);
        sv12[2151] = 2.0 * sv12[926] * (sv12[1469] / 2);
        sv12[2152] = 2.0 * sv12[927] * (sv12[1469] / 2);
        sv12[2153] = 2.0 * sv12[928] * (sv12[1469] / 2);
        sv12[2154] = 2.0 * sv12[183] * (sp[156] / 2);
        sv12[2155] = 2.0 * sv12[184] * (sp[156] / 2);
        sv12[2156] = 2.0 * sv12[185] * (sp[156] / 2);
        sv12[2157] = sv12[2143] + sv12[2154];
        sv12[2158] = sv12[2144] + sv12[2155];
        sv12[2159] = sv12[2149] + sv12[2156];
        sv12[2160] = 2.0 * sv12[986] * (sv12[1476] / 2);
        sv12[2161] = 2.0 * sv12[987] * (sv12[1476] / 2);
        sv12[2162] = 2.0 * sv12[988] * (sv12[1476] / 2);
        sv12[2163] = 2.0 * sv12[989] * (sv12[1476] / 2);
        sv12[2164] = 2.0 * sv12[990] * (sv12[1476] / 2);
        sv12[2165] = 2.0 * sv12[991] * (sv12[1476] / 2);
        sv12[2166] = 2.0 * sv12[992] * (sv12[1476] / 2);
        sv12[2167] = 2.0 * sv12[993] * (sv12[1476] / 2);
        sv12[2168] = 2.0 * sv12[994] * (sv12[1476] / 2);
        sv12[2169] = 2.0 * sv12[995] * (sv12[1476] / 2);
        sv12[2170] = 2.0 * sv12[996] * (sv12[1476] / 2);
        sv12[2171] = 2.0 * sv12[183] * (sp[175] / 2);
        sv12[2172] = 2.0 * sv12[184] * (sp[175] / 2);
        sv12[2173] = 2.0 * sv12[185] * (sp[175] / 2);
        sv12[2174] = sv12[2160] + sv12[2171];
        sv12[2175] = sv12[2161] + sv12[2172];
        sv12[2176] = sv12[2166] + sv12[2173];
        sv12[2177] = sv12[2157] + sv12[2174];
        sv12[2178] = sv12[2158] + sv12[2175];
        sv12[2179] = sv12[2145] + sv12[2162];
        sv12[2180] = sv12[2146] + sv12[2163];
        sv12[2181] = sv12[2147] + sv12[2164];
        sv12[2182] = sv12[2148] + sv12[2165];
        sv12[2183] = sv12[2159] + sv12[2176];
        sv12[2184] = sv12[2150] + sv12[2167];
        sv12[2185] = sv12[2151] + sv12[2168];
        sv12[2186] = sv12[2152] + sv12[2169];
        sv12[2187] = sv12[2153] + sv12[2170];
        sv12[2188] = sv12[1459] * (-1 * sv12[2177]);
        sv12[2189] = sv12[1459] * (-1 * sv12[2178]);
        sv12[2190] = sv12[1459] * (-1 * sv12[2179]);
        sv12[2191] = sv12[1459] * (-1 * sv12[2180]);
        sv12[2192] = sv12[1459] * (-1 * sv12[2181]);
        sv12[2193] = sv12[1459] * (-1 * sv12[2182]);
        sv12[2194] = sv12[1459] * (-1 * sv12[2183]);
        sv12[2195] = sv12[1459] * (-1 * sv12[2184]);
        sv12[2196] = sv12[1459] * (-1 * sv12[2185]);
        sv12[2197] = sv12[1459] * (-1 * sv12[2186]);
        sv12[2198] = sv12[1459] * (-1 * sv12[2187]);
        sv12[2199] = sv12[2021] + sv12[2188];
        sv12[2200] = sv12[2189] + sv12[2022];
        sv12[2201] = sv12[2023] + sv12[2190];
        sv12[2202] = sv12[2024] + sv12[2191];
        sv12[2203] = sv12[2192] + sv12[2025];
        sv12[2204] = sv12[2193] + sv12[2026];
        sv12[2205] = sv12[2029] + sv12[2189];
        sv12[2206] = sv12[2194] + sv12[2030];
        sv12[2207] = sv12[2031] + sv12[2195];
        sv12[2208] = sv12[2032] + sv12[2196];
        sv12[2209] = sv12[2197] + sv12[2033];
        sv12[2210] = sv12[2198] + sv12[2034];
        sv12[2211] = sv12[2037] + sv12[2190];
        sv12[2212] = sv12[2045] + sv12[2191];
        sv12[2213] = sv12[2053] + sv12[2192];
        sv12[2214] = sv12[2061] + sv12[2193];
        sv12[2215] = sv12[2038] + sv12[2195];
        sv12[2216] = sv12[2046] + sv12[2196];
        sv12[2217] = sv12[2054] + sv12[2197];
        sv12[2218] = sv12[2062] + sv12[2198];
        sv12[2219] = sv12[2003] + sv12[2003];
        sv12[2220] = sv12[2011] + sv12[2004];
        sv12[2221] = sv12[2019] + sv12[2005];
        sv12[2222] = sv12[2027] + sv12[2006];
        sv12[2223] = sv12[2035] + sv12[2007];
        sv12[2224] = sv12[2043] + sv12[2008];
        sv12[2225] = sv12[2051] + sv12[2009];
        sv12[2226] = sv12[2059] + sv12[2010];
        sv12[2227] = sv12[2012] + sv12[2012];
        sv12[2228] = sv12[2020] + sv12[2013];
        sv12[2229] = sv12[2028] + sv12[2014];
        sv12[2230] = sv12[2036] + sv12[2015];
        sv12[2231] = sv12[2044] + sv12[2016];
        sv12[2232] = sv12[2052] + sv12[2017];
        sv12[2233] = sv12[2060] + sv12[2018];
        sv12[2234] = sv12[2123] + sv12[2199];
        sv12[2235] = sv12[2124] + sv12[2200];
        sv12[2236] = sv12[2125] + sv12[2201];
        sv12[2237] = sv12[2126] + sv12[2202];
        sv12[2238] = sv12[2127] + sv12[2203];
        sv12[2239] = sv12[2128] + sv12[2204];
        sv12[2240] = sv12[2205] + sv12[2129];
        sv12[2241] = sv12[2130] + sv12[2206];
        sv12[2242] = sv12[2131] + sv12[2207];
        sv12[2243] = sv12[2132] + sv12[2208];
        sv12[2244] = sv12[2133] + sv12[2209];
        sv12[2245] = sv12[2134] + sv12[2210];
        sv12[2246] = sv12[2135] + sv12[2211];
        sv12[2247] = sv12[2136] + sv12[2212];
        sv12[2248] = sv12[2213] + sv12[2137];
        sv12[2249] = sv12[2214] + sv12[2138];
        sv12[2250] = sv12[2139] + sv12[2215];
        sv12[2251] = sv12[2140] + sv12[2216];
        sv12[2252] = sv12[2217] + sv12[2141];
        sv12[2253] = sv12[2218] + sv12[2142];
        sv12[2254] = sv12[2039] + sv12[2039];
        sv12[2255] = sv12[2040] + sv12[2047];
        sv12[2256] = sv12[2055] + sv12[2041];
        sv12[2257] = sv12[2063] + sv12[2042];
        sv12[2258] = sv12[2048] + sv12[2048];
        sv12[2259] = sv12[2056] + sv12[2049];
        sv12[2260] = sv12[2064] + sv12[2050];
        sv12[2261] = sv12[2057] + sv12[2057];
        sv12[2262] = sv12[2058] + sv12[2065];
        sv12[2263] = sv12[2066] + sv12[2066];
        sv12[2264] = sv12[1958] + sv12[2219];
        sv12[2265] = sv12[1959] + sv12[2220];
        sv12[2266] = sv12[1960] + sv12[2221];
        sv12[2267] = sv12[1961] + sv12[2222];
        sv12[2268] = sv12[1962] + sv12[2223];
        sv12[2269] = sv12[2224] + sv12[1963];
        sv12[2270] = sv12[1964] + sv12[2225];
        sv12[2271] = sv12[2226] + sv12[1965];
        sv12[2272] = sv12[1966] + sv12[2227];
        sv12[2273] = sv12[1967] + sv12[2228];
        sv12[2274] = sv12[1968] + sv12[2229];
        sv12[2275] = sv12[1969] + sv12[2230];
        sv12[2276] = sv12[2231] + sv12[1970];
        sv12[2277] = sv12[1971] + sv12[2232];
        sv12[2278] = sv12[2233] + sv12[1972];
        sv12[2279] = sv12[1973] + sv12[2234];
        sv12[2280] = sv12[1974] + sv12[2235];
        sv12[2281] = sv12[1975] + sv12[2236];
        sv12[2282] = sv12[2237] + sv12[1976];
        sv12[2283] = sv12[1977] + sv12[2238];
        sv12[2284] = sv12[2239] + sv12[1978];
        sv12[2285] = sv12[1979] + sv12[2240];
        sv12[2286] = sv12[1980] + sv12[2241];
        sv12[2287] = sv12[1981] + sv12[2242];
        sv12[2288] = sv12[2243] + sv12[1982];
        sv12[2289] = sv12[1983] + sv12[2244];
        sv12[2290] = sv12[2245] + sv12[1984];
        sv12[2291] = sv12[1985] + sv12[2246];
        sv12[2292] = sv12[2247] + sv12[1986];
        sv12[2293] = sv12[1987] + sv12[2248];
        sv12[2294] = sv12[2249] + sv12[1988];
        sv12[2295] = sv12[1989] + sv12[2250];
        sv12[2296] = sv12[2251] + sv12[1990];
        sv12[2297] = sv12[1991] + sv12[2252];
        sv12[2298] = sv12[2253] + sv12[1992];
        sv12[2299] = sv12[1993] + sv12[2254];
        sv12[2300] = sv12[1994] + sv12[2255];
        sv12[2301] = sv12[1995] + sv12[2256];
        sv12[2302] = sv12[2257] + sv12[1996];
        sv12[2303] = sv12[2258] + sv12[1997];
        sv12[2304] = sv12[1998] + sv12[2259];
        sv12[2305] = sv12[2260] + sv12[1999];
        sv12[2306] = sv12[2000] + sv12[2261];
        sv12[2307] = sv12[2001] + sv12[2262];
        sv12[2308] = sv12[2263] + sv12[2002];
        sv12[2309] = sv12[2264] * sv12[1277];
        sv12[2310] = sv12[2265] * sv12[1277];
        sv12[2311] = sv12[2266] * sv12[1277];
        sv12[2312] = sv12[2267] * sv12[1277];
        sv12[2313] = sv12[2268] * sv12[1277];
        sv12[2314] = sv12[2269] * sv12[1277];
        sv12[2315] = sv12[2270] * sv12[1277];
        sv12[2316] = sv12[2271] * sv12[1277];
        sv12[2317] = sv12[2272] * sv12[1277];
        sv12[2318] = sv12[2273] * sv12[1277];
        sv12[2319] = sv12[2274] * sv12[1277];
        sv12[2320] = sv12[2275] * sv12[1277];
        sv12[2321] = sv12[2276] * sv12[1277];
        sv12[2322] = sv12[2277] * sv12[1277];
        sv12[2323] = sv12[2278] * sv12[1277];
        sv12[2324] = sv12[2279] * sv12[1277];
        sv12[2325] = sv12[2280] * sv12[1277];
        sv12[2326] = sv12[2281] * sv12[1277];
        sv12[2327] = sv12[2282] * sv12[1277];
        sv12[2328] = sv12[2283] * sv12[1277];
        sv12[2329] = sv12[2284] * sv12[1277];
        sv12[2330] = sv12[2285] * sv12[1277];
        sv12[2331] = sv12[2286] * sv12[1277];
        sv12[2332] = sv12[2287] * sv12[1277];
        sv12[2333] = sv12[2288] * sv12[1277];
        sv12[2334] = sv12[2289] * sv12[1277];
        sv12[2335] = sv12[2290] * sv12[1277];
        sv12[2336] = sv12[2291] * sv12[1277];
        sv12[2337] = sv12[2292] * sv12[1277];
        sv12[2338] = sv12[2293] * sv12[1277];
        sv12[2339] = sv12[2294] * sv12[1277];
        sv12[2340] = sv12[2295] * sv12[1277];
        sv12[2341] = sv12[2296] * sv12[1277];
        sv12[2342] = sv12[2297] * sv12[1277];
        sv12[2343] = sv12[2298] * sv12[1277];
        sv12[2344] = sv12[2299] * sv12[1277];
        sv12[2345] = sv12[2300] * sv12[1277];
        sv12[2346] = sv12[2301] * sv12[1277];
        sv12[2347] = sv12[2302] * sv12[1277];
        sv12[2348] = sv12[2303] * sv12[1277];
        sv12[2349] = sv12[2304] * sv12[1277];
        sv12[2350] = sv12[2305] * sv12[1277];
        sv12[2351] = sv12[2306] * sv12[1277];
        sv12[2352] = sv12[2307] * sv12[1277];
        sv12[2353] = sv12[2308] * sv12[1277];
        sv12[2354] = sv12[2309] + sv12[1694];
        sv12[2355] = sv12[2310] + sv12[1698];
        sv12[2356] = sv12[2311] + sv12[1702];
        sv12[2357] = sv12[2312] + sv12[1706];
        sv12[2358] = sv12[2313] + sv12[1710];
        sv12[2359] = sv12[2314] + sv12[1714];
        sv12[2360] = sv12[2315] + sv12[1718];
        sv12[2361] = sv12[2316] + sv12[1722];
        sv12[2362] = sv12[2310] + sv12[1695];
        sv12[2363] = sv12[1696] + sv12[2311];
        sv12[2364] = sv12[1697] + sv12[2312];
        sv12[2365] = sv12[2317] + sv12[1699];
        sv12[2366] = sv12[2318] + sv12[1703];
        sv12[2367] = sv12[2319] + sv12[1707];
        sv12[2368] = sv12[2320] + sv12[1711];
        sv12[2369] = sv12[2321] + sv12[1715];
        sv12[2370] = sv12[2322] + sv12[1719];
        sv12[2371] = sv12[2323] + sv12[1723];
        sv12[2372] = sv12[1700] + sv12[2318];
        sv12[2373] = sv12[1701] + sv12[2319];
        sv12[2374] = sv12[1704] + sv12[2324];
        sv12[2375] = sv12[1708] + sv12[2325];
        sv12[2376] = sv12[1712] + sv12[2326];
        sv12[2377] = sv12[1716] + sv12[2327];
        sv12[2378] = sv12[1720] + sv12[2328];
        sv12[2379] = sv12[1724] + sv12[2329];
        sv12[2380] = sv12[1705] + sv12[2330];
        sv12[2381] = sv12[1709] + sv12[2331];
        sv12[2382] = sv12[1713] + sv12[2332];
        sv12[2383] = sv12[1717] + sv12[2333];
        sv12[2384] = sv12[1721] + sv12[2334];
        sv12[2385] = sv12[1725] + sv12[2335];
        sv12[2386] = sv12[2354] + sv12[1726];
        sv12[2387] = sv12[2355] + sv12[1727];
        sv12[2388] = sv12[1728] + sv12[2356];
        sv12[2389] = sv12[1729] + sv12[2357];
        sv12[2390] = sv12[2362] + sv12[1730];
        sv12[2391] = sv12[2363] + sv12[1731];
        sv12[2392] = sv12[2364] + sv12[1732];
        sv12[2393] = sv12[2365] + sv12[1733];
        sv12[2394] = sv12[1734] + sv12[2366];
        sv12[2395] = sv12[1735] + sv12[2367];
        sv12[2396] = sv12[2372] + sv12[1736];
        sv12[2397] = sv12[2373] + sv12[1737];
        sv12[2398] = sv12[1738] + sv12[2374];
        sv12[2399] = sv12[1739] + sv12[2375];
        sv12[2400] = sv12[1740] + sv12[2380];
        sv12[2401] = sv12[1741] + sv12[2381];
        sv12[2402] = sv12[1712] + sv12[2336];
        sv12[2403] = sv12[1716] + sv12[2337];
        sv12[2404] = sv12[1720] + sv12[2338];
        sv12[2405] = sv12[1724] + sv12[2339];
        sv12[2406] = sv12[1713] + sv12[2340];
        sv12[2407] = sv12[1717] + sv12[2341];
        sv12[2408] = sv12[1721] + sv12[2342];
        sv12[2409] = sv12[1725] + sv12[2343];
        sv12[2410] = sv12[1439] + sv12[1487];
        sv12[2411] = sv12[1462] + sv12[1503];
        sv12[2412] = sv12[2410] * sv12[2411];
        sv12[2413] = std::sqrt(1e-9 + sv12[84]);
        sv12[2414] = sv12[89] / (2 * sv12[2413]);
        sv12[2415] = sv12[88] / (2 * sv12[2413]);
        sv12[2416] = 2 * sv12[2414] * sv12[2414];
        sv12[2417] = 2 * sv12[2414] * sv12[2415];
        sv12[2418] = 2 * sv12[2415] * sv12[2414];
        sv12[2419] = 2 * sv12[2415] * sv12[2415];
        sv12[2420] = (2.0 + -1 * sv12[2416]) / (2 * sv12[2413]);
        sv12[2421] = -1 * sv12[2417] / (2 * sv12[2413]);
        sv12[2422] = -1 * sv12[2418] / (2 * sv12[2413]);
        sv12[2423] = (2.0 + -1 * sv12[2419]) / (2 * sv12[2413]);
        sv12[2424] = sp[219] * sv12[2420];
        sv12[2425] = sp[219] * sv12[2421];
        sv12[2426] = sp[219] * sv12[2422];
        sv12[2427] = sp[219] * sv12[2423];
        sv12[2428] = sv12[2412] * sv12[2424];
        sv12[2429] = sv12[2412] * sv12[2425];
        sv12[2430] = sv12[2412] * sv12[2426];
        sv12[2431] = sv12[2412] * sv12[2427];
        sv12[2432] = sv12[2386] + sv12[2428];
        sv12[2433] = sv12[2387] + sv12[2429];
        sv12[2434] = sv12[2390] + sv12[2430];
        sv12[2435] = sv12[2393] + sv12[2431];
        sv12[2436] = sv12[1413] + sv12[2432];
        sv12[2437] = sv12[1414] + sv12[2433];
        sv12[2438] = sv12[2388] + sv12[1415];
        sv12[2439] = sv12[2389] + sv12[1416];
        sv12[2440] = sv12[2358] + sv12[1373];
        sv12[2441] = sv12[2359] + sv12[1374];
        sv12[2442] = sv12[2360] + sv12[1375];
        sv12[2443] = sv12[2361] + sv12[1376];
        sv12[2444] = sv12[1417] + sv12[2434];
        sv12[2445] = sv12[2391] + sv12[1418];
        sv12[2446] = sv12[2392] + sv12[1419];
        sv12[2447] = sv12[1420] + sv12[2435];
        sv12[2448] = sv12[2394] + sv12[1421];
        sv12[2449] = sv12[2395] + sv12[1422];
        sv12[2450] = sv12[2368] + sv12[1391];
        sv12[2451] = sv12[2369] + sv12[1392];
        sv12[2452] = sv12[2370] + sv12[1393];
        sv12[2453] = sv12[2371] + sv12[1394];
        sv12[2454] = sv12[2396] + sv12[1423];
        sv12[2455] = sv12[2397] + sv12[1424];
        sv12[2456] = sv12[2398] + sv12[1425];
        sv12[2457] = sv12[2399] + sv12[1426];
        sv12[2458] = sv12[2376] + sv12[1403];
        sv12[2459] = sv12[2377] + sv12[1404];
        sv12[2460] = sv12[2378] + sv12[1405];
        sv12[2461] = sv12[2379] + sv12[1406];
        sv12[2462] = sv12[2400] + sv12[1427];
        sv12[2463] = sv12[2401] + sv12[1428];
        sv12[2464] = sv12[2382] + sv12[1409];
        sv12[2465] = sv12[2383] + sv12[1410];
        sv12[2466] = sv12[2384] + sv12[1411];
        sv12[2467] = sv12[2385] + sv12[1412];
        sv12[2468] = sv12[2402] + sv12[1429];
        sv12[2469] = sv12[2403] + sv12[1430];
        sv12[2470] = sv12[2404] + sv12[1431];
        sv12[2471] = sv12[2405] + sv12[1432];
        sv12[2472] = sv12[2406] + sv12[1433];
        sv12[2473] = sv12[2407] + sv12[1434];
        sv12[2474] = sv12[2408] + sv12[1435];
        sv12[2475] = sv12[2409] + sv12[1436];
        sv12[2476] = sv12[2344] + sv12[1355];
        sv12[2477] = sv12[2345] + sv12[1356];
        sv12[2478] = sv12[2346] + sv12[1357];
        sv12[2479] = sv12[2347] + sv12[1358];
        sv12[2480] = sv12[2348] + sv12[1359];
        sv12[2481] = sv12[2349] + sv12[1360];
        sv12[2482] = sv12[2350] + sv12[1361];
        sv12[2483] = sv12[2351] + sv12[1362];
        sv12[2484] = sv12[2352] + sv12[1363];
        sv12[2485] = sv12[2353] + sv12[1364];
        sv12[2486] = w2_c1 * sp[222];
        sv12[2487] = w2_c0 * sp[225];
        sv12[2488] = sv12[2486] + sv12[2487];
        sv12[2489] = sp[222] * (sv12[31] / 1.3);
        sv12[2490] = sp[225] * (sv12[46] / 1.3);
        sv12[2491] = sv12[2489] + sv12[2490];
        sv12[2492] = sv12[2488] + -1 * sv12[2491];
        sv12[2493] = w2_c3 * w2_c3;
        sv12[2494] = std::sqrt(1e-8 + sv12[2493]);
        sv12[2495] = w2_c3 + sv12[2494];
        sv12[2496] = w1_c4 / (0.5 * sv12[2495]);
        sv12[2497] = 1.92 * w3_c4 * sv12[2496];
        sv12[2498] = w3_c4 / (0.5 * sv12[2495]);
        sv12[2499] = 1.92 * w1_c4 * sv12[2498];
        sv12[2500] = sv12[2497] + sv12[2499];
        sv12[2501] = sv12[2492] + sv12[2500];
        sv12[2502] = w2_c1 * sp[228];
        sv12[2503] = w2_c0 * sp[231];
        sv12[2504] = sv12[2502] + sv12[2503];
        sv12[2505] = sp[228] * (sv12[31] / 1.3);
        sv12[2506] = sp[231] * (sv12[46] / 1.3);
        sv12[2507] = sv12[2505] + sv12[2506];
        sv12[2508] = sv12[2504] + -1 * sv12[2507];
        sv12[2509] = 1.92 * w1_c4 * sv12[2496];
        sv12[2510] = sv12[2508] + sv12[2509];
        sv12[2511] = w2_c3 * (0.09 * (1.44 * sv12[11]));
        sv12[2512] = 2.0 * sv12[78] * sv12[2511];
        sv12[2513] = sv12[2510] + -1 * sv12[2512];
        sv12[2514] = sv12[2501] * sv12[2513];
        sv12[2515] = sv12[86] / (0.0001 + sv12[28] / 1.3);
        sv12[2516] = sv12[96] / 1.3 * sv12[2515];
        sv12[2517] = sv12[97] / 1.3 * sv12[2515];
        sv12[2518] = sv12[100] / (0.0001 + sv12[28] / 1.3);
        sv12[2519] = sv12[101] / (0.0001 + sv12[28] / 1.3);
        sv12[2520] = -1 * sv12[2516] / (0.0001 + sv12[28] / 1.3);
        sv12[2521] = -1 * sv12[2517] / (0.0001 + sv12[28] / 1.3);
        sv12[2522] = sv12[2518] * (1.0 / sv12[2515]);
        sv12[2523] = sv12[2519] * (1.0 / sv12[2515]);
        sv12[2524] = sv12[2520] * (1.0 / sv12[2515]);
        sv12[2525] = sv12[2521] * (1.0 / sv12[2515]);
        sv12[2526] = -1 * sv12[2522] / sv12[2515];
        sv12[2527] = -1 * sv12[2523] / sv12[2515];
        sv12[2528] = -1 * sv12[2524] / sv12[2515];
        sv12[2529] = -1 * sv12[2525] / sv12[2515];
        sv12[2530] = std::exp(-2.0 * sv12[2515]);
        sv12[2531] = -2.0 * sv12[2518] * sv12[2530];
        sv12[2532] = -2.0 * sv12[2519] * sv12[2530];
        sv12[2533] = -2.0 * sv12[2520] * sv12[2530];
        sv12[2534] = -2.0 * sv12[2521] * sv12[2530];
        sv12[2535] = (1.0 + sv12[2530]) / (1.0 + -1 * sv12[2530]);
        sv12[2536] = -1 * sv12[2531] * sv12[2535];
        sv12[2537] = -1 * sv12[2532] * sv12[2535];
        sv12[2538] = -1 * sv12[2533] * sv12[2535];
        sv12[2539] = -1 * sv12[2534] * sv12[2535];
        sv12[2540] = -1 * sv12[2536] + sv12[2531];
        sv12[2541] = -1 * sv12[2537] + sv12[2532];
        sv12[2542] = -1 * sv12[2538] + sv12[2533];
        sv12[2543] = -1 * sv12[2539] + sv12[2534];
        sv12[2544] = sv12[2540] / (1.0 + -1 * sv12[2530]);
        sv12[2545] = sv12[2541] / (1.0 + -1 * sv12[2530]);
        sv12[2546] = sv12[2542] / (1.0 + -1 * sv12[2530]);
        sv12[2547] = sv12[2543] / (1.0 + -1 * sv12[2530]);
        sv12[2548] = -1 * sv12[2526] + sv12[2544];
        sv12[2549] = -1 * sv12[2527] + sv12[2545];
        sv12[2550] = -1 * sv12[2528] + sv12[2546];
        sv12[2551] = -1 * sv12[2529] + sv12[2547];
        sv12[2552] = sv12[2548] * (2.0 * sp[53]);
        sv12[2553] = sv12[2549] * (2.0 * sp[53]);
        sv12[2554] = sv12[2550] * (2.0 * sp[53]);
        sv12[2555] = sv12[2551] * (2.0 * sp[53]);
        sv12[2556] = -1 * (1.0 / sv12[2515]) + sv12[2535];
        sv12[2557] = sv12[2556] * (2.0 * sp[53]);
        sv12[2558] = sv12[2557] / sv12[85];
        sv12[2559] = sv12[90] * sv12[2558];
        sv12[2560] = sv12[91] * sv12[2558];
        sv12[2561] = sv12[2552] + -1 * sv12[2559];
        sv12[2562] = sv12[2553] + -1 * sv12[2560];
        sv12[2563] = sv12[2561] / sv12[85];
        sv12[2564] = sv12[2562] / sv12[85];
        sv12[2565] = sv12[2554] / sv12[85];
        sv12[2566] = sv12[2555] / sv12[85];
        sv12[2567] = sv12[90] * sv12[2563];
        sv12[2568] = sv12[90] * sv12[2564];
        sv12[2569] = sv12[90] * sv12[2565];
        sv12[2570] = sv12[90] * sv12[2566];
        sv12[2571] = sv12[91] * sv12[2563];
        sv12[2572] = sv12[91] * sv12[2564];
        sv12[2573] = sv12[91] * sv12[2565];
        sv12[2574] = sv12[91] * sv12[2566];
        sv12[2575] = sv12[163] * sv12[2558];
        sv12[2576] = sv12[164] * sv12[2558];
        sv12[2577] = sv12[165] * sv12[2558];
        sv12[2578] = sv12[166] * sv12[2558];
        sv12[2579] = sv12[2567] + sv12[2575];
        sv12[2580] = sv12[2571] + sv12[2576];
        sv12[2581] = sv12[2568] + sv12[2577];
        sv12[2582] = sv12[2572] + sv12[2578];
        sv12[2583] = sv12[96] / 1.3 * sv12[2518];
        sv12[2584] = sv12[96] / 1.3 * sv12[2519];
        sv12[2585] = sv12[96] / 1.3 * sv12[2520];
        sv12[2586] = sv12[96] / 1.3 * sv12[2521];
        sv12[2587] = sv12[97] / 1.3 * sv12[2518];
        sv12[2588] = sv12[97] / 1.3 * sv12[2519];
        sv12[2589] = sv12[97] / 1.3 * sv12[2520];
        sv12[2590] = sv12[97] / 1.3 * sv12[2521];
        sv12[2591] = sv12[183] / 1.3 * sv12[2515];
        sv12[2592] = sv12[184] / 1.3 * sv12[2515];
        sv12[2593] = sv12[185] / 1.3 * sv12[2515];
        sv12[2594] = sv12[2585] + sv12[2591];
        sv12[2595] = sv12[2589] + sv12[2592];
        sv12[2596] = sv12[2586] + sv12[2592];
        sv12[2597] = sv12[2590] + sv12[2593];
        sv12[2598] = -1 * sv12[2594] + -1 * sv12[2585];
        sv12[2599] = -1 * sv12[2595] + -1 * sv12[2586];
        sv12[2600] = -1 * sv12[2596] + -1 * sv12[2589];
        sv12[2601] = -1 * sv12[2597] + -1 * sv12[2590];
        sv12[2602] = sv12[201] / (0.0001 + sv12[28] / 1.3);
        sv12[2603] = sv12[202] / (0.0001 + sv12[28] / 1.3);
        sv12[2604] = -1 * sv12[2583] / (0.0001 + sv12[28] / 1.3);
        sv12[2605] = -1 * sv12[2587] / (0.0001 + sv12[28] / 1.3);
        sv12[2606] = sv12[203] / (0.0001 + sv12[28] / 1.3);
        sv12[2607] = sv12[204] / (0.0001 + sv12[28] / 1.3);
        sv12[2608] = -1 * sv12[2584] / (0.0001 + sv12[28] / 1.3);
        sv12[2609] = -1 * sv12[2588] / (0.0001 + sv12[28] / 1.3);
        sv12[2610] = sv12[2598] / (0.0001 + sv12[28] / 1.3);
        sv12[2611] = sv12[2599] / (0.0001 + sv12[28] / 1.3);
        sv12[2612] = sv12[2600] / (0.0001 + sv12[28] / 1.3);
        sv12[2613] = sv12[2601] / (0.0001 + sv12[28] / 1.3);
        sv12[2614] = sv12[2602] * (1.0 / sv12[2515]);
        sv12[2615] = sv12[2603] * (1.0 / sv12[2515]);
        sv12[2616] = sv12[2604] * (1.0 / sv12[2515]);
        sv12[2617] = sv12[2605] * (1.0 / sv12[2515]);
        sv12[2618] = sv12[2606] * (1.0 / sv12[2515]);
        sv12[2619] = sv12[2607] * (1.0 / sv12[2515]);
        sv12[2620] = sv12[2608] * (1.0 / sv12[2515]);
        sv12[2621] = sv12[2609] * (1.0 / sv12[2515]);
        sv12[2622] = sv12[2610] * (1.0 / sv12[2515]);
        sv12[2623] = sv12[2611] * (1.0 / sv12[2515]);
        sv12[2624] = sv12[2612] * (1.0 / sv12[2515]);
        sv12[2625] = sv12[2613] * (1.0 / sv12[2515]);
        sv12[2626] = sv12[2518] * sv12[2526];
        sv12[2627] = sv12[2518] * sv12[2527];
        sv12[2628] = sv12[2518] * sv12[2528];
        sv12[2629] = sv12[2518] * sv12[2529];
        sv12[2630] = sv12[2519] * sv12[2526];
        sv12[2631] = sv12[2519] * sv12[2527];
        sv12[2632] = sv12[2519] * sv12[2528];
        sv12[2633] = sv12[2519] * sv12[2529];
        sv12[2634] = sv12[2520] * sv12[2526];
        sv12[2635] = sv12[2520] * sv12[2527];
        sv12[2636] = sv12[2520] * sv12[2528];
        sv12[2637] = sv12[2520] * sv12[2529];
        sv12[2638] = sv12[2521] * sv12[2526];
        sv12[2639] = sv12[2521] * sv12[2527];
        sv12[2640] = sv12[2521] * sv12[2528];
        sv12[2641] = sv12[2521] * sv12[2529];
        sv12[2642] = sv12[2614] + sv12[2626];
        sv12[2643] = sv12[2615] + sv12[2630];
        sv12[2644] = sv12[2616] + sv12[2634];
        sv12[2645] = sv12[2617] + sv12[2638];
        sv12[2646] = sv12[2618] + sv12[2627];
        sv12[2647] = sv12[2616] + sv12[2628];
        sv12[2648] = sv12[2617] + sv12[2629];
        sv12[2649] = sv12[2619] + sv12[2631];
        sv12[2650] = sv12[2620] + sv12[2635];
        sv12[2651] = sv12[2621] + sv12[2639];
        sv12[2652] = sv12[2620] + sv12[2632];
        sv12[2653] = sv12[2621] + sv12[2633];
        sv12[2654] = sv12[2622] + sv12[2636];
        sv12[2655] = sv12[2623] + sv12[2640];
        sv12[2656] = sv12[2624] + sv12[2637];
        sv12[2657] = sv12[2625] + sv12[2641];
        sv12[2658] = -1 * sv12[2642] + -1 * sv12[2626];
        sv12[2659] = -1 * sv12[2643] + -1 * sv12[2627];
        sv12[2660] = -1 * sv12[2644] + -1 * sv12[2628];
        sv12[2661] = -1 * sv12[2645] + -1 * sv12[2629];
        sv12[2662] = -1 * sv12[2646] + -1 * sv12[2630];
        sv12[2663] = -1 * sv12[2647] + -1 * sv12[2634];
        sv12[2664] = -1 * sv12[2648] + -1 * sv12[2638];
        sv12[2665] = -1 * sv12[2649] + -1 * sv12[2631];
        sv12[2666] = -1 * sv12[2650] + -1 * sv12[2632];
        sv12[2667] = -1 * sv12[2651] + -1 * sv12[2633];
        sv12[2668] = -1 * sv12[2652] + -1 * sv12[2635];
        sv12[2669] = -1 * sv12[2653] + -1 * sv12[2639];
        sv12[2670] = -1 * sv12[2654] + -1 * sv12[2636];
        sv12[2671] = -1 * sv12[2655] + -1 * sv12[2637];
        sv12[2672] = -1 * sv12[2656] + -1 * sv12[2640];
        sv12[2673] = -1 * sv12[2657] + -1 * sv12[2641];
        sv12[2674] = sv12[2658] / sv12[2515];
        sv12[2675] = sv12[2659] / sv12[2515];
        sv12[2676] = sv12[2660] / sv12[2515];
        sv12[2677] = sv12[2661] / sv12[2515];
        sv12[2678] = sv12[2662] / sv12[2515];
        sv12[2679] = sv12[2663] / sv12[2515];
        sv12[2680] = sv12[2664] / sv12[2515];
        sv12[2681] = sv12[2665] / sv12[2515];
        sv12[2682] = sv12[2666] / sv12[2515];
        sv12[2683] = sv12[2667] / sv12[2515];
        sv12[2684] = sv12[2668] / sv12[2515];
        sv12[2685] = sv12[2669] / sv12[2515];
        sv12[2686] = sv12[2670] / sv12[2515];
        sv12[2687] = sv12[2671] / sv12[2515];
        sv12[2688] = sv12[2672] / sv12[2515];
        sv12[2689] = sv12[2673] / sv12[2515];
        sv12[2690] = -2.0 * sv12[2518] * sv12[2531];
        sv12[2691] = -2.0 * sv12[2518] * sv12[2532];
        sv12[2692] = -2.0 * sv12[2518] * sv12[2533];
        sv12[2693] = -2.0 * sv12[2518] * sv12[2534];
        sv12[2694] = -2.0 * sv12[2519] * sv12[2531];
        sv12[2695] = -2.0 * sv12[2519] * sv12[2532];
        sv12[2696] = -2.0 * sv12[2519] * sv12[2533];
        sv12[2697] = -2.0 * sv12[2519] * sv12[2534];
        sv12[2698] = -2.0 * sv12[2520] * sv12[2531];
        sv12[2699] = -2.0 * sv12[2520] * sv12[2532];
        sv12[2700] = -2.0 * sv12[2520] * sv12[2533];
        sv12[2701] = -2.0 * sv12[2520] * sv12[2534];
        sv12[2702] = -2.0 * sv12[2521] * sv12[2531];
        sv12[2703] = -2.0 * sv12[2521] * sv12[2532];
        sv12[2704] = -2.0 * sv12[2521] * sv12[2533];
        sv12[2705] = -2.0 * sv12[2521] * sv12[2534];
        sv12[2706] = -2.0 * sv12[2602] * sv12[2530];
        sv12[2707] = -2.0 * sv12[2603] * sv12[2530];
        sv12[2708] = -2.0 * sv12[2604] * sv12[2530];
        sv12[2709] = -2.0 * sv12[2605] * sv12[2530];
        sv12[2710] = -2.0 * sv12[2606] * sv12[2530];
        sv12[2711] = -2.0 * sv12[2607] * sv12[2530];
        sv12[2712] = -2.0 * sv12[2608] * sv12[2530];
        sv12[2713] = -2.0 * sv12[2609] * sv12[2530];
        sv12[2714] = -2.0 * sv12[2610] * sv12[2530];
        sv12[2715] = -2.0 * sv12[2611] * sv12[2530];
        sv12[2716] = -2.0 * sv12[2612] * sv12[2530];
        sv12[2717] = -2.0 * sv12[2613] * sv12[2530];
        sv12[2718] = sv12[2690] + sv12[2706];
        sv12[2719] = sv12[2694] + sv12[2707];
        sv12[2720] = sv12[2698] + sv12[2708];
        sv12[2721] = sv12[2702] + sv12[2709];
        sv12[2722] = sv12[2691] + sv12[2710];
        sv12[2723] = sv12[2692] + sv12[2708];
        sv12[2724] = sv12[2693] + sv12[2709];
        sv12[2725] = sv12[2695] + sv12[2711];
        sv12[2726] = sv12[2699] + sv12[2712];
        sv12[2727] = sv12[2703] + sv12[2713];
        sv12[2728] = sv12[2696] + sv12[2712];
        sv12[2729] = sv12[2697] + sv12[2713];
        sv12[2730] = sv12[2700] + sv12[2714];
        sv12[2731] = sv12[2704] + sv12[2715];
        sv12[2732] = sv12[2701] + sv12[2716];
        sv12[2733] = sv12[2705] + sv12[2717];
        sv12[2734] = -1 * sv12[2531] * sv12[2544];
        sv12[2735] = -1 * sv12[2531] * sv12[2545];
        sv12[2736] = -1 * sv12[2531] * sv12[2546];
        sv12[2737] = -1 * sv12[2531] * sv12[2547];
        sv12[2738] = -1 * sv12[2532] * sv12[2544];
        sv12[2739] = -1 * sv12[2532] * sv12[2545];
        sv12[2740] = -1 * sv12[2532] * sv12[2546];
        sv12[2741] = -1 * sv12[2532] * sv12[2547];
        sv12[2742] = -1 * sv12[2533] * sv12[2544];
        sv12[2743] = -1 * sv12[2533] * sv12[2545];
        sv12[2744] = -1 * sv12[2533] * sv12[2546];
        sv12[2745] = -1 * sv12[2533] * sv12[2547];
        sv12[2746] = -1 * sv12[2534] * sv12[2544];
        sv12[2747] = -1 * sv12[2534] * sv12[2545];
        sv12[2748] = -1 * sv12[2534] * sv12[2546];
        sv12[2749] = -1 * sv12[2534] * sv12[2547];
        sv12[2750] = -1 * sv12[2718] * sv12[2535];
        sv12[2751] = -1 * sv12[2719] * sv12[2535];
        sv12[2752] = -1 * sv12[2720] * sv12[2535];
        sv12[2753] = -1 * sv12[2721] * sv12[2535];
        sv12[2754] = -1 * sv12[2722] * sv12[2535];
        sv12[2755] = -1 * sv12[2723] * sv12[2535];
        sv12[2756] = -1 * sv12[2724] * sv12[2535];
        sv12[2757] = -1 * sv12[2725] * sv12[2535];
        sv12[2758] = -1 * sv12[2726] * sv12[2535];
        sv12[2759] = -1 * sv12[2727] * sv12[2535];
        sv12[2760] = -1 * sv12[2728] * sv12[2535];
        sv12[2761] = -1 * sv12[2729] * sv12[2535];
        sv12[2762] = -1 * sv12[2730] * sv12[2535];
        sv12[2763] = -1 * sv12[2731] * sv12[2535];
        sv12[2764] = -1 * sv12[2732] * sv12[2535];
        sv12[2765] = -1 * sv12[2733] * sv12[2535];
        sv12[2766] = sv12[2734] + sv12[2750];
        sv12[2767] = sv12[2738] + sv12[2751];
        sv12[2768] = sv12[2742] + sv12[2752];
        sv12[2769] = sv12[2746] + sv12[2753];
        sv12[2770] = sv12[2735] + sv12[2754];
        sv12[2771] = sv12[2736] + sv12[2755];
        sv12[2772] = sv12[2737] + sv12[2756];
        sv12[2773] = sv12[2739] + sv12[2757];
        sv12[2774] = sv12[2743] + sv12[2758];
        sv12[2775] = sv12[2747] + sv12[2759];
        sv12[2776] = sv12[2740] + sv12[2760];
        sv12[2777] = sv12[2741] + sv12[2761];
        sv12[2778] = sv12[2744] + sv12[2762];
        sv12[2779] = sv12[2748] + sv12[2763];
        sv12[2780] = sv12[2745] + sv12[2764];
        sv12[2781] = sv12[2749] + sv12[2765];
        sv12[2782] = sv12[2718] + -1 * sv12[2766];
        sv12[2783] = sv12[2719] + -1 * sv12[2767];
        sv12[2784] = sv12[2720] + -1 * sv12[2768];
        sv12[2785] = sv12[2721] + -1 * sv12[2769];
        sv12[2786] = sv12[2722] + -1 * sv12[2770];
        sv12[2787] = sv12[2723] + -1 * sv12[2771];
        sv12[2788] = sv12[2724] + -1 * sv12[2772];
        sv12[2789] = sv12[2725] + -1 * sv12[2773];
        sv12[2790] = sv12[2726] + -1 * sv12[2774];
        sv12[2791] = sv12[2727] + -1 * sv12[2775];
        sv12[2792] = sv12[2728] + -1 * sv12[2776];
        sv12[2793] = sv12[2729] + -1 * sv12[2777];
        sv12[2794] = sv12[2730] + -1 * sv12[2778];
        sv12[2795] = sv12[2731] + -1 * sv12[2779];
        sv12[2796] = sv12[2732] + -1 * sv12[2780];
        sv12[2797] = sv12[2733] + -1 * sv12[2781];
        sv12[2798] = sv12[2782] + -1 * sv12[2734];
        sv12[2799] = sv12[2783] + -1 * sv12[2735];
        sv12[2800] = sv12[2784] + -1 * sv12[2736];
        sv12[2801] = sv12[2785] + -1 * sv12[2737];
        sv12[2802] = sv12[2786] + -1 * sv12[2738];
        sv12[2803] = sv12[2787] + -1 * sv12[2742];
        sv12[2804] = sv12[2788] + -1 * sv12[2746];
        sv12[2805] = sv12[2789] + -1 * sv12[2739];
        sv12[2806] = sv12[2790] + -1 * sv12[2740];
        sv12[2807] = sv12[2791] + -1 * sv12[2741];
        sv12[2808] = sv12[2792] + -1 * sv12[2743];
        sv12[2809] = sv12[2793] + -1 * sv12[2747];
        sv12[2810] = sv12[2794] + -1 * sv12[2744];
        sv12[2811] = sv12[2795] + -1 * sv12[2745];
        sv12[2812] = sv12[2796] + -1 * sv12[2748];
        sv12[2813] = sv12[2797] + -1 * sv12[2749];
        sv12[2814] = sv12[2798] / (1.0 + -1 * sv12[2530]);
        sv12[2815] = sv12[2799] / (1.0 + -1 * sv12[2530]);
        sv12[2816] = sv12[2800] / (1.0 + -1 * sv12[2530]);
        sv12[2817] = sv12[2801] / (1.0 + -1 * sv12[2530]);
        sv12[2818] = sv12[2802] / (1.0 + -1 * sv12[2530]);
        sv12[2819] = sv12[2803] / (1.0 + -1 * sv12[2530]);
        sv12[2820] = sv12[2804] / (1.0 + -1 * sv12[2530]);
        sv12[2821] = sv12[2805] / (1.0 + -1 * sv12[2530]);
        sv12[2822] = sv12[2806] / (1.0 + -1 * sv12[2530]);
        sv12[2823] = sv12[2807] / (1.0 + -1 * sv12[2530]);
        sv12[2824] = sv12[2808] / (1.0 + -1 * sv12[2530]);
        sv12[2825] = sv12[2809] / (1.0 + -1 * sv12[2530]);
        sv12[2826] = sv12[2810] / (1.0 + -1 * sv12[2530]);
        sv12[2827] = sv12[2811] / (1.0 + -1 * sv12[2530]);
        sv12[2828] = sv12[2812] / (1.0 + -1 * sv12[2530]);
        sv12[2829] = sv12[2813] / (1.0 + -1 * sv12[2530]);
        sv12[2830] = -1 * sv12[2674] + sv12[2814];
        sv12[2831] = -1 * sv12[2675] + sv12[2815];
        sv12[2832] = -1 * sv12[2676] + sv12[2816];
        sv12[2833] = -1 * sv12[2677] + sv12[2817];
        sv12[2834] = -1 * sv12[2678] + sv12[2818];
        sv12[2835] = -1 * sv12[2679] + sv12[2819];
        sv12[2836] = -1 * sv12[2680] + sv12[2820];
        sv12[2837] = -1 * sv12[2681] + sv12[2821];
        sv12[2838] = -1 * sv12[2682] + sv12[2822];
        sv12[2839] = -1 * sv12[2683] + sv12[2823];
        sv12[2840] = -1 * sv12[2684] + sv12[2824];
        sv12[2841] = -1 * sv12[2685] + sv12[2825];
        sv12[2842] = -1 * sv12[2686] + sv12[2826];
        sv12[2843] = -1 * sv12[2687] + sv12[2827];
        sv12[2844] = -1 * sv12[2688] + sv12[2828];
        sv12[2845] = -1 * sv12[2689] + sv12[2829];
        sv12[2846] = sv12[2830] * (2.0 * sp[53]);
        sv12[2847] = sv12[2831] * (2.0 * sp[53]);
        sv12[2848] = sv12[2832] * (2.0 * sp[53]);
        sv12[2849] = sv12[2833] * (2.0 * sp[53]);
        sv12[2850] = sv12[2834] * (2.0 * sp[53]);
        sv12[2851] = sv12[2835] * (2.0 * sp[53]);
        sv12[2852] = sv12[2836] * (2.0 * sp[53]);
        sv12[2853] = sv12[2837] * (2.0 * sp[53]);
        sv12[2854] = sv12[2838] * (2.0 * sp[53]);
        sv12[2855] = sv12[2839] * (2.0 * sp[53]);
        sv12[2856] = sv12[2840] * (2.0 * sp[53]);
        sv12[2857] = sv12[2841] * (2.0 * sp[53]);
        sv12[2858] = sv12[2842] * (2.0 * sp[53]);
        sv12[2859] = sv12[2843] * (2.0 * sp[53]);
        sv12[2860] = sv12[2844] * (2.0 * sp[53]);
        sv12[2861] = sv12[2845] * (2.0 * sp[53]);
        sv12[2862] = -1 * sv12[2579] + sv12[2846];
        sv12[2863] = -1 * sv12[2580] + sv12[2847];
        sv12[2864] = -1 * sv12[2581] + sv12[2850];
        sv12[2865] = sv12[2851] + -1 * sv12[2569];
        sv12[2866] = sv12[2852] + -1 * sv12[2570];
        sv12[2867] = -1 * sv12[2582] + sv12[2853];
        sv12[2868] = sv12[2856] + -1 * sv12[2573];
        sv12[2869] = sv12[2857] + -1 * sv12[2574];
        sv12[2870] = sv12[2862] + -1 * sv12[2567];
        sv12[2871] = sv12[2863] + -1 * sv12[2568];
        sv12[2872] = sv12[2848] + -1 * sv12[2569];
        sv12[2873] = sv12[2849] + -1 * sv12[2570];
        sv12[2874] = sv12[2864] + -1 * sv12[2571];
        sv12[2875] = sv12[2867] + -1 * sv12[2572];
        sv12[2876] = sv12[2854] + -1 * sv12[2573];
        sv12[2877] = sv12[2855] + -1 * sv12[2574];
        sv12[2878] = sv12[2870] / sv12[85];
        sv12[2879] = sv12[2871] / sv12[85];
        sv12[2880] = sv12[2872] / sv12[85];
        sv12[2881] = sv12[2873] / sv12[85];
        sv12[2882] = sv12[2874] / sv12[85];
        sv12[2883] = sv12[2865] / sv12[85];
        sv12[2884] = sv12[2866] / sv12[85];
        sv12[2885] = sv12[2875] / sv12[85];
        sv12[2886] = sv12[2876] / sv12[85];
        sv12[2887] = sv12[2877] / sv12[85];
        sv12[2888] = sv12[2868] / sv12[85];
        sv12[2889] = sv12[2869] / sv12[85];
        sv12[2890] = sv12[2858] / sv12[85];
        sv12[2891] = sv12[2859] / sv12[85];
        sv12[2892] = sv12[2860] / sv12[85];
        sv12[2893] = sv12[2861] / sv12[85];
        sv12[2894] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[2515]) * (2.0 * sp[53]);
        sv12[2895] = sv12[2894] * (2.0 * sp[53]);
        sv12[2896] = sv12[2895] / (0.0001 + sv12[28] / 1.3);
        sv12[2897] = sv12[96] / 1.3 * sv12[2896];
        sv12[2898] = sv12[97] / 1.3 * sv12[2896];
        sv12[2899] = 0.5 * (-0.004435991517475 * sv12[2518]) * (2.0 * sp[53]);
        sv12[2900] = 0.5 * (-0.004435991517475 * sv12[2519]) * (2.0 * sp[53]);
        sv12[2901] = 0.5 * (-0.004435991517475 * sv12[2520]) * (2.0 * sp[53]);
        sv12[2902] = 0.5 * (-0.004435991517475 * sv12[2521]) * (2.0 * sp[53]);
        sv12[2903] = sv12[2899] * (2.0 * sp[53]);
        sv12[2904] = sv12[2900] * (2.0 * sp[53]);
        sv12[2905] = sv12[2901] * (2.0 * sp[53]);
        sv12[2906] = sv12[2902] * (2.0 * sp[53]);
        sv12[2907] = -1 * sv12[2897] + sv12[2905];
        sv12[2908] = -1 * sv12[2898] + sv12[2906];
        sv12[2909] = sv12[2903] / (0.0001 + sv12[28] / 1.3);
        sv12[2910] = sv12[2904] / (0.0001 + sv12[28] / 1.3);
        sv12[2911] = sv12[2907] / (0.0001 + sv12[28] / 1.3);
        sv12[2912] = sv12[2908] / (0.0001 + sv12[28] / 1.3);
        sv12[2913] = sv12[96] / 1.3 * sv12[2909];
        sv12[2914] = sv12[96] / 1.3 * sv12[2910];
        sv12[2915] = sv12[96] / 1.3 * sv12[2911];
        sv12[2916] = sv12[96] / 1.3 * sv12[2912];
        sv12[2917] = sv12[97] / 1.3 * sv12[2909];
        sv12[2918] = sv12[97] / 1.3 * sv12[2910];
        sv12[2919] = sv12[97] / 1.3 * sv12[2911];
        sv12[2920] = sv12[97] / 1.3 * sv12[2912];
        sv12[2921] = sv12[183] / 1.3 * sv12[2896];
        sv12[2922] = sv12[184] / 1.3 * sv12[2896];
        sv12[2923] = sv12[185] / 1.3 * sv12[2896];
        sv12[2924] = sv12[2915] + sv12[2921];
        sv12[2925] = sv12[2919] + sv12[2922];
        sv12[2926] = sv12[2916] + sv12[2922];
        sv12[2927] = sv12[2920] + sv12[2923];
        sv12[2928] = 0.5 * (-0.004435991517475 * sv12[2602]) * (2.0 * sp[53]);
        sv12[2929] = 0.5 * (-0.004435991517475 * sv12[2603]) * (2.0 * sp[53]);
        sv12[2930] = 0.5 * (-0.004435991517475 * sv12[2604]) * (2.0 * sp[53]);
        sv12[2931] = 0.5 * (-0.004435991517475 * sv12[2605]) * (2.0 * sp[53]);
        sv12[2932] = 0.5 * (-0.004435991517475 * sv12[2606]) * (2.0 * sp[53]);
        sv12[2933] = 0.5 * (-0.004435991517475 * sv12[2607]) * (2.0 * sp[53]);
        sv12[2934] = 0.5 * (-0.004435991517475 * sv12[2608]) * (2.0 * sp[53]);
        sv12[2935] = 0.5 * (-0.004435991517475 * sv12[2609]) * (2.0 * sp[53]);
        sv12[2936] = 0.5 * (-0.004435991517475 * sv12[2610]) * (2.0 * sp[53]);
        sv12[2937] = 0.5 * (-0.004435991517475 * sv12[2611]) * (2.0 * sp[53]);
        sv12[2938] = 0.5 * (-0.004435991517475 * sv12[2612]) * (2.0 * sp[53]);
        sv12[2939] = 0.5 * (-0.004435991517475 * sv12[2613]) * (2.0 * sp[53]);
        sv12[2940] = sv12[2928] * (2.0 * sp[53]);
        sv12[2941] = sv12[2929] * (2.0 * sp[53]);
        sv12[2942] = sv12[2930] * (2.0 * sp[53]);
        sv12[2943] = sv12[2931] * (2.0 * sp[53]);
        sv12[2944] = sv12[2932] * (2.0 * sp[53]);
        sv12[2945] = sv12[2933] * (2.0 * sp[53]);
        sv12[2946] = sv12[2934] * (2.0 * sp[53]);
        sv12[2947] = sv12[2935] * (2.0 * sp[53]);
        sv12[2948] = sv12[2936] * (2.0 * sp[53]);
        sv12[2949] = sv12[2937] * (2.0 * sp[53]);
        sv12[2950] = sv12[2938] * (2.0 * sp[53]);
        sv12[2951] = sv12[2939] * (2.0 * sp[53]);
        sv12[2952] = -1 * sv12[2913] + sv12[2942];
        sv12[2953] = -1 * sv12[2917] + sv12[2943];
        sv12[2954] = -1 * sv12[2914] + sv12[2946];
        sv12[2955] = -1 * sv12[2918] + sv12[2947];
        sv12[2956] = -1 * sv12[2924] + sv12[2948];
        sv12[2957] = -1 * sv12[2925] + sv12[2949];
        sv12[2958] = -1 * sv12[2926] + sv12[2950];
        sv12[2959] = -1 * sv12[2927] + sv12[2951];
        sv12[2960] = sv12[2956] + -1 * sv12[2915];
        sv12[2961] = sv12[2957] + -1 * sv12[2916];
        sv12[2962] = sv12[2958] + -1 * sv12[2919];
        sv12[2963] = sv12[2959] + -1 * sv12[2920];
        sv12[2964] = sv12[2940] / (0.0001 + sv12[28] / 1.3);
        sv12[2965] = sv12[2941] / (0.0001 + sv12[28] / 1.3);
        sv12[2966] = sv12[2952] / (0.0001 + sv12[28] / 1.3);
        sv12[2967] = sv12[2953] / (0.0001 + sv12[28] / 1.3);
        sv12[2968] = sv12[2944] / (0.0001 + sv12[28] / 1.3);
        sv12[2969] = sv12[2945] / (0.0001 + sv12[28] / 1.3);
        sv12[2970] = sv12[2954] / (0.0001 + sv12[28] / 1.3);
        sv12[2971] = sv12[2955] / (0.0001 + sv12[28] / 1.3);
        sv12[2972] = sv12[2960] / (0.0001 + sv12[28] / 1.3);
        sv12[2973] = sv12[2961] / (0.0001 + sv12[28] / 1.3);
        sv12[2974] = sv12[2962] / (0.0001 + sv12[28] / 1.3);
        sv12[2975] = sv12[2963] / (0.0001 + sv12[28] / 1.3);
        sv12[2976] = (sv12[2515] >= 0.1 ? sv12[2878] : sv12[2964]);
        sv12[2977] = (sv12[2515] >= 0.1 ? sv12[2879] : sv12[2965]);
        sv12[2978] = (sv12[2515] >= 0.1 ? sv12[2880] : sv12[2966]);
        sv12[2979] = (sv12[2515] >= 0.1 ? sv12[2881] : sv12[2967]);
        sv12[2980] = (sv12[2515] >= 0.1 ? sv12[2882] : sv12[2968]);
        sv12[2981] = (sv12[2515] >= 0.1 ? sv12[2883] : sv12[2966]);
        sv12[2982] = (sv12[2515] >= 0.1 ? sv12[2884] : sv12[2967]);
        sv12[2983] = (sv12[2515] >= 0.1 ? sv12[2885] : sv12[2969]);
        sv12[2984] = (sv12[2515] >= 0.1 ? sv12[2886] : sv12[2970]);
        sv12[2985] = (sv12[2515] >= 0.1 ? sv12[2887] : sv12[2971]);
        sv12[2986] = (sv12[2515] >= 0.1 ? sv12[2888] : sv12[2970]);
        sv12[2987] = (sv12[2515] >= 0.1 ? sv12[2889] : sv12[2971]);
        sv12[2988] = (sv12[2515] >= 0.1 ? sv12[2890] : sv12[2972]);
        sv12[2989] = (sv12[2515] >= 0.1 ? sv12[2891] : sv12[2973]);
        sv12[2990] = (sv12[2515] >= 0.1 ? sv12[2892] : sv12[2974]);
        sv12[2991] = (sv12[2515] >= 0.1 ? sv12[2893] : sv12[2975]);
        sv12[2992] = sv12[2514] * sv12[2976];
        sv12[2993] = sv12[2514] * sv12[2977];
        sv12[2994] = sv12[2514] * sv12[2978];
        sv12[2995] = sv12[2514] * sv12[2979];
        sv12[2996] = sv12[2514] * sv12[2980];
        sv12[2997] = sv12[2514] * sv12[2981];
        sv12[2998] = sv12[2514] * sv12[2982];
        sv12[2999] = sv12[2514] * sv12[2983];
        sv12[3000] = sv12[2514] * sv12[2984];
        sv12[3001] = sv12[2514] * sv12[2985];
        sv12[3002] = sv12[2514] * sv12[2986];
        sv12[3003] = sv12[2514] * sv12[2987];
        sv12[3004] = sv12[2514] * sv12[2988];
        sv12[3005] = sv12[2514] * sv12[2989];
        sv12[3006] = sv12[2514] * sv12[2990];
        sv12[3007] = sv12[2514] * sv12[2991];
        sv12[3008] = sp[228] * (sv12[645] / 1.3);
        sv12[3009] = sp[228] * (sv12[646] / 1.3);
        sv12[3010] = sp[228] * (sv12[647] / 1.3);
        sv12[3011] = sp[228] * (sv12[648] / 1.3);
        sv12[3012] = sp[228] * (sv12[649] / 1.3);
        sv12[3013] = sp[228] * (sv12[650] / 1.3);
        sv12[3014] = sp[231] * (sv12[687] / 1.3);
        sv12[3015] = sp[231] * (sv12[688] / 1.3);
        sv12[3016] = sp[231] * (sv12[689] / 1.3);
        sv12[3017] = sp[231] * (sv12[690] / 1.3);
        sv12[3018] = sp[231] * (sv12[691] / 1.3);
        sv12[3019] = sp[231] * (sv12[692] / 1.3);
        sv12[3020] = sv12[3008] + sv12[3014];
        sv12[3021] = sv12[3009] + sv12[3015];
        sv12[3022] = sv12[3010] + sv12[3016];
        sv12[3023] = sv12[3017] + sv12[3011];
        sv12[3024] = sv12[3012] + sv12[3018];
        sv12[3025] = sv12[3019] + sv12[3013];
        sv12[3026] = w2_c3 + w2_c3;
        sv12[3027] = sv12[3026] / (2 * sv12[2494]);
        sv12[3028] = 0.5 * (1.0 + sv12[3027]) * sv12[2496];
        sv12[3029] = -1 * sv12[3028] / (0.5 * sv12[2495]);
        sv12[3030] = 1.92 * w1_c4 * sv12[3029];
        sv12[3031] = -1 * sv12[3020] + sv12[3030];
        sv12[3032] = 2.0 * sv12[78] * (0.09 * (1.44 * sv12[11]));
        sv12[3033] = 2.0 * sv12[727] * sv12[2511];
        sv12[3034] = 2.0 * sv12[728] * sv12[2511];
        sv12[3035] = 2.0 * sv12[729] * sv12[2511];
        sv12[3036] = 2.0 * sv12[730] * sv12[2511];
        sv12[3037] = sv12[3031] + -1 * sv12[3032];
        sv12[3038] = sv12[2501] * sp[228];
        sv12[3039] = sv12[2501] * (-1 * sv12[3033]);
        sv12[3040] = sv12[2501] * (-1 * sv12[3034]);
        sv12[3041] = sv12[2501] * sp[231];
        sv12[3042] = sv12[2501] * (-1 * sv12[3035]);
        sv12[3043] = sv12[2501] * (-1 * sv12[3036]);
        sv12[3044] = sv12[2501] * sv12[3037];
        sv12[3045] = sv12[2501] * (-1 * sv12[3021]);
        sv12[3046] = sv12[2501] * (-1 * sv12[3022]);
        sv12[3047] = sv12[2501] * (-1 * sv12[3023]);
        sv12[3048] = sv12[2501] * (-1 * sv12[3024]);
        sv12[3049] = sv12[2501] * (-1 * sv12[3025]);
        sv12[3050] = sp[222] * (sv12[645] / 1.3);
        sv12[3051] = sp[222] * (sv12[646] / 1.3);
        sv12[3052] = sp[222] * (sv12[647] / 1.3);
        sv12[3053] = sp[222] * (sv12[648] / 1.3);
        sv12[3054] = sp[222] * (sv12[649] / 1.3);
        sv12[3055] = sp[222] * (sv12[650] / 1.3);
        sv12[3056] = sp[225] * (sv12[687] / 1.3);
        sv12[3057] = sp[225] * (sv12[688] / 1.3);
        sv12[3058] = sp[225] * (sv12[689] / 1.3);
        sv12[3059] = sp[225] * (sv12[690] / 1.3);
        sv12[3060] = sp[225] * (sv12[691] / 1.3);
        sv12[3061] = sp[225] * (sv12[692] / 1.3);
        sv12[3062] = sv12[3050] + sv12[3056];
        sv12[3063] = sv12[3051] + sv12[3057];
        sv12[3064] = sv12[3052] + sv12[3058];
        sv12[3065] = sv12[3059] + sv12[3053];
        sv12[3066] = sv12[3054] + sv12[3060];
        sv12[3067] = sv12[3061] + sv12[3055];
        sv12[3068] = 1.92 * w3_c4 * sv12[3029];
        sv12[3069] = 0.5 * (1.0 + sv12[3027]) * sv12[2498];
        sv12[3070] = -1 * sv12[3069] / (0.5 * sv12[2495]);
        sv12[3071] = 1.92 * w1_c4 * sv12[3070];
        sv12[3072] = sv12[3068] + sv12[3071];
        sv12[3073] = sv12[3072] + -1 * sv12[3062];
        sv12[3074] = sv12[2513] * sp[222];
        sv12[3075] = sv12[2513] * sp[225];
        sv12[3076] = sv12[3073] * sv12[2513];
        sv12[3077] = sv12[2513] * (-1 * sv12[3063]);
        sv12[3078] = sv12[2513] * (-1 * sv12[3064]);
        sv12[3079] = sv12[2513] * (-1 * sv12[3065]);
        sv12[3080] = sv12[2513] * (-1 * sv12[3066]);
        sv12[3081] = sv12[2513] * (-1 * sv12[3067]);
        sv12[3082] = sv12[3038] + sv12[3074];
        sv12[3083] = sv12[3041] + sv12[3075];
        sv12[3084] = sv12[3076] + sv12[3044];
        sv12[3085] = sv12[3045] + sv12[3077];
        sv12[3086] = sv12[3046] + sv12[3078];
        sv12[3087] = sv12[3047] + sv12[3079];
        sv12[3088] = sv12[3048] + sv12[3080];
        sv12[3089] = sv12[3049] + sv12[3081];
        sv12[3090] = (sv12[2515] >= 0.1 ? sv12[2563] : sv12[2909]);
        sv12[3091] = (sv12[2515] >= 0.1 ? sv12[2564] : sv12[2910]);
        sv12[3092] = (sv12[2515] >= 0.1 ? sv12[2565] : sv12[2911]);
        sv12[3093] = (sv12[2515] >= 0.1 ? sv12[2566] : sv12[2912]);
        sv12[3094] = sv12[3082] * sv12[3090];
        sv12[3095] = sv12[3082] * sv12[3091];
        sv12[3096] = sv12[3082] * sv12[3092];
        sv12[3097] = sv12[3082] * sv12[3093];
        sv12[3098] = sv12[3039] * sv12[3090];
        sv12[3099] = sv12[3039] * sv12[3091];
        sv12[3100] = sv12[3039] * sv12[3092];
        sv12[3101] = sv12[3039] * sv12[3093];
        sv12[3102] = sv12[3040] * sv12[3090];
        sv12[3103] = sv12[3040] * sv12[3091];
        sv12[3104] = sv12[3040] * sv12[3092];
        sv12[3105] = sv12[3040] * sv12[3093];
        sv12[3106] = sv12[3083] * sv12[3090];
        sv12[3107] = sv12[3083] * sv12[3091];
        sv12[3108] = sv12[3083] * sv12[3092];
        sv12[3109] = sv12[3083] * sv12[3093];
        sv12[3110] = sv12[3042] * sv12[3090];
        sv12[3111] = sv12[3042] * sv12[3091];
        sv12[3112] = sv12[3042] * sv12[3092];
        sv12[3113] = sv12[3042] * sv12[3093];
        sv12[3114] = sv12[3043] * sv12[3090];
        sv12[3115] = sv12[3043] * sv12[3091];
        sv12[3116] = sv12[3043] * sv12[3092];
        sv12[3117] = sv12[3043] * sv12[3093];
        sv12[3118] = sv12[3084] * sv12[3090];
        sv12[3119] = sv12[3084] * sv12[3091];
        sv12[3120] = sv12[3084] * sv12[3092];
        sv12[3121] = sv12[3084] * sv12[3093];
        sv12[3122] = sv12[3085] * sv12[3090];
        sv12[3123] = sv12[3085] * sv12[3091];
        sv12[3124] = sv12[3085] * sv12[3092];
        sv12[3125] = sv12[3085] * sv12[3093];
        sv12[3126] = sv12[3086] * sv12[3090];
        sv12[3127] = sv12[3086] * sv12[3091];
        sv12[3128] = sv12[3086] * sv12[3092];
        sv12[3129] = sv12[3086] * sv12[3093];
        sv12[3130] = sv12[3087] * sv12[3090];
        sv12[3131] = sv12[3087] * sv12[3091];
        sv12[3132] = sv12[3087] * sv12[3092];
        sv12[3133] = sv12[3087] * sv12[3093];
        sv12[3134] = sv12[3088] * sv12[3090];
        sv12[3135] = sv12[3088] * sv12[3091];
        sv12[3136] = sv12[3088] * sv12[3092];
        sv12[3137] = sv12[3088] * sv12[3093];
        sv12[3138] = sv12[3089] * sv12[3090];
        sv12[3139] = sv12[3089] * sv12[3091];
        sv12[3140] = sv12[3089] * sv12[3092];
        sv12[3141] = sv12[3089] * sv12[3093];
        sv12[3142] = sv12[3094] + sv12[2992];
        sv12[3143] = sv12[3095] + sv12[2993];
        sv12[3144] = sv12[2994] + sv12[3096];
        sv12[3145] = sv12[2995] + sv12[3097];
        sv12[3146] = sv12[3106] + sv12[2996];
        sv12[3147] = sv12[2997] + sv12[3118];
        sv12[3148] = sv12[2998] + sv12[3122];
        sv12[3149] = sv12[3107] + sv12[2999];
        sv12[3150] = sv12[3000] + sv12[3108];
        sv12[3151] = sv12[3001] + sv12[3109];
        sv12[3152] = sv12[3002] + sv12[3119];
        sv12[3153] = sv12[3003] + sv12[3123];
        sv12[3154] = sv12[3004] + sv12[3120];
        sv12[3155] = sv12[3005] + sv12[3121];
        sv12[3156] = sv12[3006] + sv12[3124];
        sv12[3157] = sv12[3007] + sv12[3125];
        sv12[3158] = sp[228] * (sv12[918] / 1.3);
        sv12[3159] = sp[228] * (sv12[919] / 1.3);
        sv12[3160] = sp[228] * (sv12[920] / 1.3);
        sv12[3161] = sp[228] * (sv12[921] / 1.3);
        sv12[3162] = sp[228] * (sv12[922] / 1.3);
        sv12[3163] = sp[228] * (sv12[923] / 1.3);
        sv12[3164] = sp[228] * (sv12[924] / 1.3);
        sv12[3165] = sp[228] * (sv12[925] / 1.3);
        sv12[3166] = sp[228] * (sv12[926] / 1.3);
        sv12[3167] = sp[228] * (sv12[927] / 1.3);
        sv12[3168] = sp[228] * (sv12[928] / 1.3);
        sv12[3169] = sp[231] * (sv12[986] / 1.3);
        sv12[3170] = sp[231] * (sv12[987] / 1.3);
        sv12[3171] = sp[231] * (sv12[988] / 1.3);
        sv12[3172] = sp[231] * (sv12[989] / 1.3);
        sv12[3173] = sp[231] * (sv12[990] / 1.3);
        sv12[3174] = sp[231] * (sv12[991] / 1.3);
        sv12[3175] = sp[231] * (sv12[992] / 1.3);
        sv12[3176] = sp[231] * (sv12[993] / 1.3);
        sv12[3177] = sp[231] * (sv12[994] / 1.3);
        sv12[3178] = sp[231] * (sv12[995] / 1.3);
        sv12[3179] = sp[231] * (sv12[996] / 1.3);
        sv12[3180] = sv12[3158] + sv12[3169];
        sv12[3181] = sv12[3159] + sv12[3170];
        sv12[3182] = sv12[3160] + sv12[3171];
        sv12[3183] = sv12[3172] + sv12[3161];
        sv12[3184] = sv12[3162] + sv12[3173];
        sv12[3185] = sv12[3174] + sv12[3163];
        sv12[3186] = sv12[3164] + sv12[3175];
        sv12[3187] = sv12[3165] + sv12[3176];
        sv12[3188] = sv12[3177] + sv12[3166];
        sv12[3189] = sv12[3167] + sv12[3178];
        sv12[3190] = sv12[3179] + sv12[3168];
        sv12[3191] = 2 * sv12[3027] * sv12[3027];
        sv12[3192] = (2.0 + -1 * sv12[3191]) / (2 * sv12[2494]);
        sv12[3193] = 0.5 * sv12[3192] * sv12[2496];
        sv12[3194] = 0.5 * (1.0 + sv12[3027]) * sv12[3029];
        sv12[3195] = sv12[3193] + sv12[3194];
        sv12[3196] = -1 * sv12[3195] + -1 * sv12[3194];
        sv12[3197] = sv12[3196] / (0.5 * sv12[2495]);
        sv12[3198] = 1.92 * w1_c4 * sv12[3197];
        sv12[3199] = -1 * sv12[3180] + sv12[3198];
        sv12[3200] = 2.0 * sv12[727] * (0.09 * (1.44 * sv12[11]));
        sv12[3201] = 2.0 * sv12[728] * (0.09 * (1.44 * sv12[11]));
        sv12[3202] = 2.0 * sv12[729] * (0.09 * (1.44 * sv12[11]));
        sv12[3203] = 2.0 * sv12[730] * (0.09 * (1.44 * sv12[11]));
        sv12[3204] = 2.0 * sp[98] * sv12[2511];
        sv12[3205] = 2.0 * sp[99] * sv12[2511];
        sv12[3206] = 2.0 * sp[100] * sv12[2511];
        sv12[3207] = 2.0 * sp[101] * sv12[2511];
        sv12[3208] = 2.0 * sp[102] * sv12[2511];
        sv12[3209] = 2.0 * sp[103] * sv12[2511];
        sv12[3210] = 2.0 * sp[104] * sv12[2511];
        sv12[3211] = 2.0 * sp[105] * sv12[2511];
        sv12[3212] = 2.0 * sp[106] * sv12[2511];
        sv12[3213] = 2.0 * sp[107] * sv12[2511];
        sv12[3214] = sv12[2501] * (-1 * sv12[3204]);
        sv12[3215] = sv12[2501] * (-1 * sv12[3205]);
        sv12[3216] = sv12[2501] * (-1 * sv12[3206]);
        sv12[3217] = sv12[2501] * (-1 * sv12[3207]);
        sv12[3218] = sv12[2501] * (-1 * sv12[3200]);
        sv12[3219] = sv12[2501] * (-1 * sv12[3208]);
        sv12[3220] = sv12[2501] * (-1 * sv12[3209]);
        sv12[3221] = sv12[2501] * (-1 * sv12[3210]);
        sv12[3222] = sv12[2501] * (-1 * sv12[3201]);
        sv12[3223] = sv12[2501] * (-1 * sv12[3211]);
        sv12[3224] = sv12[2501] * (-1 * sv12[3212]);
        sv12[3225] = sv12[2501] * (-1 * sv12[3202]);
        sv12[3226] = sv12[2501] * (-1 * sv12[3213]);
        sv12[3227] = sv12[2501] * (-1 * sv12[3203]);
        sv12[3228] = sv12[2501] * sv12[3199];
        sv12[3229] = sv12[2501] * (-1 * sv12[3181]);
        sv12[3230] = sv12[2501] * (-1 * sv12[3182]);
        sv12[3231] = sv12[2501] * (-1 * sv12[3183]);
        sv12[3232] = sv12[2501] * (-1 * sv12[3184]);
        sv12[3233] = sv12[2501] * (-1 * sv12[3185]);
        sv12[3234] = sv12[2501] * (-1 * sv12[3186]);
        sv12[3235] = sv12[2501] * (-1 * sv12[3187]);
        sv12[3236] = sv12[2501] * (-1 * sv12[3188]);
        sv12[3237] = sv12[2501] * (-1 * sv12[3189]);
        sv12[3238] = sv12[2501] * (-1 * sv12[3190]);
        sv12[3239] = sp[222] * (-1 * sv12[3033]);
        sv12[3240] = sp[222] * (-1 * sv12[3034]);
        sv12[3241] = sp[222] * (-1 * sv12[3035]);
        sv12[3242] = sp[222] * (-1 * sv12[3036]);
        sv12[3243] = sv12[3037] * sp[222];
        sv12[3244] = sp[222] * (-1 * sv12[3021]);
        sv12[3245] = sp[222] * (-1 * sv12[3022]);
        sv12[3246] = sp[222] * (-1 * sv12[3023]);
        sv12[3247] = sp[222] * (-1 * sv12[3024]);
        sv12[3248] = sp[222] * (-1 * sv12[3025]);
        sv12[3249] = sp[225] * (-1 * sv12[3033]);
        sv12[3250] = sp[225] * (-1 * sv12[3034]);
        sv12[3251] = sp[225] * (-1 * sv12[3035]);
        sv12[3252] = sp[225] * (-1 * sv12[3036]);
        sv12[3253] = sv12[3037] * sp[225];
        sv12[3254] = sp[225] * (-1 * sv12[3021]);
        sv12[3255] = sp[225] * (-1 * sv12[3022]);
        sv12[3256] = sp[225] * (-1 * sv12[3023]);
        sv12[3257] = sp[225] * (-1 * sv12[3024]);
        sv12[3258] = sp[225] * (-1 * sv12[3025]);
        sv12[3259] = sv12[3073] * (-1 * sv12[3033]);
        sv12[3260] = sv12[3073] * (-1 * sv12[3034]);
        sv12[3261] = sv12[3073] * sp[228];
        sv12[3262] = sv12[3073] * sp[231];
        sv12[3263] = sv12[3073] * (-1 * sv12[3035]);
        sv12[3264] = sv12[3073] * (-1 * sv12[3036]);
        sv12[3265] = sv12[3073] * sv12[3037];
        sv12[3266] = sv12[3073] * (-1 * sv12[3021]);
        sv12[3267] = sv12[3073] * (-1 * sv12[3022]);
        sv12[3268] = sv12[3073] * (-1 * sv12[3023]);
        sv12[3269] = sv12[3073] * (-1 * sv12[3024]);
        sv12[3270] = sv12[3073] * (-1 * sv12[3025]);
        sv12[3271] = -1 * sv12[3063] * (-1 * sv12[3033]);
        sv12[3272] = -1 * sv12[3063] * (-1 * sv12[3034]);
        sv12[3273] = sp[228] * (-1 * sv12[3063]);
        sv12[3274] = sp[231] * (-1 * sv12[3063]);
        sv12[3275] = -1 * sv12[3063] * (-1 * sv12[3035]);
        sv12[3276] = -1 * sv12[3063] * (-1 * sv12[3036]);
        sv12[3277] = sv12[3037] * (-1 * sv12[3063]);
        sv12[3278] = -1 * sv12[3021] * (-1 * sv12[3063]);
        sv12[3279] = -1 * sv12[3063] * (-1 * sv12[3022]);
        sv12[3280] = -1 * sv12[3063] * (-1 * sv12[3023]);
        sv12[3281] = -1 * sv12[3063] * (-1 * sv12[3024]);
        sv12[3282] = -1 * sv12[3063] * (-1 * sv12[3025]);
        sv12[3283] = -1 * sv12[3064] * (-1 * sv12[3033]);
        sv12[3284] = -1 * sv12[3064] * (-1 * sv12[3034]);
        sv12[3285] = sp[228] * (-1 * sv12[3064]);
        sv12[3286] = sp[231] * (-1 * sv12[3064]);
        sv12[3287] = -1 * sv12[3064] * (-1 * sv12[3035]);
        sv12[3288] = -1 * sv12[3064] * (-1 * sv12[3036]);
        sv12[3289] = sv12[3037] * (-1 * sv12[3064]);
        sv12[3290] = -1 * sv12[3021] * (-1 * sv12[3064]);
        sv12[3291] = -1 * sv12[3022] * (-1 * sv12[3064]);
        sv12[3292] = -1 * sv12[3023] * (-1 * sv12[3064]);
        sv12[3293] = -1 * sv12[3064] * (-1 * sv12[3024]);
        sv12[3294] = -1 * sv12[3064] * (-1 * sv12[3025]);
        sv12[3295] = -1 * sv12[3065] * (-1 * sv12[3033]);
        sv12[3296] = -1 * sv12[3065] * (-1 * sv12[3034]);
        sv12[3297] = sp[228] * (-1 * sv12[3065]);
        sv12[3298] = sp[231] * (-1 * sv12[3065]);
        sv12[3299] = -1 * sv12[3065] * (-1 * sv12[3035]);
        sv12[3300] = -1 * sv12[3065] * (-1 * sv12[3036]);
        sv12[3301] = sv12[3037] * (-1 * sv12[3065]);
        sv12[3302] = -1 * sv12[3021] * (-1 * sv12[3065]);
        sv12[3303] = -1 * sv12[3065] * (-1 * sv12[3022]);
        sv12[3304] = -1 * sv12[3023] * (-1 * sv12[3065]);
        sv12[3305] = -1 * sv12[3065] * (-1 * sv12[3024]);
        sv12[3306] = -1 * sv12[3065] * (-1 * sv12[3025]);
        sv12[3307] = -1 * sv12[3066] * (-1 * sv12[3033]);
        sv12[3308] = -1 * sv12[3066] * (-1 * sv12[3034]);
        sv12[3309] = sp[228] * (-1 * sv12[3066]);
        sv12[3310] = sp[231] * (-1 * sv12[3066]);
        sv12[3311] = -1 * sv12[3066] * (-1 * sv12[3035]);
        sv12[3312] = -1 * sv12[3066] * (-1 * sv12[3036]);
        sv12[3313] = sv12[3037] * (-1 * sv12[3066]);
        sv12[3314] = -1 * sv12[3021] * (-1 * sv12[3066]);
        sv12[3315] = -1 * sv12[3022] * (-1 * sv12[3066]);
        sv12[3316] = -1 * sv12[3023] * (-1 * sv12[3066]);
        sv12[3317] = -1 * sv12[3024] * (-1 * sv12[3066]);
        sv12[3318] = -1 * sv12[3025] * (-1 * sv12[3066]);
        sv12[3319] = -1 * sv12[3067] * (-1 * sv12[3033]);
        sv12[3320] = -1 * sv12[3067] * (-1 * sv12[3034]);
        sv12[3321] = sp[228] * (-1 * sv12[3067]);
        sv12[3322] = sp[231] * (-1 * sv12[3067]);
        sv12[3323] = -1 * sv12[3067] * (-1 * sv12[3035]);
        sv12[3324] = -1 * sv12[3067] * (-1 * sv12[3036]);
        sv12[3325] = sv12[3037] * (-1 * sv12[3067]);
        sv12[3326] = -1 * sv12[3021] * (-1 * sv12[3067]);
        sv12[3327] = -1 * sv12[3022] * (-1 * sv12[3067]);
        sv12[3328] = -1 * sv12[3023] * (-1 * sv12[3067]);
        sv12[3329] = -1 * sv12[3067] * (-1 * sv12[3024]);
        sv12[3330] = -1 * sv12[3025] * (-1 * sv12[3067]);
        sv12[3331] = sv12[3259] + sv12[3218];
        sv12[3332] = sv12[3260] + sv12[3222];
        sv12[3333] = sv12[3263] + sv12[3225];
        sv12[3334] = sv12[3264] + sv12[3227];
        sv12[3335] = sv12[3265] + sv12[3228];
        sv12[3336] = sv12[3229] + sv12[3266];
        sv12[3337] = sv12[3267] + sv12[3230];
        sv12[3338] = sv12[3268] + sv12[3231];
        sv12[3339] = sv12[3232] + sv12[3269];
        sv12[3340] = sv12[3233] + sv12[3270];
        sv12[3341] = sv12[3229] + sv12[3277];
        sv12[3342] = sv12[3234] + sv12[3278];
        sv12[3343] = sv12[3279] + sv12[3235];
        sv12[3344] = sv12[3280] + sv12[3236];
        sv12[3345] = sv12[3237] + sv12[3281];
        sv12[3346] = sv12[3238] + sv12[3282];
        sv12[3347] = sv12[3289] + sv12[3230];
        sv12[3348] = sv12[3301] + sv12[3231];
        sv12[3349] = sv12[3232] + sv12[3313];
        sv12[3350] = sv12[3233] + sv12[3325];
        sv12[3351] = sv12[3290] + sv12[3235];
        sv12[3352] = sv12[3302] + sv12[3236];
        sv12[3353] = sv12[3237] + sv12[3314];
        sv12[3354] = sv12[3238] + sv12[3326];
        sv12[3355] = 1.92 * w3_c4 * sv12[3197];
        sv12[3356] = 0.5 * sv12[3192] * sv12[2498];
        sv12[3357] = 0.5 * (1.0 + sv12[3027]) * sv12[3070];
        sv12[3358] = sv12[3356] + sv12[3357];
        sv12[3359] = -1 * sv12[3358] + -1 * sv12[3357];
        sv12[3360] = sv12[3359] / (0.5 * sv12[2495]);
        sv12[3361] = 1.92 * w1_c4 * sv12[3360];
        sv12[3362] = sv12[3355] + sv12[3361];
        sv12[3363] = sp[222] * (sv12[918] / 1.3);
        sv12[3364] = sp[222] * (sv12[919] / 1.3);
        sv12[3365] = sp[222] * (sv12[920] / 1.3);
        sv12[3366] = sp[222] * (sv12[921] / 1.3);
        sv12[3367] = sp[222] * (sv12[922] / 1.3);
        sv12[3368] = sp[222] * (sv12[923] / 1.3);
        sv12[3369] = sp[222] * (sv12[924] / 1.3);
        sv12[3370] = sp[222] * (sv12[925] / 1.3);
        sv12[3371] = sp[222] * (sv12[926] / 1.3);
        sv12[3372] = sp[222] * (sv12[927] / 1.3);
        sv12[3373] = sp[222] * (sv12[928] / 1.3);
        sv12[3374] = sp[225] * (sv12[986] / 1.3);
        sv12[3375] = sp[225] * (sv12[987] / 1.3);
        sv12[3376] = sp[225] * (sv12[988] / 1.3);
        sv12[3377] = sp[225] * (sv12[989] / 1.3);
        sv12[3378] = sp[225] * (sv12[990] / 1.3);
        sv12[3379] = sp[225] * (sv12[991] / 1.3);
        sv12[3380] = sp[225] * (sv12[992] / 1.3);
        sv12[3381] = sp[225] * (sv12[993] / 1.3);
        sv12[3382] = sp[225] * (sv12[994] / 1.3);
        sv12[3383] = sp[225] * (sv12[995] / 1.3);
        sv12[3384] = sp[225] * (sv12[996] / 1.3);
        sv12[3385] = sv12[3363] + sv12[3374];
        sv12[3386] = sv12[3364] + sv12[3375];
        sv12[3387] = sv12[3365] + sv12[3376];
        sv12[3388] = sv12[3377] + sv12[3366];
        sv12[3389] = sv12[3367] + sv12[3378];
        sv12[3390] = sv12[3379] + sv12[3368];
        sv12[3391] = sv12[3369] + sv12[3380];
        sv12[3392] = sv12[3370] + sv12[3381];
        sv12[3393] = sv12[3382] + sv12[3371];
        sv12[3394] = sv12[3372] + sv12[3383];
        sv12[3395] = sv12[3384] + sv12[3373];
        sv12[3396] = sv12[3362] + -1 * sv12[3385];
        sv12[3397] = sv12[3396] * sv12[2513];
        sv12[3398] = sv12[2513] * (-1 * sv12[3386]);
        sv12[3399] = sv12[2513] * (-1 * sv12[3387]);
        sv12[3400] = sv12[2513] * (-1 * sv12[3388]);
        sv12[3401] = sv12[2513] * (-1 * sv12[3389]);
        sv12[3402] = sv12[2513] * (-1 * sv12[3390]);
        sv12[3403] = sv12[2513] * (-1 * sv12[3391]);
        sv12[3404] = sv12[2513] * (-1 * sv12[3392]);
        sv12[3405] = sv12[2513] * (-1 * sv12[3393]);
        sv12[3406] = sv12[2513] * (-1 * sv12[3394]);
        sv12[3407] = sv12[2513] * (-1 * sv12[3395]);
        sv12[3408] = sv12[3397] + sv12[3265];
        sv12[3409] = sv12[3398] + sv12[3277];
        sv12[3410] = sv12[3289] + sv12[3399];
        sv12[3411] = sv12[3301] + sv12[3400];
        sv12[3412] = sv12[3401] + sv12[3313];
        sv12[3413] = sv12[3402] + sv12[3325];
        sv12[3414] = sv12[3398] + sv12[3266];
        sv12[3415] = sv12[3403] + sv12[3278];
        sv12[3416] = sv12[3290] + sv12[3404];
        sv12[3417] = sv12[3302] + sv12[3405];
        sv12[3418] = sv12[3406] + sv12[3314];
        sv12[3419] = sv12[3407] + sv12[3326];
        sv12[3420] = sv12[3267] + sv12[3399];
        sv12[3421] = sv12[3268] + sv12[3400];
        sv12[3422] = sv12[3401] + sv12[3269];
        sv12[3423] = sv12[3402] + sv12[3270];
        sv12[3424] = sv12[3279] + sv12[3404];
        sv12[3425] = sv12[3280] + sv12[3405];
        sv12[3426] = sv12[3406] + sv12[3281];
        sv12[3427] = sv12[3407] + sv12[3282];
        sv12[3428] = sv12[3261] + sv12[3243];
        sv12[3429] = sv12[3244] + sv12[3273];
        sv12[3430] = sv12[3245] + sv12[3285];
        sv12[3431] = sv12[3246] + sv12[3297];
        sv12[3432] = sv12[3247] + sv12[3309];
        sv12[3433] = sv12[3248] + sv12[3321];
        sv12[3434] = sv12[3262] + sv12[3253];
        sv12[3435] = sv12[3254] + sv12[3274];
        sv12[3436] = sv12[3255] + sv12[3286];
        sv12[3437] = sv12[3256] + sv12[3298];
        sv12[3438] = sv12[3257] + sv12[3310];
        sv12[3439] = sv12[3258] + sv12[3322];
        sv12[3440] = sv12[3408] + sv12[3335];
        sv12[3441] = sv12[3336] + sv12[3409];
        sv12[3442] = sv12[3337] + sv12[3410];
        sv12[3443] = sv12[3338] + sv12[3411];
        sv12[3444] = sv12[3339] + sv12[3412];
        sv12[3445] = sv12[3340] + sv12[3413];
        sv12[3446] = sv12[3414] + sv12[3341];
        sv12[3447] = sv12[3342] + sv12[3415];
        sv12[3448] = sv12[3343] + sv12[3416];
        sv12[3449] = sv12[3344] + sv12[3417];
        sv12[3450] = sv12[3345] + sv12[3418];
        sv12[3451] = sv12[3346] + sv12[3419];
        sv12[3452] = sv12[3347] + sv12[3420];
        sv12[3453] = sv12[3348] + sv12[3421];
        sv12[3454] = sv12[3422] + sv12[3349];
        sv12[3455] = sv12[3423] + sv12[3350];
        sv12[3456] = sv12[3351] + sv12[3424];
        sv12[3457] = sv12[3352] + sv12[3425];
        sv12[3458] = sv12[3426] + sv12[3353];
        sv12[3459] = sv12[3427] + sv12[3354];
        sv12[3460] = sv12[3291] + sv12[3291];
        sv12[3461] = sv12[3303] + sv12[3292];
        sv12[3462] = sv12[3293] + sv12[3315];
        sv12[3463] = sv12[3294] + sv12[3327];
        sv12[3464] = sv12[3304] + sv12[3304];
        sv12[3465] = sv12[3305] + sv12[3316];
        sv12[3466] = sv12[3306] + sv12[3328];
        sv12[3467] = sv12[3317] + sv12[3317];
        sv12[3468] = sv12[3329] + sv12[3318];
        sv12[3469] = sv12[3330] + sv12[3330];
        sv12[3470] = (sv12[2515] >= 0.1 ? sv12[2558] : sv12[2896]);
        sv12[3471] = sv12[3239] * sv12[3470];
        sv12[3472] = sv12[3240] * sv12[3470];
        sv12[3473] = sp[236] * sv12[3470];
        sv12[3474] = sp[237] * sv12[3470];
        sv12[3475] = sv12[3241] * sv12[3470];
        sv12[3476] = sv12[3242] * sv12[3470];
        sv12[3477] = sv12[3428] * sv12[3470];
        sv12[3478] = sv12[3429] * sv12[3470];
        sv12[3479] = sv12[3430] * sv12[3470];
        sv12[3480] = sv12[3431] * sv12[3470];
        sv12[3481] = sv12[3432] * sv12[3470];
        sv12[3482] = sv12[3433] * sv12[3470];
        sv12[3483] = sv12[3214] * sv12[3470];
        sv12[3484] = sv12[3215] * sv12[3470];
        sv12[3485] = sv12[3249] * sv12[3470];
        sv12[3486] = sv12[3216] * sv12[3470];
        sv12[3487] = sv12[3217] * sv12[3470];
        sv12[3488] = sv12[3331] * sv12[3470];
        sv12[3489] = sv12[3271] * sv12[3470];
        sv12[3490] = sv12[3283] * sv12[3470];
        sv12[3491] = sv12[3295] * sv12[3470];
        sv12[3492] = sv12[3307] * sv12[3470];
        sv12[3493] = sv12[3319] * sv12[3470];
        sv12[3494] = sv12[3219] * sv12[3470];
        sv12[3495] = sv12[3250] * sv12[3470];
        sv12[3496] = sv12[3220] * sv12[3470];
        sv12[3497] = sv12[3221] * sv12[3470];
        sv12[3498] = sv12[3332] * sv12[3470];
        sv12[3499] = sv12[3272] * sv12[3470];
        sv12[3500] = sv12[3284] * sv12[3470];
        sv12[3501] = sv12[3296] * sv12[3470];
        sv12[3502] = sv12[3308] * sv12[3470];
        sv12[3503] = sv12[3320] * sv12[3470];
        sv12[3504] = sp[238] * sv12[3470];
        sv12[3505] = sv12[3251] * sv12[3470];
        sv12[3506] = sv12[3252] * sv12[3470];
        sv12[3507] = sv12[3434] * sv12[3470];
        sv12[3508] = sv12[3435] * sv12[3470];
        sv12[3509] = sv12[3436] * sv12[3470];
        sv12[3510] = sv12[3437] * sv12[3470];
        sv12[3511] = sv12[3438] * sv12[3470];
        sv12[3512] = sv12[3439] * sv12[3470];
        sv12[3513] = sv12[3223] * sv12[3470];
        sv12[3514] = sv12[3224] * sv12[3470];
        sv12[3515] = sv12[3333] * sv12[3470];
        sv12[3516] = sv12[3275] * sv12[3470];
        sv12[3517] = sv12[3287] * sv12[3470];
        sv12[3518] = sv12[3299] * sv12[3470];
        sv12[3519] = sv12[3311] * sv12[3470];
        sv12[3520] = sv12[3323] * sv12[3470];
        sv12[3521] = sv12[3226] * sv12[3470];
        sv12[3522] = sv12[3334] * sv12[3470];
        sv12[3523] = sv12[3276] * sv12[3470];
        sv12[3524] = sv12[3288] * sv12[3470];
        sv12[3525] = sv12[3300] * sv12[3470];
        sv12[3526] = sv12[3312] * sv12[3470];
        sv12[3527] = sv12[3324] * sv12[3470];
        sv12[3528] = sv12[3440] * sv12[3470];
        sv12[3529] = sv12[3441] * sv12[3470];
        sv12[3530] = sv12[3442] * sv12[3470];
        sv12[3531] = sv12[3443] * sv12[3470];
        sv12[3532] = sv12[3444] * sv12[3470];
        sv12[3533] = sv12[3445] * sv12[3470];
        sv12[3534] = sv12[3446] * sv12[3470];
        sv12[3535] = sv12[3447] * sv12[3470];
        sv12[3536] = sv12[3448] * sv12[3470];
        sv12[3537] = sv12[3449] * sv12[3470];
        sv12[3538] = sv12[3450] * sv12[3470];
        sv12[3539] = sv12[3451] * sv12[3470];
        sv12[3540] = sv12[3452] * sv12[3470];
        sv12[3541] = sv12[3453] * sv12[3470];
        sv12[3542] = sv12[3454] * sv12[3470];
        sv12[3543] = sv12[3455] * sv12[3470];
        sv12[3544] = sv12[3456] * sv12[3470];
        sv12[3545] = sv12[3457] * sv12[3470];
        sv12[3546] = sv12[3458] * sv12[3470];
        sv12[3547] = sv12[3459] * sv12[3470];
        sv12[3548] = sv12[3460] * sv12[3470];
        sv12[3549] = sv12[3461] * sv12[3470];
        sv12[3550] = sv12[3462] * sv12[3470];
        sv12[3551] = sv12[3463] * sv12[3470];
        sv12[3552] = sv12[3464] * sv12[3470];
        sv12[3553] = sv12[3465] * sv12[3470];
        sv12[3554] = sv12[3466] * sv12[3470];
        sv12[3555] = sv12[3467] * sv12[3470];
        sv12[3556] = sv12[3468] * sv12[3470];
        sv12[3557] = sv12[3469] * sv12[3470];
        sv12[3558] = sv12[3471] + sv12[3098];
        sv12[3559] = sv12[3472] + sv12[3102];
        sv12[3560] = sv12[3473] + sv12[3094];
        sv12[3561] = sv12[3474] + sv12[3106];
        sv12[3562] = sv12[3475] + sv12[3110];
        sv12[3563] = sv12[3476] + sv12[3114];
        sv12[3564] = sv12[3477] + sv12[3118];
        sv12[3565] = sv12[3478] + sv12[3122];
        sv12[3566] = sv12[3479] + sv12[3126];
        sv12[3567] = sv12[3480] + sv12[3130];
        sv12[3568] = sv12[3481] + sv12[3134];
        sv12[3569] = sv12[3482] + sv12[3138];
        sv12[3570] = sv12[3485] + sv12[3099];
        sv12[3571] = sv12[3100] + sv12[3488];
        sv12[3572] = sv12[3101] + sv12[3489];
        sv12[3573] = sv12[3495] + sv12[3103];
        sv12[3574] = sv12[3104] + sv12[3498];
        sv12[3575] = sv12[3105] + sv12[3499];
        sv12[3576] = sv12[3474] + sv12[3095];
        sv12[3577] = sv12[3096] + sv12[3477];
        sv12[3578] = sv12[3097] + sv12[3478];
        sv12[3579] = sv12[3504] + sv12[3107];
        sv12[3580] = sv12[3505] + sv12[3111];
        sv12[3581] = sv12[3506] + sv12[3115];
        sv12[3582] = sv12[3507] + sv12[3119];
        sv12[3583] = sv12[3508] + sv12[3123];
        sv12[3584] = sv12[3509] + sv12[3127];
        sv12[3585] = sv12[3510] + sv12[3131];
        sv12[3586] = sv12[3511] + sv12[3135];
        sv12[3587] = sv12[3512] + sv12[3139];
        sv12[3588] = sv12[3108] + sv12[3507];
        sv12[3589] = sv12[3109] + sv12[3508];
        sv12[3590] = sv12[3112] + sv12[3515];
        sv12[3591] = sv12[3113] + sv12[3516];
        sv12[3592] = sv12[3116] + sv12[3522];
        sv12[3593] = sv12[3117] + sv12[3523];
        sv12[3594] = sv12[3120] + sv12[3528];
        sv12[3595] = sv12[3124] + sv12[3529];
        sv12[3596] = sv12[3128] + sv12[3530];
        sv12[3597] = sv12[3132] + sv12[3531];
        sv12[3598] = sv12[3136] + sv12[3532];
        sv12[3599] = sv12[3140] + sv12[3533];
        sv12[3600] = sv12[3121] + sv12[3534];
        sv12[3601] = sv12[3125] + sv12[3535];
        sv12[3602] = sv12[3129] + sv12[3536];
        sv12[3603] = sv12[3133] + sv12[3537];
        sv12[3604] = sv12[3137] + sv12[3538];
        sv12[3605] = sv12[3141] + sv12[3539];
        sv12[3606] = sv12[3560] + sv12[3142];
        sv12[3607] = sv12[3561] + sv12[3143];
        sv12[3608] = sv12[3144] + sv12[3564];
        sv12[3609] = sv12[3145] + sv12[3565];
        sv12[3610] = sv12[3576] + sv12[3146];
        sv12[3611] = sv12[3577] + sv12[3147];
        sv12[3612] = sv12[3578] + sv12[3148];
        sv12[3613] = sv12[3579] + sv12[3149];
        sv12[3614] = sv12[3150] + sv12[3582];
        sv12[3615] = sv12[3151] + sv12[3583];
        sv12[3616] = sv12[3588] + sv12[3152];
        sv12[3617] = sv12[3589] + sv12[3153];
        sv12[3618] = sv12[3154] + sv12[3594];
        sv12[3619] = sv12[3155] + sv12[3595];
        sv12[3620] = sv12[3156] + sv12[3600];
        sv12[3621] = sv12[3157] + sv12[3601];
        sv12[3622] = sv12[3128] + sv12[3540];
        sv12[3623] = sv12[3132] + sv12[3541];
        sv12[3624] = sv12[3136] + sv12[3542];
        sv12[3625] = sv12[3140] + sv12[3543];
        sv12[3626] = sv12[3129] + sv12[3544];
        sv12[3627] = sv12[3133] + sv12[3545];
        sv12[3628] = sv12[3137] + sv12[3546];
        sv12[3629] = sv12[3141] + sv12[3547];
        sv12[3630] = sv12[3558] + sv12[1365];
        sv12[3631] = sv12[3559] + sv12[1366];
        sv12[3632] = sv12[2436] + sv12[3606];
        sv12[3633] = sv12[2437] + sv12[3607];
        sv12[3634] = sv12[3562] + sv12[1369];
        sv12[3635] = sv12[3563] + sv12[1370];
        sv12[3636] = sv12[2438] + sv12[3608];
        sv12[3637] = sv12[2439] + sv12[3609];
        sv12[3638] = sv12[2440] + sv12[3566];
        sv12[3639] = sv12[2441] + sv12[3567];
        sv12[3640] = sv12[2442] + sv12[3568];
        sv12[3641] = sv12[2443] + sv12[3569];
        sv12[3642] = sv12[3483] + sv12[1290];
        sv12[3643] = sv12[3484] + sv12[1291];
        sv12[3644] = sv12[3570] + sv12[1377];
        sv12[3645] = sv12[3486] + sv12[1293];
        sv12[3646] = sv12[3487] + sv12[1294];
        sv12[3647] = sv12[3571] + sv12[1378];
        sv12[3648] = sv12[3572] + sv12[1379];
        sv12[3649] = sv12[3490] + sv12[1297];
        sv12[3650] = sv12[3491] + sv12[1298];
        sv12[3651] = sv12[3492] + sv12[1299];
        sv12[3652] = sv12[3493] + sv12[1300];
        sv12[3653] = sv12[3494] + sv12[1301];
        sv12[3654] = sv12[3573] + sv12[1380];
        sv12[3655] = sv12[3496] + sv12[1303];
        sv12[3656] = sv12[3497] + sv12[1304];
        sv12[3657] = sv12[3574] + sv12[1381];
        sv12[3658] = sv12[3575] + sv12[1382];
        sv12[3659] = sv12[3500] + sv12[1307];
        sv12[3660] = sv12[3501] + sv12[1308];
        sv12[3661] = sv12[3502] + sv12[1309];
        sv12[3662] = sv12[3503] + sv12[1310];
        sv12[3663] = sv12[2444] + sv12[3610];
        sv12[3664] = sv12[2445] + sv12[3611];
        sv12[3665] = sv12[2446] + sv12[3612];
        sv12[3666] = sv12[2447] + sv12[3613];
        sv12[3667] = sv12[3580] + sv12[1387];
        sv12[3668] = sv12[3581] + sv12[1388];
        sv12[3669] = sv12[2448] + sv12[3614];
        sv12[3670] = sv12[2449] + sv12[3615];
        sv12[3671] = sv12[2450] + sv12[3584];
        sv12[3672] = sv12[2451] + sv12[3585];
        sv12[3673] = sv12[2452] + sv12[3586];
        sv12[3674] = sv12[2453] + sv12[3587];
        sv12[3675] = sv12[2454] + sv12[3616];
        sv12[3676] = sv12[2455] + sv12[3617];
        sv12[3677] = sv12[3513] + sv12[1320];
        sv12[3678] = sv12[3514] + sv12[1321];
        sv12[3679] = sv12[3590] + sv12[1397];
        sv12[3680] = sv12[3591] + sv12[1398];
        sv12[3681] = sv12[3517] + sv12[1324];
        sv12[3682] = sv12[3518] + sv12[1325];
        sv12[3683] = sv12[3519] + sv12[1326];
        sv12[3684] = sv12[3520] + sv12[1327];
        sv12[3685] = sv12[3521] + sv12[1328];
        sv12[3686] = sv12[3592] + sv12[1399];
        sv12[3687] = sv12[3593] + sv12[1400];
        sv12[3688] = sv12[3524] + sv12[1331];
        sv12[3689] = sv12[3525] + sv12[1332];
        sv12[3690] = sv12[3526] + sv12[1333];
        sv12[3691] = sv12[3527] + sv12[1334];
        sv12[3692] = sv12[2456] + sv12[3618];
        sv12[3693] = sv12[2457] + sv12[3619];
        sv12[3694] = sv12[2458] + sv12[3596];
        sv12[3695] = sv12[2459] + sv12[3597];
        sv12[3696] = sv12[2460] + sv12[3598];
        sv12[3697] = sv12[2461] + sv12[3599];
        sv12[3698] = sv12[2462] + sv12[3620];
        sv12[3699] = sv12[2463] + sv12[3621];
        sv12[3700] = sv12[2464] + sv12[3602];
        sv12[3701] = sv12[2465] + sv12[3603];
        sv12[3702] = sv12[2466] + sv12[3604];
        sv12[3703] = sv12[2467] + sv12[3605];
        sv12[3704] = sv12[2468] + sv12[3622];
        sv12[3705] = sv12[2469] + sv12[3623];
        sv12[3706] = sv12[2470] + sv12[3624];
        sv12[3707] = sv12[2471] + sv12[3625];
        sv12[3708] = sv12[2472] + sv12[3626];
        sv12[3709] = sv12[2473] + sv12[3627];
        sv12[3710] = sv12[2474] + sv12[3628];
        sv12[3711] = sv12[2475] + sv12[3629];
        sv12[3712] = sv12[2476] + sv12[3548];
        sv12[3713] = sv12[2477] + sv12[3549];
        sv12[3714] = sv12[2478] + sv12[3550];
        sv12[3715] = sv12[2479] + sv12[3551];
        sv12[3716] = sv12[2480] + sv12[3552];
        sv12[3717] = sv12[2481] + sv12[3553];
        sv12[3718] = sv12[2482] + sv12[3554];
        sv12[3719] = sv12[2483] + sv12[3555];
        sv12[3720] = sv12[2484] + sv12[3556];
        sv12[3721] = sv12[2485] + sv12[3557];
        sv12[3722] = w2_c1 * sp[3];
        sv12[3723] = w2_c1 * sp[4];
        sv12[3724] = w2_c0 * sp[6];
        sv12[3725] = w2_c0 * sp[5];
        sv12[3726] = sv12[3722] + sv12[3724];
        sv12[3727] = sv12[3725] + sv12[3723];
        sv12[3728] = 2.0 * sv12[31] * (sp[56] / 2);
        sv12[3729] = 2.0 * sv12[31] * (sp[57] / 2);
        sv12[3730] = 2.0 * (0.0001 + sv12[28]) * (sp[243] / 2);
        sv12[3731] = 2.0 * (0.0001 + sv12[28]) * (sp[244] / 2);
        sv12[3732] = 2.0 * (0.0001 + sv12[28]) * (sp[245] / 2);
        sv12[3733] = 2.0 * sv12[46] * (sp[3] / 2);
        sv12[3734] = 2.0 * sv12[46] * (sp[4] / 2);
        sv12[3735] = 2.0 * sv12[46] * (sp[6] / 2);
        sv12[3736] = 2.0 * sv12[46] * (sp[5] / 2);
        sv12[3737] = 2.0 * (0.0001 + sv12[28]) * (sp[253] / 2);
        sv12[3738] = 2.0 * (0.0001 + sv12[28]) * (sp[254] / 2);
        sv12[3739] = 2.0 * (0.0001 + sv12[28]) * (sp[252] / 2);
        sv12[3740] = 2.0 * (0.0001 + sv12[28]) * (sp[250] / 2);
        sv12[3741] = 2.0 * (0.0001 + sv12[28]) * (sp[247] / 2);
        sv12[3742] = 2.0 * (0.0001 + sv12[28]) * (sp[249] / 2);
        sv12[3743] = sv12[3728] + sv12[3735];
        sv12[3744] = sv12[3729] + sv12[3736];
        sv12[3745] = sv12[3730] + sv12[3737];
        sv12[3746] = sv12[3731] + sv12[3738];
        sv12[3747] = sv12[3732] + sv12[3739];
        sv12[3748] = sv12[3726] + -1 * sv12[3743];
        sv12[3749] = sv12[3727] + -1 * sv12[3744];
        sv12[3750] = sv12[1482] * (-1 * sv12[3733]);
        sv12[3751] = sv12[1482] * (-1 * sv12[3734]);
        sv12[3752] = sv12[1482] * sv12[3748];
        sv12[3753] = sv12[1482] * sv12[3749];
        sv12[3754] = sv12[1482] * (-1 * sv12[3745]);
        sv12[3755] = sv12[1482] * (-1 * sv12[3746]);
        sv12[3756] = sv12[1482] * (-1 * sv12[3747]);
        sv12[3757] = sv12[1482] * (-1 * sv12[3740]);
        sv12[3758] = sv12[1482] * (-1 * sv12[3741]);
        sv12[3759] = sv12[1482] * (-1 * sv12[3742]);
        sv12[3760] = sv12[1482] * sp[3];
        sv12[3761] = sv12[1482] * sp[4];
        sv12[3762] = 2.0 * sv12[31] * (sp[3] / 2);
        sv12[3763] = 2.0 * sv12[31] * (sp[4] / 2);
        sv12[3764] = 2.0 * sv12[31] * (sp[6] / 2);
        sv12[3765] = 2.0 * sv12[31] * (sp[5] / 2);
        sv12[3766] = 2.0 * (0.0001 + sv12[28]) * (sp[242] / 2);
        sv12[3767] = 2.0 * (0.0001 + sv12[28]) * (sp[239] / 2);
        sv12[3768] = 2.0 * (0.0001 + sv12[28]) * (sp[241] / 2);
        sv12[3769] = 2.0 * sv12[46] * (sp[58] / 2);
        sv12[3770] = 2.0 * sv12[46] * (sp[59] / 2);
        sv12[3771] = 2.0 * (0.0001 + sv12[28]) * (sp[255] / 2);
        sv12[3772] = 2.0 * (0.0001 + sv12[28]) * (sp[256] / 2);
        sv12[3773] = 2.0 * (0.0001 + sv12[28]) * (sp[257] / 2);
        sv12[3774] = sv12[3769] + sv12[3762];
        sv12[3775] = sv12[3770] + sv12[3763];
        sv12[3776] = sv12[3771] + sv12[3766];
        sv12[3777] = sv12[3772] + sv12[3767];
        sv12[3778] = sv12[3773] + sv12[3768];
        sv12[3779] = sv12[3726] + -1 * sv12[3774];
        sv12[3780] = sv12[3727] + -1 * sv12[3775];
        sv12[3781] = sv12[1515] * sv12[3779];
        sv12[3782] = sv12[1515] * sv12[3780];
        sv12[3783] = sv12[1515] * (-1 * sv12[3764]);
        sv12[3784] = sv12[1515] * (-1 * sv12[3765]);
        sv12[3785] = sv12[1515] * (-1 * sv12[3741]);
        sv12[3786] = sv12[1515] * (-1 * sv12[3740]);
        sv12[3787] = sv12[1515] * (-1 * sv12[3742]);
        sv12[3788] = sv12[1515] * (-1 * sv12[3776]);
        sv12[3789] = sv12[1515] * (-1 * sv12[3777]);
        sv12[3790] = sv12[1515] * (-1 * sv12[3778]);
        sv12[3791] = sv12[1515] * sp[6];
        sv12[3792] = sv12[1515] * sp[5];
        sv12[3793] = sv12[3781] + sv12[3750];
        sv12[3794] = sv12[3782] + sv12[3751];
        sv12[3795] = sv12[3752] + sv12[3783];
        sv12[3796] = sv12[3753] + sv12[3784];
        sv12[3797] = sv12[3754] + sv12[3785];
        sv12[3798] = sv12[3755] + sv12[3786];
        sv12[3799] = sv12[3756] + sv12[3787];
        sv12[3800] = sv12[3788] + sv12[3757];
        sv12[3801] = sv12[3789] + sv12[3758];
        sv12[3802] = sv12[3790] + sv12[3759];
        sv12[3803] = sv12[3760] + sv12[3791];
        sv12[3804] = sv12[3792] + sv12[3761];
        sv12[3805] = sv12[3793] * sv12[783];
        sv12[3806] = sv12[3793] * sv12[784];
        sv12[3807] = sv12[3793] * sv12[785];
        sv12[3808] = sv12[3793] * sv12[786];
        sv12[3809] = sv12[3794] * sv12[783];
        sv12[3810] = sv12[3794] * sv12[784];
        sv12[3811] = sv12[3794] * sv12[785];
        sv12[3812] = sv12[3794] * sv12[786];
        sv12[3813] = sv12[3795] * sv12[783];
        sv12[3814] = sv12[3795] * sv12[784];
        sv12[3815] = sv12[3795] * sv12[785];
        sv12[3816] = sv12[3795] * sv12[786];
        sv12[3817] = sv12[3796] * sv12[783];
        sv12[3818] = sv12[3796] * sv12[784];
        sv12[3819] = sv12[3796] * sv12[785];
        sv12[3820] = sv12[3796] * sv12[786];
        sv12[3821] = sv12[3797] * sv12[783];
        sv12[3822] = sv12[3797] * sv12[784];
        sv12[3823] = sv12[3797] * sv12[785];
        sv12[3824] = sv12[3797] * sv12[786];
        sv12[3825] = sv12[3798] * sv12[783];
        sv12[3826] = sv12[3798] * sv12[784];
        sv12[3827] = sv12[3798] * sv12[785];
        sv12[3828] = sv12[3798] * sv12[786];
        sv12[3829] = sv12[3799] * sv12[783];
        sv12[3830] = sv12[3799] * sv12[784];
        sv12[3831] = sv12[3799] * sv12[785];
        sv12[3832] = sv12[3799] * sv12[786];
        sv12[3833] = sv12[3800] * sv12[783];
        sv12[3834] = sv12[3800] * sv12[784];
        sv12[3835] = sv12[3800] * sv12[785];
        sv12[3836] = sv12[3800] * sv12[786];
        sv12[3837] = sv12[3801] * sv12[783];
        sv12[3838] = sv12[3801] * sv12[784];
        sv12[3839] = sv12[3801] * sv12[785];
        sv12[3840] = sv12[3801] * sv12[786];
        sv12[3841] = sv12[3802] * sv12[783];
        sv12[3842] = sv12[3802] * sv12[784];
        sv12[3843] = sv12[3802] * sv12[785];
        sv12[3844] = sv12[3802] * sv12[786];
        sv12[3845] = sv12[3803] * sv12[783];
        sv12[3846] = sv12[3803] * sv12[784];
        sv12[3847] = sv12[3803] * sv12[785];
        sv12[3848] = sv12[3803] * sv12[786];
        sv12[3849] = sv12[3804] * sv12[783];
        sv12[3850] = sv12[3804] * sv12[784];
        sv12[3851] = sv12[3804] * sv12[785];
        sv12[3852] = sv12[3804] * sv12[786];
        sv12[3853] = 2.0 * sv12[645] * (sp[3] / 2);
        sv12[3854] = 2.0 * sv12[645] * (sp[4] / 2);
        sv12[3855] = 2.0 * sv12[645] * (sp[6] / 2);
        sv12[3856] = 2.0 * sv12[645] * (sp[5] / 2);
        sv12[3857] = 2.0 * sv12[646] * (sp[3] / 2);
        sv12[3858] = 2.0 * sv12[646] * (sp[4] / 2);
        sv12[3859] = 2.0 * sv12[646] * (sp[6] / 2);
        sv12[3860] = 2.0 * sv12[646] * (sp[5] / 2);
        sv12[3861] = 2.0 * sv12[647] * (sp[3] / 2);
        sv12[3862] = 2.0 * sv12[647] * (sp[4] / 2);
        sv12[3863] = 2.0 * sv12[647] * (sp[6] / 2);
        sv12[3864] = 2.0 * sv12[647] * (sp[5] / 2);
        sv12[3865] = 2.0 * sv12[648] * (sp[3] / 2);
        sv12[3866] = 2.0 * sv12[648] * (sp[4] / 2);
        sv12[3867] = 2.0 * sv12[648] * (sp[6] / 2);
        sv12[3868] = 2.0 * sv12[648] * (sp[5] / 2);
        sv12[3869] = 2.0 * sv12[649] * (sp[3] / 2);
        sv12[3870] = 2.0 * sv12[649] * (sp[4] / 2);
        sv12[3871] = 2.0 * sv12[649] * (sp[6] / 2);
        sv12[3872] = 2.0 * sv12[649] * (sp[5] / 2);
        sv12[3873] = 2.0 * sv12[650] * (sp[3] / 2);
        sv12[3874] = 2.0 * sv12[650] * (sp[4] / 2);
        sv12[3875] = 2.0 * sv12[650] * (sp[6] / 2);
        sv12[3876] = 2.0 * sv12[650] * (sp[5] / 2);
        sv12[3877] = 2.0 * sv12[96] * (sp[247] / 2);
        sv12[3878] = 2.0 * sv12[96] * (sp[250] / 2);
        sv12[3879] = 2.0 * sv12[96] * (sp[249] / 2);
        sv12[3880] = 2.0 * sv12[96] * (sp[242] / 2);
        sv12[3881] = 2.0 * sv12[96] * (sp[239] / 2);
        sv12[3882] = 2.0 * sv12[96] * (sp[241] / 2);
        sv12[3883] = 2.0 * sv12[97] * (sp[247] / 2);
        sv12[3884] = 2.0 * sv12[97] * (sp[250] / 2);
        sv12[3885] = 2.0 * sv12[97] * (sp[249] / 2);
        sv12[3886] = 2.0 * sv12[97] * (sp[242] / 2);
        sv12[3887] = 2.0 * sv12[97] * (sp[239] / 2);
        sv12[3888] = 2.0 * sv12[97] * (sp[241] / 2);
        sv12[3889] = 2.0 * sv12[687] * (sp[58] / 2);
        sv12[3890] = 2.0 * sv12[687] * (sp[59] / 2);
        sv12[3891] = 2.0 * sv12[688] * (sp[58] / 2);
        sv12[3892] = 2.0 * sv12[688] * (sp[59] / 2);
        sv12[3893] = 2.0 * sv12[689] * (sp[58] / 2);
        sv12[3894] = 2.0 * sv12[689] * (sp[59] / 2);
        sv12[3895] = 2.0 * sv12[690] * (sp[58] / 2);
        sv12[3896] = 2.0 * sv12[690] * (sp[59] / 2);
        sv12[3897] = 2.0 * sv12[691] * (sp[58] / 2);
        sv12[3898] = 2.0 * sv12[691] * (sp[59] / 2);
        sv12[3899] = 2.0 * sv12[692] * (sp[58] / 2);
        sv12[3900] = 2.0 * sv12[692] * (sp[59] / 2);
        sv12[3901] = 2.0 * sv12[96] * (sp[255] / 2);
        sv12[3902] = 2.0 * sv12[96] * (sp[256] / 2);
        sv12[3903] = 2.0 * sv12[96] * (sp[257] / 2);
        sv12[3904] = 2.0 * sv12[97] * (sp[255] / 2);
        sv12[3905] = 2.0 * sv12[97] * (sp[256] / 2);
        sv12[3906] = 2.0 * sv12[97] * (sp[257] / 2);
        sv12[3907] = sv12[3889] + sv12[3853];
        sv12[3908] = sv12[3891] + sv12[3857];
        sv12[3909] = sv12[3893] + sv12[3861];
        sv12[3910] = sv12[3895] + sv12[3865];
        sv12[3911] = sv12[3897] + sv12[3869];
        sv12[3912] = sv12[3899] + sv12[3873];
        sv12[3913] = sv12[3890] + sv12[3854];
        sv12[3914] = sv12[3892] + sv12[3858];
        sv12[3915] = sv12[3894] + sv12[3862];
        sv12[3916] = sv12[3896] + sv12[3866];
        sv12[3917] = sv12[3898] + sv12[3870];
        sv12[3918] = sv12[3900] + sv12[3874];
        sv12[3919] = sv12[3901] + sv12[3880];
        sv12[3920] = sv12[3902] + sv12[3881];
        sv12[3921] = sv12[3903] + sv12[3882];
        sv12[3922] = sv12[3904] + sv12[3886];
        sv12[3923] = sv12[3905] + sv12[3887];
        sv12[3924] = sv12[3906] + sv12[3888];
        sv12[3925] = sv12[1515] * sp[3];
        sv12[3926] = sv12[1515] * sp[4];
        sv12[3927] = sv12[1515] * (-1 * sv12[3907]);
        sv12[3928] = sv12[1515] * (-1 * sv12[3908]);
        sv12[3929] = sv12[1515] * (-1 * sv12[3909]);
        sv12[3930] = sv12[1515] * (-1 * sv12[3910]);
        sv12[3931] = sv12[1515] * (-1 * sv12[3911]);
        sv12[3932] = sv12[1515] * (-1 * sv12[3912]);
        sv12[3933] = sv12[1515] * (-1 * sv12[3913]);
        sv12[3934] = sv12[1515] * (-1 * sv12[3914]);
        sv12[3935] = sv12[1515] * (-1 * sv12[3915]);
        sv12[3936] = sv12[1515] * (-1 * sv12[3916]);
        sv12[3937] = sv12[1515] * (-1 * sv12[3917]);
        sv12[3938] = sv12[1515] * (-1 * sv12[3918]);
        sv12[3939] = sv12[1515] * (-1 * sv12[3855]);
        sv12[3940] = sv12[1515] * (-1 * sv12[3859]);
        sv12[3941] = sv12[1515] * (-1 * sv12[3863]);
        sv12[3942] = sv12[1515] * (-1 * sv12[3867]);
        sv12[3943] = sv12[1515] * (-1 * sv12[3871]);
        sv12[3944] = sv12[1515] * (-1 * sv12[3875]);
        sv12[3945] = sv12[1515] * (-1 * sv12[3856]);
        sv12[3946] = sv12[1515] * (-1 * sv12[3860]);
        sv12[3947] = sv12[1515] * (-1 * sv12[3864]);
        sv12[3948] = sv12[1515] * (-1 * sv12[3868]);
        sv12[3949] = sv12[1515] * (-1 * sv12[3872]);
        sv12[3950] = sv12[1515] * (-1 * sv12[3876]);
        sv12[3951] = sv12[1515] * (-1 * sv12[3877]);
        sv12[3952] = sv12[1515] * (-1 * sv12[3878]);
        sv12[3953] = sv12[1515] * (-1 * sv12[3879]);
        sv12[3954] = sv12[1515] * (-1 * sv12[3919]);
        sv12[3955] = sv12[1515] * (-1 * sv12[3920]);
        sv12[3956] = sv12[1515] * (-1 * sv12[3921]);
        sv12[3957] = sv12[1515] * (-1 * sv12[3883]);
        sv12[3958] = sv12[1515] * (-1 * sv12[3884]);
        sv12[3959] = sv12[1515] * (-1 * sv12[3885]);
        sv12[3960] = sv12[1515] * (-1 * sv12[3922]);
        sv12[3961] = sv12[1515] * (-1 * sv12[3923]);
        sv12[3962] = sv12[1515] * (-1 * sv12[3924]);
        sv12[3963] = sv12[3779] * sv12[1475];
        sv12[3964] = sv12[3779] * sv12[1503];
        sv12[3965] = sv12[3779] * (-1 * sv12[1588]);
        sv12[3966] = sv12[3779] * (-1 * sv12[1589]);
        sv12[3967] = sv12[3779] * (-1 * sv12[1590]);
        sv12[3968] = sv12[3779] * (-1 * sv12[1591]);
        sv12[3969] = sv12[3779] * (-1 * sv12[1592]);
        sv12[3970] = sv12[3779] * (-1 * sv12[1593]);
        sv12[3971] = sv12[3780] * sv12[1475];
        sv12[3972] = sv12[3780] * sv12[1503];
        sv12[3973] = sv12[3780] * (-1 * sv12[1588]);
        sv12[3974] = sv12[3780] * (-1 * sv12[1589]);
        sv12[3975] = sv12[3780] * (-1 * sv12[1590]);
        sv12[3976] = sv12[3780] * (-1 * sv12[1591]);
        sv12[3977] = sv12[3780] * (-1 * sv12[1592]);
        sv12[3978] = sv12[3780] * (-1 * sv12[1593]);
        sv12[3979] = sv12[1475] * (-1 * sv12[3764]);
        sv12[3980] = sv12[1503] * (-1 * sv12[3764]);
        sv12[3981] = -1 * sv12[1588] * (-1 * sv12[3764]);
        sv12[3982] = -1 * sv12[1589] * (-1 * sv12[3764]);
        sv12[3983] = -1 * sv12[1590] * (-1 * sv12[3764]);
        sv12[3984] = -1 * sv12[1591] * (-1 * sv12[3764]);
        sv12[3985] = -1 * sv12[1592] * (-1 * sv12[3764]);
        sv12[3986] = -1 * sv12[1593] * (-1 * sv12[3764]);
        sv12[3987] = sv12[1475] * (-1 * sv12[3765]);
        sv12[3988] = sv12[1503] * (-1 * sv12[3765]);
        sv12[3989] = -1 * sv12[1588] * (-1 * sv12[3765]);
        sv12[3990] = -1 * sv12[1589] * (-1 * sv12[3765]);
        sv12[3991] = -1 * sv12[1590] * (-1 * sv12[3765]);
        sv12[3992] = -1 * sv12[1591] * (-1 * sv12[3765]);
        sv12[3993] = -1 * sv12[1592] * (-1 * sv12[3765]);
        sv12[3994] = -1 * sv12[1593] * (-1 * sv12[3765]);
        sv12[3995] = sv12[1475] * (-1 * sv12[3741]);
        sv12[3996] = sv12[1503] * (-1 * sv12[3741]);
        sv12[3997] = -1 * sv12[1588] * (-1 * sv12[3741]);
        sv12[3998] = -1 * sv12[1589] * (-1 * sv12[3741]);
        sv12[3999] = -1 * sv12[1590] * (-1 * sv12[3741]);
        sv12[4000] = -1 * sv12[1591] * (-1 * sv12[3741]);
        sv12[4001] = -1 * sv12[1592] * (-1 * sv12[3741]);
        sv12[4002] = -1 * sv12[1593] * (-1 * sv12[3741]);
        sv12[4003] = sv12[1475] * (-1 * sv12[3740]);
        sv12[4004] = sv12[1503] * (-1 * sv12[3740]);
        sv12[4005] = -1 * sv12[1588] * (-1 * sv12[3740]);
        sv12[4006] = -1 * sv12[1589] * (-1 * sv12[3740]);
        sv12[4007] = -1 * sv12[1590] * (-1 * sv12[3740]);
        sv12[4008] = -1 * sv12[1591] * (-1 * sv12[3740]);
        sv12[4009] = -1 * sv12[1592] * (-1 * sv12[3740]);
        sv12[4010] = -1 * sv12[1593] * (-1 * sv12[3740]);
        sv12[4011] = sv12[1475] * (-1 * sv12[3742]);
        sv12[4012] = sv12[1503] * (-1 * sv12[3742]);
        sv12[4013] = -1 * sv12[1588] * (-1 * sv12[3742]);
        sv12[4014] = -1 * sv12[1589] * (-1 * sv12[3742]);
        sv12[4015] = -1 * sv12[1590] * (-1 * sv12[3742]);
        sv12[4016] = -1 * sv12[1591] * (-1 * sv12[3742]);
        sv12[4017] = -1 * sv12[1592] * (-1 * sv12[3742]);
        sv12[4018] = -1 * sv12[1593] * (-1 * sv12[3742]);
        sv12[4019] = sv12[1475] * (-1 * sv12[3776]);
        sv12[4020] = sv12[1503] * (-1 * sv12[3776]);
        sv12[4021] = -1 * sv12[1588] * (-1 * sv12[3776]);
        sv12[4022] = -1 * sv12[1589] * (-1 * sv12[3776]);
        sv12[4023] = -1 * sv12[1590] * (-1 * sv12[3776]);
        sv12[4024] = -1 * sv12[1591] * (-1 * sv12[3776]);
        sv12[4025] = -1 * sv12[1592] * (-1 * sv12[3776]);
        sv12[4026] = -1 * sv12[1593] * (-1 * sv12[3776]);
        sv12[4027] = sv12[1475] * (-1 * sv12[3777]);
        sv12[4028] = sv12[1503] * (-1 * sv12[3777]);
        sv12[4029] = -1 * sv12[1588] * (-1 * sv12[3777]);
        sv12[4030] = -1 * sv12[1589] * (-1 * sv12[3777]);
        sv12[4031] = -1 * sv12[1590] * (-1 * sv12[3777]);
        sv12[4032] = -1 * sv12[1591] * (-1 * sv12[3777]);
        sv12[4033] = -1 * sv12[1592] * (-1 * sv12[3777]);
        sv12[4034] = -1 * sv12[1593] * (-1 * sv12[3777]);
        sv12[4035] = sv12[1475] * (-1 * sv12[3778]);
        sv12[4036] = sv12[1503] * (-1 * sv12[3778]);
        sv12[4037] = -1 * sv12[1588] * (-1 * sv12[3778]);
        sv12[4038] = -1 * sv12[1589] * (-1 * sv12[3778]);
        sv12[4039] = -1 * sv12[1590] * (-1 * sv12[3778]);
        sv12[4040] = -1 * sv12[1591] * (-1 * sv12[3778]);
        sv12[4041] = -1 * sv12[1592] * (-1 * sv12[3778]);
        sv12[4042] = -1 * sv12[1593] * (-1 * sv12[3778]);
        sv12[4043] = sv12[1475] * sp[6];
        sv12[4044] = sv12[1503] * sp[6];
        sv12[4045] = -1 * sv12[1588] * sp[6];
        sv12[4046] = -1 * sv12[1589] * sp[6];
        sv12[4047] = -1 * sv12[1590] * sp[6];
        sv12[4048] = -1 * sv12[1591] * sp[6];
        sv12[4049] = -1 * sv12[1592] * sp[6];
        sv12[4050] = -1 * sv12[1593] * sp[6];
        sv12[4051] = sv12[1475] * sp[5];
        sv12[4052] = sv12[1503] * sp[5];
        sv12[4053] = -1 * sv12[1588] * sp[5];
        sv12[4054] = -1 * sv12[1589] * sp[5];
        sv12[4055] = -1 * sv12[1590] * sp[5];
        sv12[4056] = -1 * sv12[1591] * sp[5];
        sv12[4057] = -1 * sv12[1592] * sp[5];
        sv12[4058] = -1 * sv12[1593] * sp[5];
        sv12[4059] = sv12[3963] + sv12[3925];
        sv12[4060] = sv12[3971] + sv12[3926];
        sv12[4061] = sv12[3964] + sv12[3791];
        sv12[4062] = sv12[3965] + sv12[3927];
        sv12[4063] = sv12[3966] + sv12[3928];
        sv12[4064] = sv12[3967] + sv12[3929];
        sv12[4065] = sv12[3968] + sv12[3930];
        sv12[4066] = sv12[3969] + sv12[3931];
        sv12[4067] = sv12[3970] + sv12[3932];
        sv12[4068] = sv12[3972] + sv12[3792];
        sv12[4069] = sv12[3973] + sv12[3933];
        sv12[4070] = sv12[3974] + sv12[3934];
        sv12[4071] = sv12[3975] + sv12[3935];
        sv12[4072] = sv12[3976] + sv12[3936];
        sv12[4073] = sv12[3977] + sv12[3937];
        sv12[4074] = sv12[3978] + sv12[3938];
        sv12[4075] = sv12[3939] + sv12[3981];
        sv12[4076] = sv12[3940] + sv12[3982];
        sv12[4077] = sv12[3983] + sv12[3941];
        sv12[4078] = sv12[3984] + sv12[3942];
        sv12[4079] = sv12[3985] + sv12[3943];
        sv12[4080] = sv12[3986] + sv12[3944];
        sv12[4081] = sv12[3945] + sv12[3989];
        sv12[4082] = sv12[3946] + sv12[3990];
        sv12[4083] = sv12[3991] + sv12[3947];
        sv12[4084] = sv12[3992] + sv12[3948];
        sv12[4085] = sv12[3993] + sv12[3949];
        sv12[4086] = sv12[3994] + sv12[3950];
        sv12[4087] = sv12[3997] + sv12[3951];
        sv12[4088] = sv12[4005] + sv12[3952];
        sv12[4089] = sv12[4013] + sv12[3953];
        sv12[4090] = sv12[4021] + sv12[3954];
        sv12[4091] = sv12[4029] + sv12[3955];
        sv12[4092] = sv12[4037] + sv12[3956];
        sv12[4093] = sv12[3998] + sv12[3957];
        sv12[4094] = sv12[4006] + sv12[3958];
        sv12[4095] = sv12[4014] + sv12[3959];
        sv12[4096] = sv12[4022] + sv12[3960];
        sv12[4097] = sv12[4030] + sv12[3961];
        sv12[4098] = sv12[4038] + sv12[3962];
        sv12[4099] = 2.0 * sv12[645] * (sp[56] / 2);
        sv12[4100] = 2.0 * sv12[645] * (sp[57] / 2);
        sv12[4101] = 2.0 * sv12[646] * (sp[56] / 2);
        sv12[4102] = 2.0 * sv12[646] * (sp[57] / 2);
        sv12[4103] = 2.0 * sv12[647] * (sp[56] / 2);
        sv12[4104] = 2.0 * sv12[647] * (sp[57] / 2);
        sv12[4105] = 2.0 * sv12[648] * (sp[56] / 2);
        sv12[4106] = 2.0 * sv12[648] * (sp[57] / 2);
        sv12[4107] = 2.0 * sv12[649] * (sp[56] / 2);
        sv12[4108] = 2.0 * sv12[649] * (sp[57] / 2);
        sv12[4109] = 2.0 * sv12[650] * (sp[56] / 2);
        sv12[4110] = 2.0 * sv12[650] * (sp[57] / 2);
        sv12[4111] = 2.0 * sv12[96] * (sp[243] / 2);
        sv12[4112] = 2.0 * sv12[96] * (sp[244] / 2);
        sv12[4113] = 2.0 * sv12[96] * (sp[245] / 2);
        sv12[4114] = 2.0 * sv12[97] * (sp[243] / 2);
        sv12[4115] = 2.0 * sv12[97] * (sp[244] / 2);
        sv12[4116] = 2.0 * sv12[97] * (sp[245] / 2);
        sv12[4117] = 2.0 * sv12[687] * (sp[3] / 2);
        sv12[4118] = 2.0 * sv12[687] * (sp[4] / 2);
        sv12[4119] = 2.0 * sv12[687] * (sp[6] / 2);
        sv12[4120] = 2.0 * sv12[687] * (sp[5] / 2);
        sv12[4121] = 2.0 * sv12[688] * (sp[3] / 2);
        sv12[4122] = 2.0 * sv12[688] * (sp[4] / 2);
        sv12[4123] = 2.0 * sv12[688] * (sp[6] / 2);
        sv12[4124] = 2.0 * sv12[688] * (sp[5] / 2);
        sv12[4125] = 2.0 * sv12[689] * (sp[3] / 2);
        sv12[4126] = 2.0 * sv12[689] * (sp[4] / 2);
        sv12[4127] = 2.0 * sv12[689] * (sp[6] / 2);
        sv12[4128] = 2.0 * sv12[689] * (sp[5] / 2);
        sv12[4129] = 2.0 * sv12[690] * (sp[3] / 2);
        sv12[4130] = 2.0 * sv12[690] * (sp[4] / 2);
        sv12[4131] = 2.0 * sv12[690] * (sp[6] / 2);
        sv12[4132] = 2.0 * sv12[690] * (sp[5] / 2);
        sv12[4133] = 2.0 * sv12[691] * (sp[3] / 2);
        sv12[4134] = 2.0 * sv12[691] * (sp[4] / 2);
        sv12[4135] = 2.0 * sv12[691] * (sp[6] / 2);
        sv12[4136] = 2.0 * sv12[691] * (sp[5] / 2);
        sv12[4137] = 2.0 * sv12[692] * (sp[3] / 2);
        sv12[4138] = 2.0 * sv12[692] * (sp[4] / 2);
        sv12[4139] = 2.0 * sv12[692] * (sp[6] / 2);
        sv12[4140] = 2.0 * sv12[692] * (sp[5] / 2);
        sv12[4141] = 2.0 * sv12[96] * (sp[253] / 2);
        sv12[4142] = 2.0 * sv12[96] * (sp[254] / 2);
        sv12[4143] = 2.0 * sv12[96] * (sp[252] / 2);
        sv12[4144] = 2.0 * sv12[97] * (sp[253] / 2);
        sv12[4145] = 2.0 * sv12[97] * (sp[254] / 2);
        sv12[4146] = 2.0 * sv12[97] * (sp[252] / 2);
        sv12[4147] = sv12[4099] + sv12[4119];
        sv12[4148] = sv12[4101] + sv12[4123];
        sv12[4149] = sv12[4103] + sv12[4127];
        sv12[4150] = sv12[4105] + sv12[4131];
        sv12[4151] = sv12[4107] + sv12[4135];
        sv12[4152] = sv12[4109] + sv12[4139];
        sv12[4153] = sv12[4100] + sv12[4120];
        sv12[4154] = sv12[4102] + sv12[4124];
        sv12[4155] = sv12[4104] + sv12[4128];
        sv12[4156] = sv12[4106] + sv12[4132];
        sv12[4157] = sv12[4108] + sv12[4136];
        sv12[4158] = sv12[4110] + sv12[4140];
        sv12[4159] = sv12[4111] + sv12[4141];
        sv12[4160] = sv12[4112] + sv12[4142];
        sv12[4161] = sv12[4113] + sv12[4143];
        sv12[4162] = sv12[4114] + sv12[4144];
        sv12[4163] = sv12[4115] + sv12[4145];
        sv12[4164] = sv12[4116] + sv12[4146];
        sv12[4165] = sv12[1482] * (-1 * sv12[4117]);
        sv12[4166] = sv12[1482] * (-1 * sv12[4121]);
        sv12[4167] = sv12[1482] * (-1 * sv12[4125]);
        sv12[4168] = sv12[1482] * (-1 * sv12[4129]);
        sv12[4169] = sv12[1482] * (-1 * sv12[4133]);
        sv12[4170] = sv12[1482] * (-1 * sv12[4137]);
        sv12[4171] = sv12[1482] * (-1 * sv12[4118]);
        sv12[4172] = sv12[1482] * (-1 * sv12[4122]);
        sv12[4173] = sv12[1482] * (-1 * sv12[4126]);
        sv12[4174] = sv12[1482] * (-1 * sv12[4130]);
        sv12[4175] = sv12[1482] * (-1 * sv12[4134]);
        sv12[4176] = sv12[1482] * (-1 * sv12[4138]);
        sv12[4177] = sv12[1482] * sp[6];
        sv12[4178] = sv12[1482] * sp[5];
        sv12[4179] = sv12[1482] * (-1 * sv12[4147]);
        sv12[4180] = sv12[1482] * (-1 * sv12[4148]);
        sv12[4181] = sv12[1482] * (-1 * sv12[4149]);
        sv12[4182] = sv12[1482] * (-1 * sv12[4150]);
        sv12[4183] = sv12[1482] * (-1 * sv12[4151]);
        sv12[4184] = sv12[1482] * (-1 * sv12[4152]);
        sv12[4185] = sv12[1482] * (-1 * sv12[4153]);
        sv12[4186] = sv12[1482] * (-1 * sv12[4154]);
        sv12[4187] = sv12[1482] * (-1 * sv12[4155]);
        sv12[4188] = sv12[1482] * (-1 * sv12[4156]);
        sv12[4189] = sv12[1482] * (-1 * sv12[4157]);
        sv12[4190] = sv12[1482] * (-1 * sv12[4158]);
        sv12[4191] = sv12[1482] * (-1 * sv12[4159]);
        sv12[4192] = sv12[1482] * (-1 * sv12[4160]);
        sv12[4193] = sv12[1482] * (-1 * sv12[4161]);
        sv12[4194] = sv12[1482] * (-1 * sv12[3878]);
        sv12[4195] = sv12[1482] * (-1 * sv12[3877]);
        sv12[4196] = sv12[1482] * (-1 * sv12[3879]);
        sv12[4197] = sv12[1482] * (-1 * sv12[4162]);
        sv12[4198] = sv12[1482] * (-1 * sv12[4163]);
        sv12[4199] = sv12[1482] * (-1 * sv12[4164]);
        sv12[4200] = sv12[1482] * (-1 * sv12[3884]);
        sv12[4201] = sv12[1482] * (-1 * sv12[3883]);
        sv12[4202] = sv12[1482] * (-1 * sv12[3885]);
        sv12[4203] = sv12[1462] * (-1 * sv12[3733]);
        sv12[4204] = sv12[1466] * (-1 * sv12[3733]);
        sv12[4205] = -1 * sv12[1664] * (-1 * sv12[3733]);
        sv12[4206] = -1 * sv12[1665] * (-1 * sv12[3733]);
        sv12[4207] = -1 * sv12[1666] * (-1 * sv12[3733]);
        sv12[4208] = -1 * sv12[1667] * (-1 * sv12[3733]);
        sv12[4209] = -1 * sv12[1668] * (-1 * sv12[3733]);
        sv12[4210] = -1 * sv12[1669] * (-1 * sv12[3733]);
        sv12[4211] = sv12[1462] * (-1 * sv12[3734]);
        sv12[4212] = sv12[1466] * (-1 * sv12[3734]);
        sv12[4213] = -1 * sv12[1664] * (-1 * sv12[3734]);
        sv12[4214] = -1 * sv12[1665] * (-1 * sv12[3734]);
        sv12[4215] = -1 * sv12[1666] * (-1 * sv12[3734]);
        sv12[4216] = -1 * sv12[1667] * (-1 * sv12[3734]);
        sv12[4217] = -1 * sv12[1668] * (-1 * sv12[3734]);
        sv12[4218] = -1 * sv12[1669] * (-1 * sv12[3734]);
        sv12[4219] = sv12[3748] * sv12[1462];
        sv12[4220] = sv12[3748] * sv12[1466];
        sv12[4221] = sv12[3748] * (-1 * sv12[1664]);
        sv12[4222] = sv12[3748] * (-1 * sv12[1665]);
        sv12[4223] = sv12[3748] * (-1 * sv12[1666]);
        sv12[4224] = sv12[3748] * (-1 * sv12[1667]);
        sv12[4225] = sv12[3748] * (-1 * sv12[1668]);
        sv12[4226] = sv12[3748] * (-1 * sv12[1669]);
        sv12[4227] = sv12[3749] * sv12[1462];
        sv12[4228] = sv12[3749] * sv12[1466];
        sv12[4229] = sv12[3749] * (-1 * sv12[1664]);
        sv12[4230] = sv12[3749] * (-1 * sv12[1665]);
        sv12[4231] = sv12[3749] * (-1 * sv12[1666]);
        sv12[4232] = sv12[3749] * (-1 * sv12[1667]);
        sv12[4233] = sv12[3749] * (-1 * sv12[1668]);
        sv12[4234] = sv12[3749] * (-1 * sv12[1669]);
        sv12[4235] = sv12[1462] * (-1 * sv12[3745]);
        sv12[4236] = sv12[1466] * (-1 * sv12[3745]);
        sv12[4237] = -1 * sv12[1664] * (-1 * sv12[3745]);
        sv12[4238] = -1 * sv12[1665] * (-1 * sv12[3745]);
        sv12[4239] = -1 * sv12[1666] * (-1 * sv12[3745]);
        sv12[4240] = -1 * sv12[1667] * (-1 * sv12[3745]);
        sv12[4241] = -1 * sv12[1668] * (-1 * sv12[3745]);
        sv12[4242] = -1 * sv12[1669] * (-1 * sv12[3745]);
        sv12[4243] = sv12[1462] * (-1 * sv12[3746]);
        sv12[4244] = sv12[1466] * (-1 * sv12[3746]);
        sv12[4245] = -1 * sv12[1664] * (-1 * sv12[3746]);
        sv12[4246] = -1 * sv12[1665] * (-1 * sv12[3746]);
        sv12[4247] = -1 * sv12[1666] * (-1 * sv12[3746]);
        sv12[4248] = -1 * sv12[1667] * (-1 * sv12[3746]);
        sv12[4249] = -1 * sv12[1668] * (-1 * sv12[3746]);
        sv12[4250] = -1 * sv12[1669] * (-1 * sv12[3746]);
        sv12[4251] = sv12[1462] * (-1 * sv12[3747]);
        sv12[4252] = sv12[1466] * (-1 * sv12[3747]);
        sv12[4253] = -1 * sv12[1664] * (-1 * sv12[3747]);
        sv12[4254] = -1 * sv12[1665] * (-1 * sv12[3747]);
        sv12[4255] = -1 * sv12[1666] * (-1 * sv12[3747]);
        sv12[4256] = -1 * sv12[1667] * (-1 * sv12[3747]);
        sv12[4257] = -1 * sv12[1668] * (-1 * sv12[3747]);
        sv12[4258] = -1 * sv12[1669] * (-1 * sv12[3747]);
        sv12[4259] = sv12[1462] * (-1 * sv12[3740]);
        sv12[4260] = sv12[1466] * (-1 * sv12[3740]);
        sv12[4261] = -1 * sv12[1664] * (-1 * sv12[3740]);
        sv12[4262] = -1 * sv12[1665] * (-1 * sv12[3740]);
        sv12[4263] = -1 * sv12[1666] * (-1 * sv12[3740]);
        sv12[4264] = -1 * sv12[1667] * (-1 * sv12[3740]);
        sv12[4265] = -1 * sv12[1668] * (-1 * sv12[3740]);
        sv12[4266] = -1 * sv12[1669] * (-1 * sv12[3740]);
        sv12[4267] = sv12[1462] * (-1 * sv12[3741]);
        sv12[4268] = sv12[1466] * (-1 * sv12[3741]);
        sv12[4269] = -1 * sv12[1664] * (-1 * sv12[3741]);
        sv12[4270] = -1 * sv12[1665] * (-1 * sv12[3741]);
        sv12[4271] = -1 * sv12[1666] * (-1 * sv12[3741]);
        sv12[4272] = -1 * sv12[1667] * (-1 * sv12[3741]);
        sv12[4273] = -1 * sv12[1668] * (-1 * sv12[3741]);
        sv12[4274] = -1 * sv12[1669] * (-1 * sv12[3741]);
        sv12[4275] = sv12[1462] * (-1 * sv12[3742]);
        sv12[4276] = sv12[1466] * (-1 * sv12[3742]);
        sv12[4277] = -1 * sv12[1664] * (-1 * sv12[3742]);
        sv12[4278] = -1 * sv12[1665] * (-1 * sv12[3742]);
        sv12[4279] = -1 * sv12[1666] * (-1 * sv12[3742]);
        sv12[4280] = -1 * sv12[1667] * (-1 * sv12[3742]);
        sv12[4281] = -1 * sv12[1668] * (-1 * sv12[3742]);
        sv12[4282] = -1 * sv12[1669] * (-1 * sv12[3742]);
        sv12[4283] = sv12[1462] * sp[3];
        sv12[4284] = sv12[1466] * sp[3];
        sv12[4285] = -1 * sv12[1664] * sp[3];
        sv12[4286] = -1 * sv12[1665] * sp[3];
        sv12[4287] = -1 * sv12[1666] * sp[3];
        sv12[4288] = -1 * sv12[1667] * sp[3];
        sv12[4289] = -1 * sv12[1668] * sp[3];
        sv12[4290] = -1 * sv12[1669] * sp[3];
        sv12[4291] = sv12[1462] * sp[4];
        sv12[4292] = sv12[1466] * sp[4];
        sv12[4293] = -1 * sv12[1664] * sp[4];
        sv12[4294] = -1 * sv12[1665] * sp[4];
        sv12[4295] = -1 * sv12[1666] * sp[4];
        sv12[4296] = -1 * sv12[1667] * sp[4];
        sv12[4297] = -1 * sv12[1668] * sp[4];
        sv12[4298] = -1 * sv12[1669] * sp[4];
        sv12[4299] = sv12[4219] + sv12[3760];
        sv12[4300] = sv12[4227] + sv12[3761];
        sv12[4301] = sv12[4165] + sv12[4205];
        sv12[4302] = sv12[4166] + sv12[4206];
        sv12[4303] = sv12[4207] + sv12[4167];
        sv12[4304] = sv12[4208] + sv12[4168];
        sv12[4305] = sv12[4209] + sv12[4169];
        sv12[4306] = sv12[4210] + sv12[4170];
        sv12[4307] = sv12[4171] + sv12[4213];
        sv12[4308] = sv12[4172] + sv12[4214];
        sv12[4309] = sv12[4215] + sv12[4173];
        sv12[4310] = sv12[4216] + sv12[4174];
        sv12[4311] = sv12[4217] + sv12[4175];
        sv12[4312] = sv12[4218] + sv12[4176];
        sv12[4313] = sv12[4220] + sv12[4177];
        sv12[4314] = sv12[4228] + sv12[4178];
        sv12[4315] = sv12[4221] + sv12[4179];
        sv12[4316] = sv12[4222] + sv12[4180];
        sv12[4317] = sv12[4223] + sv12[4181];
        sv12[4318] = sv12[4224] + sv12[4182];
        sv12[4319] = sv12[4225] + sv12[4183];
        sv12[4320] = sv12[4226] + sv12[4184];
        sv12[4321] = sv12[4229] + sv12[4185];
        sv12[4322] = sv12[4230] + sv12[4186];
        sv12[4323] = sv12[4231] + sv12[4187];
        sv12[4324] = sv12[4232] + sv12[4188];
        sv12[4325] = sv12[4233] + sv12[4189];
        sv12[4326] = sv12[4234] + sv12[4190];
        sv12[4327] = sv12[4237] + sv12[4191];
        sv12[4328] = sv12[4245] + sv12[4192];
        sv12[4329] = sv12[4253] + sv12[4193];
        sv12[4330] = sv12[4261] + sv12[4194];
        sv12[4331] = sv12[4269] + sv12[4195];
        sv12[4332] = sv12[4277] + sv12[4196];
        sv12[4333] = sv12[4238] + sv12[4197];
        sv12[4334] = sv12[4246] + sv12[4198];
        sv12[4335] = sv12[4254] + sv12[4199];
        sv12[4336] = sv12[4262] + sv12[4200];
        sv12[4337] = sv12[4270] + sv12[4201];
        sv12[4338] = sv12[4278] + sv12[4202];
        sv12[4339] = sv12[4059] + sv12[4203];
        sv12[4340] = sv12[4060] + sv12[4211];
        sv12[4341] = sv12[4299] + sv12[3979];
        sv12[4342] = sv12[4300] + sv12[3987];
        sv12[4343] = sv12[4235] + sv12[3995];
        sv12[4344] = sv12[4243] + sv12[4003];
        sv12[4345] = sv12[4251] + sv12[4011];
        sv12[4346] = sv12[4019] + sv12[4259];
        sv12[4347] = sv12[4027] + sv12[4267];
        sv12[4348] = sv12[4035] + sv12[4275];
        sv12[4349] = sv12[4283] + sv12[4043];
        sv12[4350] = sv12[4051] + sv12[4291];
        sv12[4351] = sv12[4061] + sv12[4204];
        sv12[4352] = sv12[4062] + sv12[4301];
        sv12[4353] = sv12[4063] + sv12[4302];
        sv12[4354] = sv12[4064] + sv12[4303];
        sv12[4355] = sv12[4065] + sv12[4304];
        sv12[4356] = sv12[4066] + sv12[4305];
        sv12[4357] = sv12[4067] + sv12[4306];
        sv12[4358] = sv12[4068] + sv12[4212];
        sv12[4359] = sv12[4069] + sv12[4307];
        sv12[4360] = sv12[4070] + sv12[4308];
        sv12[4361] = sv12[4071] + sv12[4309];
        sv12[4362] = sv12[4072] + sv12[4310];
        sv12[4363] = sv12[4073] + sv12[4311];
        sv12[4364] = sv12[4074] + sv12[4312];
        sv12[4365] = sv12[4313] + sv12[3980];
        sv12[4366] = sv12[4314] + sv12[3988];
        sv12[4367] = sv12[4236] + sv12[3996];
        sv12[4368] = sv12[4244] + sv12[4004];
        sv12[4369] = sv12[4252] + sv12[4012];
        sv12[4370] = sv12[4020] + sv12[4260];
        sv12[4371] = sv12[4028] + sv12[4268];
        sv12[4372] = sv12[4036] + sv12[4276];
        sv12[4373] = sv12[4284] + sv12[4044];
        sv12[4374] = sv12[4052] + sv12[4292];
        sv12[4375] = sv12[4315] + sv12[4075];
        sv12[4376] = sv12[4316] + sv12[4076];
        sv12[4377] = sv12[4317] + sv12[4077];
        sv12[4378] = sv12[4318] + sv12[4078];
        sv12[4379] = sv12[4319] + sv12[4079];
        sv12[4380] = sv12[4320] + sv12[4080];
        sv12[4381] = sv12[4321] + sv12[4081];
        sv12[4382] = sv12[4322] + sv12[4082];
        sv12[4383] = sv12[4323] + sv12[4083];
        sv12[4384] = sv12[4324] + sv12[4084];
        sv12[4385] = sv12[4325] + sv12[4085];
        sv12[4386] = sv12[4326] + sv12[4086];
        sv12[4387] = sv12[4327] + sv12[4087];
        sv12[4388] = sv12[4328] + sv12[4088];
        sv12[4389] = sv12[4329] + sv12[4089];
        sv12[4390] = sv12[4090] + sv12[4330];
        sv12[4391] = sv12[4091] + sv12[4331];
        sv12[4392] = sv12[4092] + sv12[4332];
        sv12[4393] = sv12[4285] + sv12[4045];
        sv12[4394] = sv12[4053] + sv12[4293];
        sv12[4395] = sv12[4333] + sv12[4093];
        sv12[4396] = sv12[4334] + sv12[4094];
        sv12[4397] = sv12[4335] + sv12[4095];
        sv12[4398] = sv12[4096] + sv12[4336];
        sv12[4399] = sv12[4097] + sv12[4337];
        sv12[4400] = sv12[4098] + sv12[4338];
        sv12[4401] = sv12[4286] + sv12[4046];
        sv12[4402] = sv12[4054] + sv12[4294];
        sv12[4403] = sv12[4239] + sv12[3999];
        sv12[4404] = sv12[4247] + sv12[4007];
        sv12[4405] = sv12[4255] + sv12[4015];
        sv12[4406] = sv12[4023] + sv12[4263];
        sv12[4407] = sv12[4031] + sv12[4271];
        sv12[4408] = sv12[4039] + sv12[4279];
        sv12[4409] = sv12[4287] + sv12[4047];
        sv12[4410] = sv12[4055] + sv12[4295];
        sv12[4411] = sv12[4240] + sv12[4000];
        sv12[4412] = sv12[4248] + sv12[4008];
        sv12[4413] = sv12[4256] + sv12[4016];
        sv12[4414] = sv12[4024] + sv12[4264];
        sv12[4415] = sv12[4032] + sv12[4272];
        sv12[4416] = sv12[4040] + sv12[4280];
        sv12[4417] = sv12[4288] + sv12[4048];
        sv12[4418] = sv12[4056] + sv12[4296];
        sv12[4419] = sv12[4241] + sv12[4001];
        sv12[4420] = sv12[4249] + sv12[4009];
        sv12[4421] = sv12[4257] + sv12[4017];
        sv12[4422] = sv12[4025] + sv12[4265];
        sv12[4423] = sv12[4033] + sv12[4273];
        sv12[4424] = sv12[4041] + sv12[4281];
        sv12[4425] = sv12[4289] + sv12[4049];
        sv12[4426] = sv12[4057] + sv12[4297];
        sv12[4427] = sv12[4242] + sv12[4002];
        sv12[4428] = sv12[4250] + sv12[4010];
        sv12[4429] = sv12[4258] + sv12[4018];
        sv12[4430] = sv12[4026] + sv12[4266];
        sv12[4431] = sv12[4034] + sv12[4274];
        sv12[4432] = sv12[4042] + sv12[4282];
        sv12[4433] = sv12[4290] + sv12[4050];
        sv12[4434] = sv12[4058] + sv12[4298];
        sv12[4435] = sv12[4339] * sv12[1277];
        sv12[4436] = sv12[4340] * sv12[1277];
        sv12[4437] = sv12[4341] * sv12[1277];
        sv12[4438] = sv12[4342] * sv12[1277];
        sv12[4439] = sv12[4343] * sv12[1277];
        sv12[4440] = sv12[4344] * sv12[1277];
        sv12[4441] = sv12[4345] * sv12[1277];
        sv12[4442] = sv12[4346] * sv12[1277];
        sv12[4443] = sv12[4347] * sv12[1277];
        sv12[4444] = sv12[4348] * sv12[1277];
        sv12[4445] = sv12[4349] * sv12[1277];
        sv12[4446] = sv12[4350] * sv12[1277];
        sv12[4447] = sv12[4351] * sv12[1277];
        sv12[4448] = sv12[4352] * sv12[1277];
        sv12[4449] = sv12[4353] * sv12[1277];
        sv12[4450] = sv12[4354] * sv12[1277];
        sv12[4451] = sv12[4355] * sv12[1277];
        sv12[4452] = sv12[4356] * sv12[1277];
        sv12[4453] = sv12[4357] * sv12[1277];
        sv12[4454] = sv12[4358] * sv12[1277];
        sv12[4455] = sv12[4359] * sv12[1277];
        sv12[4456] = sv12[4360] * sv12[1277];
        sv12[4457] = sv12[4361] * sv12[1277];
        sv12[4458] = sv12[4362] * sv12[1277];
        sv12[4459] = sv12[4363] * sv12[1277];
        sv12[4460] = sv12[4364] * sv12[1277];
        sv12[4461] = sv12[4365] * sv12[1277];
        sv12[4462] = sv12[4366] * sv12[1277];
        sv12[4463] = sv12[4367] * sv12[1277];
        sv12[4464] = sv12[4368] * sv12[1277];
        sv12[4465] = sv12[4369] * sv12[1277];
        sv12[4466] = sv12[4370] * sv12[1277];
        sv12[4467] = sv12[4371] * sv12[1277];
        sv12[4468] = sv12[4372] * sv12[1277];
        sv12[4469] = sv12[4373] * sv12[1277];
        sv12[4470] = sv12[4374] * sv12[1277];
        sv12[4471] = sv12[4375] * sv12[1277];
        sv12[4472] = sv12[4376] * sv12[1277];
        sv12[4473] = sv12[4377] * sv12[1277];
        sv12[4474] = sv12[4378] * sv12[1277];
        sv12[4475] = sv12[4379] * sv12[1277];
        sv12[4476] = sv12[4380] * sv12[1277];
        sv12[4477] = sv12[4381] * sv12[1277];
        sv12[4478] = sv12[4382] * sv12[1277];
        sv12[4479] = sv12[4383] * sv12[1277];
        sv12[4480] = sv12[4384] * sv12[1277];
        sv12[4481] = sv12[4385] * sv12[1277];
        sv12[4482] = sv12[4386] * sv12[1277];
        sv12[4483] = sv12[4387] * sv12[1277];
        sv12[4484] = sv12[4388] * sv12[1277];
        sv12[4485] = sv12[4389] * sv12[1277];
        sv12[4486] = sv12[4390] * sv12[1277];
        sv12[4487] = sv12[4391] * sv12[1277];
        sv12[4488] = sv12[4392] * sv12[1277];
        sv12[4489] = sv12[4393] * sv12[1277];
        sv12[4490] = sv12[4394] * sv12[1277];
        sv12[4491] = sv12[4395] * sv12[1277];
        sv12[4492] = sv12[4396] * sv12[1277];
        sv12[4493] = sv12[4397] * sv12[1277];
        sv12[4494] = sv12[4398] * sv12[1277];
        sv12[4495] = sv12[4399] * sv12[1277];
        sv12[4496] = sv12[4400] * sv12[1277];
        sv12[4497] = sv12[4401] * sv12[1277];
        sv12[4498] = sv12[4402] * sv12[1277];
        sv12[4499] = sv12[4403] * sv12[1277];
        sv12[4500] = sv12[4404] * sv12[1277];
        sv12[4501] = sv12[4405] * sv12[1277];
        sv12[4502] = sv12[4406] * sv12[1277];
        sv12[4503] = sv12[4407] * sv12[1277];
        sv12[4504] = sv12[4408] * sv12[1277];
        sv12[4505] = sv12[4409] * sv12[1277];
        sv12[4506] = sv12[4410] * sv12[1277];
        sv12[4507] = sv12[4411] * sv12[1277];
        sv12[4508] = sv12[4412] * sv12[1277];
        sv12[4509] = sv12[4413] * sv12[1277];
        sv12[4510] = sv12[4414] * sv12[1277];
        sv12[4511] = sv12[4415] * sv12[1277];
        sv12[4512] = sv12[4416] * sv12[1277];
        sv12[4513] = sv12[4417] * sv12[1277];
        sv12[4514] = sv12[4418] * sv12[1277];
        sv12[4515] = sv12[4419] * sv12[1277];
        sv12[4516] = sv12[4420] * sv12[1277];
        sv12[4517] = sv12[4421] * sv12[1277];
        sv12[4518] = sv12[4422] * sv12[1277];
        sv12[4519] = sv12[4423] * sv12[1277];
        sv12[4520] = sv12[4424] * sv12[1277];
        sv12[4521] = sv12[4425] * sv12[1277];
        sv12[4522] = sv12[4426] * sv12[1277];
        sv12[4523] = sv12[4427] * sv12[1277];
        sv12[4524] = sv12[4428] * sv12[1277];
        sv12[4525] = sv12[4429] * sv12[1277];
        sv12[4526] = sv12[4430] * sv12[1277];
        sv12[4527] = sv12[4431] * sv12[1277];
        sv12[4528] = sv12[4432] * sv12[1277];
        sv12[4529] = sv12[4433] * sv12[1277];
        sv12[4530] = sv12[4434] * sv12[1277];
        sv12[4531] = sv12[4435] + sv12[3805];
        sv12[4532] = sv12[4436] + sv12[3809];
        sv12[4533] = sv12[4437] + sv12[3813];
        sv12[4534] = sv12[4438] + sv12[3817];
        sv12[4535] = sv12[4439] + sv12[3821];
        sv12[4536] = sv12[4440] + sv12[3825];
        sv12[4537] = sv12[4441] + sv12[3829];
        sv12[4538] = sv12[4442] + sv12[3833];
        sv12[4539] = sv12[4443] + sv12[3837];
        sv12[4540] = sv12[4444] + sv12[3841];
        sv12[4541] = sv12[4445] + sv12[3845];
        sv12[4542] = sv12[4446] + sv12[3849];
        sv12[4543] = sv12[4447] + sv12[3806];
        sv12[4544] = sv12[3807] + sv12[4448];
        sv12[4545] = sv12[3808] + sv12[4449];
        sv12[4546] = sv12[4454] + sv12[3810];
        sv12[4547] = sv12[3811] + sv12[4455];
        sv12[4548] = sv12[3812] + sv12[4456];
        sv12[4549] = sv12[4461] + sv12[3814];
        sv12[4550] = sv12[4462] + sv12[3818];
        sv12[4551] = sv12[4463] + sv12[3822];
        sv12[4552] = sv12[4464] + sv12[3826];
        sv12[4553] = sv12[4465] + sv12[3830];
        sv12[4554] = sv12[4466] + sv12[3834];
        sv12[4555] = sv12[4467] + sv12[3838];
        sv12[4556] = sv12[4468] + sv12[3842];
        sv12[4557] = sv12[4469] + sv12[3846];
        sv12[4558] = sv12[4470] + sv12[3850];
        sv12[4559] = sv12[3815] + sv12[4471];
        sv12[4560] = sv12[3816] + sv12[4472];
        sv12[4561] = sv12[3819] + sv12[4477];
        sv12[4562] = sv12[3820] + sv12[4478];
        sv12[4563] = sv12[3823] + sv12[4483];
        sv12[4564] = sv12[3827] + sv12[4484];
        sv12[4565] = sv12[3831] + sv12[4485];
        sv12[4566] = sv12[3835] + sv12[4486];
        sv12[4567] = sv12[3839] + sv12[4487];
        sv12[4568] = sv12[3843] + sv12[4488];
        sv12[4569] = sv12[3847] + sv12[4489];
        sv12[4570] = sv12[3851] + sv12[4490];
        sv12[4571] = sv12[3824] + sv12[4491];
        sv12[4572] = sv12[3828] + sv12[4492];
        sv12[4573] = sv12[3832] + sv12[4493];
        sv12[4574] = sv12[3836] + sv12[4494];
        sv12[4575] = sv12[3840] + sv12[4495];
        sv12[4576] = sv12[3844] + sv12[4496];
        sv12[4577] = sv12[3848] + sv12[4497];
        sv12[4578] = sv12[3852] + sv12[4498];
        sv12[4579] = sv12[2411] * sp[6];
        sv12[4580] = sv12[2411] * sp[5];
        sv12[4581] = sv12[2411] * sp[3];
        sv12[4582] = sv12[2411] * sp[4];
        sv12[4583] = sp[219] * sv12[2414];
        sv12[4584] = sp[219] * sv12[2415];
        sv12[4585] = sv12[4579] * sv12[4583];
        sv12[4586] = sv12[4579] * sv12[4584];
        sv12[4587] = sv12[4580] * sv12[4583];
        sv12[4588] = sv12[4580] * sv12[4584];
        sv12[4589] = sv12[4581] * sv12[4583];
        sv12[4590] = sv12[4581] * sv12[4584];
        sv12[4591] = sv12[4582] * sv12[4583];
        sv12[4592] = sv12[4582] * sv12[4584];
        sv12[4593] = sv12[4531] + sv12[4585];
        sv12[4594] = sv12[4532] + sv12[4587];
        sv12[4595] = sv12[4533] + sv12[4589];
        sv12[4596] = sv12[4534] + sv12[4591];
        sv12[4597] = sv12[4543] + sv12[4586];
        sv12[4598] = sv12[4546] + sv12[4588];
        sv12[4599] = sv12[4549] + sv12[4590];
        sv12[4600] = sv12[4550] + sv12[4592];
        sv12[4601] = sp[3] * sv12[31];
        sv12[4602] = sp[4] * sv12[31];
        sv12[4603] = sp[6] * sv12[46];
        sv12[4604] = sp[5] * sv12[46];
        sv12[4605] = sv12[4601] + sv12[4603];
        sv12[4606] = sv12[4602] + sv12[4604];
        sv12[4607] = sv12[3726] + -1 * sv12[4605];
        sv12[4608] = sv12[3727] + -1 * sv12[4606];
        sv12[4609] = sv12[49] * sv12[4607];
        sv12[4610] = sv12[49] * sv12[4608];
        sv12[4611] = sv12[4609] * sv12[783];
        sv12[4612] = sv12[4609] * sv12[784];
        sv12[4613] = sv12[4609] * sv12[785];
        sv12[4614] = sv12[4609] * sv12[786];
        sv12[4615] = sv12[4610] * sv12[783];
        sv12[4616] = sv12[4610] * sv12[784];
        sv12[4617] = sv12[4610] * sv12[785];
        sv12[4618] = sv12[4610] * sv12[786];
        sv12[4619] = sv12[4607] * sp[9];
        sv12[4620] = sv12[4608] * sp[9];
        sv12[4621] = sv12[4607] * sp[12];
        sv12[4622] = sv12[4608] * sp[12];
        sv12[4623] = sv12[4607] * (-1 * sv12[761]);
        sv12[4624] = sv12[4608] * (-1 * sv12[761]);
        sv12[4625] = sv12[4607] * (-1 * sv12[762]);
        sv12[4626] = sv12[4608] * (-1 * sv12[762]);
        sv12[4627] = sv12[4607] * (-1 * sv12[763]);
        sv12[4628] = sv12[4608] * (-1 * sv12[763]);
        sv12[4629] = sv12[4607] * (-1 * sv12[764]);
        sv12[4630] = sv12[4608] * (-1 * sv12[764]);
        sv12[4631] = sv12[4607] * (-1 * sv12[765]);
        sv12[4632] = sv12[4608] * (-1 * sv12[765]);
        sv12[4633] = sv12[4607] * (-1 * sv12[766]);
        sv12[4634] = sv12[4608] * (-1 * sv12[766]);
        sv12[4635] = sp[3] * sv12[645];
        sv12[4636] = sp[3] * sv12[646];
        sv12[4637] = sp[3] * sv12[647];
        sv12[4638] = sp[3] * sv12[648];
        sv12[4639] = sp[3] * sv12[649];
        sv12[4640] = sp[3] * sv12[650];
        sv12[4641] = sp[4] * sv12[645];
        sv12[4642] = sp[4] * sv12[646];
        sv12[4643] = sp[4] * sv12[647];
        sv12[4644] = sp[4] * sv12[648];
        sv12[4645] = sp[4] * sv12[649];
        sv12[4646] = sp[4] * sv12[650];
        sv12[4647] = sp[6] * sv12[687];
        sv12[4648] = sp[6] * sv12[688];
        sv12[4649] = sp[6] * sv12[689];
        sv12[4650] = sp[6] * sv12[690];
        sv12[4651] = sp[6] * sv12[691];
        sv12[4652] = sp[6] * sv12[692];
        sv12[4653] = sp[5] * sv12[687];
        sv12[4654] = sp[5] * sv12[688];
        sv12[4655] = sp[5] * sv12[689];
        sv12[4656] = sp[5] * sv12[690];
        sv12[4657] = sp[5] * sv12[691];
        sv12[4658] = sp[5] * sv12[692];
        sv12[4659] = sv12[4635] + sv12[4647];
        sv12[4660] = sv12[4641] + sv12[4653];
        sv12[4661] = sv12[4636] + sv12[4648];
        sv12[4662] = sv12[4642] + sv12[4654];
        sv12[4663] = sv12[4637] + sv12[4649];
        sv12[4664] = sv12[4650] + sv12[4638];
        sv12[4665] = sv12[4639] + sv12[4651];
        sv12[4666] = sv12[4652] + sv12[4640];
        sv12[4667] = sv12[4643] + sv12[4655];
        sv12[4668] = sv12[4656] + sv12[4644];
        sv12[4669] = sv12[4645] + sv12[4657];
        sv12[4670] = sv12[4658] + sv12[4646];
        sv12[4671] = sv12[49] * sp[3];
        sv12[4672] = sv12[49] * sp[4];
        sv12[4673] = sv12[49] * sp[6];
        sv12[4674] = sv12[49] * sp[5];
        sv12[4675] = sv12[49] * (-1 * sv12[4659]);
        sv12[4676] = sv12[49] * (-1 * sv12[4660]);
        sv12[4677] = sv12[49] * (-1 * sv12[4661]);
        sv12[4678] = sv12[49] * (-1 * sv12[4662]);
        sv12[4679] = sv12[49] * (-1 * sv12[4663]);
        sv12[4680] = sv12[49] * (-1 * sv12[4664]);
        sv12[4681] = sv12[49] * (-1 * sv12[4665]);
        sv12[4682] = sv12[49] * (-1 * sv12[4666]);
        sv12[4683] = sv12[49] * (-1 * sv12[4667]);
        sv12[4684] = sv12[49] * (-1 * sv12[4668]);
        sv12[4685] = sv12[49] * (-1 * sv12[4669]);
        sv12[4686] = sv12[49] * (-1 * sv12[4670]);
        sv12[4687] = sv12[4619] + sv12[4671];
        sv12[4688] = sv12[4620] + sv12[4672];
        sv12[4689] = sv12[4621] + sv12[4673];
        sv12[4690] = sv12[4622] + sv12[4674];
        sv12[4691] = sv12[4623] + sv12[4675];
        sv12[4692] = sv12[4624] + sv12[4676];
        sv12[4693] = sv12[4625] + sv12[4677];
        sv12[4694] = sv12[4626] + sv12[4678];
        sv12[4695] = sv12[4627] + sv12[4679];
        sv12[4696] = sv12[4629] + sv12[4680];
        sv12[4697] = sv12[4631] + sv12[4681];
        sv12[4698] = sv12[4633] + sv12[4682];
        sv12[4699] = sv12[4628] + sv12[4683];
        sv12[4700] = sv12[4630] + sv12[4684];
        sv12[4701] = sv12[4632] + sv12[4685];
        sv12[4702] = sv12[4634] + sv12[4686];
        sv12[4703] = sv12[4687] * sv12[1277];
        sv12[4704] = sv12[4688] * sv12[1277];
        sv12[4705] = sv12[4689] * sv12[1277];
        sv12[4706] = sv12[4690] * sv12[1277];
        sv12[4707] = sv12[4691] * sv12[1277];
        sv12[4708] = sv12[4692] * sv12[1277];
        sv12[4709] = sv12[4693] * sv12[1277];
        sv12[4710] = sv12[4694] * sv12[1277];
        sv12[4711] = sv12[4695] * sv12[1277];
        sv12[4712] = sv12[4696] * sv12[1277];
        sv12[4713] = sv12[4697] * sv12[1277];
        sv12[4714] = sv12[4698] * sv12[1277];
        sv12[4715] = sv12[4699] * sv12[1277];
        sv12[4716] = sv12[4700] * sv12[1277];
        sv12[4717] = sv12[4701] * sv12[1277];
        sv12[4718] = sv12[4702] * sv12[1277];
        sv12[4719] = sv12[4703] + sv12[4611];
        sv12[4720] = sv12[4704] + sv12[4615];
        sv12[4721] = sv12[4705] + sv12[4612];
        sv12[4722] = sv12[4706] + sv12[4616];
        sv12[4723] = sv12[4613] + sv12[4707];
        sv12[4724] = sv12[4617] + sv12[4708];
        sv12[4725] = sv12[4614] + sv12[4709];
        sv12[4726] = sv12[4618] + sv12[4710];
        sv12[4727] = sv12[31] / 1.3 * sp[3];
        sv12[4728] = sv12[31] / 1.3 * sp[4];
        sv12[4729] = sv12[46] / 1.3 * sp[6];
        sv12[4730] = sv12[46] / 1.3 * sp[5];
        sv12[4731] = sv12[4727] + sv12[4729];
        sv12[4732] = sv12[4730] + sv12[4728];
        sv12[4733] = sv12[3726] + -1 * sv12[4731];
        sv12[4734] = sv12[3727] + -1 * sv12[4732];
        sv12[4735] = 1.92 * w1_c4 * (1.0 / (0.5 * sv12[2495]));
        sv12[4736] = sv12[4735] + 1.92 * sv12[2496];
        sv12[4737] = sv12[2501] * sv12[4736];
        sv12[4738] = sv12[2501] * sv12[4733];
        sv12[4739] = sv12[2501] * sv12[4734];
        sv12[4740] = 1.92 * w3_c4 * (1.0 / (0.5 * sv12[2495]));
        sv12[4741] = sv12[4740] + 1.92 * sv12[2498];
        sv12[4742] = sv12[2513] * sv12[4741];
        sv12[4743] = sv12[4737] + sv12[4742];
        sv12[4744] = sv12[4743] * sv12[3090];
        sv12[4745] = sv12[4743] * sv12[3091];
        sv12[4746] = sv12[4743] * sv12[3092];
        sv12[4747] = sv12[4743] * sv12[3093];
        sv12[4748] = sv12[4738] * sv12[3090];
        sv12[4749] = sv12[4738] * sv12[3091];
        sv12[4750] = sv12[4738] * sv12[3092];
        sv12[4751] = sv12[4738] * sv12[3093];
        sv12[4752] = sv12[4739] * sv12[3090];
        sv12[4753] = sv12[4739] * sv12[3091];
        sv12[4754] = sv12[4739] * sv12[3092];
        sv12[4755] = sv12[4739] * sv12[3093];
        sv12[4756] = sv12[645] / 1.3 * sp[3];
        sv12[4757] = sv12[646] / 1.3 * sp[3];
        sv12[4758] = sv12[647] / 1.3 * sp[3];
        sv12[4759] = sv12[648] / 1.3 * sp[3];
        sv12[4760] = sv12[649] / 1.3 * sp[3];
        sv12[4761] = sv12[650] / 1.3 * sp[3];
        sv12[4762] = sv12[645] / 1.3 * sp[4];
        sv12[4763] = sv12[646] / 1.3 * sp[4];
        sv12[4764] = sv12[647] / 1.3 * sp[4];
        sv12[4765] = sv12[648] / 1.3 * sp[4];
        sv12[4766] = sv12[649] / 1.3 * sp[4];
        sv12[4767] = sv12[650] / 1.3 * sp[4];
        sv12[4768] = sv12[687] / 1.3 * sp[6];
        sv12[4769] = sv12[688] / 1.3 * sp[6];
        sv12[4770] = sv12[689] / 1.3 * sp[6];
        sv12[4771] = sv12[690] / 1.3 * sp[6];
        sv12[4772] = sv12[691] / 1.3 * sp[6];
        sv12[4773] = sv12[692] / 1.3 * sp[6];
        sv12[4774] = sv12[687] / 1.3 * sp[5];
        sv12[4775] = sv12[688] / 1.3 * sp[5];
        sv12[4776] = sv12[689] / 1.3 * sp[5];
        sv12[4777] = sv12[690] / 1.3 * sp[5];
        sv12[4778] = sv12[691] / 1.3 * sp[5];
        sv12[4779] = sv12[692] / 1.3 * sp[5];
        sv12[4780] = sv12[4756] + sv12[4768];
        sv12[4781] = sv12[4774] + sv12[4762];
        sv12[4782] = sv12[4757] + sv12[4769];
        sv12[4783] = sv12[4775] + sv12[4763];
        sv12[4784] = sv12[4758] + sv12[4770];
        sv12[4785] = sv12[4759] + sv12[4771];
        sv12[4786] = sv12[4760] + sv12[4772];
        sv12[4787] = sv12[4761] + sv12[4773];
        sv12[4788] = sv12[4776] + sv12[4764];
        sv12[4789] = sv12[4777] + sv12[4765];
        sv12[4790] = sv12[4778] + sv12[4766];
        sv12[4791] = sv12[4779] + sv12[4767];
        sv12[4792] = 0.5 * (1.0 + sv12[3027]) * (1.0 / (0.5 * sv12[2495]));
        sv12[4793] = -1 * sv12[4792] / (0.5 * sv12[2495]);
        sv12[4794] = 1.92 * w1_c4 * sv12[4793];
        sv12[4795] = sv12[4794] + 1.92 * sv12[3029];
        sv12[4796] = sv12[2501] * sp[3];
        sv12[4797] = sv12[2501] * sp[4];
        sv12[4798] = sv12[2501] * sp[6];
        sv12[4799] = sv12[2501] * sp[5];
        sv12[4800] = sv12[2501] * sv12[4795];
        sv12[4801] = sv12[2501] * (-1 * sv12[4780]);
        sv12[4802] = sv12[2501] * (-1 * sv12[4781]);
        sv12[4803] = sv12[2501] * (-1 * sv12[4782]);
        sv12[4804] = sv12[2501] * (-1 * sv12[4783]);
        sv12[4805] = sv12[2501] * (-1 * sv12[4784]);
        sv12[4806] = sv12[2501] * (-1 * sv12[4785]);
        sv12[4807] = sv12[2501] * (-1 * sv12[4786]);
        sv12[4808] = sv12[2501] * (-1 * sv12[4787]);
        sv12[4809] = sv12[2501] * (-1 * sv12[4788]);
        sv12[4810] = sv12[2501] * (-1 * sv12[4789]);
        sv12[4811] = sv12[2501] * (-1 * sv12[4790]);
        sv12[4812] = sv12[2501] * (-1 * sv12[4791]);
        sv12[4813] = sv12[4741] * (-1 * sv12[3033]);
        sv12[4814] = sv12[4741] * (-1 * sv12[3034]);
        sv12[4815] = sp[228] * sv12[4741];
        sv12[4816] = sp[231] * sv12[4741];
        sv12[4817] = sv12[4741] * (-1 * sv12[3035]);
        sv12[4818] = sv12[4741] * (-1 * sv12[3036]);
        sv12[4819] = sv12[3037] * sv12[4741];
        sv12[4820] = sv12[4741] * (-1 * sv12[3021]);
        sv12[4821] = sv12[4741] * (-1 * sv12[3022]);
        sv12[4822] = sv12[4741] * (-1 * sv12[3023]);
        sv12[4823] = sv12[4741] * (-1 * sv12[3024]);
        sv12[4824] = sv12[4741] * (-1 * sv12[3025]);
        sv12[4825] = sv12[4819] + sv12[4800];
        sv12[4826] = sp[222] * sv12[4736];
        sv12[4827] = sp[225] * sv12[4736];
        sv12[4828] = sv12[3073] * sv12[4736];
        sv12[4829] = sv12[4736] * (-1 * sv12[3063]);
        sv12[4830] = sv12[4736] * (-1 * sv12[3064]);
        sv12[4831] = sv12[4736] * (-1 * sv12[3065]);
        sv12[4832] = sv12[4736] * (-1 * sv12[3066]);
        sv12[4833] = sv12[4736] * (-1 * sv12[3067]);
        sv12[4834] = sv12[4733] * sp[222];
        sv12[4835] = sv12[4733] * sp[225];
        sv12[4836] = sv12[3073] * sv12[4733];
        sv12[4837] = sv12[4733] * (-1 * sv12[3063]);
        sv12[4838] = sv12[4733] * (-1 * sv12[3064]);
        sv12[4839] = sv12[4733] * (-1 * sv12[3065]);
        sv12[4840] = sv12[4733] * (-1 * sv12[3066]);
        sv12[4841] = sv12[4733] * (-1 * sv12[3067]);
        sv12[4842] = sv12[4734] * sp[222];
        sv12[4843] = sv12[4734] * sp[225];
        sv12[4844] = sv12[3073] * sv12[4734];
        sv12[4845] = sv12[4734] * (-1 * sv12[3063]);
        sv12[4846] = sv12[4734] * (-1 * sv12[3064]);
        sv12[4847] = sv12[4734] * (-1 * sv12[3065]);
        sv12[4848] = sv12[4734] * (-1 * sv12[3066]);
        sv12[4849] = sv12[4734] * (-1 * sv12[3067]);
        sv12[4850] = 1.92 * w3_c4 * sv12[4793];
        sv12[4851] = sv12[4850] + 1.92 * sv12[3070];
        sv12[4852] = sv12[2513] * sv12[4851];
        sv12[4853] = sv12[4828] + sv12[4852];
        sv12[4854] = sv12[4826] + sv12[4815];
        sv12[4855] = sv12[4834] + sv12[4796];
        sv12[4856] = sv12[4842] + sv12[4797];
        sv12[4857] = sv12[4827] + sv12[4816];
        sv12[4858] = sv12[4835] + sv12[4798];
        sv12[4859] = sv12[4843] + sv12[4799];
        sv12[4860] = sv12[4825] + sv12[4853];
        sv12[4861] = sv12[4820] + sv12[4829];
        sv12[4862] = sv12[4821] + sv12[4830];
        sv12[4863] = sv12[4822] + sv12[4831];
        sv12[4864] = sv12[4823] + sv12[4832];
        sv12[4865] = sv12[4824] + sv12[4833];
        sv12[4866] = sv12[4836] + sv12[4801];
        sv12[4867] = sv12[4844] + sv12[4802];
        sv12[4868] = sv12[4837] + sv12[4803];
        sv12[4869] = sv12[4845] + sv12[4804];
        sv12[4870] = sv12[4838] + sv12[4805];
        sv12[4871] = sv12[4839] + sv12[4806];
        sv12[4872] = sv12[4840] + sv12[4807];
        sv12[4873] = sv12[4841] + sv12[4808];
        sv12[4874] = sv12[4846] + sv12[4809];
        sv12[4875] = sv12[4847] + sv12[4810];
        sv12[4876] = sv12[4848] + sv12[4811];
        sv12[4877] = sv12[4849] + sv12[4812];
        sv12[4878] = sv12[4813] * sv12[3470];
        sv12[4879] = sv12[4814] * sv12[3470];
        sv12[4880] = sv12[4854] * sv12[3470];
        sv12[4881] = sv12[4855] * sv12[3470];
        sv12[4882] = sv12[4856] * sv12[3470];
        sv12[4883] = sv12[4857] * sv12[3470];
        sv12[4884] = sv12[4858] * sv12[3470];
        sv12[4885] = sv12[4859] * sv12[3470];
        sv12[4886] = sv12[4817] * sv12[3470];
        sv12[4887] = sv12[4818] * sv12[3470];
        sv12[4888] = sv12[4860] * sv12[3470];
        sv12[4889] = sv12[4861] * sv12[3470];
        sv12[4890] = sv12[4862] * sv12[3470];
        sv12[4891] = sv12[4863] * sv12[3470];
        sv12[4892] = sv12[4864] * sv12[3470];
        sv12[4893] = sv12[4865] * sv12[3470];
        sv12[4894] = sv12[4866] * sv12[3470];
        sv12[4895] = sv12[4867] * sv12[3470];
        sv12[4896] = sv12[4868] * sv12[3470];
        sv12[4897] = sv12[4869] * sv12[3470];
        sv12[4898] = sv12[4870] * sv12[3470];
        sv12[4899] = sv12[4871] * sv12[3470];
        sv12[4900] = sv12[4872] * sv12[3470];
        sv12[4901] = sv12[4873] * sv12[3470];
        sv12[4902] = sv12[4874] * sv12[3470];
        sv12[4903] = sv12[4875] * sv12[3470];
        sv12[4904] = sv12[4876] * sv12[3470];
        sv12[4905] = sv12[4877] * sv12[3470];
        sv12[4906] = sv12[4880] + sv12[4744];
        sv12[4907] = sv12[4881] + sv12[4748];
        sv12[4908] = sv12[4882] + sv12[4752];
        sv12[4909] = sv12[4883] + sv12[4745];
        sv12[4910] = sv12[4884] + sv12[4749];
        sv12[4911] = sv12[4885] + sv12[4753];
        sv12[4912] = sv12[4746] + sv12[4888];
        sv12[4913] = sv12[4747] + sv12[4889];
        sv12[4914] = sv12[4750] + sv12[4894];
        sv12[4915] = sv12[4754] + sv12[4895];
        sv12[4916] = sv12[4751] + sv12[4896];
        sv12[4917] = sv12[4755] + sv12[4897];
        sv12[4918] = sv12[3648] + sv12[4878];
        sv12[4919] = sv12[3658] + sv12[4879];
        sv12[4920] = sv12[3630] + sv12[4593];
        sv12[4921] = sv12[3631] + sv12[4594];
        sv12[4922] = sv12[3634] + sv12[4595];
        sv12[4923] = sv12[3635] + sv12[4596];
        sv12[4924] = sv12[3665] + sv12[4906];
        sv12[4925] = sv12[3638] + sv12[4719];
        sv12[4926] = sv12[3639] + sv12[4720];
        sv12[4927] = sv12[3640] + sv12[4907];
        sv12[4928] = sv12[3641] + sv12[4908];
        sv12[4929] = sv12[3644] + sv12[4597];
        sv12[4930] = sv12[3647] + sv12[4544];
        sv12[4931] = sv12[3648] + sv12[4545];
        sv12[4932] = sv12[3649] + sv12[4450];
        sv12[4933] = sv12[3650] + sv12[4451];
        sv12[4934] = sv12[3651] + sv12[4452];
        sv12[4935] = sv12[3652] + sv12[4453];
        sv12[4936] = sv12[3654] + sv12[4598];
        sv12[4937] = sv12[3657] + sv12[4547];
        sv12[4938] = sv12[3658] + sv12[4548];
        sv12[4939] = sv12[3659] + sv12[4457];
        sv12[4940] = sv12[3660] + sv12[4458];
        sv12[4941] = sv12[3661] + sv12[4459];
        sv12[4942] = sv12[3662] + sv12[4460];
        sv12[4943] = sv12[3667] + sv12[4599];
        sv12[4944] = sv12[3668] + sv12[4600];
        sv12[4945] = sv12[3676] + sv12[4909];
        sv12[4946] = sv12[3671] + sv12[4721];
        sv12[4947] = sv12[3672] + sv12[4722];
        sv12[4948] = sv12[3673] + sv12[4910];
        sv12[4949] = sv12[3674] + sv12[4911];
        sv12[4950] = sv12[3680] + sv12[4886];
        sv12[4951] = sv12[3687] + sv12[4887];
        sv12[4952] = sv12[3679] + sv12[4559];
        sv12[4953] = sv12[3680] + sv12[4560];
        sv12[4954] = sv12[3681] + sv12[4473];
        sv12[4955] = sv12[3682] + sv12[4474];
        sv12[4956] = sv12[3683] + sv12[4475];
        sv12[4957] = sv12[3684] + sv12[4476];
        sv12[4958] = sv12[3686] + sv12[4561];
        sv12[4959] = sv12[3687] + sv12[4562];
        sv12[4960] = sv12[3688] + sv12[4479];
        sv12[4961] = sv12[3689] + sv12[4480];
        sv12[4962] = sv12[3690] + sv12[4481];
        sv12[4963] = sv12[3691] + sv12[4482];
        sv12[4964] = sv12[3698] + sv12[4912];
        sv12[4965] = sv12[3699] + sv12[4913];
        sv12[4966] = sv12[3700] + sv12[4890];
        sv12[4967] = sv12[3701] + sv12[4891];
        sv12[4968] = sv12[3702] + sv12[4892];
        sv12[4969] = sv12[3703] + sv12[4893];
        sv12[4970] = sv12[3704] + sv12[4723];
        sv12[4971] = sv12[3705] + sv12[4724];
        sv12[4972] = sv12[3706] + sv12[4914];
        sv12[4973] = sv12[3707] + sv12[4915];
        sv12[4974] = sv12[3708] + sv12[4725];
        sv12[4975] = sv12[3709] + sv12[4726];
        sv12[4976] = sv12[3710] + sv12[4916];
        sv12[4977] = sv12[3711] + sv12[4917];
        sv12[4978] = sv12[3712] + sv12[4711];
        sv12[4979] = sv12[3713] + sv12[4712];
        sv12[4980] = sv12[3714] + sv12[4713];
        sv12[4981] = sv12[3715] + sv12[4714];
        sv12[4982] = sv12[3713] + sv12[4715];
        sv12[4983] = sv12[3716] + sv12[4716];
        sv12[4984] = sv12[3717] + sv12[4717];
        sv12[4985] = sv12[3718] + sv12[4718];
        sv12[4986] = sv12[3714] + sv12[4898];
        sv12[4987] = sv12[3717] + sv12[4899];
        sv12[4988] = sv12[3719] + sv12[4900];
        sv12[4989] = sv12[3720] + sv12[4901];
        sv12[4990] = sv12[3715] + sv12[4902];
        sv12[4991] = sv12[3718] + sv12[4903];
        sv12[4992] = sv12[3720] + sv12[4904];
        sv12[4993] = sv12[3721] + sv12[4905];
        sv12[4994] = sv12[4828] + sv12[4800];
        sv12[4995] = sv12[4819] + sv12[4852];
        sv12[4996] = sv12[4994] + sv12[4995];
        sv12[4997] = sv12[4996] * sv12[3470];
        sv12[4998] = sv12[4746] + sv12[4997];
        sv12[4999] = sv12[3637] + sv12[4906];
        sv12[5000] = sv12[4918] + sv12[4545];
        sv12[5001] = sv12[4919] + sv12[4548];
        sv12[5002] = sv12[4931] + sv12[4878];
        sv12[5003] = sv12[4938] + sv12[4879];
        sv12[5004] = sv12[3670] + sv12[4909];
        sv12[5005] = sv12[4950] + sv12[4560];
        sv12[5006] = sv12[4951] + sv12[4562];
        sv12[5007] = sv12[4953] + sv12[4886];
        sv12[5008] = sv12[4959] + sv12[4887];
        sv12[5009] = sv12[3693] + sv12[4998];
        sv12[5010] = sv12[3694] + sv12[4723];
        sv12[5011] = sv12[3695] + sv12[4724];
        sv12[5012] = sv12[3696] + sv12[4914];
        sv12[5013] = sv12[3697] + sv12[4915];
        sv12[5014] = sv12[4965] + sv12[4913];
        sv12[5015] = sv12[4966] + sv12[4725];
        sv12[5016] = sv12[4967] + sv12[4726];
        sv12[5017] = sv12[4968] + sv12[4916];
        sv12[5018] = sv12[4969] + sv12[4917];
        sv12[5019] = sv12[4974] + sv12[4890];
        sv12[5020] = sv12[4975] + sv12[4891];
        sv12[5021] = sv12[4976] + sv12[4892];
        sv12[5022] = sv12[4977] + sv12[4893];
        sv12[5023] = sv12[4978] + sv12[4711];
        sv12[5024] = sv12[4979] + sv12[4715];
        sv12[5025] = sv12[4980] + sv12[4898];
        sv12[5026] = sv12[4981] + sv12[4902];
        sv12[5027] = sv12[4982] + sv12[4712];
        sv12[5028] = sv12[4983] + sv12[4716];
        sv12[5029] = sv12[4984] + sv12[4899];
        sv12[5030] = sv12[4985] + sv12[4903];
        sv12[5031] = sv12[4986] + sv12[4713];
        sv12[5032] = sv12[4987] + sv12[4717];
        sv12[5033] = sv12[4988] + sv12[4900];
        sv12[5034] = sv12[4989] + sv12[4904];
        sv12[5035] = sv12[4990] + sv12[4714];
        sv12[5036] = sv12[4991] + sv12[4718];
        sv12[5037] = sv12[4992] + sv12[4901];
        sv12[5038] = sv12[4993] + sv12[4905];
        sv12[5039] = w1_c4 + w1_c4;
        sv12[5040] = w1_c4 * w1_c4;
        sv12[5041] = std::sqrt(1e-8 + sv12[5040]);
        sv12[5042] = sv12[5039] / (2 * sv12[5041]);
        sv12[5043] = w1_c3 * (0.09 * sv12[11]);
        sv12[5044] = sv12[5043] + sv12[5043];
        sv12[5045] = w1_c3 * sv12[5043];
        sv12[5046] = w1_c4 + sv12[5041];
        sv12[5047] = sv12[5045] / (0.5 * sv12[5046]);
        sv12[5048] = 0.5 * (1.0 + sv12[5042]) * sv12[5047];
        sv12[5049] = sv12[5044] / (0.5 * sv12[5046]);
        sv12[5050] = -1 * sv12[5048] / (0.5 * sv12[5046]);
        sv12[5051] = 0.5 * (1.0 + sv12[5042]) * sv12[5049];
        sv12[5052] = 0.5 * (1.0 + sv12[5042]) * sv12[5050];
        sv12[5053] = 2 * sv12[5042] * sv12[5042];
        sv12[5054] = (2.0 + -1 * sv12[5053]) / (2 * sv12[5041]);
        sv12[5055] = 0.5 * sv12[5054] * sv12[5047];
        sv12[5056] = sv12[5055] + sv12[5052];
        sv12[5057] = -1 * sv12[5056] + -1 * sv12[5052];
        sv12[5058] = sv12[175] / (0.5 * sv12[5046]);
        sv12[5059] = -1 * sv12[5051] / (0.5 * sv12[5046]);
        sv12[5060] = sv12[5057] / (0.5 * sv12[5046]);
        sv12[5061] = sp[258] * sv12[5058];
        sv12[5062] = sp[258] * sv12[5059];
        sv12[5063] = sp[258] * sv12[5060];
        sv12[5064] = sp[263] * sv12[5049];
        sv12[5065] = sp[263] * sv12[5050];
        sv12[5066] = sp[264] * sv12[5049];
        sv12[5067] = sp[264] * sv12[5050];
        sv12[5068] = sv12[3692] + sv12[5061];
        sv12[5069] = sv12[5009] + sv12[5062];
        sv12[5070] = sv12[5010] + sv12[5064];
        sv12[5071] = sv12[5011] + sv12[5066];
        sv12[5072] = sv12[4964] + sv12[5062];
        sv12[5073] = sv12[5014] + sv12[5063];
        sv12[5074] = sv12[5015] + sv12[5065];
        sv12[5075] = sv12[5016] + sv12[5067];
        sv12[5076] = sv12[4970] + sv12[5064];
        sv12[5077] = sv12[4971] + sv12[5066];
        sv12[5078] = sv12[5019] + sv12[5065];
        sv12[5079] = sv12[5020] + sv12[5067];
        sv12[5080] = sp[265] * (sv12[5058] / 1.3);
        sv12[5081] = sp[265] * (sv12[5059] / 1.3);
        sv12[5082] = sp[265] * (sv12[5060] / 1.3);
        sv12[5083] = sp[270] * (sv12[5049] / 1.3);
        sv12[5084] = sp[270] * (sv12[5050] / 1.3);
        sv12[5085] = sp[271] * (sv12[5049] / 1.3);
        sv12[5086] = sp[271] * (sv12[5050] / 1.3);
        sv12[5087] = sv12[5068] + sv12[5080];
        sv12[5088] = sv12[5069] + sv12[5081];
        sv12[5089] = sv12[5012] + sv12[5083];
        sv12[5090] = sv12[5013] + sv12[5085];
        sv12[5091] = sv12[5072] + sv12[5081];
        sv12[5092] = sv12[5073] + sv12[5082];
        sv12[5093] = sv12[5017] + sv12[5084];
        sv12[5094] = sv12[5018] + sv12[5086];
        sv12[5095] = sv12[4972] + sv12[5083];
        sv12[5096] = sv12[4973] + sv12[5085];
        sv12[5097] = sv12[5021] + sv12[5084];
        sv12[5098] = sv12[5022] + sv12[5086];
        sv12[5099] = w1_c3 + w1_c3;
        sv12[5100] = w1_c3 * w1_c3;
        sv12[5101] = std::sqrt(1e-8 + sv12[5100]);
        sv12[5102] = sv12[5099] / (2 * sv12[5101]);
        sv12[5103] = w1_c3 + sv12[5101];
        sv12[5104] = w1_c4 / (0.5 * sv12[5103]);
        sv12[5105] = 0.5 * (1.0 + sv12[5102]) * sv12[5104];
        sv12[5106] = -1 * sv12[5105] / (0.5 * sv12[5103]);
        sv12[5107] = 2 * sv12[5102] * sv12[5102];
        sv12[5108] = (2.0 + -1 * sv12[5107]) / (2 * sv12[5101]);
        sv12[5109] = 0.5 * sv12[5108] * sv12[5104];
        sv12[5110] = 0.5 * (1.0 + sv12[5102]) * sv12[5106];
        sv12[5111] = 0.5 * (1.0 + sv12[5102]) * (1.0 / (0.5 * sv12[5103]));
        sv12[5112] = sv12[5109] + sv12[5110];
        sv12[5113] = -1 * sv12[5112] + -1 * sv12[5110];
        sv12[5114] = sv12[5113] / (0.5 * sv12[5103]);
        sv12[5115] = -1 * sv12[5111] / (0.5 * sv12[5103]);
        sv12[5116] = 1.92 * w1_c4 * sv12[5114];
        sv12[5117] = 1.92 * w1_c4 * sv12[5115];
        sv12[5118] = sv12[5117] + 1.92 * sv12[5106];
        sv12[5119] = 1.92 * (1.0 / (0.5 * sv12[5103])) + 1.92 * (1.0 / (0.5 * sv12[5103]));
        sv12[5120] = w3_c4 * sv12[5116];
        sv12[5121] = w3_c4 * sv12[5118];
        sv12[5122] = w3_c4 * sv12[5119];
        sv12[5123] = sv12[5087] + sv12[5120];
        sv12[5124] = sv12[5088] + sv12[5121];
        sv12[5125] = sv12[5091] + sv12[5121];
        sv12[5126] = sv12[5092] + sv12[5122];
        sv12[5127] = w1_c3 * (0.09 * (1.44 * sv12[11]));
        sv12[5128] = 2.0 * sp[98] * sv12[5127];
        sv12[5129] = 2.0 * sp[99] * sv12[5127];
        sv12[5130] = 2.0 * sp[100] * sv12[5127];
        sv12[5131] = 2.0 * sp[101] * sv12[5127];
        sv12[5132] = 2.0 * sp[102] * sv12[5127];
        sv12[5133] = 2.0 * sp[103] * sv12[5127];
        sv12[5134] = 2.0 * sp[104] * sv12[5127];
        sv12[5135] = 2.0 * sp[105] * sv12[5127];
        sv12[5136] = 2.0 * sp[106] * sv12[5127];
        sv12[5137] = 2.0 * sp[107] * sv12[5127];
        sv12[5138] = w3_c4 * sv12[5128];
        sv12[5139] = w3_c4 * sv12[5129];
        sv12[5140] = w3_c4 * sv12[5130];
        sv12[5141] = w3_c4 * sv12[5131];
        sv12[5142] = w3_c4 * sv12[5132];
        sv12[5143] = w3_c4 * sv12[5133];
        sv12[5144] = w3_c4 * sv12[5134];
        sv12[5145] = w3_c4 * sv12[5135];
        sv12[5146] = w3_c4 * sv12[5136];
        sv12[5147] = w3_c4 * sv12[5137];
        sv12[5148] = sv12[3642] + -1 * sv12[5138];
        sv12[5149] = sv12[3643] + -1 * sv12[5139];
        sv12[5150] = sv12[3645] + -1 * sv12[5140];
        sv12[5151] = sv12[3646] + -1 * sv12[5141];
        sv12[5152] = sv12[3653] + -1 * sv12[5142];
        sv12[5153] = sv12[3655] + -1 * sv12[5143];
        sv12[5154] = sv12[3656] + -1 * sv12[5144];
        sv12[5155] = sv12[3677] + -1 * sv12[5145];
        sv12[5156] = sv12[3678] + -1 * sv12[5146];
        sv12[5157] = sv12[3685] + -1 * sv12[5147];
        sv12[5158] = w3_c4 * sv12[3200];
        sv12[5159] = w3_c4 * sv12[3201];
        sv12[5160] = w3_c4 * sv12[3202];
        sv12[5161] = w3_c4 * sv12[3203];
        sv12[5162] = sv12[4930] + -1 * sv12[5158];
        sv12[5163] = sv12[4937] + -1 * sv12[5159];
        sv12[5164] = sv12[4952] + -1 * sv12[5160];
        sv12[5165] = sv12[4958] + -1 * sv12[5161];
        sv12[5166] = 2.0 * sv12[78] * sv12[5058];
        sv12[5167] = 2.0 * sv12[78] * sv12[5059];
        sv12[5168] = 2.0 * sv12[78] * sv12[5060];
        sv12[5169] = w3_c3 * sv12[5166];
        sv12[5170] = w3_c3 * sv12[5167];
        sv12[5171] = w3_c3 * sv12[5168];
        sv12[5172] = sv12[5123] + -1 * sv12[5169];
        sv12[5173] = sv12[5124] + -1 * sv12[5170];
        sv12[5174] = sv12[5125] + -1 * sv12[5170];
        sv12[5175] = sv12[5126] + -1 * sv12[5171];
        sv12[5176] = 2.0 * sv12[727] * sv12[5049];
        sv12[5177] = 2.0 * sv12[727] * sv12[5050];
        sv12[5178] = 2.0 * sv12[728] * sv12[5049];
        sv12[5179] = 2.0 * sv12[728] * sv12[5050];
        sv12[5180] = 2.0 * sv12[729] * sv12[5049];
        sv12[5181] = 2.0 * sv12[729] * sv12[5050];
        sv12[5182] = 2.0 * sv12[730] * sv12[5049];
        sv12[5183] = 2.0 * sv12[730] * sv12[5050];
        sv12[5184] = w3_c3 * sv12[5176];
        sv12[5185] = w3_c3 * sv12[5177];
        sv12[5186] = w3_c3 * sv12[5178];
        sv12[5187] = w3_c3 * sv12[5179];
        sv12[5188] = w3_c3 * sv12[5180];
        sv12[5189] = w3_c3 * sv12[5181];
        sv12[5190] = w3_c3 * sv12[5182];
        sv12[5191] = w3_c3 * sv12[5183];
        sv12[5192] = sv12[5162] + -1 * sv12[5184];
        sv12[5193] = sv12[5002] + -1 * sv12[5185];
        sv12[5194] = sv12[5163] + -1 * sv12[5186];
        sv12[5195] = sv12[5003] + -1 * sv12[5187];
        sv12[5196] = sv12[5164] + -1 * sv12[5188];
        sv12[5197] = sv12[5007] + -1 * sv12[5189];
        sv12[5198] = sv12[5165] + -1 * sv12[5190];
        sv12[5199] = sv12[5008] + -1 * sv12[5191];
        sv12[5200] = sv12[5000] + -1 * sv12[5185];
        sv12[5201] = sv12[5001] + -1 * sv12[5187];
        sv12[5202] = sv12[5005] + -1 * sv12[5189];
        sv12[5203] = sv12[5006] + -1 * sv12[5191];
        sv12[5204] = 2.0 * sp[98] * sv12[5047];
        sv12[5205] = 2.0 * sp[99] * sv12[5047];
        sv12[5206] = 2.0 * sp[100] * sv12[5047];
        sv12[5207] = 2.0 * sp[101] * sv12[5047];
        sv12[5208] = 2.0 * sp[102] * sv12[5047];
        sv12[5209] = 2.0 * sp[103] * sv12[5047];
        sv12[5210] = 2.0 * sp[104] * sv12[5047];
        sv12[5211] = 2.0 * sp[105] * sv12[5047];
        sv12[5212] = 2.0 * sp[106] * sv12[5047];
        sv12[5213] = 2.0 * sp[107] * sv12[5047];
        sv12[5214] = w3_c3 * sv12[5204];
        sv12[5215] = w3_c3 * sv12[5205];
        sv12[5216] = w3_c3 * sv12[5206];
        sv12[5217] = w3_c3 * sv12[5207];
        sv12[5218] = w3_c3 * sv12[5208];
        sv12[5219] = w3_c3 * sv12[5209];
        sv12[5220] = w3_c3 * sv12[5210];
        sv12[5221] = w3_c3 * sv12[5211];
        sv12[5222] = w3_c3 * sv12[5212];
        sv12[5223] = w3_c3 * sv12[5213];
        sv12[5224] = sv12[5148] + -1 * sv12[5214];
        sv12[5225] = sv12[5149] + -1 * sv12[5215];
        sv12[5226] = sv12[5150] + -1 * sv12[5216];
        sv12[5227] = sv12[5151] + -1 * sv12[5217];
        sv12[5228] = sv12[5152] + -1 * sv12[5218];
        sv12[5229] = sv12[5153] + -1 * sv12[5219];
        sv12[5230] = sv12[5154] + -1 * sv12[5220];
        sv12[5231] = sv12[5155] + -1 * sv12[5221];
        sv12[5232] = sv12[5156] + -1 * sv12[5222];
        sv12[5233] = sv12[5157] + -1 * sv12[5223];
        sv12[5234] = w3_c3 * sp[3];
        sv12[5235] = w3_c3 * sp[4];
        sv12[5236] = w3_c3 * sp[6];
        sv12[5237] = w3_c3 * sp[5];
        sv12[5238] = sv12[4925] + sv12[5234];
        sv12[5239] = sv12[4926] + sv12[5235];
        sv12[5240] = sv12[4946] + sv12[5236];
        sv12[5241] = sv12[4947] + sv12[5237];
        sv12[5242] = w3_c4 * sp[3];
        sv12[5243] = w3_c4 * sp[4];
        sv12[5244] = w3_c4 * sp[6];
        sv12[5245] = w3_c4 * sp[5];
        sv12[5246] = sv12[4927] + sv12[5242];
        sv12[5247] = sv12[4928] + sv12[5243];
        sv12[5248] = sv12[4948] + sv12[5244];
        sv12[5249] = sv12[4949] + sv12[5245];
        sv12[5250] = sv12[1469] / 2 * (sp[56] / 2);
        sv12[5251] = sv12[1469] / 2 * (sp[57] / 2);
        sv12[5252] = sv12[1476] / 2 * (sp[3] / 2);
        sv12[5253] = sv12[1476] / 2 * (sp[4] / 2);
        sv12[5254] = sv12[1476] / 2 * (sp[6] / 2);
        sv12[5255] = sv12[1476] / 2 * (sp[5] / 2);
        sv12[5256] = sv12[5250] + sv12[5254];
        sv12[5257] = sv12[5251] + sv12[5255];
        sv12[5258] = sv12[1509] / 2 * (sp[58] / 2);
        sv12[5259] = sv12[1509] / 2 * (sp[59] / 2);
        sv12[5260] = sv12[5258] + sv12[5252];
        sv12[5261] = sv12[5259] + sv12[5253];
        sv12[5262] = sv12[5260] + sv12[5252];
        sv12[5263] = sv12[5261] + sv12[5253];
        sv12[5264] = sv12[5256] + sv12[5254];
        sv12[5265] = sv12[5257] + sv12[5255];
        sv12[5266] = sv12[5262] * (2.0 * sv12[96]);
        sv12[5267] = sv12[5262] * (2.0 * sv12[97]);
        sv12[5268] = sv12[5263] * (2.0 * sv12[96]);
        sv12[5269] = sv12[5263] * (2.0 * sv12[97]);
        sv12[5270] = sv12[5264] * (2.0 * sv12[96]);
        sv12[5271] = sv12[5264] * (2.0 * sv12[97]);
        sv12[5272] = sv12[5265] * (2.0 * sv12[96]);
        sv12[5273] = sv12[5265] * (2.0 * sv12[97]);
        sv12[5274] = sv12[5192] + sv12[5266];
        sv12[5275] = sv12[5200] + sv12[5267];
        sv12[5276] = sv12[5194] + sv12[5268];
        sv12[5277] = sv12[5201] + sv12[5269];
        sv12[5278] = sv12[5196] + sv12[5270];
        sv12[5279] = sv12[5202] + sv12[5271];
        sv12[5280] = sv12[5198] + sv12[5272];
        sv12[5281] = sv12[5203] + sv12[5273];
        sv12[5282] = sv12[5193] + sv12[5267];
        sv12[5283] = sv12[5195] + sv12[5269];
        sv12[5284] = sv12[5197] + sv12[5271];
        sv12[5285] = sv12[5199] + sv12[5273];
        sv12[5286] = sv12[1446] / 2 * (sv12[1469] / 2);
        sv12[5287] = sv12[1453] / 2 * (sv12[1476] / 2);
        sv12[5288] = sv12[5286] + sv12[5287];
        sv12[5289] = sv12[1493] / 2 * (sv12[1509] / 2);
        sv12[5290] = sv12[5289] + sv12[5287];
        sv12[5291] = sv12[5288] + sv12[5290];
        sv12[5292] = sv12[5291] * (2.0 * sv12[183]);
        sv12[5293] = sv12[5291] * (2.0 * sv12[184]);
        sv12[5294] = sv12[5291] * (2.0 * sv12[185]);
        sv12[5295] = sv12[5172] + sv12[5292];
        sv12[5296] = sv12[5173] + sv12[5293];
        sv12[5297] = sv12[5174] + sv12[5293];
        sv12[5298] = sv12[5175] + sv12[5294];
        sv12[5299] = 1.92 * (1.0 / (0.5 * sv12[2495])) + 1.92 * (1.0 / (0.5 * sv12[2495]));
        sv12[5300] = sv12[2501] * sv12[5299];
        sv12[5301] = sv12[4736] * sv12[4741];
        sv12[5302] = sv12[4733] * sv12[4741];
        sv12[5303] = sv12[4734] * sv12[4741];
        sv12[5304] = sv12[5300] + sv12[5301];
        sv12[5305] = sv12[5304] + sv12[5301];
        sv12[5306] = sv12[5305] * sv12[3470];
        sv12[5307] = sv12[5302] * sv12[3470];
        sv12[5308] = sv12[5303] * sv12[3470];
        sv12[5309] = sv12[5298] + sv12[5306];
        sv12[5310] = sv12[5093] + sv12[5307];
        sv12[5311] = sv12[5094] + sv12[5308];
        sv12[5312] = sv12[5097] + sv12[5307];
        sv12[5313] = sv12[5098] + sv12[5308];
        sv12[5314] = sv12[4920] + sv12[0];
        sv12[5315] = sv12[4921] + sv12[1];
        sv12[5316] = sv12[4922] + sv12[4];
        sv12[5317] = sv12[4923] + sv12[5];
        sv12[5318] = sv12[4929] + sv12[2];
        sv12[5319] = sv12[4936] + sv12[3];
        sv12[5320] = sv12[4943] + sv12[6];
        sv12[5321] = sv12[4944] + sv12[7];
        sv12[5322] = sv12[5314] * sp[272];
        sv12[5323] = sv12[5315] * sp[272];
        sv12[5324] = sv12[3632] * sp[272];
        sv12[5325] = sv12[3633] * sp[272];
        sv12[5326] = sv12[5316] * sp[272];
        sv12[5327] = sv12[5317] * sp[272];
        sv12[5328] = sv12[3636] * sp[272];
        sv12[5329] = sv12[4999] * sp[272];
        sv12[5330] = sv12[5238] * sp[272];
        sv12[5331] = sv12[5239] * sp[272];
        sv12[5332] = sv12[5246] * sp[272];
        sv12[5333] = sv12[5247] * sp[272];
        sv12[5334] = sv12[4535] * sp[272];
        sv12[5335] = sv12[4536] * sp[272];
        sv12[5336] = sv12[4537] * sp[272];
        sv12[5337] = sv12[4538] * sp[272];
        sv12[5338] = sv12[4539] * sp[272];
        sv12[5339] = sv12[4540] * sp[272];
        sv12[5340] = sv12[4541] * sp[272];
        sv12[5341] = sv12[4542] * sp[272];
        sv12[5342] = sv12[5224] * sp[272];
        sv12[5343] = sv12[5225] * sp[272];
        sv12[5344] = sv12[5318] * sp[272];
        sv12[5345] = sv12[5226] * sp[272];
        sv12[5346] = sv12[5227] * sp[272];
        sv12[5347] = sv12[5274] * sp[272];
        sv12[5348] = sv12[5275] * sp[272];
        sv12[5349] = sv12[4932] * sp[272];
        sv12[5350] = sv12[4933] * sp[272];
        sv12[5351] = sv12[4934] * sp[272];
        sv12[5352] = sv12[4935] * sp[272];
        sv12[5353] = sv12[5228] * sp[272];
        sv12[5354] = sv12[5319] * sp[272];
        sv12[5355] = sv12[5229] * sp[272];
        sv12[5356] = sv12[5230] * sp[272];
        sv12[5357] = sv12[5276] * sp[272];
        sv12[5358] = sv12[5277] * sp[272];
        sv12[5359] = sv12[4939] * sp[272];
        sv12[5360] = sv12[4940] * sp[272];
        sv12[5361] = sv12[4941] * sp[272];
        sv12[5362] = sv12[4942] * sp[272];
        sv12[5363] = sv12[3663] * sp[272];
        sv12[5364] = sv12[3664] * sp[272];
        sv12[5365] = sv12[4924] * sp[272];
        sv12[5366] = sv12[5282] * sp[272];
        sv12[5367] = sv12[5283] * sp[272];
        sv12[5368] = sv12[3666] * sp[272];
        sv12[5369] = sv12[5320] * sp[272];
        sv12[5370] = sv12[5321] * sp[272];
        sv12[5371] = sv12[3669] * sp[272];
        sv12[5372] = sv12[5004] * sp[272];
        sv12[5373] = sv12[5240] * sp[272];
        sv12[5374] = sv12[5241] * sp[272];
        sv12[5375] = sv12[5248] * sp[272];
        sv12[5376] = sv12[5249] * sp[272];
        sv12[5377] = sv12[4551] * sp[272];
        sv12[5378] = sv12[4552] * sp[272];
        sv12[5379] = sv12[4553] * sp[272];
        sv12[5380] = sv12[4554] * sp[272];
        sv12[5381] = sv12[4555] * sp[272];
        sv12[5382] = sv12[4556] * sp[272];
        sv12[5383] = sv12[4557] * sp[272];
        sv12[5384] = sv12[4558] * sp[272];
        sv12[5385] = sv12[3675] * sp[272];
        sv12[5386] = sv12[4945] * sp[272];
        sv12[5387] = sv12[5231] * sp[272];
        sv12[5388] = sv12[5232] * sp[272];
        sv12[5389] = sv12[5278] * sp[272];
        sv12[5390] = sv12[5279] * sp[272];
        sv12[5391] = sv12[4954] * sp[272];
        sv12[5392] = sv12[4955] * sp[272];
        sv12[5393] = sv12[4956] * sp[272];
        sv12[5394] = sv12[4957] * sp[272];
        sv12[5395] = sv12[5233] * sp[272];
        sv12[5396] = sv12[5280] * sp[272];
        sv12[5397] = sv12[5281] * sp[272];
        sv12[5398] = sv12[4960] * sp[272];
        sv12[5399] = sv12[4961] * sp[272];
        sv12[5400] = sv12[4962] * sp[272];
        sv12[5401] = sv12[4963] * sp[272];
        sv12[5402] = sv12[5284] * sp[272];
        sv12[5403] = sv12[5285] * sp[272];
        sv12[5404] = sv12[5295] * sp[272];
        sv12[5405] = sv12[5296] * sp[272];
        sv12[5406] = sv12[5070] * sp[272];
        sv12[5407] = sv12[5071] * sp[272];
        sv12[5408] = sv12[5089] * sp[272];
        sv12[5409] = sv12[5090] * sp[272];
        sv12[5410] = sv12[4563] * sp[272];
        sv12[5411] = sv12[4564] * sp[272];
        sv12[5412] = sv12[4565] * sp[272];
        sv12[5413] = sv12[4566] * sp[272];
        sv12[5414] = sv12[4567] * sp[272];
        sv12[5415] = sv12[4568] * sp[272];
        sv12[5416] = sv12[4569] * sp[272];
        sv12[5417] = sv12[4570] * sp[272];
        sv12[5418] = sv12[5297] * sp[272];
        sv12[5419] = sv12[5309] * sp[272];
        sv12[5420] = sv12[5074] * sp[272];
        sv12[5421] = sv12[5075] * sp[272];
        sv12[5422] = sv12[5310] * sp[272];
        sv12[5423] = sv12[5311] * sp[272];
        sv12[5424] = sv12[4571] * sp[272];
        sv12[5425] = sv12[4572] * sp[272];
        sv12[5426] = sv12[4573] * sp[272];
        sv12[5427] = sv12[4574] * sp[272];
        sv12[5428] = sv12[4575] * sp[272];
        sv12[5429] = sv12[4576] * sp[272];
        sv12[5430] = sv12[4577] * sp[272];
        sv12[5431] = sv12[4578] * sp[272];
        sv12[5432] = sv12[5076] * sp[272];
        sv12[5433] = sv12[5077] * sp[272];
        sv12[5434] = sv12[5095] * sp[272];
        sv12[5435] = sv12[5096] * sp[272];
        sv12[5436] = sv12[5078] * sp[272];
        sv12[5437] = sv12[5079] * sp[272];
        sv12[5438] = sv12[5312] * sp[272];
        sv12[5439] = sv12[5313] * sp[272];
        sv12[5440] = sv12[5023] * sp[272];
        sv12[5441] = sv12[5024] * sp[272];
        sv12[5442] = sv12[5025] * sp[272];
        sv12[5443] = sv12[5026] * sp[272];
        sv12[5444] = sv12[4499] * sp[272];
        sv12[5445] = sv12[4500] * sp[272];
        sv12[5446] = sv12[4501] * sp[272];
        sv12[5447] = sv12[4502] * sp[272];
        sv12[5448] = sv12[4503] * sp[272];
        sv12[5449] = sv12[4504] * sp[272];
        sv12[5450] = sv12[4505] * sp[272];
        sv12[5451] = sv12[4506] * sp[272];
        sv12[5452] = sv12[5027] * sp[272];
        sv12[5453] = sv12[5028] * sp[272];
        sv12[5454] = sv12[5029] * sp[272];
        sv12[5455] = sv12[5030] * sp[272];
        sv12[5456] = sv12[4507] * sp[272];
        sv12[5457] = sv12[4508] * sp[272];
        sv12[5458] = sv12[4509] * sp[272];
        sv12[5459] = sv12[4510] * sp[272];
        sv12[5460] = sv12[4511] * sp[272];
        sv12[5461] = sv12[4512] * sp[272];
        sv12[5462] = sv12[4513] * sp[272];
        sv12[5463] = sv12[4514] * sp[272];
        sv12[5464] = sv12[5031] * sp[272];
        sv12[5465] = sv12[5032] * sp[272];
        sv12[5466] = sv12[5033] * sp[272];
        sv12[5467] = sv12[5034] * sp[272];
        sv12[5468] = sv12[4515] * sp[272];
        sv12[5469] = sv12[4516] * sp[272];
        sv12[5470] = sv12[4517] * sp[272];
        sv12[5471] = sv12[4518] * sp[272];
        sv12[5472] = sv12[4519] * sp[272];
        sv12[5473] = sv12[4520] * sp[272];
        sv12[5474] = sv12[4521] * sp[272];
        sv12[5475] = sv12[4522] * sp[272];
        sv12[5476] = sv12[5035] * sp[272];
        sv12[5477] = sv12[5036] * sp[272];
        sv12[5478] = sv12[5037] * sp[272];
        sv12[5479] = sv12[5038] * sp[272];
        sv12[5480] = sv12[4523] * sp[272];
        sv12[5481] = sv12[4524] * sp[272];
        sv12[5482] = sv12[4525] * sp[272];
        sv12[5483] = sv12[4526] * sp[272];
        sv12[5484] = sv12[4527] * sp[272];
        sv12[5485] = sv12[4528] * sp[272];
        sv12[5486] = sv12[4529] * sp[272];
        sv12[5487] = sv12[4530] * sp[272];
        const double fw0 = sv12[5368] * weights12[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE118_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF0[i][j] += TF0[i] * FE118_C0_Q12[0][iq][j];
        const double fw1 = sv12[5354] * weights12[iq];
        alignas(32) double TF1[6];
        for (int i = 0; i < 6; ++i)
            TF1[i] = fw1 * FE118_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF1[i][j] += TF1[i] * FE118_C0_D10_Q12[0][iq][j];
        const double fw2 = sv12[5382] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP0[i] += fw2 * FE118_C0_Q12[0][iq][i];
        const double fw3 = sv12[5344] * weights12[iq];
        alignas(32) double TF2[6];
        for (int i = 0; i < 6; ++i)
            TF2[i] = fw3 * FE118_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF2[i][j] += TF2[i] * FE118_C0_D01_Q12[0][iq][j];
        const double fw4 = sv12[5381] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP1[i] += fw4 * FE118_C0_Q12[0][iq][i];
        const double fw5 = sv12[5380] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP2[i] += fw5 * FE118_C0_Q12[0][iq][i];
        const double fw6 = sv12[5325] * weights12[iq];
        alignas(32) double TF3[6];
        for (int i = 0; i < 6; ++i)
            TF3[i] = fw6 * FE118_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF3[i][j] += TF3[i] * FE118_C0_Q12[0][iq][j];
        const double fw7 = sv12[5370] * weights12[iq];
        alignas(32) double TF4[6];
        for (int i = 0; i < 6; ++i)
            TF4[i] = fw7 * FE118_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF4[i][j] += TF4[i] * FE118_C0_D10_Q12[0][iq][j];
        const double fw8 = sv12[5379] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP3[i] += fw8 * FE118_C0_Q12[0][iq][i];
        const double fw9 = sv12[5369] * weights12[iq];
        alignas(32) double TF5[6];
        for (int i = 0; i < 6; ++i)
            TF5[i] = fw9 * FE118_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF5[i][j] += TF5[i] * FE118_C0_D01_Q12[0][iq][j];
        const double fw10 = sv12[5377] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP4[i] += fw10 * FE118_C0_Q12[0][iq][i];
        const double fw11 = sv12[5378] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP5[i] += fw11 * FE118_C0_Q12[0][iq][i];
        const double fw12 = sv12[5384] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP6[i] += fw12 * FE118_C0_Q12[0][iq][i];
        const double fw13 = sv12[5383] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP7[i] += fw13 * FE118_C0_Q12[0][iq][i];
        const double fw14 = sv12[5374] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP8[i] += fw14 * FE118_C0_Q12[0][iq][i];
        const double fw15 = sv12[5385] * weights12[iq];
        alignas(32) double TF6[6];
        for (int i = 0; i < 6; ++i)
            TF6[i] = fw15 * FE118_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF6[i][j] += TF6[i] * FE120_C2_Q12[0][iq][j];
        const double fw16 = sv12[5373] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP9[i] += fw16 * FE118_C0_Q12[0][iq][i];
        const double fw17 = sv12[5376] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP10[i] += fw17 * FE118_C0_Q12[0][iq][i];
        const double fw18 = sv12[5386] * weights12[iq];
        alignas(32) double TF7[6];
        for (int i = 0; i < 6; ++i)
            TF7[i] = fw18 * FE118_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF7[i][j] += TF7[i] * FE120_C2_Q12[0][iq][j];
        const double fw19 = sv12[5375] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP11[i] += fw19 * FE118_C0_Q12[0][iq][i];
        alignas(32) double TF8[5];
        for (int i = 0; i < 5; ++i)
            TF8[i] = fw1 * FE118_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF8[i][j] += TF8[i] * FE118_C0_Q12[0][iq][j];
        const double fw20 = sv12[5353] * weights12[iq];
        alignas(32) double TF9[5];
        for (int i = 0; i < 5; ++i)
            TF9[i] = fw20 * FE118_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF9[i][j] += TF9[i] * FE118_C0_D10_Q12[0][iq][j];
        const double fw21 = sv12[5343] * weights12[iq];
        alignas(32) double TF10[5];
        for (int i = 0; i < 5; ++i)
            TF10[i] = fw21 * FE118_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF10[i][j] += TF10[i] * FE118_C0_D01_Q12[0][iq][j];
        const double fw22 = sv12[5323] * weights12[iq];
        alignas(32) double TF11[5];
        for (int i = 0; i < 5; ++i)
            TF11[i] = fw22 * FE118_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF11[i][j] += TF11[i] * FE118_C0_Q12[0][iq][j];
        const double fw23 = sv12[5356] * weights12[iq];
        alignas(32) double TF12[5];
        for (int i = 0; i < 5; ++i)
            TF12[i] = fw23 * FE118_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF12[i][j] += TF12[i] * FE118_C0_D10_Q12[0][iq][j];
        const double fw24 = sv12[5355] * weights12[iq];
        alignas(32) double TF13[5];
        for (int i = 0; i < 5; ++i)
            TF13[i] = fw24 * FE118_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF13[i][j] += TF13[i] * FE118_C0_D01_Q12[0][iq][j];
        const double fw25 = sv12[5360] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP12[i] += fw25 * FE118_C0_D10_Q12[0][iq][i];
        const double fw26 = sv12[5357] * weights12[iq];
        alignas(32) double TF14[5];
        for (int i = 0; i < 5; ++i)
            TF14[i] = fw26 * FE118_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF14[i][j] += TF14[i] * FE120_C2_Q12[0][iq][j];
        const double fw27 = sv12[5359] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP13[i] += fw27 * FE118_C0_D10_Q12[0][iq][i];
        const double fw28 = sv12[5362] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP14[i] += fw28 * FE118_C0_D10_Q12[0][iq][i];
        const double fw29 = sv12[5358] * weights12[iq];
        alignas(32) double TF15[5];
        for (int i = 0; i < 5; ++i)
            TF15[i] = fw29 * FE118_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF15[i][j] += TF15[i] * FE120_C2_Q12[0][iq][j];
        const double fw30 = sv12[5361] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP15[i] += fw30 * FE118_C0_D10_Q12[0][iq][i];
        for (int j = 0; j < 6; ++j)
            TP16[j] += fw2 * FE118_C0_Q12[0][iq][j];
        const double fw31 = sv12[5339] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP17[j] += fw31 * FE118_C0_Q12[0][iq][j];
        const double fw32 = sv12[5461] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP18[j] += fw32 * FE120_C2_D01_Q12[0][0][j];
        const double fw33 = sv12[5415] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP19[j] += fw33 * FE120_C2_Q12[0][iq][j];
        const double fw34 = sv12[5449] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP20[j] += fw34 * FE120_C2_D01_Q12[0][0][j];
        const double fw35 = sv12[5485] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP21[j] += fw35 * FE120_C2_D01_Q12[0][0][j];
        const double fw36 = sv12[5429] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP22[j] += fw36 * FE120_C2_Q12[0][iq][j];
        const double fw37 = sv12[5473] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP23[j] += fw37 * FE120_C2_D01_Q12[0][0][j];
        alignas(32) double TF16[5];
        for (int i = 0; i < 5; ++i)
            TF16[i] = fw3 * FE118_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF16[i][j] += TF16[i] * FE118_C0_Q12[0][iq][j];
        alignas(32) double TF17[5];
        for (int i = 0; i < 5; ++i)
            TF17[i] = fw21 * FE118_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF17[i][j] += TF17[i] * FE118_C0_D10_Q12[0][iq][j];
        const double fw38 = sv12[5342] * weights12[iq];
        alignas(32) double TF18[5];
        for (int i = 0; i < 5; ++i)
            TF18[i] = fw38 * FE118_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF18[i][j] += TF18[i] * FE118_C0_D01_Q12[0][iq][j];
        const double fw39 = sv12[5322] * weights12[iq];
        alignas(32) double TF19[5];
        for (int i = 0; i < 5; ++i)
            TF19[i] = fw39 * FE118_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF19[i][j] += TF19[i] * FE118_C0_Q12[0][iq][j];
        const double fw40 = sv12[5346] * weights12[iq];
        alignas(32) double TF20[5];
        for (int i = 0; i < 5; ++i)
            TF20[i] = fw40 * FE118_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF20[i][j] += TF20[i] * FE118_C0_D10_Q12[0][iq][j];
        const double fw41 = sv12[5345] * weights12[iq];
        alignas(32) double TF21[5];
        for (int i = 0; i < 5; ++i)
            TF21[i] = fw41 * FE118_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF21[i][j] += TF21[i] * FE118_C0_D01_Q12[0][iq][j];
        const double fw42 = sv12[5350] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP24[i] += fw42 * FE118_C0_D01_Q12[0][iq][i];
        const double fw43 = sv12[5347] * weights12[iq];
        alignas(32) double TF22[5];
        for (int i = 0; i < 5; ++i)
            TF22[i] = fw43 * FE118_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF22[i][j] += TF22[i] * FE120_C2_Q12[0][iq][j];
        const double fw44 = sv12[5349] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP25[i] += fw44 * FE118_C0_D01_Q12[0][iq][i];
        const double fw45 = sv12[5352] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP26[i] += fw45 * FE118_C0_D01_Q12[0][iq][i];
        const double fw46 = sv12[5348] * weights12[iq];
        alignas(32) double TF23[5];
        for (int i = 0; i < 5; ++i)
            TF23[i] = fw46 * FE118_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF23[i][j] += TF23[i] * FE120_C2_Q12[0][iq][j];
        const double fw47 = sv12[5351] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP27[i] += fw47 * FE118_C0_D01_Q12[0][iq][i];
        for (int j = 0; j < 6; ++j)
            TP28[j] += fw4 * FE118_C0_Q12[0][iq][j];
        const double fw48 = sv12[5338] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP29[j] += fw48 * FE118_C0_Q12[0][iq][j];
        const double fw49 = sv12[5460] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP30[j] += fw49 * FE120_C2_D01_Q12[0][0][j];
        const double fw50 = sv12[5414] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP31[j] += fw50 * FE120_C2_Q12[0][iq][j];
        const double fw51 = sv12[5448] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP32[j] += fw51 * FE120_C2_D01_Q12[0][0][j];
        const double fw52 = sv12[5484] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP33[j] += fw52 * FE120_C2_D01_Q12[0][0][j];
        const double fw53 = sv12[5428] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP34[j] += fw53 * FE120_C2_Q12[0][iq][j];
        const double fw54 = sv12[5472] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP35[j] += fw54 * FE120_C2_D01_Q12[0][0][j];
        for (int j = 0; j < 6; ++j)
            TP36[j] += fw5 * FE118_C0_Q12[0][iq][j];
        const double fw55 = sv12[5337] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP37[j] += fw55 * FE118_C0_Q12[0][iq][j];
        const double fw56 = sv12[5459] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP38[j] += fw56 * FE120_C2_D01_Q12[0][0][j];
        const double fw57 = sv12[5413] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP39[j] += fw57 * FE120_C2_Q12[0][iq][j];
        const double fw58 = sv12[5447] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP40[j] += fw58 * FE120_C2_D01_Q12[0][0][j];
        const double fw59 = sv12[5483] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP41[j] += fw59 * FE120_C2_D01_Q12[0][0][j];
        const double fw60 = sv12[5427] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP42[j] += fw60 * FE120_C2_Q12[0][iq][j];
        const double fw61 = sv12[5471] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP43[j] += fw61 * FE120_C2_D01_Q12[0][0][j];
        const double fw62 = sv12[5363] * weights12[iq];
        alignas(32) double TF24[6];
        for (int i = 0; i < 6; ++i)
            TF24[i] = fw62 * FE118_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF24[i][j] += TF24[i] * FE118_C0_Q12[0][iq][j];
        alignas(32) double TF25[6];
        for (int i = 0; i < 6; ++i)
            TF25[i] = fw22 * FE118_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF25[i][j] += TF25[i] * FE118_C0_D10_Q12[0][iq][j];
        for (int i = 0; i < 6; ++i)
            TP44[i] += fw31 * FE118_C0_Q12[0][iq][i];
        alignas(32) double TF26[6];
        for (int i = 0; i < 6; ++i)
            TF26[i] = fw39 * FE118_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF26[i][j] += TF26[i] * FE118_C0_D01_Q12[0][iq][j];
        for (int i = 0; i < 6; ++i)
            TP45[i] += fw48 * FE118_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            TP46[i] += fw55 * FE118_C0_Q12[0][iq][i];
        const double fw63 = sv12[5324] * weights12[iq];
        alignas(32) double TF27[6];
        for (int i = 0; i < 6; ++i)
            TF27[i] = fw63 * FE118_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF27[i][j] += TF27[i] * FE118_C0_Q12[0][iq][j];
        const double fw64 = sv12[5327] * weights12[iq];
        alignas(32) double TF28[6];
        for (int i = 0; i < 6; ++i)
            TF28[i] = fw64 * FE118_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF28[i][j] += TF28[i] * FE118_C0_D10_Q12[0][iq][j];
        const double fw65 = sv12[5336] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP47[i] += fw65 * FE118_C0_Q12[0][iq][i];
        const double fw66 = sv12[5326] * weights12[iq];
        alignas(32) double TF29[6];
        for (int i = 0; i < 6; ++i)
            TF29[i] = fw66 * FE118_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF29[i][j] += TF29[i] * FE118_C0_D01_Q12[0][iq][j];
        const double fw67 = sv12[5334] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP48[i] += fw67 * FE118_C0_Q12[0][iq][i];
        const double fw68 = sv12[5335] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP49[i] += fw68 * FE118_C0_Q12[0][iq][i];
        const double fw69 = sv12[5341] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP50[i] += fw69 * FE118_C0_Q12[0][iq][i];
        const double fw70 = sv12[5340] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP51[i] += fw70 * FE118_C0_Q12[0][iq][i];
        const double fw71 = sv12[5331] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP52[i] += fw71 * FE118_C0_Q12[0][iq][i];
        const double fw72 = sv12[5364] * weights12[iq];
        alignas(32) double TF30[6];
        for (int i = 0; i < 6; ++i)
            TF30[i] = fw72 * FE118_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF30[i][j] += TF30[i] * FE120_C2_Q12[0][iq][j];
        const double fw73 = sv12[5330] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP53[i] += fw73 * FE118_C0_Q12[0][iq][i];
        const double fw74 = sv12[5333] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP54[i] += fw74 * FE118_C0_Q12[0][iq][i];
        const double fw75 = sv12[5365] * weights12[iq];
        alignas(32) double TF31[6];
        for (int i = 0; i < 6; ++i)
            TF31[i] = fw75 * FE118_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF31[i][j] += TF31[i] * FE120_C2_Q12[0][iq][j];
        const double fw76 = sv12[5332] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP55[i] += fw76 * FE118_C0_Q12[0][iq][i];
        alignas(32) double TF32[5];
        for (int i = 0; i < 5; ++i)
            TF32[i] = fw7 * FE118_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF32[i][j] += TF32[i] * FE118_C0_Q12[0][iq][j];
        alignas(32) double TF33[5];
        for (int i = 0; i < 5; ++i)
            TF33[i] = fw40 * FE118_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF33[i][j] += TF33[i] * FE118_C0_D01_Q12[0][iq][j];
        alignas(32) double TF34[5];
        for (int i = 0; i < 5; ++i)
            TF34[i] = fw64 * FE118_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF34[i][j] += TF34[i] * FE118_C0_Q12[0][iq][j];
        const double fw77 = sv12[5395] * weights12[iq];
        alignas(32) double TF35[5];
        for (int i = 0; i < 5; ++i)
            TF35[i] = fw77 * FE118_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF35[i][j] += TF35[i] * FE118_C0_D10_Q12[0][iq][j];
        const double fw78 = sv12[5388] * weights12[iq];
        alignas(32) double TF36[5];
        for (int i = 0; i < 5; ++i)
            TF36[i] = fw78 * FE118_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF36[i][j] += TF36[i] * FE118_C0_D01_Q12[0][iq][j];
        const double fw79 = sv12[5399] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP56[i] += fw79 * FE118_C0_D10_Q12[0][iq][i];
        const double fw80 = sv12[5396] * weights12[iq];
        alignas(32) double TF37[5];
        for (int i = 0; i < 5; ++i)
            TF37[i] = fw80 * FE118_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF37[i][j] += TF37[i] * FE120_C2_Q12[0][iq][j];
        const double fw81 = sv12[5398] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP57[i] += fw81 * FE118_C0_D10_Q12[0][iq][i];
        const double fw82 = sv12[5401] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP58[i] += fw82 * FE118_C0_D10_Q12[0][iq][i];
        const double fw83 = sv12[5397] * weights12[iq];
        alignas(32) double TF38[5];
        for (int i = 0; i < 5; ++i)
            TF38[i] = fw83 * FE118_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF38[i][j] += TF38[i] * FE120_C2_Q12[0][iq][j];
        const double fw84 = sv12[5400] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP59[i] += fw84 * FE118_C0_D10_Q12[0][iq][i];
        for (int j = 0; j < 6; ++j)
            TP60[j] += fw8 * FE118_C0_Q12[0][iq][j];
        for (int j = 0; j < 6; ++j)
            TP61[j] += fw65 * FE118_C0_Q12[0][iq][j];
        const double fw85 = sv12[5458] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP62[j] += fw85 * FE120_C2_D01_Q12[0][0][j];
        const double fw86 = sv12[5412] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP63[j] += fw86 * FE120_C2_Q12[0][iq][j];
        const double fw87 = sv12[5446] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP64[j] += fw87 * FE120_C2_D01_Q12[0][0][j];
        const double fw88 = sv12[5482] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP65[j] += fw88 * FE120_C2_D01_Q12[0][0][j];
        const double fw89 = sv12[5426] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP66[j] += fw89 * FE120_C2_Q12[0][iq][j];
        const double fw90 = sv12[5470] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP67[j] += fw90 * FE120_C2_D01_Q12[0][0][j];
        alignas(32) double TF39[5];
        for (int i = 0; i < 5; ++i)
            TF39[i] = fw9 * FE118_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF39[i][j] += TF39[i] * FE118_C0_Q12[0][iq][j];
        alignas(32) double TF40[5];
        for (int i = 0; i < 5; ++i)
            TF40[i] = fw24 * FE118_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF40[i][j] += TF40[i] * FE118_C0_D10_Q12[0][iq][j];
        alignas(32) double TF41[5];
        for (int i = 0; i < 5; ++i)
            TF41[i] = fw66 * FE118_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF41[i][j] += TF41[i] * FE118_C0_Q12[0][iq][j];
        alignas(32) double TF42[5];
        for (int i = 0; i < 5; ++i)
            TF42[i] = fw78 * FE118_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF42[i][j] += TF42[i] * FE118_C0_D10_Q12[0][iq][j];
        const double fw91 = sv12[5387] * weights12[iq];
        alignas(32) double TF43[5];
        for (int i = 0; i < 5; ++i)
            TF43[i] = fw91 * FE118_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF43[i][j] += TF43[i] * FE118_C0_D01_Q12[0][iq][j];
        const double fw92 = sv12[5392] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP68[i] += fw92 * FE118_C0_D01_Q12[0][iq][i];
        const double fw93 = sv12[5389] * weights12[iq];
        alignas(32) double TF44[5];
        for (int i = 0; i < 5; ++i)
            TF44[i] = fw93 * FE118_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF44[i][j] += TF44[i] * FE120_C2_Q12[0][iq][j];
        const double fw94 = sv12[5391] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP69[i] += fw94 * FE118_C0_D01_Q12[0][iq][i];
        const double fw95 = sv12[5394] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP70[i] += fw95 * FE118_C0_D01_Q12[0][iq][i];
        const double fw96 = sv12[5390] * weights12[iq];
        alignas(32) double TF45[5];
        for (int i = 0; i < 5; ++i)
            TF45[i] = fw96 * FE118_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF45[i][j] += TF45[i] * FE120_C2_Q12[0][iq][j];
        const double fw97 = sv12[5393] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP71[i] += fw97 * FE118_C0_D01_Q12[0][iq][i];
        for (int j = 0; j < 6; ++j)
            TP72[j] += fw10 * FE118_C0_Q12[0][iq][j];
        for (int j = 0; j < 6; ++j)
            TP73[j] += fw67 * FE118_C0_Q12[0][iq][j];
        const double fw98 = sv12[5456] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP74[j] += fw98 * FE120_C2_D01_Q12[0][0][j];
        const double fw99 = sv12[5410] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP75[j] += fw99 * FE120_C2_Q12[0][iq][j];
        const double fw100 = sv12[5444] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP76[j] += fw100 * FE120_C2_D01_Q12[0][0][j];
        const double fw101 = sv12[5480] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP77[j] += fw101 * FE120_C2_D01_Q12[0][0][j];
        const double fw102 = sv12[5424] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP78[j] += fw102 * FE120_C2_Q12[0][iq][j];
        const double fw103 = sv12[5468] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP79[j] += fw103 * FE120_C2_D01_Q12[0][0][j];
        for (int j = 0; j < 6; ++j)
            TP80[j] += fw11 * FE118_C0_Q12[0][iq][j];
        for (int j = 0; j < 6; ++j)
            TP81[j] += fw68 * FE118_C0_Q12[0][iq][j];
        const double fw104 = sv12[5457] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP82[j] += fw104 * FE120_C2_D01_Q12[0][0][j];
        const double fw105 = sv12[5411] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP83[j] += fw105 * FE120_C2_Q12[0][iq][j];
        const double fw106 = sv12[5445] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP84[j] += fw106 * FE120_C2_D01_Q12[0][0][j];
        const double fw107 = sv12[5481] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP85[j] += fw107 * FE120_C2_D01_Q12[0][0][j];
        const double fw108 = sv12[5425] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP86[j] += fw108 * FE120_C2_Q12[0][iq][j];
        const double fw109 = sv12[5469] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP87[j] += fw109 * FE120_C2_D01_Q12[0][0][j];
        for (int j = 0; j < 6; ++j)
            TP88[j] += fw12 * FE118_C0_Q12[0][iq][j];
        for (int j = 0; j < 6; ++j)
            TP89[j] += fw69 * FE118_C0_Q12[0][iq][j];
        const double fw110 = sv12[5463] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP90[j] += fw110 * FE120_C2_D01_Q12[0][0][j];
        const double fw111 = sv12[5417] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP91[j] += fw111 * FE120_C2_Q12[0][iq][j];
        const double fw112 = sv12[5451] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP92[j] += fw112 * FE120_C2_D01_Q12[0][0][j];
        const double fw113 = sv12[5487] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP93[j] += fw113 * FE120_C2_D01_Q12[0][0][j];
        const double fw114 = sv12[5431] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP94[j] += fw114 * FE120_C2_Q12[0][iq][j];
        const double fw115 = sv12[5475] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP95[j] += fw115 * FE120_C2_D01_Q12[0][0][j];
        for (int j = 0; j < 6; ++j)
            TP96[j] += fw13 * FE118_C0_Q12[0][iq][j];
        for (int j = 0; j < 6; ++j)
            TP97[j] += fw70 * FE118_C0_Q12[0][iq][j];
        const double fw116 = sv12[5462] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP98[j] += fw116 * FE120_C2_D01_Q12[0][0][j];
        const double fw117 = sv12[5416] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP99[j] += fw117 * FE120_C2_Q12[0][iq][j];
        const double fw118 = sv12[5450] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP100[j] += fw118 * FE120_C2_D01_Q12[0][0][j];
        const double fw119 = sv12[5486] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP101[j] += fw119 * FE120_C2_D01_Q12[0][0][j];
        const double fw120 = sv12[5430] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP102[j] += fw120 * FE120_C2_Q12[0][iq][j];
        const double fw121 = sv12[5474] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP103[j] += fw121 * FE120_C2_D01_Q12[0][0][j];
        for (int j = 0; j < 6; ++j)
            TP104[j] += fw14 * FE118_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP105[j] += fw25 * FE118_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP106[j] += fw32 * FE118_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP107[j] += fw42 * FE118_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP108[j] += fw49 * FE118_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP109[j] += fw56 * FE118_C0_D11_Q12[0][0][j];
        for (int j = 0; j < 6; ++j)
            TP110[j] += fw71 * FE118_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP111[j] += fw79 * FE118_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP112[j] += fw85 * FE118_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP113[j] += fw92 * FE118_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP114[j] += fw98 * FE118_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP115[j] += fw104 * FE118_C0_D11_Q12[0][0][j];
        const double fw122 = sv12[5453] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP116[j] += fw122 * FE120_C2_D01_Q12[0][0][j];
        const double fw123 = sv12[5407] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP117[j] += fw123 * FE120_C2_Q12[0][iq][j];
        const double fw124 = sv12[5441] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP118[j] += fw124 * FE120_C2_D01_Q12[0][0][j];
        const double fw125 = sv12[5477] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP119[j] += fw125 * FE120_C2_D01_Q12[0][0][j];
        const double fw126 = sv12[5421] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP120[j] += fw126 * FE120_C2_Q12[0][iq][j];
        const double fw127 = sv12[5465] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP121[j] += fw127 * FE120_C2_D01_Q12[0][0][j];
        const double fw128 = sv12[5371] * weights12[iq];
        alignas(32) double TF46[3];
        for (int i = 0; i < 3; ++i)
            TF46[i] = fw128 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF46[i][j] += TF46[i] * FE118_C0_Q12[0][iq][j];
        alignas(32) double TF47[3];
        for (int i = 0; i < 3; ++i)
            TF47[i] = fw26 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF47[i][j] += TF47[i] * FE118_C0_D10_Q12[0][iq][j];
        for (int i = 0; i < 3; ++i)
            TP122[i] += fw33 * FE120_C2_Q12[0][iq][i];
        alignas(32) double TF48[3];
        for (int i = 0; i < 3; ++i)
            TF48[i] = fw43 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF48[i][j] += TF48[i] * FE118_C0_D01_Q12[0][iq][j];
        for (int i = 0; i < 3; ++i)
            TP123[i] += fw50 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            TP124[i] += fw57 * FE120_C2_Q12[0][iq][i];
        const double fw129 = sv12[5328] * weights12[iq];
        alignas(32) double TF49[3];
        for (int i = 0; i < 3; ++i)
            TF49[i] = fw129 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF49[i][j] += TF49[i] * FE118_C0_Q12[0][iq][j];
        alignas(32) double TF50[3];
        for (int i = 0; i < 3; ++i)
            TF50[i] = fw80 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF50[i][j] += TF50[i] * FE118_C0_D10_Q12[0][iq][j];
        for (int i = 0; i < 3; ++i)
            TP125[i] += fw86 * FE120_C2_Q12[0][iq][i];
        alignas(32) double TF51[3];
        for (int i = 0; i < 3; ++i)
            TF51[i] = fw93 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF51[i][j] += TF51[i] * FE118_C0_D01_Q12[0][iq][j];
        for (int i = 0; i < 3; ++i)
            TP126[i] += fw99 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            TP127[i] += fw105 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            TP128[i] += fw111 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            TP129[i] += fw117 * FE120_C2_Q12[0][iq][i];
        const double fw130 = sv12[5433] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP130[i] += fw130 * FE120_C2_Q12[0][iq][i];
        const double fw131 = sv12[5404] * weights12[iq];
        alignas(32) double TF52[3];
        for (int i = 0; i < 3; ++i)
            TF52[i] = fw131 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF52[i][j] += TF52[i] * FE120_C2_Q12[0][iq][j];
        const double fw132 = sv12[5432] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP131[i] += fw132 * FE120_C2_Q12[0][iq][i];
        const double fw133 = sv12[5435] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP132[i] += fw133 * FE120_C2_Q12[0][iq][i];
        const double fw134 = sv12[5418] * weights12[iq];
        alignas(32) double TF53[3];
        for (int i = 0; i < 3; ++i)
            TF53[i] = fw134 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF53[i][j] += TF53[i] * FE120_C2_Q12[0][iq][j];
        const double fw135 = sv12[5434] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP133[i] += fw135 * FE120_C2_Q12[0][iq][i];
        for (int j = 0; j < 6; ++j)
            TP134[j] += fw16 * FE118_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP135[j] += fw27 * FE118_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP136[j] += fw34 * FE118_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP137[j] += fw44 * FE118_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP138[j] += fw51 * FE118_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP139[j] += fw58 * FE118_C0_D11_Q12[0][0][j];
        for (int j = 0; j < 6; ++j)
            TP140[j] += fw73 * FE118_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP141[j] += fw81 * FE118_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP142[j] += fw87 * FE118_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP143[j] += fw94 * FE118_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP144[j] += fw100 * FE118_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP145[j] += fw106 * FE118_C0_D11_Q12[0][0][j];
        const double fw136 = sv12[5452] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP146[j] += fw136 * FE120_C2_D01_Q12[0][0][j];
        const double fw137 = sv12[5406] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP147[j] += fw137 * FE120_C2_Q12[0][iq][j];
        const double fw138 = sv12[5440] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP148[j] += fw138 * FE120_C2_D01_Q12[0][0][j];
        const double fw139 = sv12[5476] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP149[j] += fw139 * FE120_C2_D01_Q12[0][0][j];
        const double fw140 = sv12[5420] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP150[j] += fw140 * FE120_C2_Q12[0][iq][j];
        const double fw141 = sv12[5464] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP151[j] += fw141 * FE120_C2_D01_Q12[0][0][j];
        for (int j = 0; j < 6; ++j)
            TP152[j] += fw17 * FE118_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP153[j] += fw28 * FE118_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP154[j] += fw35 * FE118_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP155[j] += fw45 * FE118_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP156[j] += fw52 * FE118_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP157[j] += fw59 * FE118_C0_D11_Q12[0][0][j];
        for (int j = 0; j < 6; ++j)
            TP158[j] += fw74 * FE118_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP159[j] += fw82 * FE118_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP160[j] += fw88 * FE118_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP161[j] += fw95 * FE118_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP162[j] += fw101 * FE118_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP163[j] += fw107 * FE118_C0_D11_Q12[0][0][j];
        const double fw142 = sv12[5455] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP164[j] += fw142 * FE120_C2_D01_Q12[0][0][j];
        const double fw143 = sv12[5409] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP165[j] += fw143 * FE120_C2_Q12[0][iq][j];
        const double fw144 = sv12[5443] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP166[j] += fw144 * FE120_C2_D01_Q12[0][0][j];
        const double fw145 = sv12[5479] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP167[j] += fw145 * FE120_C2_D01_Q12[0][0][j];
        const double fw146 = sv12[5423] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP168[j] += fw146 * FE120_C2_Q12[0][iq][j];
        const double fw147 = sv12[5467] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP169[j] += fw147 * FE120_C2_D01_Q12[0][0][j];
        const double fw148 = sv12[5372] * weights12[iq];
        alignas(32) double TF54[3];
        for (int i = 0; i < 3; ++i)
            TF54[i] = fw148 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF54[i][j] += TF54[i] * FE118_C0_Q12[0][iq][j];
        const double fw149 = sv12[5367] * weights12[iq];
        alignas(32) double TF55[3];
        for (int i = 0; i < 3; ++i)
            TF55[i] = fw149 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF55[i][j] += TF55[i] * FE118_C0_D10_Q12[0][iq][j];
        for (int i = 0; i < 3; ++i)
            TP170[i] += fw36 * FE120_C2_Q12[0][iq][i];
        const double fw150 = sv12[5366] * weights12[iq];
        alignas(32) double TF56[3];
        for (int i = 0; i < 3; ++i)
            TF56[i] = fw150 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF56[i][j] += TF56[i] * FE118_C0_D01_Q12[0][iq][j];
        for (int i = 0; i < 3; ++i)
            TP171[i] += fw53 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            TP172[i] += fw60 * FE120_C2_Q12[0][iq][i];
        const double fw151 = sv12[5329] * weights12[iq];
        alignas(32) double TF57[3];
        for (int i = 0; i < 3; ++i)
            TF57[i] = fw151 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF57[i][j] += TF57[i] * FE118_C0_Q12[0][iq][j];
        const double fw152 = sv12[5403] * weights12[iq];
        alignas(32) double TF58[3];
        for (int i = 0; i < 3; ++i)
            TF58[i] = fw152 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF58[i][j] += TF58[i] * FE118_C0_D10_Q12[0][iq][j];
        for (int i = 0; i < 3; ++i)
            TP173[i] += fw89 * FE120_C2_Q12[0][iq][i];
        const double fw153 = sv12[5402] * weights12[iq];
        alignas(32) double TF59[3];
        for (int i = 0; i < 3; ++i)
            TF59[i] = fw153 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF59[i][j] += TF59[i] * FE118_C0_D01_Q12[0][iq][j];
        for (int i = 0; i < 3; ++i)
            TP174[i] += fw102 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            TP175[i] += fw108 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            TP176[i] += fw114 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            TP177[i] += fw120 * FE120_C2_Q12[0][iq][i];
        const double fw154 = sv12[5437] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP178[i] += fw154 * FE120_C2_Q12[0][iq][i];
        const double fw155 = sv12[5405] * weights12[iq];
        alignas(32) double TF60[3];
        for (int i = 0; i < 3; ++i)
            TF60[i] = fw155 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF60[i][j] += TF60[i] * FE120_C2_Q12[0][iq][j];
        const double fw156 = sv12[5436] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP179[i] += fw156 * FE120_C2_Q12[0][iq][i];
        const double fw157 = sv12[5439] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP180[i] += fw157 * FE120_C2_Q12[0][iq][i];
        const double fw158 = sv12[5419] * weights12[iq];
        alignas(32) double TF61[3];
        for (int i = 0; i < 3; ++i)
            TF61[i] = fw158 * FE120_C2_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF61[i][j] += TF61[i] * FE120_C2_Q12[0][iq][j];
        const double fw159 = sv12[5438] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP181[i] += fw159 * FE120_C2_Q12[0][iq][i];
        for (int j = 0; j < 6; ++j)
            TP182[j] += fw19 * FE118_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP183[j] += fw30 * FE118_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP184[j] += fw37 * FE118_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP185[j] += fw47 * FE118_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP186[j] += fw54 * FE118_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP187[j] += fw61 * FE118_C0_D11_Q12[0][0][j];
        for (int j = 0; j < 6; ++j)
            TP188[j] += fw76 * FE118_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP189[j] += fw84 * FE118_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP190[j] += fw90 * FE118_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP191[j] += fw97 * FE118_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP192[j] += fw103 * FE118_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP193[j] += fw109 * FE118_C0_D11_Q12[0][0][j];
        const double fw160 = sv12[5454] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP194[j] += fw160 * FE120_C2_D01_Q12[0][0][j];
        const double fw161 = sv12[5408] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP195[j] += fw161 * FE120_C2_Q12[0][iq][j];
        const double fw162 = sv12[5442] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP196[j] += fw162 * FE120_C2_D01_Q12[0][0][j];
        const double fw163 = sv12[5478] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP197[j] += fw163 * FE120_C2_D01_Q12[0][0][j];
        const double fw164 = sv12[5422] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP198[j] += fw164 * FE120_C2_Q12[0][iq][j];
        const double fw165 = sv12[5466] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP199[j] += fw165 * FE120_C2_D01_Q12[0][0][j];
    }
    std::fill(A, A + 441, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[3] = { 0, 1, 5 };
    static const int DM2[5] = { 0, 2, 3, 4, 5 };
    static const int DM3[3] = { 0, 2, 4 };
    static const int DM4[4] = { 0, 3, 4, 5 };
    static const int DM5[5] = { 6, 7, 9, 10, 11 };
    static const int DM6[3] = { 6, 7, 11 };
    static const int DM7[5] = { 6, 8, 9, 10, 11 };
    static const int DM8[3] = { 6, 8, 10 };
    static const int DM9[4] = { 6, 9, 10, 11 };
    static const int DM10[2] = { 12, 14 };
    static const int DM11[2] = { 15, 17 };
    static const int DM12[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + j] += BF0[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM0[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + DM1[j]] += FE118_C0_D02_Q12[0][0][j] * TP0[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM2[j]] += BF2[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + DM3[j]] += FE118_C0_D02_Q12[0][0][j] * TP1[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * i + DM4[j]] += FE118_C0_D11_Q12[0][0][j] * TP2[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + (j + 6)] += BF3[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM5[j]] += BF4[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + DM6[j]] += FE118_C0_D02_Q12[0][0][j] * TP3[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM7[j]] += BF5[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + DM8[j]] += FE118_C0_D02_Q12[0][0][j] * TP4[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * i + DM9[j]] += FE118_C0_D11_Q12[0][0][j] * TP5[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * i + (j + 12)] += FE120_C2_D01_Q12[0][0][j] * TP6[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * i + DM10[j]] += FE120_C2_D01_Q12[0][0][j] * TP7[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * i + (j + 15)] += FE120_C2_D01_Q12[0][0][j] * TP8[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + (j + 15)] += BF6[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * i + DM11[j]] += FE120_C2_D01_Q12[0][0][j] * TP9[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * i + (j + 18)] += FE120_C2_D01_Q12[0][0][j] * TP10[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + (j + 18)] += BF7[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * i + DM12[j]] += FE120_C2_D01_Q12[0][0][j] * TP11[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM0[i] + j] += BF8[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM0[j]] += BF9[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM2[j]] += BF10[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM0[i] + (j + 6)] += BF11[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM5[j]] += BF12[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM7[j]] += BF13[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + (j + 15)] += FE120_C2_D01_Q12[0][0][j] * TP12[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + (j + 15)] += BF14[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + DM11[j]] += FE120_C2_D01_Q12[0][0][j] * TP13[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + (j + 18)] += FE120_C2_D01_Q12[0][0][j] * TP14[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + (j + 18)] += BF15[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + DM12[j]] += FE120_C2_D01_Q12[0][0][j] * TP15[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM1[i] + j] += FE118_C0_D02_Q12[0][0][i] * TP16[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM1[i] + (j + 6)] += FE118_C0_D02_Q12[0][0][i] * TP17[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + (j + 15)] += FE118_C0_D02_Q12[0][0][i] * TP18[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + (j + 15)] += FE118_C0_D02_Q12[0][0][i] * TP19[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + DM11[j]] += FE118_C0_D02_Q12[0][0][i] * TP20[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + (j + 18)] += FE118_C0_D02_Q12[0][0][i] * TP21[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + (j + 18)] += FE118_C0_D02_Q12[0][0][i] * TP22[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + DM12[j]] += FE118_C0_D02_Q12[0][0][i] * TP23[j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM2[i] + j] += BF16[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM0[j]] += BF17[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM2[j]] += BF18[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM2[i] + (j + 6)] += BF19[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM5[j]] += BF20[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM7[j]] += BF21[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + (j + 15)] += FE120_C2_D01_Q12[0][0][j] * TP24[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + (j + 15)] += BF22[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + DM11[j]] += FE120_C2_D01_Q12[0][0][j] * TP25[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + (j + 18)] += FE120_C2_D01_Q12[0][0][j] * TP26[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + (j + 18)] += BF23[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + DM12[j]] += FE120_C2_D01_Q12[0][0][j] * TP27[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM3[i] + j] += FE118_C0_D02_Q12[0][0][i] * TP28[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM3[i] + (j + 6)] += FE118_C0_D02_Q12[0][0][i] * TP29[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + (j + 15)] += FE118_C0_D02_Q12[0][0][i] * TP30[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + (j + 15)] += FE118_C0_D02_Q12[0][0][i] * TP31[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + DM11[j]] += FE118_C0_D02_Q12[0][0][i] * TP32[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + (j + 18)] += FE118_C0_D02_Q12[0][0][i] * TP33[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + (j + 18)] += FE118_C0_D02_Q12[0][0][i] * TP34[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + DM12[j]] += FE118_C0_D02_Q12[0][0][i] * TP35[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM4[i] + j] += FE118_C0_D11_Q12[0][0][i] * TP36[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM4[i] + (j + 6)] += FE118_C0_D11_Q12[0][0][i] * TP37[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + (j + 15)] += FE118_C0_D11_Q12[0][0][i] * TP38[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + (j + 15)] += FE118_C0_D11_Q12[0][0][i] * TP39[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + DM11[j]] += FE118_C0_D11_Q12[0][0][i] * TP40[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + (j + 18)] += FE118_C0_D11_Q12[0][0][i] * TP41[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + (j + 18)] += FE118_C0_D11_Q12[0][0][i] * TP42[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + DM12[j]] += FE118_C0_D11_Q12[0][0][i] * TP43[j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + j] += BF24[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM0[j]] += BF25[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + DM1[j]] += FE118_C0_D02_Q12[0][0][j] * TP44[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM2[j]] += BF26[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + DM3[j]] += FE118_C0_D02_Q12[0][0][j] * TP45[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 6) + DM4[j]] += FE118_C0_D11_Q12[0][0][j] * TP46[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + (j + 6)] += BF27[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM5[j]] += BF28[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + DM6[j]] += FE118_C0_D02_Q12[0][0][j] * TP47[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM7[j]] += BF29[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + DM8[j]] += FE118_C0_D02_Q12[0][0][j] * TP48[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 6) + DM9[j]] += FE118_C0_D11_Q12[0][0][j] * TP49[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 6) + (j + 12)] += FE120_C2_D01_Q12[0][0][j] * TP50[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 6) + DM10[j]] += FE120_C2_D01_Q12[0][0][j] * TP51[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 6) + (j + 15)] += FE120_C2_D01_Q12[0][0][j] * TP52[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + (j + 15)] += BF30[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 6) + DM11[j]] += FE120_C2_D01_Q12[0][0][j] * TP53[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 6) + (j + 18)] += FE120_C2_D01_Q12[0][0][j] * TP54[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + (j + 18)] += BF31[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 6) + DM12[j]] += FE120_C2_D01_Q12[0][0][j] * TP55[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM5[i] + j] += BF32[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM0[j]] += BF12[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM2[j]] += BF33[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM5[i] + (j + 6)] += BF34[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM5[j]] += BF35[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM7[j]] += BF36[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + (j + 15)] += FE120_C2_D01_Q12[0][0][j] * TP56[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 15)] += BF37[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + DM11[j]] += FE120_C2_D01_Q12[0][0][j] * TP57[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + (j + 18)] += FE120_C2_D01_Q12[0][0][j] * TP58[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 18)] += BF38[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + DM12[j]] += FE120_C2_D01_Q12[0][0][j] * TP59[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM6[i] + j] += FE118_C0_D02_Q12[0][0][i] * TP60[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM6[i] + (j + 6)] += FE118_C0_D02_Q12[0][0][i] * TP61[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + (j + 15)] += FE118_C0_D02_Q12[0][0][i] * TP62[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + (j + 15)] += FE118_C0_D02_Q12[0][0][i] * TP63[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + DM11[j]] += FE118_C0_D02_Q12[0][0][i] * TP64[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + (j + 18)] += FE118_C0_D02_Q12[0][0][i] * TP65[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + (j + 18)] += FE118_C0_D02_Q12[0][0][i] * TP66[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + DM12[j]] += FE118_C0_D02_Q12[0][0][i] * TP67[j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM7[i] + j] += BF39[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM0[j]] += BF40[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM2[j]] += BF21[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM7[i] + (j + 6)] += BF41[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM5[j]] += BF42[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM7[j]] += BF43[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + (j + 15)] += FE120_C2_D01_Q12[0][0][j] * TP68[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + (j + 15)] += BF44[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + DM11[j]] += FE120_C2_D01_Q12[0][0][j] * TP69[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + (j + 18)] += FE120_C2_D01_Q12[0][0][j] * TP70[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + (j + 18)] += BF45[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + DM12[j]] += FE120_C2_D01_Q12[0][0][j] * TP71[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM8[i] + j] += FE118_C0_D02_Q12[0][0][i] * TP72[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM8[i] + (j + 6)] += FE118_C0_D02_Q12[0][0][i] * TP73[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + (j + 15)] += FE118_C0_D02_Q12[0][0][i] * TP74[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + (j + 15)] += FE118_C0_D02_Q12[0][0][i] * TP75[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + DM11[j]] += FE118_C0_D02_Q12[0][0][i] * TP76[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + (j + 18)] += FE118_C0_D02_Q12[0][0][i] * TP77[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + (j + 18)] += FE118_C0_D02_Q12[0][0][i] * TP78[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + DM12[j]] += FE118_C0_D02_Q12[0][0][i] * TP79[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM9[i] + j] += FE118_C0_D11_Q12[0][0][i] * TP80[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM9[i] + (j + 6)] += FE118_C0_D11_Q12[0][0][i] * TP81[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + (j + 15)] += FE118_C0_D11_Q12[0][0][i] * TP82[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + (j + 15)] += FE118_C0_D11_Q12[0][0][i] * TP83[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + DM11[j]] += FE118_C0_D11_Q12[0][0][i] * TP84[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + (j + 18)] += FE118_C0_D11_Q12[0][0][i] * TP85[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + (j + 18)] += FE118_C0_D11_Q12[0][0][i] * TP86[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + DM12[j]] += FE118_C0_D11_Q12[0][0][i] * TP87[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 12) + j] += FE120_C2_D01_Q12[0][0][i] * TP88[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 12) + (j + 6)] += FE120_C2_D01_Q12[0][0][i] * TP89[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + (j + 15)] += FE120_C2_D01_Q12[0][0][i] * TP90[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + (j + 15)] += FE120_C2_D01_Q12[0][0][i] * TP91[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + DM11[j]] += FE120_C2_D01_Q12[0][0][i] * TP92[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + (j + 18)] += FE120_C2_D01_Q12[0][0][i] * TP93[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + (j + 18)] += FE120_C2_D01_Q12[0][0][i] * TP94[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + DM12[j]] += FE120_C2_D01_Q12[0][0][i] * TP95[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM10[i] + j] += FE120_C2_D01_Q12[0][0][i] * TP96[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM10[i] + (j + 6)] += FE120_C2_D01_Q12[0][0][i] * TP97[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + (j + 15)] += FE120_C2_D01_Q12[0][0][i] * TP98[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + (j + 15)] += FE120_C2_D01_Q12[0][0][i] * TP99[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + DM11[j]] += FE120_C2_D01_Q12[0][0][i] * TP100[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + (j + 18)] += FE120_C2_D01_Q12[0][0][i] * TP101[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + (j + 18)] += FE120_C2_D01_Q12[0][0][i] * TP102[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + DM12[j]] += FE120_C2_D01_Q12[0][0][i] * TP103[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + j] += FE120_C2_D01_Q12[0][0][i] * TP104[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM0[j]] += FE120_C2_D01_Q12[0][0][i] * TP105[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + DM1[j]] += FE120_C2_D01_Q12[0][0][i] * TP106[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM2[j]] += FE120_C2_D01_Q12[0][0][i] * TP107[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + DM3[j]] += FE120_C2_D01_Q12[0][0][i] * TP108[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 15) + DM4[j]] += FE120_C2_D01_Q12[0][0][i] * TP109[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + (j + 6)] += FE120_C2_D01_Q12[0][0][i] * TP110[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM5[j]] += FE120_C2_D01_Q12[0][0][i] * TP111[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + DM6[j]] += FE120_C2_D01_Q12[0][0][i] * TP112[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM7[j]] += FE120_C2_D01_Q12[0][0][i] * TP113[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + DM8[j]] += FE120_C2_D01_Q12[0][0][i] * TP114[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 15) + DM9[j]] += FE120_C2_D01_Q12[0][0][i] * TP115[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 12)] += FE120_C2_D01_Q12[0][0][i] * TP90[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM10[j]] += FE120_C2_D01_Q12[0][0][i] * TP98[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 15)] += FE120_C2_D01_Q12[0][0][i] * TP116[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += FE120_C2_D01_Q12[0][0][i] * TP117[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM11[j]] += FE120_C2_D01_Q12[0][0][i] * TP118[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 18)] += FE120_C2_D01_Q12[0][0][i] * TP119[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += FE120_C2_D01_Q12[0][0][i] * TP120[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM12[j]] += FE120_C2_D01_Q12[0][0][i] * TP121[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + j] += BF46[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM0[j]] += BF47[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + DM1[j]] += FE118_C0_D02_Q12[0][0][j] * TP122[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM2[j]] += BF48[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + DM3[j]] += FE118_C0_D02_Q12[0][0][j] * TP123[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 15) + DM4[j]] += FE118_C0_D11_Q12[0][0][j] * TP124[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + (j + 6)] += BF49[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM5[j]] += BF50[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + DM6[j]] += FE118_C0_D02_Q12[0][0][j] * TP125[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM7[j]] += BF51[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + DM8[j]] += FE118_C0_D02_Q12[0][0][j] * TP126[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 15) + DM9[j]] += FE118_C0_D11_Q12[0][0][j] * TP127[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 12)] += FE120_C2_D01_Q12[0][0][j] * TP128[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM10[j]] += FE120_C2_D01_Q12[0][0][j] * TP129[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 15)] += FE120_C2_D01_Q12[0][0][j] * TP130[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += BF52[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM11[j]] += FE120_C2_D01_Q12[0][0][j] * TP131[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 18)] += FE120_C2_D01_Q12[0][0][j] * TP132[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += BF53[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM12[j]] += FE120_C2_D01_Q12[0][0][j] * TP133[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM11[i] + j] += FE120_C2_D01_Q12[0][0][i] * TP134[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM11[i] + DM0[j]] += FE120_C2_D01_Q12[0][0][i] * TP135[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM11[i] + DM1[j]] += FE120_C2_D01_Q12[0][0][i] * TP136[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM11[i] + DM2[j]] += FE120_C2_D01_Q12[0][0][i] * TP137[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM11[i] + DM3[j]] += FE120_C2_D01_Q12[0][0][i] * TP138[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM11[i] + DM4[j]] += FE120_C2_D01_Q12[0][0][i] * TP139[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM11[i] + (j + 6)] += FE120_C2_D01_Q12[0][0][i] * TP140[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM11[i] + DM5[j]] += FE120_C2_D01_Q12[0][0][i] * TP141[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM11[i] + DM6[j]] += FE120_C2_D01_Q12[0][0][i] * TP142[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM11[i] + DM7[j]] += FE120_C2_D01_Q12[0][0][i] * TP143[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM11[i] + DM8[j]] += FE120_C2_D01_Q12[0][0][i] * TP144[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM11[i] + DM9[j]] += FE120_C2_D01_Q12[0][0][i] * TP145[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + (j + 12)] += FE120_C2_D01_Q12[0][0][i] * TP92[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + DM10[j]] += FE120_C2_D01_Q12[0][0][i] * TP100[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + (j + 15)] += FE120_C2_D01_Q12[0][0][i] * TP146[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM11[i] + (j + 15)] += FE120_C2_D01_Q12[0][0][i] * TP147[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + DM11[j]] += FE120_C2_D01_Q12[0][0][i] * TP148[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + (j + 18)] += FE120_C2_D01_Q12[0][0][i] * TP149[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM11[i] + (j + 18)] += FE120_C2_D01_Q12[0][0][i] * TP150[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + DM12[j]] += FE120_C2_D01_Q12[0][0][i] * TP151[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + j] += FE120_C2_D01_Q12[0][0][i] * TP152[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM0[j]] += FE120_C2_D01_Q12[0][0][i] * TP153[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + DM1[j]] += FE120_C2_D01_Q12[0][0][i] * TP154[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM2[j]] += FE120_C2_D01_Q12[0][0][i] * TP155[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + DM3[j]] += FE120_C2_D01_Q12[0][0][i] * TP156[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 18) + DM4[j]] += FE120_C2_D01_Q12[0][0][i] * TP157[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + (j + 6)] += FE120_C2_D01_Q12[0][0][i] * TP158[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM5[j]] += FE120_C2_D01_Q12[0][0][i] * TP159[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + DM6[j]] += FE120_C2_D01_Q12[0][0][i] * TP160[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM7[j]] += FE120_C2_D01_Q12[0][0][i] * TP161[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + DM8[j]] += FE120_C2_D01_Q12[0][0][i] * TP162[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 18) + DM9[j]] += FE120_C2_D01_Q12[0][0][i] * TP163[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 12)] += FE120_C2_D01_Q12[0][0][i] * TP93[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM10[j]] += FE120_C2_D01_Q12[0][0][i] * TP101[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 15)] += FE120_C2_D01_Q12[0][0][i] * TP164[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += FE120_C2_D01_Q12[0][0][i] * TP165[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM11[j]] += FE120_C2_D01_Q12[0][0][i] * TP166[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 18)] += FE120_C2_D01_Q12[0][0][i] * TP167[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += FE120_C2_D01_Q12[0][0][i] * TP168[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM12[j]] += FE120_C2_D01_Q12[0][0][i] * TP169[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + j] += BF54[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM0[j]] += BF55[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + DM1[j]] += FE118_C0_D02_Q12[0][0][j] * TP170[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM2[j]] += BF56[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + DM3[j]] += FE118_C0_D02_Q12[0][0][j] * TP171[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 18) + DM4[j]] += FE118_C0_D11_Q12[0][0][j] * TP172[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + (j + 6)] += BF57[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM5[j]] += BF58[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + DM6[j]] += FE118_C0_D02_Q12[0][0][j] * TP173[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM7[j]] += BF59[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + DM8[j]] += FE118_C0_D02_Q12[0][0][j] * TP174[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 18) + DM9[j]] += FE118_C0_D11_Q12[0][0][j] * TP175[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 12)] += FE120_C2_D01_Q12[0][0][j] * TP176[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM10[j]] += FE120_C2_D01_Q12[0][0][j] * TP177[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 15)] += FE120_C2_D01_Q12[0][0][j] * TP178[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += BF60[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM11[j]] += FE120_C2_D01_Q12[0][0][j] * TP179[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 18)] += FE120_C2_D01_Q12[0][0][j] * TP180[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += BF61[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM12[j]] += FE120_C2_D01_Q12[0][0][j] * TP181[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM12[i] + j] += FE120_C2_D01_Q12[0][0][i] * TP182[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM12[i] + DM0[j]] += FE120_C2_D01_Q12[0][0][i] * TP183[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM12[i] + DM1[j]] += FE120_C2_D01_Q12[0][0][i] * TP184[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM12[i] + DM2[j]] += FE120_C2_D01_Q12[0][0][i] * TP185[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM12[i] + DM3[j]] += FE120_C2_D01_Q12[0][0][i] * TP186[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM12[i] + DM4[j]] += FE120_C2_D01_Q12[0][0][i] * TP187[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM12[i] + (j + 6)] += FE120_C2_D01_Q12[0][0][i] * TP188[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM12[i] + DM5[j]] += FE120_C2_D01_Q12[0][0][i] * TP189[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM12[i] + DM6[j]] += FE120_C2_D01_Q12[0][0][i] * TP190[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM12[i] + DM7[j]] += FE120_C2_D01_Q12[0][0][i] * TP191[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM12[i] + DM8[j]] += FE120_C2_D01_Q12[0][0][i] * TP192[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM12[i] + DM9[j]] += FE120_C2_D01_Q12[0][0][i] * TP193[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + (j + 12)] += FE120_C2_D01_Q12[0][0][i] * TP95[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + DM10[j]] += FE120_C2_D01_Q12[0][0][i] * TP103[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + (j + 15)] += FE120_C2_D01_Q12[0][0][i] * TP194[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM12[i] + (j + 15)] += FE120_C2_D01_Q12[0][0][i] * TP195[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + DM11[j]] += FE120_C2_D01_Q12[0][0][i] * TP196[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + (j + 18)] += FE120_C2_D01_Q12[0][0][i] * TP197[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM12[i] + (j + 18)] += FE120_C2_D01_Q12[0][0][i] * TP198[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + DM12[j]] += FE120_C2_D01_Q12[0][0][i] * TP199[j];
  }

};


class ranspseudotimestepping_exterior_facet_integral_9_3: public ufc::exterior_facet_integral
{
public:

  ranspseudotimestepping_exterior_facet_integral_9_3() : ufc::exterior_facet_integral()
  {

  }

  ~ranspseudotimestepping_exterior_facet_integral_9_3() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 53
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.1739274225687268, 0.3260725774312731, 0.3260725774312731, 0.1739274225687268 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE59_C0_D01_F_Q4[3][4][5] =
        { { { 1.0, -0.7222726231881047, 3.722272623188091, -0.2777273768118826, -3.722272623188107 },
            { 1.0, 0.3200379128302891, 2.679962087169697, -1.320037912830275, -2.679962087169714 },
            { 1.0, 1.679962087169715, 1.320037912830271, -2.679962087169701, -1.320037912830287 },
            { 1.0, 2.722272623188108, 0.2777273768118786, -3.722272623188096, -0.2777273768118922 } },
          { { -2.72227262318811, -0.722272623188105, 0.0, 3.444545246376218, 0.0 },
            { -1.679962087169718, 0.3200379128302888, 0.0, 1.359924174339433, 0.0 },
            { -0.3200379128302928, 1.679962087169715, 0.0, -1.359924174339417, 0.0 },
            { 0.7222726231881, 2.722272623188108, 0.0, -3.444545246376202, 0.0 } },
          { { -2.72227262318811, -1.0, 0.2777273768118848, 3.722272623188112, -0.2777273768118925 },
            { -1.679962087169717, -1.0, 1.320037912830276, 2.679962087169721, -1.320037912830287 },
            { -0.3200379128302917, -1.0, 2.6799620871697, 1.320037912830298, -2.679962087169714 },
            { 0.7222726231880999, -1.0, 3.722272623188092, 0.2777273768119067, -3.722272623188106 } } };
    alignas(32) static const double FE59_C0_D10_F_Q4[3][4][5] =
        { { { 1.0, 2.722272623188104, 0.2777273768118936, -0.2777273768118936, -3.722272623188106 },
            { 1.0, 1.679962087169712, 1.320037912830285, -1.320037912830285, -2.679962087169713 },
            { 1.0, 0.3200379128302879, 2.679962087169708, -2.679962087169708, -1.320037912830288 },
            { 1.0, -0.7222726231881051, 3.722272623188099, -3.722272623188099, -0.2777273768118945 } },
          { { -2.722272623188107, -1.0, 0.277727376811893, -0.277727376811893, 3.72227262318811 },
            { -1.679962087169713, -1.0, 1.320037912830285, -1.320037912830285, 2.679962087169716 },
            { -0.3200379128302884, -1.0, 2.679962087169709, -2.679962087169709, 1.320037912830289 },
            { 0.7222726231881045, -1.0, 3.722272623188099, -3.722272623188099, 0.2777273768118963 } },
          { { -2.722272623188106, -0.7222726231881095, 0.0, 0.0, 3.444545246376216 },
            { -1.679962087169712, 0.3200379128302852, 0.0, 0.0, 1.359924174339427 },
            { -0.3200379128302857, 1.679962087169712, 0.0, 0.0, -1.359924174339426 },
            { 0.7222726231881069, 2.722272623188104, 0.0, 0.0, -3.444545246376211 } } };
    alignas(32) static const double FE59_C0_F_Q4[3][4][6] =
        { { { 0.0, 0.8013460293699309, -0.05979028222412166, 0.2584442528541909, 0.0, 0.0 },
            { 0.0, 0.2277840767909521, -0.1121969667939041, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.1121969667939041, 0.227784076790952, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.05979028222412169, 0.8013460293699309, 0.2584442528541908, 0.0, 0.0 } },
          { { 0.8013460293699309, 0.0, -0.05979028222412166, 0.0, 0.2584442528541908, 0.0 },
            { 0.2277840767909521, 0.0, -0.1121969667939041, 0.0, 0.8844128900029518, 0.0 },
            { -0.1121969667939041, 0.0, 0.2277840767909521, 0.0, 0.8844128900029519, 0.0 },
            { -0.05979028222412166, 0.0, 0.8013460293699309, 0.0, 0.2584442528541906, 0.0 } },
          { { 0.8013460293699309, -0.05979028222412169, 0.0, 0.0, 0.0, 0.2584442528541908 },
            { 0.2277840767909521, -0.1121969667939041, 0.0, 0.0, 0.0, 0.8844128900029519 },
            { -0.1121969667939041, 0.2277840767909522, 0.0, 0.0, 0.0, 0.884412890002952 },
            { -0.05979028222412169, 0.8013460293699308, 0.0, 0.0, 0.0, 0.2584442528541909 } } };
    alignas(32) static const double FE61_C2_D01_F_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE61_C2_F_Q4[3][4][3] =
        { { { 0.0, 0.9305681557970263, 0.06943184420297369 },
            { 0.0, 0.6699905217924281, 0.3300094782075718 },
            { 0.0, 0.3300094782075719, 0.6699905217924279 },
            { 0.0, 0.06943184420297382, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.0, 0.06943184420297369 },
            { 0.6699905217924281, 0.0, 0.3300094782075718 },
            { 0.3300094782075719, 0.0, 0.669990521792428 },
            { 0.06943184420297382, 0.0, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.06943184420297367, 0.0 },
            { 0.6699905217924281, 0.3300094782075718, 0.0 },
            { 0.3300094782075719, 0.6699905217924281, 0.0 },
            { 0.06943184420297374, 0.9305681557970263, 0.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE61_C2_D01_F_Q4[0][0][0] + coordinate_dofs[2] * FE61_C2_D01_F_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE61_C2_D01_F_Q4[0][0][0] + coordinate_dofs[5] * FE61_C2_D01_F_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE61_C2_D01_F_Q4[0][0][0] + coordinate_dofs[4] * FE61_C2_D01_F_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE61_C2_D01_F_Q4[0][0][0] + coordinate_dofs[3] * FE61_C2_D01_F_Q4[0][0][1];
    const double w3_d1_c3 = w[3][15] * FE61_C2_D01_F_Q4[0][0][0] + w[3][17] * FE61_C2_D01_F_Q4[0][0][1];
    double w3_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c3 += w[3][ic + 15] * FE61_C2_D01_F_Q4[0][0][ic];
    const double w3_d1_c4 = w[3][18] * FE61_C2_D01_F_Q4[0][0][0] + w[3][20] * FE61_C2_D01_F_Q4[0][0][1];
    double w3_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0_c4 += w[3][ic + 18] * FE61_C2_D01_F_Q4[0][0][ic];
    const double w1_d1_c3 = w[1][15] * FE61_C2_D01_F_Q4[0][0][0] + w[1][17] * FE61_C2_D01_F_Q4[0][0][1];
    double w1_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c3 += w[1][ic + 15] * FE61_C2_D01_F_Q4[0][0][ic];
    const double w1_d1_c4 = w[1][18] * FE61_C2_D01_F_Q4[0][0][0] + w[1][20] * FE61_C2_D01_F_Q4[0][0][1];
    double w1_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c4 += w[1][ic + 18] * FE61_C2_D01_F_Q4[0][0][ic];
    alignas(32) double sp[92];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = triangle_reference_facet_normals[facet][1] * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = triangle_reference_facet_normals[facet][0] * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet][0] * sp[9];
    sp[11] = -1 * J_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[20] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[21] = sp[19] + sp[20];
    sp[22] = std::sqrt(sp[21]);
    sp[23] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[24] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[25] = sp[23] + sp[24];
    sp[26] = std::sqrt(sp[25]);
    sp[27] = sp[22] * sp[26];
    sp[28] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[29] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[30] = sp[28] + sp[29];
    sp[31] = std::sqrt(sp[30]);
    sp[32] = sp[27] * sp[31];
    sp[33] = triangle_reference_cell_volume * sp[2];
    sp[34] = std::abs(sp[33]);
    sp[35] = sp[32] / (4.0 * sp[34]);
    sp[36] = w3_d1_c3 * sp[3];
    sp[37] = w3_d0_c3 * sp[5];
    sp[38] = sp[36] + sp[37];
    sp[39] = sp[38] * sp[17];
    sp[40] = w3_d0_c3 * sp[9];
    sp[41] = w3_d1_c3 * sp[11];
    sp[42] = sp[40] + sp[41];
    sp[43] = sp[42] * sp[18];
    sp[44] = sp[39] + sp[43];
    sp[45] = w3_d1_c4 * sp[3];
    sp[46] = w3_d0_c4 * sp[5];
    sp[47] = sp[45] + sp[46];
    sp[48] = sp[47] * sp[17];
    sp[49] = w3_d0_c4 * sp[9];
    sp[50] = w3_d1_c4 * sp[11];
    sp[51] = sp[49] + sp[50];
    sp[52] = sp[51] * sp[18];
    sp[53] = sp[48] + sp[52];
    sp[54] = w1_d1_c3 * sp[3];
    sp[55] = w1_d0_c3 * sp[5];
    sp[56] = sp[54] + sp[55];
    sp[57] = sp[56] * sp[17];
    sp[58] = w1_d0_c3 * sp[9];
    sp[59] = w1_d1_c3 * sp[11];
    sp[60] = sp[58] + sp[59];
    sp[61] = sp[60] * sp[18];
    sp[62] = sp[57] + sp[61];
    sp[63] = sp[3] * sp[17];
    sp[64] = sp[5] * sp[17];
    sp[65] = sp[11] * sp[18];
    sp[66] = sp[9] * sp[18];
    sp[67] = sp[63] + sp[65];
    sp[68] = sp[64] + sp[66];
    sp[69] = w1_d1_c4 * sp[3];
    sp[70] = w1_d0_c4 * sp[5];
    sp[71] = sp[69] + sp[70];
    sp[72] = sp[71] * sp[17];
    sp[73] = w1_d0_c4 * sp[9];
    sp[74] = w1_d1_c4 * sp[11];
    sp[75] = sp[73] + sp[74];
    sp[76] = sp[75] * sp[18];
    sp[77] = sp[72] + sp[76];
    sp[78] = sp[11] + sp[11];
    sp[79] = sp[9] + sp[9];
    sp[80] = sp[5] + sp[5];
    sp[81] = sp[3] + sp[3];
    sp[82] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[83] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[84] = sp[82] + sp[83];
    sp[85] = sp[84] * sp[84];
    sp[86] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[87] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[88] = sp[86] + sp[87];
    sp[89] = sp[88] * sp[88];
    sp[90] = sp[85] + sp[89];
    sp[91] = std::sqrt(sp[90]);
    alignas(32) double BF0[6][6] = {};
    alignas(32) double BF1[6][6] = {};
    alignas(32) double TP0[6] = {};
    alignas(32) double BF2[6][3] = {};
    alignas(32) double TP1[6] = {};
    alignas(32) double TP2[6] = {};
    alignas(32) double BF3[6][3] = {};
    alignas(32) double TP3[6] = {};
    alignas(32) double BF4[5][3] = {};
    alignas(32) double BF5[5][3] = {};
    alignas(32) double BF6[5][3] = {};
    alignas(32) double BF7[5][3] = {};
    alignas(32) double BF8[6][6] = {};
    alignas(32) double BF9[6][6] = {};
    alignas(32) double TP4[6] = {};
    alignas(32) double BF10[6][3] = {};
    alignas(32) double TP5[6] = {};
    alignas(32) double TP6[6] = {};
    alignas(32) double BF11[6][3] = {};
    alignas(32) double TP7[6] = {};
    alignas(32) double BF12[5][3] = {};
    alignas(32) double BF13[5][3] = {};
    alignas(32) double BF14[5][3] = {};
    alignas(32) double BF15[5][3] = {};
    alignas(32) double TP8[6] = {};
    alignas(32) double TP9[6] = {};
    alignas(32) double TP10[3] = {};
    alignas(32) double TP11[3] = {};
    alignas(32) double BF16[3][6] = {};
    alignas(32) double BF17[3][5] = {};
    alignas(32) double BF18[3][5] = {};
    alignas(32) double BF19[3][6] = {};
    alignas(32) double BF20[3][5] = {};
    alignas(32) double BF21[3][5] = {};
    alignas(32) double TP12[3] = {};
    alignas(32) double BF22[3][3] = {};
    alignas(32) double TP13[3] = {};
    alignas(32) double TP14[3] = {};
    alignas(32) double BF23[3][3] = {};
    alignas(32) double TP15[3] = {};
    alignas(32) double TP16[6] = {};
    alignas(32) double TP17[6] = {};
    alignas(32) double TP18[3] = {};
    alignas(32) double TP19[3] = {};
    alignas(32) double TP20[6] = {};
    alignas(32) double TP21[6] = {};
    alignas(32) double TP22[3] = {};
    alignas(32) double TP23[3] = {};
    alignas(32) double BF24[3][6] = {};
    alignas(32) double BF25[3][5] = {};
    alignas(32) double BF26[3][5] = {};
    alignas(32) double BF27[3][6] = {};
    alignas(32) double BF28[3][5] = {};
    alignas(32) double BF29[3][5] = {};
    alignas(32) double TP24[3] = {};
    alignas(32) double TP25[3] = {};
    alignas(32) double TP26[3] = {};
    alignas(32) double BF30[3][3] = {};
    alignas(32) double TP27[3] = {};
    alignas(32) double TP28[6] = {};
    alignas(32) double TP29[6] = {};
    alignas(32) double TP30[3] = {};
    alignas(32) double TP31[3] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w3_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c4 += w[3][ic + 18] * FE61_C2_F_Q4[facet][iq][ic];
        double w1_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c3 += w[1][ic + 15] * FE61_C2_F_Q4[facet][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4 += w[4][ic] * FE61_C2_F_Q4[facet][iq][ic];
        double w1_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c4 += w[1][ic + 18] * FE61_C2_F_Q4[facet][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE59_C0_F_Q4[facet][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE59_C0_F_Q4[facet][iq][ic];
        double w3_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c3 += w[3][ic + 15] * FE61_C2_F_Q4[facet][iq][ic];
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c0 += w[3][ic] * FE59_C0_F_Q4[facet][iq][ic];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c1 += w[3][ic + 6] * FE59_C0_F_Q4[facet][iq][ic];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE61_C2_F_Q4[facet][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE61_C2_F_Q4[facet][iq][ic];
        const double w1_d1_c0 = w[1][0] * FE59_C0_D01_F_Q4[facet][iq][0] + w[1][2] * FE59_C0_D01_F_Q4[facet][iq][1] + w[1][3] * FE59_C0_D01_F_Q4[facet][iq][2] + w[1][4] * FE59_C0_D01_F_Q4[facet][iq][3] + w[1][5] * FE59_C0_D01_F_Q4[facet][iq][4];
        const double w1_d0_c0 = w[1][0] * FE59_C0_D10_F_Q4[facet][iq][0] + w[1][1] * FE59_C0_D10_F_Q4[facet][iq][1] + w[1][3] * FE59_C0_D10_F_Q4[facet][iq][2] + w[1][4] * FE59_C0_D10_F_Q4[facet][iq][3] + w[1][5] * FE59_C0_D10_F_Q4[facet][iq][4];
        const double w1_d0_c1 = w[1][6] * FE59_C0_D10_F_Q4[facet][iq][0] + w[1][7] * FE59_C0_D10_F_Q4[facet][iq][1] + w[1][9] * FE59_C0_D10_F_Q4[facet][iq][2] + w[1][10] * FE59_C0_D10_F_Q4[facet][iq][3] + w[1][11] * FE59_C0_D10_F_Q4[facet][iq][4];
        const double w1_d1_c1 = w[1][6] * FE59_C0_D01_F_Q4[facet][iq][0] + w[1][8] * FE59_C0_D01_F_Q4[facet][iq][1] + w[1][9] * FE59_C0_D01_F_Q4[facet][iq][2] + w[1][10] * FE59_C0_D01_F_Q4[facet][iq][3] + w[1][11] * FE59_C0_D01_F_Q4[facet][iq][4];
        const double w3_d1_c0 = w[3][0] * FE59_C0_D01_F_Q4[facet][iq][0] + w[3][2] * FE59_C0_D01_F_Q4[facet][iq][1] + w[3][3] * FE59_C0_D01_F_Q4[facet][iq][2] + w[3][4] * FE59_C0_D01_F_Q4[facet][iq][3] + w[3][5] * FE59_C0_D01_F_Q4[facet][iq][4];
        const double w3_d0_c0 = w[3][0] * FE59_C0_D10_F_Q4[facet][iq][0] + w[3][1] * FE59_C0_D10_F_Q4[facet][iq][1] + w[3][3] * FE59_C0_D10_F_Q4[facet][iq][2] + w[3][4] * FE59_C0_D10_F_Q4[facet][iq][3] + w[3][5] * FE59_C0_D10_F_Q4[facet][iq][4];
        const double w3_d0_c1 = w[3][6] * FE59_C0_D10_F_Q4[facet][iq][0] + w[3][7] * FE59_C0_D10_F_Q4[facet][iq][1] + w[3][9] * FE59_C0_D10_F_Q4[facet][iq][2] + w[3][10] * FE59_C0_D10_F_Q4[facet][iq][3] + w[3][11] * FE59_C0_D10_F_Q4[facet][iq][4];
        const double w3_d1_c1 = w[3][6] * FE59_C0_D01_F_Q4[facet][iq][0] + w[3][8] * FE59_C0_D01_F_Q4[facet][iq][1] + w[3][9] * FE59_C0_D01_F_Q4[facet][iq][2] + w[3][10] * FE59_C0_D01_F_Q4[facet][iq][3] + w[3][11] * FE59_C0_D01_F_Q4[facet][iq][4];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c0 += w[1][ic] * FE59_C0_F_Q4[facet][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c1 += w[1][ic + 6] * FE59_C0_F_Q4[facet][iq][ic];
        alignas(32) double sv4[705];
        sv4[0] = std::exp(w4);
        sv4[1] = w1_c3 * (0.09 * sv4[0]);
        sv4[2] = w1_c3 * sv4[1];
        sv4[3] = w1_c4 * w1_c4;
        sv4[4] = std::sqrt(1e-8 + sv4[3]);
        sv4[5] = w1_c4 + sv4[4];
        sv4[6] = sv4[2] / (0.5 * sv4[5]);
        sv4[7] = w2_c1 * sp[17];
        sv4[8] = w2_c0 * sp[18];
        sv4[9] = sv4[7] + sv4[8];
        sv4[10] = std::cosh(100.0 * sv4[9]);
        sv4[11] = std::cosh(2.0 * (100.0 * sv4[9]));
        sv4[12] = 2.0 * sv4[10] / (1.0 + sv4[11]);
        sv4[13] = 100.0 * sp[17] * std::pow(sv4[12], 2);
        sv4[14] = 100.0 * sp[18] * std::pow(sv4[12], 2);
        sv4[15] = (0.0001 + sv4[6] / 1.3) * (100000.0 * (-1 * (0.5 * sv4[13])));
        sv4[16] = (0.0001 + sv4[6] / 1.3) * (100000.0 * (-1 * (0.5 * sv4[14])));
        sv4[17] = sv4[15] * (1.0 / (2.0 * sp[35]));
        sv4[18] = sv4[16] * (1.0 / (2.0 * sp[35]));
        sv4[19] = sv4[1] + sv4[1];
        sv4[20] = w1_c4 + w1_c4;
        sv4[21] = sv4[20] / (2 * sv4[4]);
        sv4[22] = 0.5 * (1.0 + sv4[21]) * sv4[6];
        sv4[23] = -1 * sv4[22] / (0.5 * sv4[5]);
        sv4[24] = sv4[19] / (0.5 * sv4[5]);
        sv4[25] = 100000.0 * (-1 * (0.5 * sv4[13])) * (sv4[23] / 1.3);
        sv4[26] = 100000.0 * (-1 * (0.5 * sv4[13])) * (sv4[24] / 1.3);
        sv4[27] = 100000.0 * (-1 * (0.5 * sv4[14])) * (sv4[23] / 1.3);
        sv4[28] = 100000.0 * (-1 * (0.5 * sv4[14])) * (sv4[24] / 1.3);
        sv4[29] = sv4[25] * (1.0 / (2.0 * sp[35]));
        sv4[30] = sv4[27] * (1.0 / (2.0 * sp[35]));
        sv4[31] = sv4[26] * (1.0 / (2.0 * sp[35]));
        sv4[32] = sv4[28] * (1.0 / (2.0 * sp[35]));
        sv4[33] = w1_c4 * sv4[29];
        sv4[34] = w1_c4 * sv4[30];
        sv4[35] = w1_c4 * sv4[31];
        sv4[36] = w1_c4 * sv4[32];
        sv4[37] = sv4[33] + sv4[17];
        sv4[38] = sv4[34] + sv4[18];
        sv4[39] = w3_c4 * sv4[37];
        sv4[40] = w3_c4 * sv4[38];
        sv4[41] = w3_c4 * sv4[35];
        sv4[42] = w3_c4 * sv4[36];
        sv4[43] = std::tanh(100.0 * sv4[9]);
        sv4[44] = 0.09 * sv4[0] + 0.09 * sv4[0];
        sv4[45] = 0.5 * (1.0 + sv4[21]) * sv4[24];
        sv4[46] = 0.5 * (1.0 + sv4[21]) * sv4[23];
        sv4[47] = 2 * sv4[21] * sv4[21];
        sv4[48] = (2.0 + -1 * sv4[47]) / (2 * sv4[4]);
        sv4[49] = 0.5 * sv4[48] * sv4[6];
        sv4[50] = sv4[49] + sv4[46];
        sv4[51] = -1 * sv4[50] + -1 * sv4[46];
        sv4[52] = -1 * sv4[45] / (0.5 * sv4[5]);
        sv4[53] = sv4[51] / (0.5 * sv4[5]);
        sv4[54] = sv4[44] / (0.5 * sv4[5]);
        sv4[55] = 100000.0 * (0.5 + -1 * (0.5 * sv4[43])) * (sv4[52] / 1.3);
        sv4[56] = 100000.0 * (0.5 + -1 * (0.5 * sv4[43])) * (sv4[53] / 1.3);
        sv4[57] = 100000.0 * (0.5 + -1 * (0.5 * sv4[43])) * (sv4[54] / 1.3);
        sv4[58] = sv4[55] * (1.0 / (2.0 * sp[35]));
        sv4[59] = sv4[56] * (1.0 / (2.0 * sp[35]));
        sv4[60] = sv4[57] * (1.0 / (2.0 * sp[35]));
        sv4[61] = w1_c4 * sv4[58];
        sv4[62] = w1_c4 * sv4[59];
        sv4[63] = w1_c4 * sv4[60];
        sv4[64] = 100000.0 * (0.5 + -1 * (0.5 * sv4[43])) * (sv4[23] / 1.3);
        sv4[65] = 100000.0 * (0.5 + -1 * (0.5 * sv4[43])) * (sv4[24] / 1.3);
        sv4[66] = sv4[64] * (1.0 / (2.0 * sp[35]));
        sv4[67] = sv4[65] * (1.0 / (2.0 * sp[35]));
        sv4[68] = sv4[62] + sv4[66];
        sv4[69] = sv4[61] + sv4[67];
        sv4[70] = sv4[68] + sv4[66];
        sv4[71] = w3_c4 * sv4[69];
        sv4[72] = w3_c4 * sv4[70];
        sv4[73] = w3_c4 * sv4[63];
        sv4[74] = (0.0001 + sv4[6]) * (100000.0 * (-1 * (0.5 * sv4[13])));
        sv4[75] = (0.0001 + sv4[6]) * (100000.0 * (-1 * (0.5 * sv4[14])));
        sv4[76] = sv4[74] * (1.0 / (2.0 * sp[35]));
        sv4[77] = sv4[75] * (1.0 / (2.0 * sp[35]));
        sv4[78] = 100000.0 * (-1 * (0.5 * sv4[13])) * sv4[23];
        sv4[79] = 100000.0 * (-1 * (0.5 * sv4[13])) * sv4[24];
        sv4[80] = 100000.0 * (-1 * (0.5 * sv4[14])) * sv4[23];
        sv4[81] = 100000.0 * (-1 * (0.5 * sv4[14])) * sv4[24];
        sv4[82] = sv4[78] * (1.0 / (2.0 * sp[35]));
        sv4[83] = sv4[80] * (1.0 / (2.0 * sp[35]));
        sv4[84] = sv4[79] * (1.0 / (2.0 * sp[35]));
        sv4[85] = sv4[81] * (1.0 / (2.0 * sp[35]));
        sv4[86] = w1_c3 * sv4[82];
        sv4[87] = w1_c3 * sv4[83];
        sv4[88] = w1_c3 * sv4[84];
        sv4[89] = w1_c3 * sv4[85];
        sv4[90] = sv4[88] + sv4[76];
        sv4[91] = sv4[89] + sv4[77];
        sv4[92] = w3_c3 * sv4[86];
        sv4[93] = w3_c3 * sv4[87];
        sv4[94] = w3_c3 * sv4[90];
        sv4[95] = w3_c3 * sv4[91];
        sv4[96] = sv4[39] + sv4[92];
        sv4[97] = sv4[40] + sv4[93];
        sv4[98] = sv4[94] + sv4[41];
        sv4[99] = sv4[95] + sv4[42];
        sv4[100] = 100000.0 * (0.5 + -1 * (0.5 * sv4[43])) * sv4[52];
        sv4[101] = 100000.0 * (0.5 + -1 * (0.5 * sv4[43])) * sv4[53];
        sv4[102] = 100000.0 * (0.5 + -1 * (0.5 * sv4[43])) * sv4[54];
        sv4[103] = sv4[100] * (1.0 / (2.0 * sp[35]));
        sv4[104] = sv4[101] * (1.0 / (2.0 * sp[35]));
        sv4[105] = sv4[102] * (1.0 / (2.0 * sp[35]));
        sv4[106] = w1_c3 * sv4[103];
        sv4[107] = w1_c3 * sv4[104];
        sv4[108] = w1_c3 * sv4[105];
        sv4[109] = 100000.0 * (0.5 + -1 * (0.5 * sv4[43])) * sv4[23];
        sv4[110] = 100000.0 * (0.5 + -1 * (0.5 * sv4[43])) * sv4[24];
        sv4[111] = sv4[109] * (1.0 / (2.0 * sp[35]));
        sv4[112] = sv4[110] * (1.0 / (2.0 * sp[35]));
        sv4[113] = sv4[106] + sv4[111];
        sv4[114] = sv4[108] + sv4[112];
        sv4[115] = sv4[114] + sv4[112];
        sv4[116] = w3_c3 * sv4[113];
        sv4[117] = w3_c3 * sv4[107];
        sv4[118] = w3_c3 * sv4[115];
        sv4[119] = sv4[71] + sv4[116];
        sv4[120] = sv4[72] + sv4[117];
        sv4[121] = sv4[118] + sv4[73];
        sv4[122] = (0.0001 + sv4[6]) * (-1 * (0.5 * sv4[13]));
        sv4[123] = (0.0001 + sv4[6]) * (-1 * (0.5 * sv4[14]));
        sv4[124] = sp[44] * sv4[122];
        sv4[125] = sp[44] * sv4[123];
        sv4[126] = -1 * (0.5 * sv4[13]) * sv4[23];
        sv4[127] = -1 * (0.5 * sv4[13]) * sv4[24];
        sv4[128] = -1 * (0.5 * sv4[14]) * sv4[23];
        sv4[129] = -1 * (0.5 * sv4[14]) * sv4[24];
        sv4[130] = sp[44] * sv4[126];
        sv4[131] = sp[44] * sv4[128];
        sv4[132] = sp[44] * sv4[127];
        sv4[133] = sp[44] * sv4[129];
        sv4[134] = w1_c3 * sv4[130];
        sv4[135] = w1_c3 * sv4[131];
        sv4[136] = w1_c3 * sv4[132];
        sv4[137] = w1_c3 * sv4[133];
        sv4[138] = sv4[124] + sv4[136];
        sv4[139] = sv4[125] + sv4[137];
        sv4[140] = sv4[96] + -1 * sv4[134];
        sv4[141] = sv4[97] + -1 * sv4[135];
        sv4[142] = sv4[98] + -1 * sv4[138];
        sv4[143] = sv4[99] + -1 * sv4[139];
        sv4[144] = (0.5 + -1 * (0.5 * sv4[43])) * sv4[52];
        sv4[145] = (0.5 + -1 * (0.5 * sv4[43])) * sv4[53];
        sv4[146] = (0.5 + -1 * (0.5 * sv4[43])) * sv4[54];
        sv4[147] = sp[44] * sv4[144];
        sv4[148] = sp[44] * sv4[145];
        sv4[149] = sp[44] * sv4[146];
        sv4[150] = w1_c3 * sv4[147];
        sv4[151] = w1_c3 * sv4[148];
        sv4[152] = w1_c3 * sv4[149];
        sv4[153] = (0.5 + -1 * (0.5 * sv4[43])) * sv4[23];
        sv4[154] = (0.5 + -1 * (0.5 * sv4[43])) * sv4[24];
        sv4[155] = sp[44] * sv4[153];
        sv4[156] = sp[44] * sv4[154];
        sv4[157] = sv4[150] + sv4[155];
        sv4[158] = sv4[152] + sv4[156];
        sv4[159] = sv4[158] + sv4[156];
        sv4[160] = sv4[119] + -1 * sv4[157];
        sv4[161] = sv4[120] + -1 * sv4[151];
        sv4[162] = sv4[121] + -1 * sv4[159];
        sv4[163] = (0.0001 + sv4[6] / 1.3) * (-1 * (0.5 * sv4[13]));
        sv4[164] = (0.0001 + sv4[6] / 1.3) * (-1 * (0.5 * sv4[14]));
        sv4[165] = sp[53] * sv4[163];
        sv4[166] = sp[53] * sv4[164];
        sv4[167] = -1 * (0.5 * sv4[13]) * (sv4[23] / 1.3);
        sv4[168] = -1 * (0.5 * sv4[13]) * (sv4[24] / 1.3);
        sv4[169] = -1 * (0.5 * sv4[14]) * (sv4[23] / 1.3);
        sv4[170] = -1 * (0.5 * sv4[14]) * (sv4[24] / 1.3);
        sv4[171] = sp[53] * sv4[167];
        sv4[172] = sp[53] * sv4[169];
        sv4[173] = sp[53] * sv4[168];
        sv4[174] = sp[53] * sv4[170];
        sv4[175] = w1_c4 * sv4[171];
        sv4[176] = w1_c4 * sv4[172];
        sv4[177] = w1_c4 * sv4[173];
        sv4[178] = w1_c4 * sv4[174];
        sv4[179] = sv4[165] + sv4[175];
        sv4[180] = sv4[166] + sv4[176];
        sv4[181] = sv4[140] + -1 * sv4[179];
        sv4[182] = sv4[141] + -1 * sv4[180];
        sv4[183] = sv4[142] + -1 * sv4[177];
        sv4[184] = sv4[143] + -1 * sv4[178];
        sv4[185] = (0.5 + -1 * (0.5 * sv4[43])) * (sv4[52] / 1.3);
        sv4[186] = (0.5 + -1 * (0.5 * sv4[43])) * (sv4[53] / 1.3);
        sv4[187] = (0.5 + -1 * (0.5 * sv4[43])) * (sv4[54] / 1.3);
        sv4[188] = sp[53] * sv4[185];
        sv4[189] = sp[53] * sv4[186];
        sv4[190] = sp[53] * sv4[187];
        sv4[191] = w1_c4 * sv4[188];
        sv4[192] = w1_c4 * sv4[189];
        sv4[193] = w1_c4 * sv4[190];
        sv4[194] = (0.5 + -1 * (0.5 * sv4[43])) * (sv4[23] / 1.3);
        sv4[195] = (0.5 + -1 * (0.5 * sv4[43])) * (sv4[24] / 1.3);
        sv4[196] = sp[53] * sv4[194];
        sv4[197] = sp[53] * sv4[195];
        sv4[198] = sv4[192] + sv4[196];
        sv4[199] = sv4[191] + sv4[197];
        sv4[200] = sv4[198] + sv4[196];
        sv4[201] = sv4[160] + -1 * sv4[199];
        sv4[202] = sv4[161] + -1 * sv4[200];
        sv4[203] = sv4[162] + -1 * sv4[193];
        sv4[204] = sp[62] * sv4[144];
        sv4[205] = sp[62] * sv4[145];
        sv4[206] = sp[62] * sv4[146];
        sv4[207] = sp[67] * sv4[153];
        sv4[208] = sp[67] * sv4[154];
        sv4[209] = sp[68] * sv4[153];
        sv4[210] = sp[68] * sv4[154];
        sv4[211] = w3_c3 * sv4[204];
        sv4[212] = w3_c3 * sv4[205];
        sv4[213] = w3_c3 * sv4[207];
        sv4[214] = w3_c3 * sv4[209];
        sv4[215] = w3_c3 * sv4[206];
        sv4[216] = w3_c3 * sv4[208];
        sv4[217] = w3_c3 * sv4[210];
        sv4[218] = sv4[201] + -1 * sv4[211];
        sv4[219] = sv4[202] + -1 * sv4[212];
        sv4[220] = sv4[203] + -1 * sv4[215];
        sv4[221] = sp[67] * sv4[122];
        sv4[222] = sp[67] * sv4[123];
        sv4[223] = sp[68] * sv4[122];
        sv4[224] = sp[68] * sv4[123];
        sv4[225] = sp[62] * sv4[126];
        sv4[226] = sp[62] * sv4[128];
        sv4[227] = sp[62] * sv4[127];
        sv4[228] = sp[62] * sv4[129];
        sv4[229] = w3_c3 * sv4[225];
        sv4[230] = w3_c3 * sv4[226];
        sv4[231] = w3_c3 * sv4[227];
        sv4[232] = w3_c3 * sv4[221];
        sv4[233] = w3_c3 * sv4[223];
        sv4[234] = w3_c3 * sv4[228];
        sv4[235] = w3_c3 * sv4[222];
        sv4[236] = w3_c3 * sv4[224];
        sv4[237] = sv4[181] + -1 * sv4[229];
        sv4[238] = sv4[182] + -1 * sv4[230];
        sv4[239] = sv4[183] + -1 * sv4[231];
        sv4[240] = sv4[184] + -1 * sv4[234];
        sv4[241] = sp[77] * sv4[185];
        sv4[242] = sp[77] * sv4[186];
        sv4[243] = sp[77] * sv4[187];
        sv4[244] = sp[67] * sv4[194];
        sv4[245] = sp[67] * sv4[195];
        sv4[246] = sp[68] * sv4[194];
        sv4[247] = sp[68] * sv4[195];
        sv4[248] = w3_c3 * sv4[241];
        sv4[249] = w3_c3 * sv4[242];
        sv4[250] = w3_c3 * sv4[244];
        sv4[251] = w3_c3 * sv4[246];
        sv4[252] = w3_c3 * sv4[243];
        sv4[253] = w3_c3 * sv4[245];
        sv4[254] = w3_c3 * sv4[247];
        sv4[255] = sv4[218] + -1 * sv4[248];
        sv4[256] = sv4[219] + -1 * sv4[249];
        sv4[257] = sv4[220] + -1 * sv4[252];
        sv4[258] = sp[67] * sv4[163];
        sv4[259] = sp[67] * sv4[164];
        sv4[260] = sp[68] * sv4[163];
        sv4[261] = sp[68] * sv4[164];
        sv4[262] = sp[77] * sv4[167];
        sv4[263] = sp[77] * sv4[169];
        sv4[264] = sp[77] * sv4[168];
        sv4[265] = sp[77] * sv4[170];
        sv4[266] = w3_c3 * sv4[262];
        sv4[267] = w3_c3 * sv4[263];
        sv4[268] = w3_c3 * sv4[264];
        sv4[269] = w3_c3 * sv4[258];
        sv4[270] = w3_c3 * sv4[260];
        sv4[271] = w3_c3 * sv4[265];
        sv4[272] = w3_c3 * sv4[259];
        sv4[273] = w3_c3 * sv4[261];
        sv4[274] = sv4[237] + -1 * sv4[266];
        sv4[275] = sv4[238] + -1 * sv4[267];
        sv4[276] = sv4[239] + -1 * sv4[268];
        sv4[277] = sv4[240] + -1 * sv4[271];
        sv4[278] = std::sinh(2.0 * (100.0 * sv4[9]));
        sv4[279] = 2.0 * (100.0 * sp[17]) * sv4[278];
        sv4[280] = 2.0 * (100.0 * sp[18]) * sv4[278];
        sv4[281] = sv4[279] * sv4[12];
        sv4[282] = sv4[280] * sv4[12];
        sv4[283] = std::sinh(100.0 * sv4[9]);
        sv4[284] = 100.0 * sp[17] * sv4[283];
        sv4[285] = 100.0 * sp[18] * sv4[283];
        sv4[286] = -1 * sv4[281] + 2.0 * sv4[284];
        sv4[287] = -1 * sv4[282] + 2.0 * sv4[285];
        sv4[288] = sv4[286] / (1.0 + sv4[11]);
        sv4[289] = sv4[287] / (1.0 + sv4[11]);
        sv4[290] = 2 * sv4[288] * sv4[12];
        sv4[291] = 2 * sv4[289] * sv4[12];
        sv4[292] = sv4[290] * (100.0 * sp[17]);
        sv4[293] = sv4[291] * (100.0 * sp[17]);
        sv4[294] = sv4[290] * (100.0 * sp[18]);
        sv4[295] = sv4[291] * (100.0 * sp[18]);
        sv4[296] = (0.0001 + sv4[6] / 1.3) * (100000.0 * (-1 * (0.5 * sv4[292])));
        sv4[297] = (0.0001 + sv4[6] / 1.3) * (100000.0 * (-1 * (0.5 * sv4[294])));
        sv4[298] = (0.0001 + sv4[6] / 1.3) * (100000.0 * (-1 * (0.5 * sv4[293])));
        sv4[299] = (0.0001 + sv4[6] / 1.3) * (100000.0 * (-1 * (0.5 * sv4[295])));
        sv4[300] = sv4[296] * (1.0 / (2.0 * sp[35]));
        sv4[301] = sv4[297] * (1.0 / (2.0 * sp[35]));
        sv4[302] = sv4[298] * (1.0 / (2.0 * sp[35]));
        sv4[303] = sv4[299] * (1.0 / (2.0 * sp[35]));
        sv4[304] = w1_c4 * sv4[300];
        sv4[305] = w1_c4 * sv4[301];
        sv4[306] = w1_c4 * sv4[302];
        sv4[307] = w1_c4 * sv4[303];
        sv4[308] = w3_c4 * sv4[304];
        sv4[309] = w3_c4 * sv4[305];
        sv4[310] = w3_c4 * sv4[306];
        sv4[311] = w3_c4 * sv4[307];
        sv4[312] = (0.0001 + sv4[6]) * (100000.0 * (-1 * (0.5 * sv4[292])));
        sv4[313] = (0.0001 + sv4[6]) * (100000.0 * (-1 * (0.5 * sv4[294])));
        sv4[314] = (0.0001 + sv4[6]) * (100000.0 * (-1 * (0.5 * sv4[293])));
        sv4[315] = (0.0001 + sv4[6]) * (100000.0 * (-1 * (0.5 * sv4[295])));
        sv4[316] = sv4[312] * (1.0 / (2.0 * sp[35]));
        sv4[317] = sv4[313] * (1.0 / (2.0 * sp[35]));
        sv4[318] = sv4[314] * (1.0 / (2.0 * sp[35]));
        sv4[319] = sv4[315] * (1.0 / (2.0 * sp[35]));
        sv4[320] = w1_c3 * sv4[316];
        sv4[321] = w1_c3 * sv4[317];
        sv4[322] = w1_c3 * sv4[318];
        sv4[323] = w1_c3 * sv4[319];
        sv4[324] = w3_c3 * sv4[320];
        sv4[325] = w3_c3 * sv4[321];
        sv4[326] = w3_c3 * sv4[322];
        sv4[327] = w3_c3 * sv4[323];
        sv4[328] = sv4[308] + sv4[324];
        sv4[329] = sv4[309] + sv4[325];
        sv4[330] = sv4[310] + sv4[326];
        sv4[331] = sv4[311] + sv4[327];
        sv4[332] = (0.0001 + sv4[6]) * (-1 * (0.5 * sv4[292]));
        sv4[333] = (0.0001 + sv4[6]) * (-1 * (0.5 * sv4[294]));
        sv4[334] = (0.0001 + sv4[6]) * (-1 * (0.5 * sv4[293]));
        sv4[335] = (0.0001 + sv4[6]) * (-1 * (0.5 * sv4[295]));
        sv4[336] = sp[62] * sv4[332];
        sv4[337] = sp[62] * sv4[333];
        sv4[338] = sp[62] * sv4[334];
        sv4[339] = sp[62] * sv4[335];
        sv4[340] = w3_c3 * sv4[336];
        sv4[341] = w3_c3 * sv4[337];
        sv4[342] = w3_c3 * sv4[338];
        sv4[343] = w3_c3 * sv4[339];
        sv4[344] = sv4[328] + -1 * sv4[340];
        sv4[345] = sv4[329] + -1 * sv4[341];
        sv4[346] = sv4[330] + -1 * sv4[342];
        sv4[347] = sv4[331] + -1 * sv4[343];
        sv4[348] = sp[44] * sv4[332];
        sv4[349] = sp[44] * sv4[333];
        sv4[350] = sp[44] * sv4[334];
        sv4[351] = sp[44] * sv4[335];
        sv4[352] = w1_c3 * sv4[348];
        sv4[353] = w1_c3 * sv4[349];
        sv4[354] = w1_c3 * sv4[350];
        sv4[355] = w1_c3 * sv4[351];
        sv4[356] = sv4[344] + -1 * sv4[352];
        sv4[357] = sv4[345] + -1 * sv4[353];
        sv4[358] = sv4[346] + -1 * sv4[354];
        sv4[359] = sv4[347] + -1 * sv4[355];
        sv4[360] = (0.0001 + sv4[6] / 1.3) * (-1 * (0.5 * sv4[292]));
        sv4[361] = (0.0001 + sv4[6] / 1.3) * (-1 * (0.5 * sv4[294]));
        sv4[362] = (0.0001 + sv4[6] / 1.3) * (-1 * (0.5 * sv4[293]));
        sv4[363] = (0.0001 + sv4[6] / 1.3) * (-1 * (0.5 * sv4[295]));
        sv4[364] = sp[77] * sv4[360];
        sv4[365] = sp[77] * sv4[361];
        sv4[366] = sp[77] * sv4[362];
        sv4[367] = sp[77] * sv4[363];
        sv4[368] = w3_c3 * sv4[364];
        sv4[369] = w3_c3 * sv4[365];
        sv4[370] = w3_c3 * sv4[366];
        sv4[371] = w3_c3 * sv4[367];
        sv4[372] = sv4[356] + -1 * sv4[368];
        sv4[373] = sv4[357] + -1 * sv4[369];
        sv4[374] = sv4[358] + -1 * sv4[370];
        sv4[375] = sv4[359] + -1 * sv4[371];
        sv4[376] = sp[53] * sv4[360];
        sv4[377] = sp[53] * sv4[361];
        sv4[378] = sp[53] * sv4[362];
        sv4[379] = sp[53] * sv4[363];
        sv4[380] = w1_c4 * sv4[376];
        sv4[381] = w1_c4 * sv4[377];
        sv4[382] = w1_c4 * sv4[378];
        sv4[383] = w1_c4 * sv4[379];
        sv4[384] = sv4[372] + -1 * sv4[380];
        sv4[385] = sv4[373] + -1 * sv4[381];
        sv4[386] = sv4[374] + -1 * sv4[382];
        sv4[387] = sv4[375] + -1 * sv4[383];
        sv4[388] = w3_c0 * (-1 * sp[17]);
        sv4[389] = w3_c1 * sp[18];
        sv4[390] = sv4[388] + sv4[389];
        sv4[391] = w2_c4 + w2_c4;
        sv4[392] = w2_c4 * w2_c4;
        sv4[393] = std::sqrt(1e-8 + sv4[392]);
        sv4[394] = sv4[391] / (2 * sv4[393]);
        sv4[395] = w2_c3 * (0.09 * sv4[0]);
        sv4[396] = sv4[395] + sv4[395];
        sv4[397] = w2_c3 * sv4[395];
        sv4[398] = w2_c4 + sv4[393];
        sv4[399] = sv4[397] / (0.5 * sv4[398]);
        sv4[400] = 0.5 * (1.0 + sv4[394]) * sv4[399];
        sv4[401] = sv4[396] / (0.5 * sv4[398]);
        sv4[402] = -1 * sv4[400] / (0.5 * sv4[398]);
        sv4[403] = 0.5 * (1.0 + sv4[394]) * sv4[401];
        sv4[404] = 0.5 * (1.0 + sv4[394]) * sv4[402];
        sv4[405] = 2 * sv4[394] * sv4[394];
        sv4[406] = (2.0 + -1 * sv4[405]) / (2 * sv4[393]);
        sv4[407] = 0.5 * sv4[406] * sv4[399];
        sv4[408] = sv4[407] + sv4[404];
        sv4[409] = -1 * sv4[408] + -1 * sv4[404];
        sv4[410] = -1 * sv4[403] / (0.5 * sv4[398]);
        sv4[411] = sv4[409] / (0.5 * sv4[398]);
        sv4[412] = sv4[44] / (0.5 * sv4[398]);
        sv4[413] = w1_d1_c0 * sp[3];
        sv4[414] = w1_d0_c0 * sp[5];
        sv4[415] = sv4[413] + sv4[414];
        sv4[416] = w1_d0_c1 * sp[9];
        sv4[417] = w1_d1_c1 * sp[11];
        sv4[418] = sv4[416] + sv4[417];
        sv4[419] = sv4[415] + sv4[418];
        sv4[420] = 2.0 * sv4[410] * (sv4[419] / 2);
        sv4[421] = 2.0 * sv4[411] * (sv4[419] / 2);
        sv4[422] = 2.0 * sv4[412] * (sv4[419] / 2);
        sv4[423] = sv4[420] * sp[17];
        sv4[424] = sv4[421] * sp[17];
        sv4[425] = sv4[422] * sp[17];
        sv4[426] = w1_d0_c0 * sp[9];
        sv4[427] = w1_d1_c0 * sp[11];
        sv4[428] = sv4[426] + sv4[427];
        sv4[429] = sv4[428] + sv4[428];
        sv4[430] = 2.0 * sv4[410] * (sv4[429] / 2);
        sv4[431] = 2.0 * sv4[411] * (sv4[429] / 2);
        sv4[432] = 2.0 * sv4[412] * (sv4[429] / 2);
        sv4[433] = sv4[430] * sp[18];
        sv4[434] = sv4[431] * sp[18];
        sv4[435] = sv4[432] * sp[18];
        sv4[436] = sv4[423] + sv4[433];
        sv4[437] = sv4[424] + sv4[434];
        sv4[438] = sv4[425] + sv4[435];
        sv4[439] = sv4[436] * (-1 * sp[17]);
        sv4[440] = sv4[437] * (-1 * sp[17]);
        sv4[441] = sv4[438] * (-1 * sp[17]);
        sv4[442] = w1_d1_c1 * sp[3];
        sv4[443] = w1_d0_c1 * sp[5];
        sv4[444] = sv4[442] + sv4[443];
        sv4[445] = sv4[444] + sv4[444];
        sv4[446] = 2.0 * sv4[410] * (sv4[445] / 2);
        sv4[447] = 2.0 * sv4[411] * (sv4[445] / 2);
        sv4[448] = 2.0 * sv4[412] * (sv4[445] / 2);
        sv4[449] = sv4[446] * sp[17];
        sv4[450] = sv4[447] * sp[17];
        sv4[451] = sv4[448] * sp[17];
        sv4[452] = sv4[420] * sp[18];
        sv4[453] = sv4[421] * sp[18];
        sv4[454] = sv4[422] * sp[18];
        sv4[455] = sv4[449] + sv4[452];
        sv4[456] = sv4[450] + sv4[453];
        sv4[457] = sv4[451] + sv4[454];
        sv4[458] = sv4[455] * sp[18];
        sv4[459] = sv4[456] * sp[18];
        sv4[460] = sv4[457] * sp[18];
        sv4[461] = sv4[439] + sv4[458];
        sv4[462] = sv4[440] + sv4[459];
        sv4[463] = sv4[441] + sv4[460];
        sv4[464] = sv4[390] * sv4[461];
        sv4[465] = sv4[390] * sv4[462];
        sv4[466] = sv4[390] * sv4[463];
        sv4[467] = sv4[255] + -1 * sv4[464];
        sv4[468] = sv4[256] + -1 * sv4[465];
        sv4[469] = sv4[257] + -1 * sv4[466];
        sv4[470] = 2.0 * sv4[402] * (sp[3] / 2);
        sv4[471] = 2.0 * sv4[402] * (sp[5] / 2);
        sv4[472] = 2.0 * sv4[402] * (sp[9] / 2);
        sv4[473] = 2.0 * sv4[402] * (sp[11] / 2);
        sv4[474] = 2.0 * sv4[401] * (sp[3] / 2);
        sv4[475] = 2.0 * sv4[401] * (sp[5] / 2);
        sv4[476] = 2.0 * sv4[401] * (sp[9] / 2);
        sv4[477] = 2.0 * sv4[401] * (sp[11] / 2);
        sv4[478] = sv4[470] * sp[17];
        sv4[479] = sv4[471] * sp[17];
        sv4[480] = sv4[472] * sp[17];
        sv4[481] = sv4[473] * sp[17];
        sv4[482] = sv4[474] * sp[17];
        sv4[483] = sv4[475] * sp[17];
        sv4[484] = sv4[476] * sp[17];
        sv4[485] = sv4[477] * sp[17];
        sv4[486] = 2.0 * sv4[402] * (sp[78] / 2);
        sv4[487] = 2.0 * sv4[402] * (sp[79] / 2);
        sv4[488] = 2.0 * sv4[401] * (sp[78] / 2);
        sv4[489] = 2.0 * sv4[401] * (sp[79] / 2);
        sv4[490] = sv4[486] * sp[18];
        sv4[491] = sv4[487] * sp[18];
        sv4[492] = sv4[488] * sp[18];
        sv4[493] = sv4[489] * sp[18];
        sv4[494] = sv4[478] + sv4[490];
        sv4[495] = sv4[479] + sv4[491];
        sv4[496] = sv4[482] + sv4[492];
        sv4[497] = sv4[483] + sv4[493];
        sv4[498] = sv4[494] * (-1 * sp[17]);
        sv4[499] = sv4[495] * (-1 * sp[17]);
        sv4[500] = -1 * sp[17] * sv4[480];
        sv4[501] = -1 * sp[17] * sv4[481];
        sv4[502] = sv4[496] * (-1 * sp[17]);
        sv4[503] = sv4[497] * (-1 * sp[17]);
        sv4[504] = -1 * sp[17] * sv4[484];
        sv4[505] = -1 * sp[17] * sv4[485];
        sv4[506] = 2.0 * sv4[402] * (sp[80] / 2);
        sv4[507] = 2.0 * sv4[402] * (sp[81] / 2);
        sv4[508] = 2.0 * sv4[401] * (sp[80] / 2);
        sv4[509] = 2.0 * sv4[401] * (sp[81] / 2);
        sv4[510] = sv4[506] * sp[17];
        sv4[511] = sv4[507] * sp[17];
        sv4[512] = sv4[508] * sp[17];
        sv4[513] = sv4[509] * sp[17];
        sv4[514] = sv4[470] * sp[18];
        sv4[515] = sv4[471] * sp[18];
        sv4[516] = sv4[472] * sp[18];
        sv4[517] = sv4[473] * sp[18];
        sv4[518] = sv4[474] * sp[18];
        sv4[519] = sv4[475] * sp[18];
        sv4[520] = sv4[476] * sp[18];
        sv4[521] = sv4[477] * sp[18];
        sv4[522] = sv4[510] + sv4[516];
        sv4[523] = sv4[511] + sv4[517];
        sv4[524] = sv4[512] + sv4[520];
        sv4[525] = sv4[513] + sv4[521];
        sv4[526] = sv4[514] * sp[18];
        sv4[527] = sv4[515] * sp[18];
        sv4[528] = sv4[522] * sp[18];
        sv4[529] = sv4[523] * sp[18];
        sv4[530] = sv4[518] * sp[18];
        sv4[531] = sv4[519] * sp[18];
        sv4[532] = sv4[524] * sp[18];
        sv4[533] = sv4[525] * sp[18];
        sv4[534] = sv4[498] + sv4[526];
        sv4[535] = sv4[499] + sv4[527];
        sv4[536] = sv4[500] + sv4[528];
        sv4[537] = sv4[501] + sv4[529];
        sv4[538] = sv4[502] + sv4[530];
        sv4[539] = sv4[503] + sv4[531];
        sv4[540] = sv4[504] + sv4[532];
        sv4[541] = sv4[505] + sv4[533];
        sv4[542] = sv4[390] * sv4[534];
        sv4[543] = sv4[390] * sv4[535];
        sv4[544] = sv4[390] * sv4[536];
        sv4[545] = sv4[390] * sv4[537];
        sv4[546] = sv4[390] * sv4[538];
        sv4[547] = sv4[390] * sv4[539];
        sv4[548] = sv4[390] * sv4[540];
        sv4[549] = sv4[390] * sv4[541];
        sv4[550] = w3_d1_c0 * sp[3];
        sv4[551] = w3_d0_c0 * sp[5];
        sv4[552] = sv4[550] + sv4[551];
        sv4[553] = w3_d0_c1 * sp[9];
        sv4[554] = w3_d1_c1 * sp[11];
        sv4[555] = sv4[553] + sv4[554];
        sv4[556] = sv4[552] + sv4[555];
        sv4[557] = 2.0 * sv4[402] * (sv4[556] / 2);
        sv4[558] = 2.0 * sv4[401] * (sv4[556] / 2);
        sv4[559] = sv4[557] * sp[17];
        sv4[560] = sv4[558] * sp[17];
        sv4[561] = w3_d0_c0 * sp[9];
        sv4[562] = w3_d1_c0 * sp[11];
        sv4[563] = sv4[561] + sv4[562];
        sv4[564] = sv4[563] + sv4[563];
        sv4[565] = 2.0 * sv4[402] * (sv4[564] / 2);
        sv4[566] = 2.0 * sv4[401] * (sv4[564] / 2);
        sv4[567] = sv4[565] * sp[18];
        sv4[568] = sv4[566] * sp[18];
        sv4[569] = sv4[559] + sv4[567];
        sv4[570] = sv4[560] + sv4[568];
        sv4[571] = sv4[569] * (-1 * sp[17]);
        sv4[572] = sv4[570] * (-1 * sp[17]);
        sv4[573] = w3_d1_c1 * sp[3];
        sv4[574] = w3_d0_c1 * sp[5];
        sv4[575] = sv4[573] + sv4[574];
        sv4[576] = sv4[575] + sv4[575];
        sv4[577] = 2.0 * sv4[402] * (sv4[576] / 2);
        sv4[578] = 2.0 * sv4[401] * (sv4[576] / 2);
        sv4[579] = sv4[577] * sp[17];
        sv4[580] = sv4[578] * sp[17];
        sv4[581] = sv4[557] * sp[18];
        sv4[582] = sv4[558] * sp[18];
        sv4[583] = sv4[579] + sv4[581];
        sv4[584] = sv4[580] + sv4[582];
        sv4[585] = sv4[583] * sp[18];
        sv4[586] = sv4[584] * sp[18];
        sv4[587] = sv4[571] + sv4[585];
        sv4[588] = sv4[572] + sv4[586];
        sv4[589] = sv4[587] * sp[18];
        sv4[590] = sv4[588] * sp[18];
        sv4[591] = sv4[587] * (-1 * sp[17]);
        sv4[592] = sv4[588] * (-1 * sp[17]);
        sv4[593] = sv4[274] + -1 * sv4[589];
        sv4[594] = sv4[275] + -1 * sv4[591];
        sv4[595] = sv4[276] + -1 * sv4[590];
        sv4[596] = sv4[277] + -1 * sv4[592];
        sv4[597] = w1_c0 + -1 * w[0][0];
        sv4[598] = sv4[597] * (-1 * sp[17]);
        sv4[599] = w1_c1 + -1 * w[0][1];
        sv4[600] = sv4[599] * sp[18];
        sv4[601] = sv4[598] + sv4[600];
        sv4[602] = 2.0 * sv4[410] * (sv4[556] / 2);
        sv4[603] = 2.0 * sv4[411] * (sv4[556] / 2);
        sv4[604] = 2.0 * sv4[412] * (sv4[556] / 2);
        sv4[605] = sv4[602] * sp[17];
        sv4[606] = sv4[603] * sp[17];
        sv4[607] = sv4[604] * sp[17];
        sv4[608] = 2.0 * sv4[410] * (sv4[564] / 2);
        sv4[609] = 2.0 * sv4[411] * (sv4[564] / 2);
        sv4[610] = 2.0 * sv4[412] * (sv4[564] / 2);
        sv4[611] = sv4[608] * sp[18];
        sv4[612] = sv4[609] * sp[18];
        sv4[613] = sv4[610] * sp[18];
        sv4[614] = sv4[605] + sv4[611];
        sv4[615] = sv4[606] + sv4[612];
        sv4[616] = sv4[607] + sv4[613];
        sv4[617] = sv4[614] * (-1 * sp[17]);
        sv4[618] = sv4[615] * (-1 * sp[17]);
        sv4[619] = sv4[616] * (-1 * sp[17]);
        sv4[620] = 2.0 * sv4[410] * (sv4[576] / 2);
        sv4[621] = 2.0 * sv4[411] * (sv4[576] / 2);
        sv4[622] = 2.0 * sv4[412] * (sv4[576] / 2);
        sv4[623] = sv4[620] * sp[17];
        sv4[624] = sv4[621] * sp[17];
        sv4[625] = sv4[622] * sp[17];
        sv4[626] = sv4[602] * sp[18];
        sv4[627] = sv4[603] * sp[18];
        sv4[628] = sv4[604] * sp[18];
        sv4[629] = sv4[623] + sv4[626];
        sv4[630] = sv4[624] + sv4[627];
        sv4[631] = sv4[625] + sv4[628];
        sv4[632] = sv4[629] * sp[18];
        sv4[633] = sv4[630] * sp[18];
        sv4[634] = sv4[631] * sp[18];
        sv4[635] = sv4[617] + sv4[632];
        sv4[636] = sv4[618] + sv4[633];
        sv4[637] = sv4[619] + sv4[634];
        sv4[638] = sv4[601] * sv4[635];
        sv4[639] = sv4[601] * sv4[636];
        sv4[640] = sv4[601] * sv4[637];
        sv4[641] = sv4[467] + -1 * sv4[638];
        sv4[642] = sv4[468] + -1 * sv4[639];
        sv4[643] = sv4[469] + -1 * sv4[640];
        sv4[644] = 100000.0 * sv4[401] * (1.0 / (2.0 * sp[35]));
        sv4[645] = 100000.0 * sv4[402] * (1.0 / (2.0 * sp[35]));
        sv4[646] = sv4[644] * sp[18];
        sv4[647] = sv4[645] * sp[18];
        sv4[648] = sv4[644] * (-1 * sp[17]);
        sv4[649] = sv4[645] * (-1 * sp[17]);
        sv4[650] = sv4[390] * sv4[646];
        sv4[651] = sv4[390] * sv4[648];
        sv4[652] = sv4[390] * sv4[647];
        sv4[653] = sv4[390] * sv4[649];
        sv4[654] = sv4[595] + sv4[650];
        sv4[655] = sv4[596] + sv4[651];
        sv4[656] = sv4[593] + sv4[652];
        sv4[657] = sv4[594] + sv4[653];
        sv4[658] = 100000.0 * sv4[410] * (1.0 / (2.0 * sp[35]));
        sv4[659] = 100000.0 * sv4[411] * (1.0 / (2.0 * sp[35]));
        sv4[660] = 100000.0 * sv4[412] * (1.0 / (2.0 * sp[35]));
        sv4[661] = sv4[601] * sv4[658];
        sv4[662] = sv4[601] * sv4[659];
        sv4[663] = sv4[601] * sv4[660];
        sv4[664] = sv4[390] * sv4[661];
        sv4[665] = sv4[390] * sv4[662];
        sv4[666] = sv4[390] * sv4[663];
        sv4[667] = sv4[641] + sv4[664];
        sv4[668] = sv4[642] + sv4[665];
        sv4[669] = sv4[643] + sv4[666];
        sv4[670] = sv4[656] * sp[91];
        sv4[671] = sv4[657] * sp[91];
        sv4[672] = sv4[667] * sp[91];
        sv4[673] = sv4[668] * sp[91];
        sv4[674] = -1 * sv4[213] * sp[91];
        sv4[675] = -1 * sv4[214] * sp[91];
        sv4[676] = -1 * sv4[250] * sp[91];
        sv4[677] = -1 * sv4[251] * sp[91];
        sv4[678] = -1 * sv4[542] * sp[91];
        sv4[679] = -1 * sv4[543] * sp[91];
        sv4[680] = -1 * sv4[544] * sp[91];
        sv4[681] = -1 * sv4[545] * sp[91];
        sv4[682] = sv4[654] * sp[91];
        sv4[683] = sv4[384] * sp[91];
        sv4[684] = sv4[385] * sp[91];
        sv4[685] = -1 * sv4[232] * sp[91];
        sv4[686] = -1 * sv4[233] * sp[91];
        sv4[687] = -1 * sv4[269] * sp[91];
        sv4[688] = -1 * sv4[270] * sp[91];
        sv4[689] = sv4[655] * sp[91];
        sv4[690] = sv4[386] * sp[91];
        sv4[691] = sv4[387] * sp[91];
        sv4[692] = -1 * sv4[235] * sp[91];
        sv4[693] = -1 * sv4[236] * sp[91];
        sv4[694] = -1 * sv4[272] * sp[91];
        sv4[695] = -1 * sv4[273] * sp[91];
        sv4[696] = sv4[669] * sp[91];
        sv4[697] = -1 * sv4[216] * sp[91];
        sv4[698] = -1 * sv4[217] * sp[91];
        sv4[699] = -1 * sv4[253] * sp[91];
        sv4[700] = -1 * sv4[254] * sp[91];
        sv4[701] = -1 * sv4[546] * sp[91];
        sv4[702] = -1 * sv4[547] * sp[91];
        sv4[703] = -1 * sv4[548] * sp[91];
        sv4[704] = -1 * sv4[549] * sp[91];
        const double fw0 = sv4[691] * weights4[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE59_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF0[i][j] += TF0[i] * FE59_C0_F_Q4[facet][iq][j];
        const double fw1 = sv4[684] * weights4[iq];
        alignas(32) double TF1[6];
        for (int i = 0; i < 6; ++i)
            TF1[i] = fw1 * FE59_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF1[i][j] += TF1[i] * FE59_C0_F_Q4[facet][iq][j];
        const double fw2 = sv4[693] * weights4[iq];
        for (int i = 0; i < 6; ++i)
            TP0[i] += fw2 * FE59_C0_F_Q4[facet][iq][i];
        const double fw3 = sv4[689] * weights4[iq];
        alignas(32) double TF2[6];
        for (int i = 0; i < 6; ++i)
            TF2[i] = fw3 * FE59_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF2[i][j] += TF2[i] * FE61_C2_F_Q4[facet][iq][j];
        const double fw4 = sv4[692] * weights4[iq];
        for (int i = 0; i < 6; ++i)
            TP1[i] += fw4 * FE59_C0_F_Q4[facet][iq][i];
        const double fw5 = sv4[695] * weights4[iq];
        for (int i = 0; i < 6; ++i)
            TP2[i] += fw5 * FE59_C0_F_Q4[facet][iq][i];
        const double fw6 = sv4[671] * weights4[iq];
        alignas(32) double TF3[6];
        for (int i = 0; i < 6; ++i)
            TF3[i] = fw6 * FE59_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF3[i][j] += TF3[i] * FE61_C2_F_Q4[facet][iq][j];
        const double fw7 = sv4[694] * weights4[iq];
        for (int i = 0; i < 6; ++i)
            TP3[i] += fw7 * FE59_C0_F_Q4[facet][iq][i];
        const double fw8 = sv4[702] * weights4[iq];
        alignas(32) double TF4[5];
        for (int i = 0; i < 5; ++i)
            TF4[i] = fw8 * FE59_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF4[i][j] += TF4[i] * FE61_C2_F_Q4[facet][iq][j];
        const double fw9 = sv4[679] * weights4[iq];
        alignas(32) double TF5[5];
        for (int i = 0; i < 5; ++i)
            TF5[i] = fw9 * FE59_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF5[i][j] += TF5[i] * FE61_C2_F_Q4[facet][iq][j];
        const double fw10 = sv4[701] * weights4[iq];
        alignas(32) double TF6[5];
        for (int i = 0; i < 5; ++i)
            TF6[i] = fw10 * FE59_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF6[i][j] += TF6[i] * FE61_C2_F_Q4[facet][iq][j];
        const double fw11 = sv4[678] * weights4[iq];
        alignas(32) double TF7[5];
        for (int i = 0; i < 5; ++i)
            TF7[i] = fw11 * FE59_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF7[i][j] += TF7[i] * FE61_C2_F_Q4[facet][iq][j];
        const double fw12 = sv4[690] * weights4[iq];
        alignas(32) double TF8[6];
        for (int i = 0; i < 6; ++i)
            TF8[i] = fw12 * FE59_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF8[i][j] += TF8[i] * FE59_C0_F_Q4[facet][iq][j];
        const double fw13 = sv4[683] * weights4[iq];
        alignas(32) double TF9[6];
        for (int i = 0; i < 6; ++i)
            TF9[i] = fw13 * FE59_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF9[i][j] += TF9[i] * FE59_C0_F_Q4[facet][iq][j];
        const double fw14 = sv4[686] * weights4[iq];
        for (int i = 0; i < 6; ++i)
            TP4[i] += fw14 * FE59_C0_F_Q4[facet][iq][i];
        const double fw15 = sv4[682] * weights4[iq];
        alignas(32) double TF10[6];
        for (int i = 0; i < 6; ++i)
            TF10[i] = fw15 * FE59_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF10[i][j] += TF10[i] * FE61_C2_F_Q4[facet][iq][j];
        const double fw16 = sv4[685] * weights4[iq];
        for (int i = 0; i < 6; ++i)
            TP5[i] += fw16 * FE59_C0_F_Q4[facet][iq][i];
        const double fw17 = sv4[688] * weights4[iq];
        for (int i = 0; i < 6; ++i)
            TP6[i] += fw17 * FE59_C0_F_Q4[facet][iq][i];
        const double fw18 = sv4[670] * weights4[iq];
        alignas(32) double TF11[6];
        for (int i = 0; i < 6; ++i)
            TF11[i] = fw18 * FE59_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF11[i][j] += TF11[i] * FE61_C2_F_Q4[facet][iq][j];
        const double fw19 = sv4[687] * weights4[iq];
        for (int i = 0; i < 6; ++i)
            TP7[i] += fw19 * FE59_C0_F_Q4[facet][iq][i];
        const double fw20 = sv4[703] * weights4[iq];
        alignas(32) double TF12[5];
        for (int i = 0; i < 5; ++i)
            TF12[i] = fw20 * FE59_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF12[i][j] += TF12[i] * FE61_C2_F_Q4[facet][iq][j];
        const double fw21 = sv4[680] * weights4[iq];
        alignas(32) double TF13[5];
        for (int i = 0; i < 5; ++i)
            TF13[i] = fw21 * FE59_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF13[i][j] += TF13[i] * FE61_C2_F_Q4[facet][iq][j];
        const double fw22 = sv4[704] * weights4[iq];
        alignas(32) double TF14[5];
        for (int i = 0; i < 5; ++i)
            TF14[i] = fw22 * FE59_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF14[i][j] += TF14[i] * FE61_C2_F_Q4[facet][iq][j];
        const double fw23 = sv4[681] * weights4[iq];
        alignas(32) double TF15[5];
        for (int i = 0; i < 5; ++i)
            TF15[i] = fw23 * FE59_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF15[i][j] += TF15[i] * FE61_C2_F_Q4[facet][iq][j];
        for (int j = 0; j < 6; ++j)
            TP8[j] += fw2 * FE59_C0_F_Q4[facet][iq][j];
        for (int j = 0; j < 6; ++j)
            TP9[j] += fw14 * FE59_C0_F_Q4[facet][iq][j];
        const double fw24 = sv4[698] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP10[j] += fw24 * FE61_C2_F_Q4[facet][iq][j];
        const double fw25 = sv4[675] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP11[j] += fw25 * FE61_C2_F_Q4[facet][iq][j];
        alignas(32) double TF16[3];
        for (int i = 0; i < 3; ++i)
            TF16[i] = fw3 * FE61_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF16[i][j] += TF16[i] * FE59_C0_F_Q4[facet][iq][j];
        alignas(32) double TF17[3];
        for (int i = 0; i < 3; ++i)
            TF17[i] = fw8 * FE61_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF17[i][j] += TF17[i] * FE59_C0_D10_F_Q4[facet][iq][j];
        alignas(32) double TF18[3];
        for (int i = 0; i < 3; ++i)
            TF18[i] = fw10 * FE61_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF18[i][j] += TF18[i] * FE59_C0_D01_F_Q4[facet][iq][j];
        alignas(32) double TF19[3];
        for (int i = 0; i < 3; ++i)
            TF19[i] = fw15 * FE61_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF19[i][j] += TF19[i] * FE59_C0_F_Q4[facet][iq][j];
        alignas(32) double TF20[3];
        for (int i = 0; i < 3; ++i)
            TF20[i] = fw20 * FE61_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF20[i][j] += TF20[i] * FE59_C0_D10_F_Q4[facet][iq][j];
        alignas(32) double TF21[3];
        for (int i = 0; i < 3; ++i)
            TF21[i] = fw22 * FE61_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF21[i][j] += TF21[i] * FE59_C0_D01_F_Q4[facet][iq][j];
        for (int i = 0; i < 3; ++i)
            TP12[i] += fw24 * FE61_C2_F_Q4[facet][iq][i];
        const double fw26 = sv4[696] * weights4[iq];
        alignas(32) double TF22[3];
        for (int i = 0; i < 3; ++i)
            TF22[i] = fw26 * FE61_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF22[i][j] += TF22[i] * FE61_C2_F_Q4[facet][iq][j];
        const double fw27 = sv4[697] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP13[i] += fw27 * FE61_C2_F_Q4[facet][iq][i];
        const double fw28 = sv4[700] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP14[i] += fw28 * FE61_C2_F_Q4[facet][iq][i];
        const double fw29 = sv4[672] * weights4[iq];
        alignas(32) double TF23[3];
        for (int i = 0; i < 3; ++i)
            TF23[i] = fw29 * FE61_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF23[i][j] += TF23[i] * FE61_C2_F_Q4[facet][iq][j];
        const double fw30 = sv4[699] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP15[i] += fw30 * FE61_C2_F_Q4[facet][iq][i];
        for (int j = 0; j < 6; ++j)
            TP16[j] += fw4 * FE59_C0_F_Q4[facet][iq][j];
        for (int j = 0; j < 6; ++j)
            TP17[j] += fw16 * FE59_C0_F_Q4[facet][iq][j];
        for (int j = 0; j < 3; ++j)
            TP18[j] += fw27 * FE61_C2_F_Q4[facet][iq][j];
        const double fw31 = sv4[674] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP19[j] += fw31 * FE61_C2_F_Q4[facet][iq][j];
        for (int j = 0; j < 6; ++j)
            TP20[j] += fw5 * FE59_C0_F_Q4[facet][iq][j];
        for (int j = 0; j < 6; ++j)
            TP21[j] += fw17 * FE59_C0_F_Q4[facet][iq][j];
        for (int j = 0; j < 3; ++j)
            TP22[j] += fw28 * FE61_C2_F_Q4[facet][iq][j];
        const double fw32 = sv4[677] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP23[j] += fw32 * FE61_C2_F_Q4[facet][iq][j];
        alignas(32) double TF24[3];
        for (int i = 0; i < 3; ++i)
            TF24[i] = fw6 * FE61_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF24[i][j] += TF24[i] * FE59_C0_F_Q4[facet][iq][j];
        alignas(32) double TF25[3];
        for (int i = 0; i < 3; ++i)
            TF25[i] = fw9 * FE61_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF25[i][j] += TF25[i] * FE59_C0_D10_F_Q4[facet][iq][j];
        alignas(32) double TF26[3];
        for (int i = 0; i < 3; ++i)
            TF26[i] = fw11 * FE61_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF26[i][j] += TF26[i] * FE59_C0_D01_F_Q4[facet][iq][j];
        alignas(32) double TF27[3];
        for (int i = 0; i < 3; ++i)
            TF27[i] = fw18 * FE61_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF27[i][j] += TF27[i] * FE59_C0_F_Q4[facet][iq][j];
        alignas(32) double TF28[3];
        for (int i = 0; i < 3; ++i)
            TF28[i] = fw21 * FE61_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF28[i][j] += TF28[i] * FE59_C0_D10_F_Q4[facet][iq][j];
        alignas(32) double TF29[3];
        for (int i = 0; i < 3; ++i)
            TF29[i] = fw23 * FE61_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF29[i][j] += TF29[i] * FE59_C0_D01_F_Q4[facet][iq][j];
        for (int i = 0; i < 3; ++i)
            TP24[i] += fw25 * FE61_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            TP25[i] += fw31 * FE61_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            TP26[i] += fw32 * FE61_C2_F_Q4[facet][iq][i];
        const double fw33 = sv4[673] * weights4[iq];
        alignas(32) double TF30[3];
        for (int i = 0; i < 3; ++i)
            TF30[i] = fw33 * FE61_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF30[i][j] += TF30[i] * FE61_C2_F_Q4[facet][iq][j];
        const double fw34 = sv4[676] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP27[i] += fw34 * FE61_C2_F_Q4[facet][iq][i];
        for (int j = 0; j < 6; ++j)
            TP28[j] += fw7 * FE59_C0_F_Q4[facet][iq][j];
        for (int j = 0; j < 6; ++j)
            TP29[j] += fw19 * FE59_C0_F_Q4[facet][iq][j];
        for (int j = 0; j < 3; ++j)
            TP30[j] += fw30 * FE61_C2_F_Q4[facet][iq][j];
        for (int j = 0; j < 3; ++j)
            TP31[j] += fw34 * FE61_C2_F_Q4[facet][iq][j];
    }
    std::fill(A, A + 441, 0.0);
    static const int DM0[2] = { 15, 17 };
    static const int DM1[2] = { 18, 20 };
    static const int DM2[5] = { 0, 1, 3, 4, 5 };
    static const int DM3[5] = { 0, 2, 3, 4, 5 };
    static const int DM4[5] = { 6, 7, 9, 10, 11 };
    static const int DM5[5] = { 6, 8, 9, 10, 11 };
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + j] += BF0[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + (j + 6)] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * i + (j + 15)] += FE61_C2_D01_F_Q4[0][0][j] * TP0[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + (j + 15)] += BF2[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * i + DM0[j]] += FE61_C2_D01_F_Q4[0][0][j] * TP1[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * i + (j + 18)] += FE61_C2_D01_F_Q4[0][0][j] * TP2[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + (j + 18)] += BF3[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * i + DM1[j]] += FE61_C2_D01_F_Q4[0][0][j] * TP3[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + (j + 15)] += BF4[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + (j + 18)] += BF5[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + (j + 15)] += BF6[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + (j + 18)] += BF7[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + j] += BF8[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + (j + 6)] += BF9[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 6) + (j + 15)] += FE61_C2_D01_F_Q4[0][0][j] * TP4[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + (j + 15)] += BF10[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 6) + DM0[j]] += FE61_C2_D01_F_Q4[0][0][j] * TP5[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 6) + (j + 18)] += FE61_C2_D01_F_Q4[0][0][j] * TP6[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + (j + 18)] += BF11[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 6) + DM1[j]] += FE61_C2_D01_F_Q4[0][0][j] * TP7[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + (j + 15)] += BF12[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + (j + 18)] += BF13[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 15)] += BF14[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 18)] += BF15[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + j] += FE61_C2_D01_F_Q4[0][0][i] * TP8[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + (j + 6)] += FE61_C2_D01_F_Q4[0][0][i] * TP9[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += FE61_C2_D01_F_Q4[0][0][i] * TP10[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += FE61_C2_D01_F_Q4[0][0][i] * TP11[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + j] += BF16[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM2[j]] += BF17[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM3[j]] += BF18[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + (j + 6)] += BF19[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM4[j]] += BF20[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM5[j]] += BF21[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 15)] += FE61_C2_D01_F_Q4[0][0][j] * TP12[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += BF22[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM0[j]] += FE61_C2_D01_F_Q4[0][0][j] * TP13[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 18)] += FE61_C2_D01_F_Q4[0][0][j] * TP14[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += BF23[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM1[j]] += FE61_C2_D01_F_Q4[0][0][j] * TP15[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM0[i] + j] += FE61_C2_D01_F_Q4[0][0][i] * TP16[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM0[i] + (j + 6)] += FE61_C2_D01_F_Q4[0][0][i] * TP17[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + (j + 15)] += FE61_C2_D01_F_Q4[0][0][i] * TP18[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + (j + 18)] += FE61_C2_D01_F_Q4[0][0][i] * TP19[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + j] += FE61_C2_D01_F_Q4[0][0][i] * TP20[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + (j + 6)] += FE61_C2_D01_F_Q4[0][0][i] * TP21[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += FE61_C2_D01_F_Q4[0][0][i] * TP22[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += FE61_C2_D01_F_Q4[0][0][i] * TP23[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + j] += BF24[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM2[j]] += BF25[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM3[j]] += BF26[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + (j + 6)] += BF27[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM4[j]] += BF28[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM5[j]] += BF29[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 15)] += FE61_C2_D01_F_Q4[0][0][j] * TP24[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += BF23[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM0[j]] += FE61_C2_D01_F_Q4[0][0][j] * TP25[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 18)] += FE61_C2_D01_F_Q4[0][0][j] * TP26[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += BF30[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM1[j]] += FE61_C2_D01_F_Q4[0][0][j] * TP27[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM1[i] + j] += FE61_C2_D01_F_Q4[0][0][i] * TP28[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM1[i] + (j + 6)] += FE61_C2_D01_F_Q4[0][0][i] * TP29[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + (j + 15)] += FE61_C2_D01_F_Q4[0][0][i] * TP30[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + (j + 18)] += FE61_C2_D01_F_Q4[0][0][i] * TP31[j];
  }

};


class ranspseudotimestepping_form_0: public ufc::form
{
public:

  ranspseudotimestepping_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "0026f32b9932055fc95ac33b85af9f59ce50c3281d11441777517861c9b13ad6e45b6190aec18434fbf52cdd4539f6deecafdabb883315bef8cd0279312a32a7";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 5;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 5)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3, 4};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new ranspseudotimestepping_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new ranspseudotimestepping_dofmap_3();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new ranspseudotimestepping_coordinate_mapping_3();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_finite_element_6();
    case 1:
        return new ranspseudotimestepping_finite_element_1();
    case 2:
        return new ranspseudotimestepping_finite_element_0();
    case 3:
        return new ranspseudotimestepping_finite_element_6();
    case 4:
        return new ranspseudotimestepping_finite_element_6();
    case 5:
        return new ranspseudotimestepping_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_dofmap_6();
    case 1:
        return new ranspseudotimestepping_dofmap_1();
    case 2:
        return new ranspseudotimestepping_dofmap_0();
    case 3:
        return new ranspseudotimestepping_dofmap_6();
    case 4:
        return new ranspseudotimestepping_dofmap_6();
    case 5:
        return new ranspseudotimestepping_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 4;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 3:
        return new ranspseudotimestepping_exterior_facet_integral_0_3();
    default:
        return nullptr;
    }
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new ranspseudotimestepping_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class ranspseudotimestepping_form_1: public ufc::form
{
public:

  ranspseudotimestepping_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "299a44cac800203d3159520f3b34a220622612aa87aa6356a76d83fdb37c004149a41bec49f465b7398905b2bfb7cc6c083985c3cdfb48f66e8448f5e7930ef7";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 4;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 4)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {1, 2, 3, 4};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new ranspseudotimestepping_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new ranspseudotimestepping_dofmap_3();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new ranspseudotimestepping_coordinate_mapping_3();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_finite_element_6();
    case 1:
        return new ranspseudotimestepping_finite_element_6();
    case 2:
        return new ranspseudotimestepping_finite_element_0();
    case 3:
        return new ranspseudotimestepping_finite_element_6();
    case 4:
        return new ranspseudotimestepping_finite_element_6();
    case 5:
        return new ranspseudotimestepping_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_dofmap_6();
    case 1:
        return new ranspseudotimestepping_dofmap_6();
    case 2:
        return new ranspseudotimestepping_dofmap_0();
    case 3:
        return new ranspseudotimestepping_dofmap_6();
    case 4:
        return new ranspseudotimestepping_dofmap_6();
    case 5:
        return new ranspseudotimestepping_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 4;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 3:
        return new ranspseudotimestepping_exterior_facet_integral_1_3();
    default:
        return nullptr;
    }
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new ranspseudotimestepping_cell_integral_1_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class ranspseudotimestepping_form_2: public ufc::form
{
public:

  ranspseudotimestepping_form_2() : ufc::form()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_form_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "62099e731cf9a50defbbc9662969c8e37b7c7f1dd205bb88359ba7c0b5198810d1701a94cc8cd5ace464a37b9de2809a3e7381ed27dcfcfb1341ce1431733765";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 5;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 5)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3, 4};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new ranspseudotimestepping_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new ranspseudotimestepping_dofmap_3();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new ranspseudotimestepping_coordinate_mapping_3();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_finite_element_6();
    case 1:
        return new ranspseudotimestepping_finite_element_6();
    case 2:
        return new ranspseudotimestepping_finite_element_1();
    case 3:
        return new ranspseudotimestepping_finite_element_0();
    case 4:
        return new ranspseudotimestepping_finite_element_6();
    case 5:
        return new ranspseudotimestepping_finite_element_6();
    case 6:
        return new ranspseudotimestepping_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_dofmap_6();
    case 1:
        return new ranspseudotimestepping_dofmap_6();
    case 2:
        return new ranspseudotimestepping_dofmap_1();
    case 3:
        return new ranspseudotimestepping_dofmap_0();
    case 4:
        return new ranspseudotimestepping_dofmap_6();
    case 5:
        return new ranspseudotimestepping_dofmap_6();
    case 6:
        return new ranspseudotimestepping_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 4;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 3:
        return new ranspseudotimestepping_exterior_facet_integral_2_3();
    default:
        return nullptr;
    }
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new ranspseudotimestepping_cell_integral_2_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class ranspseudotimestepping_form_3: public ufc::form
{
public:

  ranspseudotimestepping_form_3() : ufc::form()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_form_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "3524ca22f36efc8c6d270ce181da48c80f346d7c56b47e6a524d1ff736d7d814e290124dc0a58b387cd0fef1aed74039cc2f3a24c79b1933e85b015f13d15b19";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 5;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 5)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 2, 3, 4, 5};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new ranspseudotimestepping_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new ranspseudotimestepping_dofmap_3();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new ranspseudotimestepping_coordinate_mapping_3();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_finite_element_2();
    case 1:
        return new ranspseudotimestepping_finite_element_1();
    case 2:
        return new ranspseudotimestepping_finite_element_6();
    case 3:
        return new ranspseudotimestepping_finite_element_6();
    case 4:
        return new ranspseudotimestepping_finite_element_6();
    case 5:
        return new ranspseudotimestepping_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_dofmap_2();
    case 1:
        return new ranspseudotimestepping_dofmap_1();
    case 2:
        return new ranspseudotimestepping_dofmap_6();
    case 3:
        return new ranspseudotimestepping_dofmap_6();
    case 4:
        return new ranspseudotimestepping_dofmap_6();
    case 5:
        return new ranspseudotimestepping_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 4;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 3:
        return new ranspseudotimestepping_exterior_facet_integral_3_3();
    default:
        return nullptr;
    }
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new ranspseudotimestepping_cell_integral_3_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class ranspseudotimestepping_form_4: public ufc::form
{
public:

  ranspseudotimestepping_form_4() : ufc::form()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_form_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "3dc685778a3dadc1842dbd325a4964f429a265b119a38651f271ba1f81f9bfe444f3b4544135a6e6362d981f6afa22bbab6f1274c39314e05237b6943c1fa793";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 6;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 6)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3, 4, 5};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new ranspseudotimestepping_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new ranspseudotimestepping_dofmap_3();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new ranspseudotimestepping_coordinate_mapping_3();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_finite_element_6();
    case 1:
        return new ranspseudotimestepping_finite_element_1();
    case 2:
        return new ranspseudotimestepping_finite_element_0();
    case 3:
        return new ranspseudotimestepping_finite_element_6();
    case 4:
        return new ranspseudotimestepping_finite_element_6();
    case 5:
        return new ranspseudotimestepping_finite_element_6();
    case 6:
        return new ranspseudotimestepping_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_dofmap_6();
    case 1:
        return new ranspseudotimestepping_dofmap_1();
    case 2:
        return new ranspseudotimestepping_dofmap_0();
    case 3:
        return new ranspseudotimestepping_dofmap_6();
    case 4:
        return new ranspseudotimestepping_dofmap_6();
    case 5:
        return new ranspseudotimestepping_dofmap_6();
    case 6:
        return new ranspseudotimestepping_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 4;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 3:
        return new ranspseudotimestepping_exterior_facet_integral_4_3();
    default:
        return nullptr;
    }
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new ranspseudotimestepping_cell_integral_4_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class ranspseudotimestepping_form_5: public ufc::form
{
public:

  ranspseudotimestepping_form_5() : ufc::form()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_form_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "49cfc874625a0f65e6f5270d566e3a80f066eff588ee9e952ac6fee2f0030ecb92f79aefb13256f981d509387331f1c78067e35a83942b187cc5c2590eb62044";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 5;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 5)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3, 5};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new ranspseudotimestepping_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new ranspseudotimestepping_dofmap_3();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new ranspseudotimestepping_coordinate_mapping_3();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_finite_element_6();
    case 1:
        return new ranspseudotimestepping_finite_element_1();
    case 2:
        return new ranspseudotimestepping_finite_element_0();
    case 3:
        return new ranspseudotimestepping_finite_element_6();
    case 4:
        return new ranspseudotimestepping_finite_element_6();
    case 5:
        return new ranspseudotimestepping_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_dofmap_6();
    case 1:
        return new ranspseudotimestepping_dofmap_1();
    case 2:
        return new ranspseudotimestepping_dofmap_0();
    case 3:
        return new ranspseudotimestepping_dofmap_6();
    case 4:
        return new ranspseudotimestepping_dofmap_6();
    case 5:
        return new ranspseudotimestepping_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 4;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 3:
        return new ranspseudotimestepping_exterior_facet_integral_5_3();
    default:
        return nullptr;
    }
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new ranspseudotimestepping_cell_integral_5_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class ranspseudotimestepping_form_6: public ufc::form
{
public:

  ranspseudotimestepping_form_6() : ufc::form()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_form_6() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "2f5f1bace126a452c2cd2b386912087c4763c9b756a25c7b910a4cd17df44f1d62cdbea1bf7f7cf06fef1b79a4893c6ddfee79aef52283aaadd656a37841e1e2";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 5;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 5)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 2, 3, 4, 5};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new ranspseudotimestepping_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new ranspseudotimestepping_dofmap_3();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new ranspseudotimestepping_coordinate_mapping_3();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_finite_element_2();
    case 1:
        return new ranspseudotimestepping_finite_element_2();
    case 2:
        return new ranspseudotimestepping_finite_element_1();
    case 3:
        return new ranspseudotimestepping_finite_element_6();
    case 4:
        return new ranspseudotimestepping_finite_element_6();
    case 5:
        return new ranspseudotimestepping_finite_element_6();
    case 6:
        return new ranspseudotimestepping_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_dofmap_2();
    case 1:
        return new ranspseudotimestepping_dofmap_2();
    case 2:
        return new ranspseudotimestepping_dofmap_1();
    case 3:
        return new ranspseudotimestepping_dofmap_6();
    case 4:
        return new ranspseudotimestepping_dofmap_6();
    case 5:
        return new ranspseudotimestepping_dofmap_6();
    case 6:
        return new ranspseudotimestepping_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 4;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 3:
        return new ranspseudotimestepping_exterior_facet_integral_6_3();
    default:
        return nullptr;
    }
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new ranspseudotimestepping_cell_integral_6_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class ranspseudotimestepping_form_7: public ufc::form
{
public:

  ranspseudotimestepping_form_7() : ufc::form()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_form_7() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "9f4099256452c4976f3ab6464d921ac43a0c396713ad60ef1ccbf0601b15bd4e02ba37b06d05bf98c1e52efe3735908bc3768c4b26fd86534680bd77c4448e3c";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 5;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 5)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3, 5};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new ranspseudotimestepping_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new ranspseudotimestepping_dofmap_3();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new ranspseudotimestepping_coordinate_mapping_3();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_finite_element_6();
    case 1:
        return new ranspseudotimestepping_finite_element_6();
    case 2:
        return new ranspseudotimestepping_finite_element_1();
    case 3:
        return new ranspseudotimestepping_finite_element_0();
    case 4:
        return new ranspseudotimestepping_finite_element_6();
    case 5:
        return new ranspseudotimestepping_finite_element_6();
    case 6:
        return new ranspseudotimestepping_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_dofmap_6();
    case 1:
        return new ranspseudotimestepping_dofmap_6();
    case 2:
        return new ranspseudotimestepping_dofmap_1();
    case 3:
        return new ranspseudotimestepping_dofmap_0();
    case 4:
        return new ranspseudotimestepping_dofmap_6();
    case 5:
        return new ranspseudotimestepping_dofmap_6();
    case 6:
        return new ranspseudotimestepping_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 4;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 3:
        return new ranspseudotimestepping_exterior_facet_integral_7_3();
    default:
        return nullptr;
    }
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new ranspseudotimestepping_cell_integral_7_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class ranspseudotimestepping_form_8: public ufc::form
{
public:

  ranspseudotimestepping_form_8() : ufc::form()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_form_8() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "b0e2c2b7e996475a59f0c6de21121eca1cfd28caf6d77bf18335c2edc94ca8d17b89334f97483efab5c1502ad3afc2bca3bf5665fc8f2c1d261f63d736f96e10";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 4;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 4)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 2, 3, 5};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new ranspseudotimestepping_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new ranspseudotimestepping_dofmap_3();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new ranspseudotimestepping_coordinate_mapping_3();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_finite_element_6();
    case 1:
        return new ranspseudotimestepping_finite_element_2();
    case 2:
        return new ranspseudotimestepping_finite_element_1();
    case 3:
        return new ranspseudotimestepping_finite_element_6();
    case 4:
        return new ranspseudotimestepping_finite_element_6();
    case 5:
        return new ranspseudotimestepping_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_dofmap_6();
    case 1:
        return new ranspseudotimestepping_dofmap_2();
    case 2:
        return new ranspseudotimestepping_dofmap_1();
    case 3:
        return new ranspseudotimestepping_dofmap_6();
    case 4:
        return new ranspseudotimestepping_dofmap_6();
    case 5:
        return new ranspseudotimestepping_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 4;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 3:
        return new ranspseudotimestepping_exterior_facet_integral_8_3();
    default:
        return nullptr;
    }
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new ranspseudotimestepping_cell_integral_8_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class ranspseudotimestepping_form_9: public ufc::form
{
public:

  ranspseudotimestepping_form_9() : ufc::form()
  {
    // Do nothing
  }

  ~ranspseudotimestepping_form_9() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "4ed0c5039bf738f99780d250bd03c8c6cb698c737642a4034864c185142333920c12eed5e8f27fa3de77424973308bf261e43d79db874b3955d95a709e125c86";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 5;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 5)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 2, 3, 4, 5};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new ranspseudotimestepping_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new ranspseudotimestepping_dofmap_3();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new ranspseudotimestepping_coordinate_mapping_3();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_finite_element_6();
    case 1:
        return new ranspseudotimestepping_finite_element_6();
    case 2:
        return new ranspseudotimestepping_finite_element_1();
    case 3:
        return new ranspseudotimestepping_finite_element_6();
    case 4:
        return new ranspseudotimestepping_finite_element_6();
    case 5:
        return new ranspseudotimestepping_finite_element_6();
    case 6:
        return new ranspseudotimestepping_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ranspseudotimestepping_dofmap_6();
    case 1:
        return new ranspseudotimestepping_dofmap_6();
    case 2:
        return new ranspseudotimestepping_dofmap_1();
    case 3:
        return new ranspseudotimestepping_dofmap_6();
    case 4:
        return new ranspseudotimestepping_dofmap_6();
    case 5:
        return new ranspseudotimestepping_dofmap_6();
    case 6:
        return new ranspseudotimestepping_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 4;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 3:
        return new ranspseudotimestepping_exterior_facet_integral_9_3();
    default:
        return nullptr;
    }
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new ranspseudotimestepping_cell_integral_9_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace RANSPseudoTimeStepping
{

class CoefficientSpace_adjoints: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_adjoints(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_adjoints(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_m: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_m(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_m(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_sigma: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_sigma(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_sigma(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u_ff: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u_ff(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u_ff(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_x: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_x(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_x(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_xl: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_xl(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_xl(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_F_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_F_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u_ff Form_F_FunctionSpace_1;

typedef CoefficientSpace_sigma Form_F_FunctionSpace_2;

typedef CoefficientSpace_x Form_F_FunctionSpace_3;

typedef CoefficientSpace_xl Form_F_FunctionSpace_4;

typedef CoefficientSpace_m Form_F_FunctionSpace_5;

class Form_F: public dolfin::Form
{
public:

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 5), u_ff(*this, 0), sigma(*this, 1), x(*this, 2), xl(*this, 3), m(*this, 4)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const ranspseudotimestepping_form_0>();
  }

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(1, 5), u_ff(*this, 0), sigma(*this, 1), x(*this, 2), xl(*this, 3), m(*this, 4)
  {
    _function_spaces[0] = V0;

    this->u_ff = u_ff;
    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->m = m;

    _ufc_form = std::make_shared<const ranspseudotimestepping_form_0>();
  }

  // Destructor
  ~Form_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "sigma")
      return 1;
    else if (name == "x")
      return 2;
    else if (name == "xl")
      return 3;
    else if (name == "m")
      return 4;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "sigma";
    case 2:
      return "x";
    case 3:
      return "xl";
    case 4:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_u_ff;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_sigma;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_xl;
  typedef Form_F_FunctionSpace_5 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner u_ff;
  dolfin::CoefficientAssigner sigma;
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner xl;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_F: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), u_ff(*this, 0), sigma(*this, 1), x(*this, 2), xl(*this, 3), m(*this, 4)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V0), u_ff(*this, 0), sigma(*this, 1), x(*this, 2), xl(*this, 3), m(*this, 4)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u_ff = u_ff;
    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "sigma")
      return 1;
    else if (name == "x")
      return 2;
    else if (name == "xl")
      return 3;
    else if (name == "m")
      return 4;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "sigma";
    case 2:
      return "x";
    case 3:
      return "xl";
    case 4:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_u_ff;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_sigma;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_xl;
  typedef Form_F_FunctionSpace_5 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u_ff;
  dolfin::MultiMeshCoefficientAssigner sigma;
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner xl;
  dolfin::MultiMeshCoefficientAssigner m;
};

class Form_J_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_J_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_sigma Form_J_FunctionSpace_2;

typedef CoefficientSpace_x Form_J_FunctionSpace_3;

typedef CoefficientSpace_xl Form_J_FunctionSpace_4;

typedef CoefficientSpace_m Form_J_FunctionSpace_5;

class Form_J: public dolfin::Form
{
public:

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 4), sigma(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const ranspseudotimestepping_form_1>();
  }

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(2, 4), sigma(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->m = m;

    _ufc_form = std::make_shared<const ranspseudotimestepping_form_1>();
  }

  // Destructor
  ~Form_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "sigma")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "m")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "sigma";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_sigma;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_xl;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner sigma;
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner xl;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_J: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), sigma(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V1, V0), sigma(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "sigma")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "m")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "sigma";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_sigma;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_xl;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner sigma;
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner xl;
  dolfin::MultiMeshCoefficientAssigner m;
};

class Form_J_true_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_true_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_true_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_true_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_true_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_true_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_true_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_true_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_true_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_J_true_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_true_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_true_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u_ff Form_J_true_FunctionSpace_2;

typedef CoefficientSpace_sigma Form_J_true_FunctionSpace_3;

typedef CoefficientSpace_x Form_J_true_FunctionSpace_4;

typedef CoefficientSpace_xl Form_J_true_FunctionSpace_5;

typedef CoefficientSpace_m Form_J_true_FunctionSpace_6;

class Form_J_true: public dolfin::Form
{
public:

  // Constructor
  Form_J_true(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 5), u_ff(*this, 0), sigma(*this, 1), x(*this, 2), xl(*this, 3), m(*this, 4)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const ranspseudotimestepping_form_2>();
  }

  // Constructor
  Form_J_true(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(2, 5), u_ff(*this, 0), sigma(*this, 1), x(*this, 2), xl(*this, 3), m(*this, 4)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->u_ff = u_ff;
    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->m = m;

    _ufc_form = std::make_shared<const ranspseudotimestepping_form_2>();
  }

  // Destructor
  ~Form_J_true()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "sigma")
      return 1;
    else if (name == "x")
      return 2;
    else if (name == "xl")
      return 3;
    else if (name == "m")
      return 4;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "sigma";
    case 2:
      return "x";
    case 3:
      return "xl";
    case 4:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_true_FunctionSpace_0 TestSpace;
  typedef Form_J_true_FunctionSpace_1 TrialSpace;
  typedef Form_J_true_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_true_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_true_FunctionSpace_2 CoefficientSpace_u_ff;
  typedef Form_J_true_FunctionSpace_3 CoefficientSpace_sigma;
  typedef Form_J_true_FunctionSpace_4 CoefficientSpace_x;
  typedef Form_J_true_FunctionSpace_5 CoefficientSpace_xl;
  typedef Form_J_true_FunctionSpace_6 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner u_ff;
  dolfin::CoefficientAssigner sigma;
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner xl;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_J_true: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_J_true(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), u_ff(*this, 0), sigma(*this, 1), x(*this, 2), xl(*this, 3), m(*this, 4)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J_true(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_J_true(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V1, V0), u_ff(*this, 0), sigma(*this, 1), x(*this, 2), xl(*this, 3), m(*this, 4)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J_true(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u_ff = u_ff;
    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_J_true()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "sigma")
      return 1;
    else if (name == "x")
      return 2;
    else if (name == "xl")
      return 3;
    else if (name == "m")
      return 4;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "sigma";
    case 2:
      return "x";
    case 3:
      return "xl";
    case 4:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_true_FunctionSpace_0 TestSpace;
  typedef Form_J_true_FunctionSpace_1 TrialSpace;
  typedef Form_J_true_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_true_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_true_FunctionSpace_2 CoefficientSpace_u_ff;
  typedef Form_J_true_FunctionSpace_3 CoefficientSpace_sigma;
  typedef Form_J_true_FunctionSpace_4 CoefficientSpace_x;
  typedef Form_J_true_FunctionSpace_5 CoefficientSpace_xl;
  typedef Form_J_true_FunctionSpace_6 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u_ff;
  dolfin::MultiMeshCoefficientAssigner sigma;
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner xl;
  dolfin::MultiMeshCoefficientAssigner m;
};

class Form_Jm_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Jm_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Jm_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Jm_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Jm_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Jm_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u_ff Form_Jm_FunctionSpace_1;

typedef CoefficientSpace_x Form_Jm_FunctionSpace_2;

typedef CoefficientSpace_xl Form_Jm_FunctionSpace_3;

typedef CoefficientSpace_adjoints Form_Jm_FunctionSpace_4;

typedef CoefficientSpace_m Form_Jm_FunctionSpace_5;

class Form_Jm: public dolfin::Form
{
public:

  // Constructor
  Form_Jm(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 5), u_ff(*this, 0), x(*this, 1), xl(*this, 2), adjoints(*this, 3), m(*this, 4)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const ranspseudotimestepping_form_3>();
  }

  // Constructor
  Form_Jm(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> adjoints, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(1, 5), u_ff(*this, 0), x(*this, 1), xl(*this, 2), adjoints(*this, 3), m(*this, 4)
  {
    _function_spaces[0] = V0;

    this->u_ff = u_ff;
    this->x = x;
    this->xl = xl;
    this->adjoints = adjoints;
    this->m = m;

    _ufc_form = std::make_shared<const ranspseudotimestepping_form_3>();
  }

  // Destructor
  ~Form_Jm()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "adjoints")
      return 3;
    else if (name == "m")
      return 4;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "adjoints";
    case 4:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Jm_FunctionSpace_0 TestSpace;
  typedef Form_Jm_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Jm_FunctionSpace_1 CoefficientSpace_u_ff;
  typedef Form_Jm_FunctionSpace_2 CoefficientSpace_x;
  typedef Form_Jm_FunctionSpace_3 CoefficientSpace_xl;
  typedef Form_Jm_FunctionSpace_4 CoefficientSpace_adjoints;
  typedef Form_Jm_FunctionSpace_5 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner u_ff;
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner xl;
  dolfin::CoefficientAssigner adjoints;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_Jm: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_Jm(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), u_ff(*this, 0), x(*this, 1), xl(*this, 2), adjoints(*this, 3), m(*this, 4)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Jm(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_Jm(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> adjoints, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V0), u_ff(*this, 0), x(*this, 1), xl(*this, 2), adjoints(*this, 3), m(*this, 4)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Jm(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u_ff = u_ff;
    this->x = x;
    this->xl = xl;
    this->adjoints = adjoints;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_Jm()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "adjoints")
      return 3;
    else if (name == "m")
      return 4;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "adjoints";
    case 4:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Jm_FunctionSpace_0 TestSpace;
  typedef Form_Jm_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Jm_FunctionSpace_1 CoefficientSpace_u_ff;
  typedef Form_Jm_FunctionSpace_2 CoefficientSpace_x;
  typedef Form_Jm_FunctionSpace_3 CoefficientSpace_xl;
  typedef Form_Jm_FunctionSpace_4 CoefficientSpace_adjoints;
  typedef Form_Jm_FunctionSpace_5 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u_ff;
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner xl;
  dolfin::MultiMeshCoefficientAssigner adjoints;
  dolfin::MultiMeshCoefficientAssigner m;
};

class Form_Jx_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Jx_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Jx_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Jx_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Jx_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Jx_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u_ff Form_Jx_FunctionSpace_1;

typedef CoefficientSpace_sigma Form_Jx_FunctionSpace_2;

typedef CoefficientSpace_x Form_Jx_FunctionSpace_3;

typedef CoefficientSpace_xl Form_Jx_FunctionSpace_4;

typedef CoefficientSpace_adjoints Form_Jx_FunctionSpace_5;

typedef CoefficientSpace_m Form_Jx_FunctionSpace_6;

class Form_Jx: public dolfin::Form
{
public:

  // Constructor
  Form_Jx(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 6), u_ff(*this, 0), sigma(*this, 1), x(*this, 2), xl(*this, 3), adjoints(*this, 4), m(*this, 5)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const ranspseudotimestepping_form_4>();
  }

  // Constructor
  Form_Jx(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> adjoints, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(1, 6), u_ff(*this, 0), sigma(*this, 1), x(*this, 2), xl(*this, 3), adjoints(*this, 4), m(*this, 5)
  {
    _function_spaces[0] = V0;

    this->u_ff = u_ff;
    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->adjoints = adjoints;
    this->m = m;

    _ufc_form = std::make_shared<const ranspseudotimestepping_form_4>();
  }

  // Destructor
  ~Form_Jx()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "sigma")
      return 1;
    else if (name == "x")
      return 2;
    else if (name == "xl")
      return 3;
    else if (name == "adjoints")
      return 4;
    else if (name == "m")
      return 5;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "sigma";
    case 2:
      return "x";
    case 3:
      return "xl";
    case 4:
      return "adjoints";
    case 5:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Jx_FunctionSpace_0 TestSpace;
  typedef Form_Jx_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Jx_FunctionSpace_1 CoefficientSpace_u_ff;
  typedef Form_Jx_FunctionSpace_2 CoefficientSpace_sigma;
  typedef Form_Jx_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_Jx_FunctionSpace_4 CoefficientSpace_xl;
  typedef Form_Jx_FunctionSpace_5 CoefficientSpace_adjoints;
  typedef Form_Jx_FunctionSpace_6 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner u_ff;
  dolfin::CoefficientAssigner sigma;
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner xl;
  dolfin::CoefficientAssigner adjoints;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_Jx: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_Jx(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), u_ff(*this, 0), sigma(*this, 1), x(*this, 2), xl(*this, 3), adjoints(*this, 4), m(*this, 5)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Jx(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_Jx(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> adjoints, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V0), u_ff(*this, 0), sigma(*this, 1), x(*this, 2), xl(*this, 3), adjoints(*this, 4), m(*this, 5)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Jx(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u_ff = u_ff;
    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->adjoints = adjoints;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_Jx()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "sigma")
      return 1;
    else if (name == "x")
      return 2;
    else if (name == "xl")
      return 3;
    else if (name == "adjoints")
      return 4;
    else if (name == "m")
      return 5;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "sigma";
    case 2:
      return "x";
    case 3:
      return "xl";
    case 4:
      return "adjoints";
    case 5:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Jx_FunctionSpace_0 TestSpace;
  typedef Form_Jx_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Jx_FunctionSpace_1 CoefficientSpace_u_ff;
  typedef Form_Jx_FunctionSpace_2 CoefficientSpace_sigma;
  typedef Form_Jx_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_Jx_FunctionSpace_4 CoefficientSpace_xl;
  typedef Form_Jx_FunctionSpace_5 CoefficientSpace_adjoints;
  typedef Form_Jx_FunctionSpace_6 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u_ff;
  dolfin::MultiMeshCoefficientAssigner sigma;
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner xl;
  dolfin::MultiMeshCoefficientAssigner adjoints;
  dolfin::MultiMeshCoefficientAssigner m;
};

class Form_Jadj_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Jadj_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Jadj_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Jadj_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Jadj_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Jadj_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u_ff Form_Jadj_FunctionSpace_1;

typedef CoefficientSpace_sigma Form_Jadj_FunctionSpace_2;

typedef CoefficientSpace_x Form_Jadj_FunctionSpace_3;

typedef CoefficientSpace_xl Form_Jadj_FunctionSpace_4;

typedef CoefficientSpace_m Form_Jadj_FunctionSpace_5;

class Form_Jadj: public dolfin::Form
{
public:

  // Constructor
  Form_Jadj(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 5), u_ff(*this, 0), sigma(*this, 1), x(*this, 2), xl(*this, 3), m(*this, 4)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const ranspseudotimestepping_form_5>();
  }

  // Constructor
  Form_Jadj(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(1, 5), u_ff(*this, 0), sigma(*this, 1), x(*this, 2), xl(*this, 3), m(*this, 4)
  {
    _function_spaces[0] = V0;

    this->u_ff = u_ff;
    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->m = m;

    _ufc_form = std::make_shared<const ranspseudotimestepping_form_5>();
  }

  // Destructor
  ~Form_Jadj()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "sigma")
      return 1;
    else if (name == "x")
      return 2;
    else if (name == "xl")
      return 3;
    else if (name == "m")
      return 4;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "sigma";
    case 2:
      return "x";
    case 3:
      return "xl";
    case 4:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Jadj_FunctionSpace_0 TestSpace;
  typedef Form_Jadj_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Jadj_FunctionSpace_1 CoefficientSpace_u_ff;
  typedef Form_Jadj_FunctionSpace_2 CoefficientSpace_sigma;
  typedef Form_Jadj_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_Jadj_FunctionSpace_4 CoefficientSpace_xl;
  typedef Form_Jadj_FunctionSpace_5 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner u_ff;
  dolfin::CoefficientAssigner sigma;
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner xl;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_Jadj: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_Jadj(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), u_ff(*this, 0), sigma(*this, 1), x(*this, 2), xl(*this, 3), m(*this, 4)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Jadj(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_Jadj(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V0), u_ff(*this, 0), sigma(*this, 1), x(*this, 2), xl(*this, 3), m(*this, 4)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Jadj(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u_ff = u_ff;
    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_Jadj()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "sigma")
      return 1;
    else if (name == "x")
      return 2;
    else if (name == "xl")
      return 3;
    else if (name == "m")
      return 4;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "sigma";
    case 2:
      return "x";
    case 3:
      return "xl";
    case 4:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Jadj_FunctionSpace_0 TestSpace;
  typedef Form_Jadj_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Jadj_FunctionSpace_1 CoefficientSpace_u_ff;
  typedef Form_Jadj_FunctionSpace_2 CoefficientSpace_sigma;
  typedef Form_Jadj_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_Jadj_FunctionSpace_4 CoefficientSpace_xl;
  typedef Form_Jadj_FunctionSpace_5 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u_ff;
  dolfin::MultiMeshCoefficientAssigner sigma;
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner xl;
  dolfin::MultiMeshCoefficientAssigner m;
};

class Form_Rform_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Rform_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Rform_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Rform_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Rform_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Rform_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Rform_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Rform_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Rform_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_Rform_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Rform_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Rform_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u_ff Form_Rform_FunctionSpace_2;

typedef CoefficientSpace_x Form_Rform_FunctionSpace_3;

typedef CoefficientSpace_xl Form_Rform_FunctionSpace_4;

typedef CoefficientSpace_adjoints Form_Rform_FunctionSpace_5;

typedef CoefficientSpace_m Form_Rform_FunctionSpace_6;

class Form_Rform: public dolfin::Form
{
public:

  // Constructor
  Form_Rform(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 5), u_ff(*this, 0), x(*this, 1), xl(*this, 2), adjoints(*this, 3), m(*this, 4)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const ranspseudotimestepping_form_6>();
  }

  // Constructor
  Form_Rform(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> adjoints, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(2, 5), u_ff(*this, 0), x(*this, 1), xl(*this, 2), adjoints(*this, 3), m(*this, 4)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->u_ff = u_ff;
    this->x = x;
    this->xl = xl;
    this->adjoints = adjoints;
    this->m = m;

    _ufc_form = std::make_shared<const ranspseudotimestepping_form_6>();
  }

  // Destructor
  ~Form_Rform()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "adjoints")
      return 3;
    else if (name == "m")
      return 4;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "adjoints";
    case 4:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Rform_FunctionSpace_0 TestSpace;
  typedef Form_Rform_FunctionSpace_1 TrialSpace;
  typedef Form_Rform_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Rform_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_Rform_FunctionSpace_2 CoefficientSpace_u_ff;
  typedef Form_Rform_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_Rform_FunctionSpace_4 CoefficientSpace_xl;
  typedef Form_Rform_FunctionSpace_5 CoefficientSpace_adjoints;
  typedef Form_Rform_FunctionSpace_6 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner u_ff;
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner xl;
  dolfin::CoefficientAssigner adjoints;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_Rform: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_Rform(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), u_ff(*this, 0), x(*this, 1), xl(*this, 2), adjoints(*this, 3), m(*this, 4)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Rform(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_Rform(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> adjoints, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V1, V0), u_ff(*this, 0), x(*this, 1), xl(*this, 2), adjoints(*this, 3), m(*this, 4)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Rform(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u_ff = u_ff;
    this->x = x;
    this->xl = xl;
    this->adjoints = adjoints;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_Rform()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "adjoints")
      return 3;
    else if (name == "m")
      return 4;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "adjoints";
    case 4:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Rform_FunctionSpace_0 TestSpace;
  typedef Form_Rform_FunctionSpace_1 TrialSpace;
  typedef Form_Rform_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Rform_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_Rform_FunctionSpace_2 CoefficientSpace_u_ff;
  typedef Form_Rform_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_Rform_FunctionSpace_4 CoefficientSpace_xl;
  typedef Form_Rform_FunctionSpace_5 CoefficientSpace_adjoints;
  typedef Form_Rform_FunctionSpace_6 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u_ff;
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner xl;
  dolfin::MultiMeshCoefficientAssigner adjoints;
  dolfin::MultiMeshCoefficientAssigner m;
};

class Form_Aform_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Aform_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Aform_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Aform_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Aform_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Aform_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Aform_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Aform_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Aform_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_Aform_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Aform_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Aform_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u_ff Form_Aform_FunctionSpace_2;

typedef CoefficientSpace_sigma Form_Aform_FunctionSpace_3;

typedef CoefficientSpace_x Form_Aform_FunctionSpace_4;

typedef CoefficientSpace_xl Form_Aform_FunctionSpace_5;

typedef CoefficientSpace_m Form_Aform_FunctionSpace_6;

class Form_Aform: public dolfin::Form
{
public:

  // Constructor
  Form_Aform(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 5), u_ff(*this, 0), sigma(*this, 1), x(*this, 2), xl(*this, 3), m(*this, 4)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const ranspseudotimestepping_form_7>();
  }

  // Constructor
  Form_Aform(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(2, 5), u_ff(*this, 0), sigma(*this, 1), x(*this, 2), xl(*this, 3), m(*this, 4)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->u_ff = u_ff;
    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->m = m;

    _ufc_form = std::make_shared<const ranspseudotimestepping_form_7>();
  }

  // Destructor
  ~Form_Aform()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "sigma")
      return 1;
    else if (name == "x")
      return 2;
    else if (name == "xl")
      return 3;
    else if (name == "m")
      return 4;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "sigma";
    case 2:
      return "x";
    case 3:
      return "xl";
    case 4:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Aform_FunctionSpace_0 TestSpace;
  typedef Form_Aform_FunctionSpace_1 TrialSpace;
  typedef Form_Aform_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Aform_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_Aform_FunctionSpace_2 CoefficientSpace_u_ff;
  typedef Form_Aform_FunctionSpace_3 CoefficientSpace_sigma;
  typedef Form_Aform_FunctionSpace_4 CoefficientSpace_x;
  typedef Form_Aform_FunctionSpace_5 CoefficientSpace_xl;
  typedef Form_Aform_FunctionSpace_6 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner u_ff;
  dolfin::CoefficientAssigner sigma;
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner xl;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_Aform: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_Aform(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), u_ff(*this, 0), sigma(*this, 1), x(*this, 2), xl(*this, 3), m(*this, 4)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Aform(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_Aform(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V1, V0), u_ff(*this, 0), sigma(*this, 1), x(*this, 2), xl(*this, 3), m(*this, 4)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Aform(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u_ff = u_ff;
    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_Aform()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "sigma")
      return 1;
    else if (name == "x")
      return 2;
    else if (name == "xl")
      return 3;
    else if (name == "m")
      return 4;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "sigma";
    case 2:
      return "x";
    case 3:
      return "xl";
    case 4:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Aform_FunctionSpace_0 TestSpace;
  typedef Form_Aform_FunctionSpace_1 TrialSpace;
  typedef Form_Aform_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Aform_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_Aform_FunctionSpace_2 CoefficientSpace_u_ff;
  typedef Form_Aform_FunctionSpace_3 CoefficientSpace_sigma;
  typedef Form_Aform_FunctionSpace_4 CoefficientSpace_x;
  typedef Form_Aform_FunctionSpace_5 CoefficientSpace_xl;
  typedef Form_Aform_FunctionSpace_6 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u_ff;
  dolfin::MultiMeshCoefficientAssigner sigma;
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner xl;
  dolfin::MultiMeshCoefficientAssigner m;
};

class Form_Cform_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Cform_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Cform_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Cform_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Cform_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Cform_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Cform_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Cform_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Cform_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_Cform_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Cform_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Cform_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u_ff Form_Cform_FunctionSpace_2;

typedef CoefficientSpace_x Form_Cform_FunctionSpace_3;

typedef CoefficientSpace_xl Form_Cform_FunctionSpace_4;

typedef CoefficientSpace_m Form_Cform_FunctionSpace_5;

class Form_Cform: public dolfin::Form
{
public:

  // Constructor
  Form_Cform(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 4), u_ff(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const ranspseudotimestepping_form_8>();
  }

  // Constructor
  Form_Cform(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(2, 4), u_ff(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->u_ff = u_ff;
    this->x = x;
    this->xl = xl;
    this->m = m;

    _ufc_form = std::make_shared<const ranspseudotimestepping_form_8>();
  }

  // Destructor
  ~Form_Cform()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "m")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Cform_FunctionSpace_0 TestSpace;
  typedef Form_Cform_FunctionSpace_1 TrialSpace;
  typedef Form_Cform_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Cform_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_Cform_FunctionSpace_2 CoefficientSpace_u_ff;
  typedef Form_Cform_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_Cform_FunctionSpace_4 CoefficientSpace_xl;
  typedef Form_Cform_FunctionSpace_5 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner u_ff;
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner xl;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_Cform: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_Cform(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), u_ff(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Cform(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_Cform(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V1, V0), u_ff(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Cform(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u_ff = u_ff;
    this->x = x;
    this->xl = xl;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_Cform()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "m")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Cform_FunctionSpace_0 TestSpace;
  typedef Form_Cform_FunctionSpace_1 TrialSpace;
  typedef Form_Cform_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Cform_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_Cform_FunctionSpace_2 CoefficientSpace_u_ff;
  typedef Form_Cform_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_Cform_FunctionSpace_4 CoefficientSpace_xl;
  typedef Form_Cform_FunctionSpace_5 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u_ff;
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner xl;
  dolfin::MultiMeshCoefficientAssigner m;
};

class Form_WuuForm_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_WuuForm_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_WuuForm_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_WuuForm_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_WuuForm_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_WuuForm_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ranspseudotimestepping_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ranspseudotimestepping_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_WuuForm_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_WuuForm_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_WuuForm_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_WuuForm_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_WuuForm_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_WuuForm_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u_ff Form_WuuForm_FunctionSpace_2;

typedef CoefficientSpace_x Form_WuuForm_FunctionSpace_3;

typedef CoefficientSpace_xl Form_WuuForm_FunctionSpace_4;

typedef CoefficientSpace_adjoints Form_WuuForm_FunctionSpace_5;

typedef CoefficientSpace_m Form_WuuForm_FunctionSpace_6;

class Form_WuuForm: public dolfin::Form
{
public:

  // Constructor
  Form_WuuForm(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 5), u_ff(*this, 0), x(*this, 1), xl(*this, 2), adjoints(*this, 3), m(*this, 4)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const ranspseudotimestepping_form_9>();
  }

  // Constructor
  Form_WuuForm(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> adjoints, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(2, 5), u_ff(*this, 0), x(*this, 1), xl(*this, 2), adjoints(*this, 3), m(*this, 4)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->u_ff = u_ff;
    this->x = x;
    this->xl = xl;
    this->adjoints = adjoints;
    this->m = m;

    _ufc_form = std::make_shared<const ranspseudotimestepping_form_9>();
  }

  // Destructor
  ~Form_WuuForm()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "adjoints")
      return 3;
    else if (name == "m")
      return 4;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "adjoints";
    case 4:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_WuuForm_FunctionSpace_0 TestSpace;
  typedef Form_WuuForm_FunctionSpace_1 TrialSpace;
  typedef Form_WuuForm_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_WuuForm_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_WuuForm_FunctionSpace_2 CoefficientSpace_u_ff;
  typedef Form_WuuForm_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_WuuForm_FunctionSpace_4 CoefficientSpace_xl;
  typedef Form_WuuForm_FunctionSpace_5 CoefficientSpace_adjoints;
  typedef Form_WuuForm_FunctionSpace_6 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner u_ff;
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner xl;
  dolfin::CoefficientAssigner adjoints;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_WuuForm: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_WuuForm(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), u_ff(*this, 0), x(*this, 1), xl(*this, 2), adjoints(*this, 3), m(*this, 4)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_WuuForm(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_WuuForm(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> adjoints, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V1, V0), u_ff(*this, 0), x(*this, 1), xl(*this, 2), adjoints(*this, 3), m(*this, 4)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_WuuForm(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u_ff = u_ff;
    this->x = x;
    this->xl = xl;
    this->adjoints = adjoints;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_WuuForm()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "adjoints")
      return 3;
    else if (name == "m")
      return 4;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "adjoints";
    case 4:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_WuuForm_FunctionSpace_0 TestSpace;
  typedef Form_WuuForm_FunctionSpace_1 TrialSpace;
  typedef Form_WuuForm_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_WuuForm_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_WuuForm_FunctionSpace_2 CoefficientSpace_u_ff;
  typedef Form_WuuForm_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_WuuForm_FunctionSpace_4 CoefficientSpace_xl;
  typedef Form_WuuForm_FunctionSpace_5 CoefficientSpace_adjoints;
  typedef Form_WuuForm_FunctionSpace_6 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u_ff;
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner xl;
  dolfin::MultiMeshCoefficientAssigner adjoints;
  dolfin::MultiMeshCoefficientAssigner m;
};


}

#endif
