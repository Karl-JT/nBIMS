// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.1.0.post0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              6
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __RANSNONLINEAR_H
#define __RANSNONLINEAR_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class ransnonlinear_finite_element_0: public ufc::finite_element
{
public:

  ransnonlinear_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~ransnonlinear_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', triangle, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[ip] += coefficients0[0][0] * basisvalues0[0];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * num_derivatives, 0.0);
    if (order > 0)
        return;
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    std::fill_n(values, num_points, 0.0);
    const std::size_t reference_offsets[1] = {};
    const std::size_t physical_offsets[1] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 1; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[ip + d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[ip + d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
    }
    // Evaluate basis on reference element
    double ref_values[1];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[1];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[2] = { 0.3333333333333333, 0.3333333333333333 };
    std::copy_n(dof_X, 2, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new ransnonlinear_finite_element_0();
  }

};


class ransnonlinear_finite_element_1: public ufc::finite_element
{
public:

  ransnonlinear_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~ransnonlinear_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Real', triangle, 0), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 2;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points * 2 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[2 * 2 * ip] += coefficients0[0][0] * basisvalues0[0];
        reference_values[2 * 2 * ip + 2 + 1] += coefficients0[0][0] * basisvalues0[0];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 2 * num_derivatives * 2, 0.0);
    if (order > 0)
        return;
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    std::fill_n(values, num_points * 2 * 2, 0.0);
    const std::size_t reference_offsets[2] = { 0, 1 };
    const std::size_t physical_offsets[2] = { 0, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 2; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[2 * 2 * ip + 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[2 * 2 * ip + 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
    }
    // Evaluate basis on reference element
    double ref_values[4];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[4];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 2; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 2, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 2; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[4] = dof_values[0];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[1];
    vertex_values[3] = dof_values[1];
    vertex_values[5] = dof_values[1];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[2] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[2 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[4] = { 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333 };
    std::copy_n(dof_X, 4, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ransnonlinear_finite_element_0();
    case 1:
        return new ransnonlinear_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new ransnonlinear_finite_element_1();
  }

};


class ransnonlinear_finite_element_2: public ufc::finite_element
{
public:

  ransnonlinear_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~ransnonlinear_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', triangle, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 3;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 3 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[3] = {};
    const std::size_t num_components[3] = { 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 3; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[3 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 3 * num_derivatives, 0.0);
    const std::size_t reference_offsets[3] = {};
    const std::size_t physical_offsets[3] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 3; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[3 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[3 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[3];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[3];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 3, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[6] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 6, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new ransnonlinear_finite_element_2();
  }

};


class ransnonlinear_finite_element_3: public ufc::finite_element
{
public:

  ransnonlinear_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~ransnonlinear_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 6;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 6 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 3 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 4 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 5 + 1] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives * 2, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t physical_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[12];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[12];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 6, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = coordinate_dofs[0];
    dof_coordinates[2 * 3 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 4] = coordinate_dofs[2];
    dof_coordinates[2 * 4 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 5] = coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ransnonlinear_finite_element_2();
    case 1:
        return new ransnonlinear_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new ransnonlinear_finite_element_3();
  }

};


class ransnonlinear_finite_element_4: public ufc::finite_element
{
public:

  ransnonlinear_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  ~ransnonlinear_finite_element_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', triangle, 2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 6;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    for (std::size_t k = 0; k < num_points * 6; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 5] += coefficients5[0][r] * basisvalues2[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
            { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
            { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    const std::size_t reference_offset[6] = {};
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives, 0.0);
    const std::size_t reference_offsets[6] = {};
    const std::size_t physical_offsets[6] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[6];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[6];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 6, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new ransnonlinear_finite_element_4();
  }

};


class ransnonlinear_finite_element_5: public ufc::finite_element
{
public:

  ransnonlinear_finite_element_5() : ufc::finite_element()
  {
    // Do nothing
  }

  ~ransnonlinear_finite_element_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    for (std::size_t k = 0; k < num_points * 12 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 6 + 1] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 7 + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 8 + 1] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 9 + 1] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 10 + 1] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 11 + 1] += coefficients5[0][r] * basisvalues2[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 12 * num_derivatives * 2, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
            { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
            { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    const std::size_t reference_offset[12] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    const std::size_t num_components[12] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 12; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[12 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 12 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[12] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    const std::size_t physical_offsets[12] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 12; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[12 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[12 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[24];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[24];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 12, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[8] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 9:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 10:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 11:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[3] = dof_values[7];
    vertex_values[5] = dof_values[8];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 6] = coordinate_dofs[0];
    dof_coordinates[2 * 6 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 7] = coordinate_dofs[2];
    dof_coordinates[2 * 7 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 8] = coordinate_dofs[4];
    dof_coordinates[2 * 8 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 9] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 9 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 10] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 10 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 11] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[24] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0 };
    std::copy_n(dof_X, 24, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ransnonlinear_finite_element_4();
    case 1:
        return new ransnonlinear_finite_element_4();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new ransnonlinear_finite_element_5();
  }

};


class ransnonlinear_finite_element_6: public ufc::finite_element
{
public:

  ransnonlinear_finite_element_6() : ufc::finite_element()
  {
    // Do nothing
  }

  ~ransnonlinear_finite_element_6() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), FiniteElement('Lagrange', triangle, 1), FiniteElement('Lagrange', triangle, 1), FiniteElement('Lagrange', triangle, 1))";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 21;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 5 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 5;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 5 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 5;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Mixed";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    static const double coefficients12[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients13[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients14[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 21 * 5; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 6 + 1] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 7 + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 8 + 1] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 9 + 1] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 10 + 1] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 11 + 1] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 12 + 2] += coefficients12[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 13 + 2] += coefficients13[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 14 + 2] += coefficients14[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 15 + 3] += coefficients12[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 16 + 3] += coefficients13[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 17 + 3] += coefficients14[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 18 + 4] += coefficients12[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 19 + 4] += coefficients13[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 20 + 4] += coefficients14[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 21 * num_derivatives * 5, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
            { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
            { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    alignas(32) static const double dmats12[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    static const double coefficients12[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients13[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients14[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[21] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4 };
    const std::size_t num_components[21] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 21; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 15:
                // Compute reference derivatives for dof 15.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 16:
                // Compute reference derivatives for dof 16.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 17:
                // Compute reference derivatives for dof 17.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 18:
                // Compute reference derivatives for dof 18.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 19:
                // Compute reference derivatives for dof 19.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 20:
                // Compute reference derivatives for dof 20.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[21 * (num_derivatives * 5) * ip + num_derivatives * 5 * i + 5 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 21 * num_derivatives * 5, 0.0);
    const std::size_t reference_offsets[21] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4 };
    const std::size_t physical_offsets[21] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 21; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[21 * (num_derivatives * 5) * ip + num_derivatives * 5 * d + 5 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[21 * (num_derivatives * 5) * ip + num_derivatives * 5 * d + 5 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[105];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[105];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 5; ++k)
        values[k] = physical_values[5 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[5] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 21; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 5; ++s)
            values[r * 5 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 5 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 15:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[3 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 16:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[3 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 17:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[3 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 18:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[4 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 19:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[4 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 20:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[4 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 5 * num_derivatives * 21, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[20] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 21; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 5 * num_derivatives; ++s)
            values[5 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[5];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 9:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 10:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 11:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 12:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 13:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 14:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 15:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 16:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 17:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 18:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[4];
        }
        break;
    case 19:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[4];
        }
        break;
    case 20:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[4];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[5];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[12] = vals[2];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[13] = vals[2];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[15] = vals[3];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[16] = vals[3];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[17] = vals[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[18] = vals[4];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[19] = vals[4];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[20] = vals[4];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[5] = dof_values[1];
    vertex_values[10] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[6] = dof_values[7];
    vertex_values[11] = dof_values[8];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[12];
    vertex_values[7] = dof_values[13];
    vertex_values[12] = dof_values[14];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[15];
    vertex_values[8] = dof_values[16];
    vertex_values[13] = dof_values[17];
    // Evaluate function and change variables
    vertex_values[4] = dof_values[18];
    vertex_values[9] = dof_values[19];
    vertex_values[14] = dof_values[20];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 6] = coordinate_dofs[0];
    dof_coordinates[2 * 6 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 7] = coordinate_dofs[2];
    dof_coordinates[2 * 7 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 8] = coordinate_dofs[4];
    dof_coordinates[2 * 8 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 9] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 9 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 10] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 10 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 11] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 12] = coordinate_dofs[0];
    dof_coordinates[2 * 12 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 13] = coordinate_dofs[2];
    dof_coordinates[2 * 13 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 14] = coordinate_dofs[4];
    dof_coordinates[2 * 14 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 15] = coordinate_dofs[0];
    dof_coordinates[2 * 15 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 16] = coordinate_dofs[2];
    dof_coordinates[2 * 16 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 17] = coordinate_dofs[4];
    dof_coordinates[2 * 17 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 18] = coordinate_dofs[0];
    dof_coordinates[2 * 18 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 19] = coordinate_dofs[2];
    dof_coordinates[2 * 19 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 20] = coordinate_dofs[4];
    dof_coordinates[2 * 20 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[42] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 42, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 4;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ransnonlinear_finite_element_5();
    case 1:
        return new ransnonlinear_finite_element_2();
    case 2:
        return new ransnonlinear_finite_element_2();
    case 3:
        return new ransnonlinear_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new ransnonlinear_finite_element_6();
  }

};


class ransnonlinear_dofmap_0: public ufc::dofmap
{
public:

  ransnonlinear_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~ransnonlinear_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', triangle, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = {};
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 1;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new ransnonlinear_dofmap_0();
  }

};


class ransnonlinear_dofmap_1: public ufc::dofmap
{
public:

  ransnonlinear_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~ransnonlinear_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Real', triangle, 0), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { false, false, true };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2;
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 2;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_dofs() const final override
  {
    return 2;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 2 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 2 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset;
    offset += 1;
    dofs[1] = offset;
    offset += 1;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ransnonlinear_dofmap_0();
    case 1:
        return new ransnonlinear_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new ransnonlinear_dofmap_1();
  }

};


class ransnonlinear_dofmap_2: public ufc::dofmap
{
public:

  ransnonlinear_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~ransnonlinear_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 3;
  }

  std::size_t num_element_dofs() const final override
  {
    return 3;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 2;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 2, 3 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new ransnonlinear_dofmap_2();
  }

};


class ransnonlinear_dofmap_3: public ufc::dofmap
{
public:

  ransnonlinear_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~ransnonlinear_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 6;
  }

  std::size_t num_element_dofs() const final override
  {
    return 6;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 4;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 4, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[0][0];
    dofs[4] = offset + entity_indices[0][1];
    dofs[5] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 5;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 5;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ransnonlinear_dofmap_2();
    case 1:
        return new ransnonlinear_dofmap_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new ransnonlinear_dofmap_3();
  }

};


class ransnonlinear_dofmap_4: public ufc::dofmap
{
public:

  ransnonlinear_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  ~ransnonlinear_dofmap_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0] + num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 6;
  }

  std::size_t num_element_dofs() const final override
  {
    return 6;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 1, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 3, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 5;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            break;
        case 1:
            dofs[0] = 4;
            break;
        case 2:
            dofs[0] = 5;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 5;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new ransnonlinear_dofmap_4();
  }

};


class ransnonlinear_dofmap_5: public ufc::dofmap
{
public:

  ransnonlinear_dofmap_5() : ufc::dofmap()
  {
    // Do nothing
  }

  ~ransnonlinear_dofmap_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2 * num_global_entities[0] + 2 * num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 12;
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 6;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 2, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 6, 12 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + entity_indices[0][0];
    dofs[7] = offset + entity_indices[0][1];
    dofs[8] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + entity_indices[1][0];
    dofs[10] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 9;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 7;
        dofs[5] = 11;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            dofs[1] = 9;
            break;
        case 1:
            dofs[0] = 4;
            dofs[1] = 10;
            break;
        case 2:
            dofs[0] = 5;
            dofs[1] = 11;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 9;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 7;
            dofs[5] = 11;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ransnonlinear_dofmap_4();
    case 1:
        return new ransnonlinear_dofmap_4();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new ransnonlinear_dofmap_5();
  }

};


class ransnonlinear_dofmap_6: public ufc::dofmap
{
public:

  ransnonlinear_dofmap_6() : ufc::dofmap()
  {
    // Do nothing
  }

  ~ransnonlinear_dofmap_6() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), FiniteElement('Lagrange', triangle, 1), FiniteElement('Lagrange', triangle, 1), FiniteElement('Lagrange', triangle, 1))";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 5 * num_global_entities[0] + 2 * num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 21;
  }

  std::size_t num_element_dofs() const final override
  {
    return 21;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 12;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 5, 2, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 5, 12, 21 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + entity_indices[0][0];
    dofs[7] = offset + entity_indices[0][1];
    dofs[8] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + entity_indices[1][0];
    dofs[10] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[12] = offset + entity_indices[0][0];
    dofs[13] = offset + entity_indices[0][1];
    dofs[14] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[15] = offset + entity_indices[0][0];
    dofs[16] = offset + entity_indices[0][1];
    dofs[17] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[18] = offset + entity_indices[0][0];
    dofs[19] = offset + entity_indices[0][1];
    dofs[20] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 9;
        dofs[6] = 13;
        dofs[7] = 14;
        dofs[8] = 16;
        dofs[9] = 17;
        dofs[10] = 19;
        dofs[11] = 20;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
        dofs[6] = 12;
        dofs[7] = 14;
        dofs[8] = 15;
        dofs[9] = 17;
        dofs[10] = 18;
        dofs[11] = 20;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 7;
        dofs[5] = 11;
        dofs[6] = 12;
        dofs[7] = 13;
        dofs[8] = 15;
        dofs[9] = 16;
        dofs[10] = 18;
        dofs[11] = 19;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            dofs[2] = 12;
            dofs[3] = 15;
            dofs[4] = 18;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            dofs[2] = 13;
            dofs[3] = 16;
            dofs[4] = 19;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            dofs[2] = 14;
            dofs[3] = 17;
            dofs[4] = 20;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            dofs[1] = 9;
            break;
        case 1:
            dofs[0] = 4;
            dofs[1] = 10;
            break;
        case 2:
            dofs[0] = 5;
            dofs[1] = 11;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            dofs[2] = 12;
            dofs[3] = 15;
            dofs[4] = 18;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            dofs[2] = 13;
            dofs[3] = 16;
            dofs[4] = 19;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            dofs[2] = 14;
            dofs[3] = 17;
            dofs[4] = 20;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 9;
            dofs[6] = 13;
            dofs[7] = 14;
            dofs[8] = 16;
            dofs[9] = 17;
            dofs[10] = 19;
            dofs[11] = 20;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            dofs[6] = 12;
            dofs[7] = 14;
            dofs[8] = 15;
            dofs[9] = 17;
            dofs[10] = 18;
            dofs[11] = 20;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 7;
            dofs[5] = 11;
            dofs[6] = 12;
            dofs[7] = 13;
            dofs[8] = 15;
            dofs[9] = 16;
            dofs[10] = 18;
            dofs[11] = 19;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            dofs[20] = 20;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 4;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ransnonlinear_dofmap_5();
    case 1:
        return new ransnonlinear_dofmap_2();
    case 2:
        return new ransnonlinear_dofmap_2();
    case 3:
        return new ransnonlinear_dofmap_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new ransnonlinear_dofmap_6();
  }

};


class ransnonlinear_coordinate_mapping_3: public ufc::coordinate_mapping
{
public:

  ransnonlinear_coordinate_mapping_3() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~ransnonlinear_coordinate_mapping_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new ransnonlinear_coordinate_mapping_3();
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new ransnonlinear_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new ransnonlinear_dofmap_3();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    ransnonlinear_finite_element_2 xelement;
    double phi[3];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[2 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t d = 0; d < 3; ++d)
                x[2 * ip + i] += coordinate_dofs[2 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double J[4];
    double detJ[1];
    double K[4];
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    ransnonlinear_finite_element_2 xelement;
    double dphi[6];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[2 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t j = 0; j < 2; ++j)
                for (std::size_t d = 0; d < 3; ++d)
                    J[2 * 2 * ip + 2 * i + j] += coordinate_dofs[2 * d + i] * dphi[2 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[2 * 2 * ip] * J[2 * 2 * ip + 2 + 1] - J[2 * 2 * ip + 1] * J[2 * 2 * ip + 2];
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[2 * 2 * ip] = J[2 * 2 * ip + 2 + 1] / detJ[ip];
        K[2 * 2 * ip + 1] = -J[2 * 2 * ip + 1] / detJ[ip];
        K[2 * 2 * ip + 2] = -J[2 * 2 * ip + 2] / detJ[ip];
        K[2 * 2 * ip + 2 + 1] = J[2 * 2 * ip] / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[3] = { 0.33333333333333337, 0.33333333333333337, 0.3333333333333333 };
    const double dphi_Xm[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t d = 0; d < 3; ++d)
            x[i] += coordinate_dofs[2 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t d = 0; d < 3; ++d)
                J[2 * i + j] += coordinate_dofs[2 * d + i] * dphi_Xm[j][d];
  }

};


class ransnonlinear_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  ransnonlinear_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~ransnonlinear_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({false, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 122
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    alignas(32) static const double FE70_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE70_C0_D02_Q12[1][1][3] = { { { 3.999999999999998, 4.000000000000004, -7.999999999999995 } } };
    alignas(32) static const double FE70_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE70_C0_D11_Q12[1][1][4] = { { { 4.0, 3.999999999999997, -3.999999999999997, -4.000000000000005 } } };
    alignas(32) static const double FE70_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803568, 0.2205142679699366 },
            { -0.05512856699248404, -0.05512856699248409, 0.6533077030470597, 0.2205142679699364, 0.2205142679699362, 0.01592089499803596 },
            { 0.6533077030470594, -0.05512856699248415, -0.05512856699248411, 0.01592089499803581, 0.2205142679699364, 0.2205142679699366 },
            { -0.1249989825350975, 0.001430579517788794, -0.1249989825350975, 0.4999959301403892, 0.2485755252716258, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788821, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880001, 0.173768363654174, -0.1177151633084292, 0.790160442765823, 0.06597478591860526, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880001, 0.1353078281686267, 0.06597478591860512, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860538 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880001, 0.06597478591860524, 0.1353078281686266, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860538 },
            { 0.1737683636541741, -0.04749625719880015, -0.1177151633084292, 0.06597478591860535, 0.7901604427658229, 0.1353078281686269 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q12[0][0][1];
    const double w3_d1 = w[3][0] * FE3_C0_D01_Q12[0][0][0] + w[3][2] * FE3_C0_D01_Q12[0][0][1];
    double w3_d0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0 += w[3][ic] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c3 = w[2][15] * FE3_C0_D01_Q12[0][0][0] + w[2][17] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c3 += w[2][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c4 = w[2][18] * FE3_C0_D01_Q12[0][0][0] + w[2][20] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c4 += w[2][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    const double w1_d11_c1 = w[1][6] * FE70_C0_D02_Q12[0][0][0] + w[1][8] * FE70_C0_D02_Q12[0][0][1] + w[1][10] * FE70_C0_D02_Q12[0][0][2];
    const double w1_d01_c1 = w[1][6] * FE70_C0_D11_Q12[0][0][0] + w[1][9] * FE70_C0_D11_Q12[0][0][1] + w[1][10] * FE70_C0_D11_Q12[0][0][2] + w[1][11] * FE70_C0_D11_Q12[0][0][3];
    const double w1_d00_c1 = w[1][6] * FE70_C0_D02_Q12[0][0][0] + w[1][7] * FE70_C0_D02_Q12[0][0][1] + w[1][11] * FE70_C0_D02_Q12[0][0][2];
    const double w1_d01_c0 = w[1][0] * FE70_C0_D11_Q12[0][0][0] + w[1][3] * FE70_C0_D11_Q12[0][0][1] + w[1][4] * FE70_C0_D11_Q12[0][0][2] + w[1][5] * FE70_C0_D11_Q12[0][0][3];
    const double w1_d11_c0 = w[1][0] * FE70_C0_D02_Q12[0][0][0] + w[1][2] * FE70_C0_D02_Q12[0][0][1] + w[1][4] * FE70_C0_D02_Q12[0][0][2];
    const double w1_d00_c0 = w[1][0] * FE70_C0_D02_Q12[0][0][0] + w[1][1] * FE70_C0_D02_Q12[0][0][1] + w[1][5] * FE70_C0_D02_Q12[0][0][2];
    const double w1_d1_c2 = w[1][12] * FE3_C0_D01_Q12[0][0][0] + w[1][14] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c2 += w[1][ic + 12] * FE3_C0_D01_Q12[0][0][ic];
    const double w1_d1_c3 = w[1][15] * FE3_C0_D01_Q12[0][0][0] + w[1][17] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c3 += w[1][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w1_d1_c4 = w[1][18] * FE3_C0_D01_Q12[0][0][0] + w[1][20] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c4 += w[1][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    alignas(32) double sp[145];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[8] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[9] = sp[7] + sp[8];
    sp[10] = std::sqrt(sp[9]);
    sp[11] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[12] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[13] = sp[11] + sp[12];
    sp[14] = std::sqrt(sp[13]);
    sp[15] = sp[10] * sp[14];
    sp[16] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[17] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[18] = sp[16] + sp[17];
    sp[19] = std::sqrt(sp[18]);
    sp[20] = sp[15] * sp[19];
    sp[21] = triangle_reference_cell_volume * sp[2];
    sp[22] = std::abs(sp[21]);
    sp[23] = sp[20] / (4.0 * sp[22]);
    sp[24] = 2.0 * sp[23] * (2.0 * sp[23]);
    sp[25] = w3_d1 * sp[3];
    sp[26] = w3_d0 * sp[4];
    sp[27] = sp[25] + sp[26];
    sp[28] = w2_d1_c3 * sp[3];
    sp[29] = w2_d0_c3 * sp[4];
    sp[30] = sp[28] + sp[29];
    sp[31] = w2_d1_c4 * sp[3];
    sp[32] = w2_d0_c4 * sp[4];
    sp[33] = sp[31] + sp[32];
    sp[34] = sp[3] + sp[3];
    sp[35] = sp[4] + sp[4];
    sp[36] = sp[3] * sp[3];
    sp[37] = sp[3] * sp[4];
    sp[38] = sp[4] * sp[4];
    sp[39] = sp[37] + sp[37];
    sp[40] = sp[36] + sp[36];
    sp[41] = sp[39] + sp[39];
    sp[42] = sp[38] + sp[38];
    sp[43] = w3_d0 * sp[5];
    sp[44] = w3_d1 * sp[6];
    sp[45] = sp[43] + sp[44];
    sp[46] = w2_d0_c3 * sp[5];
    sp[47] = w2_d1_c3 * sp[6];
    sp[48] = sp[46] + sp[47];
    sp[49] = w2_d0_c4 * sp[5];
    sp[50] = w2_d1_c4 * sp[6];
    sp[51] = sp[49] + sp[50];
    sp[52] = sp[3] * sp[5];
    sp[53] = sp[3] * sp[6];
    sp[54] = sp[4] * sp[6];
    sp[55] = sp[5] * sp[4];
    sp[56] = sp[52] + sp[54];
    sp[57] = sp[5] * sp[6];
    sp[58] = sp[5] * sp[5];
    sp[59] = sp[6] * sp[6];
    sp[60] = sp[57] + sp[57];
    sp[61] = sp[33] + sp[33];
    sp[62] = w1_d11_c1 * sp[3];
    sp[63] = w1_d01_c1 * sp[4];
    sp[64] = sp[62] + sp[63];
    sp[65] = sp[64] * sp[3];
    sp[66] = w1_d01_c1 * sp[3];
    sp[67] = w1_d00_c1 * sp[4];
    sp[68] = sp[66] + sp[67];
    sp[69] = sp[68] * sp[4];
    sp[70] = sp[65] + sp[69];
    sp[71] = sp[70] + sp[70];
    sp[72] = sp[51] + sp[51];
    sp[73] = w1_d01_c0 * sp[5];
    sp[74] = w1_d11_c0 * sp[6];
    sp[75] = sp[73] + sp[74];
    sp[76] = sp[75] * sp[3];
    sp[77] = w1_d00_c0 * sp[5];
    sp[78] = w1_d01_c0 * sp[6];
    sp[79] = sp[77] + sp[78];
    sp[80] = sp[79] * sp[4];
    sp[81] = sp[76] + sp[80];
    sp[82] = w1_d00_c1 * sp[5];
    sp[83] = w1_d01_c1 * sp[6];
    sp[84] = sp[82] + sp[83];
    sp[85] = sp[84] * sp[5];
    sp[86] = w1_d01_c1 * sp[5];
    sp[87] = w1_d11_c1 * sp[6];
    sp[88] = sp[86] + sp[87];
    sp[89] = sp[88] * sp[6];
    sp[90] = sp[85] + sp[89];
    sp[91] = sp[81] + sp[90];
    sp[92] = w1_d1_c2 * sp[3];
    sp[93] = w1_d0_c2 * sp[4];
    sp[94] = sp[92] + sp[93];
    sp[95] = sp[5] + sp[5];
    sp[96] = sp[6] + sp[6];
    sp[97] = sp[60] + sp[60];
    sp[98] = sp[59] + sp[59];
    sp[99] = sp[58] + sp[58];
    sp[100] = w1_d11_c0 * sp[3];
    sp[101] = w1_d01_c0 * sp[4];
    sp[102] = sp[100] + sp[101];
    sp[103] = sp[102] * sp[3];
    sp[104] = w1_d01_c0 * sp[3];
    sp[105] = w1_d00_c0 * sp[4];
    sp[106] = sp[104] + sp[105];
    sp[107] = sp[106] * sp[4];
    sp[108] = sp[103] + sp[107];
    sp[109] = sp[68] * sp[5];
    sp[110] = sp[64] * sp[6];
    sp[111] = sp[109] + sp[110];
    sp[112] = sp[108] + sp[111];
    sp[113] = sp[79] * sp[5];
    sp[114] = sp[75] * sp[6];
    sp[115] = sp[113] + sp[114];
    sp[116] = sp[115] + sp[115];
    sp[117] = w1_d0_c2 * sp[5];
    sp[118] = w1_d1_c2 * sp[6];
    sp[119] = sp[117] + sp[118];
    sp[120] = w1_d1_c3 * sp[3];
    sp[121] = w1_d0_c3 * sp[4];
    sp[122] = sp[120] + sp[121];
    sp[123] = w1_d0_c3 * sp[5];
    sp[124] = w1_d1_c3 * sp[6];
    sp[125] = sp[123] + sp[124];
    sp[126] = w1_d1_c4 * sp[3];
    sp[127] = w1_d0_c4 * sp[4];
    sp[128] = sp[126] + sp[127];
    sp[129] = w1_d0_c4 * sp[5];
    sp[130] = w1_d1_c4 * sp[6];
    sp[131] = sp[129] + sp[130];
    sp[132] = sp[122] * sp[3];
    sp[133] = sp[122] * sp[4];
    sp[134] = sp[125] * sp[6];
    sp[135] = sp[125] * sp[5];
    sp[136] = sp[132] + sp[134];
    sp[137] = sp[135] + sp[133];
    sp[138] = sp[128] * sp[3];
    sp[139] = sp[128] * sp[4];
    sp[140] = sp[131] * sp[6];
    sp[141] = sp[131] * sp[5];
    sp[142] = sp[138] + sp[140];
    sp[143] = sp[141] + sp[139];
    sp[144] = std::abs(sp[2]);
    alignas(32) double BF0[6] = {};
    alignas(32) double BF1[5] = {};
    alignas(32) double BF2[3] = {};
    alignas(32) double BF3[5] = {};
    alignas(32) double BF4[3] = {};
    alignas(32) double BF5[4] = {};
    alignas(32) double BF6[6] = {};
    alignas(32) double BF7[5] = {};
    alignas(32) double BF8[3] = {};
    alignas(32) double BF9[5] = {};
    alignas(32) double BF10[3] = {};
    alignas(32) double BF11[4] = {};
    alignas(32) double BF12[2] = {};
    alignas(32) double BF13[3] = {};
    alignas(32) double BF14[2] = {};
    alignas(32) double BF15[2] = {};
    alignas(32) double BF16[3] = {};
    alignas(32) double BF17[2] = {};
    alignas(32) double BF18[2] = {};
    alignas(32) double BF19[3] = {};
    alignas(32) double BF20[2] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c1 += w[1][ic + 6] * FE70_C0_Q12[0][iq][ic];
        const double w1_d1_c0 = w[1][0] * FE70_C0_D01_Q12[0][iq][0] + w[1][2] * FE70_C0_D01_Q12[0][iq][1] + w[1][3] * FE70_C0_D01_Q12[0][iq][2] + w[1][4] * FE70_C0_D01_Q12[0][iq][3] + w[1][5] * FE70_C0_D01_Q12[0][iq][4];
        const double w1_d0_c0 = w[1][0] * FE70_C0_D10_Q12[0][iq][0] + w[1][1] * FE70_C0_D10_Q12[0][iq][1] + w[1][3] * FE70_C0_D10_Q12[0][iq][2] + w[1][4] * FE70_C0_D10_Q12[0][iq][3] + w[1][5] * FE70_C0_D10_Q12[0][iq][4];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c0 += w[1][ic] * FE70_C0_Q12[0][iq][ic];
        const double w1_d1_c1 = w[1][6] * FE70_C0_D01_Q12[0][iq][0] + w[1][8] * FE70_C0_D01_Q12[0][iq][1] + w[1][9] * FE70_C0_D01_Q12[0][iq][2] + w[1][10] * FE70_C0_D01_Q12[0][iq][3] + w[1][11] * FE70_C0_D01_Q12[0][iq][4];
        const double w1_d0_c1 = w[1][6] * FE70_C0_D10_Q12[0][iq][0] + w[1][7] * FE70_C0_D10_Q12[0][iq][1] + w[1][9] * FE70_C0_D10_Q12[0][iq][2] + w[1][10] * FE70_C0_D10_Q12[0][iq][3] + w[1][11] * FE70_C0_D10_Q12[0][iq][4];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE70_C0_Q12[0][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE70_C0_Q12[0][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3 += w[3][ic] * FE3_C0_Q12[0][iq][ic];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE3_C0_Q12[0][iq][ic];
        double w1_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c3 += w[1][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w1_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c4 += w[1][ic + 18] * FE3_C0_Q12[0][iq][ic];
        const double w2_d1_c1 = w[2][6] * FE70_C0_D01_Q12[0][iq][0] + w[2][8] * FE70_C0_D01_Q12[0][iq][1] + w[2][9] * FE70_C0_D01_Q12[0][iq][2] + w[2][10] * FE70_C0_D01_Q12[0][iq][3] + w[2][11] * FE70_C0_D01_Q12[0][iq][4];
        const double w2_d0_c1 = w[2][6] * FE70_C0_D10_Q12[0][iq][0] + w[2][7] * FE70_C0_D10_Q12[0][iq][1] + w[2][9] * FE70_C0_D10_Q12[0][iq][2] + w[2][10] * FE70_C0_D10_Q12[0][iq][3] + w[2][11] * FE70_C0_D10_Q12[0][iq][4];
        const double w2_d1_c0 = w[2][0] * FE70_C0_D01_Q12[0][iq][0] + w[2][2] * FE70_C0_D01_Q12[0][iq][1] + w[2][3] * FE70_C0_D01_Q12[0][iq][2] + w[2][4] * FE70_C0_D01_Q12[0][iq][3] + w[2][5] * FE70_C0_D01_Q12[0][iq][4];
        const double w2_d0_c0 = w[2][0] * FE70_C0_D10_Q12[0][iq][0] + w[2][1] * FE70_C0_D10_Q12[0][iq][1] + w[2][3] * FE70_C0_D10_Q12[0][iq][2] + w[2][4] * FE70_C0_D10_Q12[0][iq][3] + w[2][5] * FE70_C0_D10_Q12[0][iq][4];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c2 += w[1][ic + 12] * FE3_C0_Q12[0][iq][ic];
        alignas(32) double sv12[687];
        sv12[0] = w1_d1_c0 * sp[3];
        sv12[1] = w1_d0_c0 * sp[4];
        sv12[2] = sv12[0] + sv12[1];
        sv12[3] = w1_c1 * sv12[2];
        sv12[4] = w1_d0_c0 * sp[5];
        sv12[5] = w1_d1_c0 * sp[6];
        sv12[6] = sv12[4] + sv12[5];
        sv12[7] = w1_c0 * sv12[6];
        sv12[8] = sv12[3] + sv12[7];
        sv12[9] = w1_d1_c1 * sp[3];
        sv12[10] = w1_d0_c1 * sp[4];
        sv12[11] = sv12[9] + sv12[10];
        sv12[12] = w1_c1 * sv12[11];
        sv12[13] = w1_d0_c1 * sp[5];
        sv12[14] = w1_d1_c1 * sp[6];
        sv12[15] = sv12[13] + sv12[14];
        sv12[16] = w1_c0 * sv12[15];
        sv12[17] = sv12[12] + sv12[16];
        sv12[18] = sv12[11] + sv12[6];
        sv12[19] = sv12[18] * sp[3];
        sv12[20] = sv12[18] * sp[4];
        sv12[21] = sv12[18] * sp[5];
        sv12[22] = sv12[18] * sp[6];
        sv12[23] = w1_c0 * w1_c0;
        sv12[24] = w1_c1 * w1_c1;
        sv12[25] = sv12[23] + sv12[24];
        sv12[26] = std::sqrt(1e-9 + sv12[25]);
        sv12[27] = sp[24] * sv12[26];
        sv12[28] = sv12[19] * sv12[27];
        sv12[29] = sv12[20] * sv12[27];
        sv12[30] = sv12[21] * sv12[27];
        sv12[31] = sv12[22] * sv12[27];
        sv12[32] = w2_c1 * sp[3];
        sv12[33] = w2_c1 * sp[4];
        sv12[34] = w2_c0 * sp[6];
        sv12[35] = w2_c0 * sp[5];
        sv12[36] = sv12[32] + sv12[34];
        sv12[37] = sv12[35] + sv12[33];
        sv12[38] = std::exp(w3);
        sv12[39] = sp[27] * sv12[38];
        sv12[40] = w2_c3 * (0.09 * sv12[39]);
        sv12[41] = sp[30] * (0.09 * sv12[38]);
        sv12[42] = sv12[40] + sv12[41];
        sv12[43] = w2_c3 * sv12[42];
        sv12[44] = w2_c3 * (0.09 * sv12[38]);
        sv12[45] = sp[30] * sv12[44];
        sv12[46] = sv12[43] + sv12[45];
        sv12[47] = w2_c4 * sp[33];
        sv12[48] = sv12[47] + sv12[47];
        sv12[49] = w2_c4 * w2_c4;
        sv12[50] = std::sqrt(1e-8 + sv12[49]);
        sv12[51] = sv12[48] / (2 * sv12[50]);
        sv12[52] = sp[33] + sv12[51];
        sv12[53] = w2_c3 * sv12[44];
        sv12[54] = w2_c4 + sv12[50];
        sv12[55] = sv12[53] / (0.5 * sv12[54]);
        sv12[56] = 0.5 * sv12[52] * sv12[55];
        sv12[57] = sv12[46] + -1 * sv12[56];
        sv12[58] = sv12[57] / (0.5 * sv12[54]);
        sv12[59] = 2.0 * sv12[58] * (sp[34] / 2);
        sv12[60] = 2.0 * sv12[58] * (sp[35] / 2);
        sv12[61] = 2.0 * (0.0001 + sv12[55]) * (sp[40] / 2);
        sv12[62] = 2.0 * (0.0001 + sv12[55]) * (sp[41] / 2);
        sv12[63] = 2.0 * (0.0001 + sv12[55]) * (sp[42] / 2);
        sv12[64] = sp[45] * sv12[38];
        sv12[65] = w2_c3 * (0.09 * sv12[64]);
        sv12[66] = sp[48] * (0.09 * sv12[38]);
        sv12[67] = sv12[65] + sv12[66];
        sv12[68] = w2_c3 * sv12[67];
        sv12[69] = sp[48] * sv12[44];
        sv12[70] = sv12[68] + sv12[69];
        sv12[71] = w2_c4 * sp[51];
        sv12[72] = sv12[71] + sv12[71];
        sv12[73] = sv12[72] / (2 * sv12[50]);
        sv12[74] = sp[51] + sv12[73];
        sv12[75] = 0.5 * sv12[74] * sv12[55];
        sv12[76] = sv12[70] + -1 * sv12[75];
        sv12[77] = sv12[76] / (0.5 * sv12[54]);
        sv12[78] = 2.0 * sv12[77] * (sp[6] / 2);
        sv12[79] = 2.0 * sv12[77] * (sp[5] / 2);
        sv12[80] = 2.0 * sv12[77] * (sp[4] / 2);
        sv12[81] = 2.0 * sv12[77] * (sp[3] / 2);
        sv12[82] = 2.0 * (0.0001 + sv12[55]) * (sp[59] / 2);
        sv12[83] = 2.0 * (0.0001 + sv12[55]) * (sp[60] / 2);
        sv12[84] = 2.0 * (0.0001 + sv12[55]) * (sp[58] / 2);
        sv12[85] = 2.0 * (0.0001 + sv12[55]) * (sp[56] / 2);
        sv12[86] = 2.0 * (0.0001 + sv12[55]) * (sp[53] / 2);
        sv12[87] = 2.0 * (0.0001 + sv12[55]) * (sp[55] / 2);
        sv12[88] = sv12[59] + sv12[78];
        sv12[89] = sv12[60] + sv12[79];
        sv12[90] = sv12[61] + sv12[82];
        sv12[91] = sv12[62] + sv12[83];
        sv12[92] = sv12[63] + sv12[84];
        sv12[93] = sv12[36] + -1 * sv12[88];
        sv12[94] = sv12[37] + -1 * sv12[89];
        sv12[95] = 0.09 * sv12[38] * sp[3];
        sv12[96] = 0.09 * sv12[38] * sp[4];
        sv12[97] = w2_c3 * sv12[95];
        sv12[98] = w2_c3 * sv12[96];
        sv12[99] = sv12[42] + sv12[40];
        sv12[100] = sv12[44] * sp[3];
        sv12[101] = sv12[44] * sp[4];
        sv12[102] = sv12[99] + sv12[41];
        sv12[103] = sv12[97] + sv12[100];
        sv12[104] = sv12[98] + sv12[101];
        sv12[105] = sv12[44] + sv12[44];
        sv12[106] = w2_c4 + w2_c4;
        sv12[107] = sv12[106] / (2 * sv12[50]);
        sv12[108] = 0.5 * (1.0 + sv12[107]) * sv12[55];
        sv12[109] = sv12[105] / (0.5 * sv12[54]);
        sv12[110] = -1 * sv12[108] / (0.5 * sv12[54]);
        sv12[111] = 0.5 * sv12[52] * sv12[109];
        sv12[112] = 0.5 * sv12[52] * sv12[110];
        sv12[113] = w2_c4 * sp[3];
        sv12[114] = w2_c4 * sp[4];
        sv12[115] = sv12[113] + sv12[113];
        sv12[116] = sv12[114] + sv12[114];
        sv12[117] = 2 * sv12[107] * sv12[51];
        sv12[118] = sp[61] + -1 * sv12[117];
        sv12[119] = sv12[118] / (2 * sv12[50]);
        sv12[120] = sv12[115] / (2 * sv12[50]);
        sv12[121] = sv12[116] / (2 * sv12[50]);
        sv12[122] = sp[3] + sv12[120];
        sv12[123] = sp[4] + sv12[121];
        sv12[124] = 0.5 * sv12[119] * sv12[55];
        sv12[125] = 0.5 * sv12[122] * sv12[55];
        sv12[126] = 0.5 * sv12[123] * sv12[55];
        sv12[127] = sv12[124] + sv12[112];
        sv12[128] = sv12[102] + -1 * sv12[111];
        sv12[129] = 0.5 * (1.0 + sv12[107]) * sv12[58];
        sv12[130] = -1 * sv12[127] + -1 * sv12[129];
        sv12[131] = sv12[128] / (0.5 * sv12[54]);
        sv12[132] = sv12[103] / (0.5 * sv12[54]);
        sv12[133] = sv12[104] / (0.5 * sv12[54]);
        sv12[134] = sv12[130] / (0.5 * sv12[54]);
        sv12[135] = -1 * sv12[125] / (0.5 * sv12[54]);
        sv12[136] = -1 * sv12[126] / (0.5 * sv12[54]);
        sv12[137] = sv12[11] + sv12[11];
        sv12[138] = 2.0 * sv12[131] * (sv12[137] / 2);
        sv12[139] = 2.0 * sv12[132] * (sv12[137] / 2);
        sv12[140] = 2.0 * sv12[133] * (sv12[137] / 2);
        sv12[141] = 2.0 * sv12[134] * (sv12[137] / 2);
        sv12[142] = 2.0 * sv12[135] * (sv12[137] / 2);
        sv12[143] = 2.0 * sv12[136] * (sv12[137] / 2);
        sv12[144] = 2.0 * sv12[109] * (sp[71] / 2);
        sv12[145] = 2.0 * sv12[110] * (sp[71] / 2);
        sv12[146] = sv12[138] + sv12[144];
        sv12[147] = sv12[141] + sv12[145];
        sv12[148] = 0.09 * sv12[38] * sp[6];
        sv12[149] = 0.09 * sv12[38] * sp[5];
        sv12[150] = w2_c3 * sv12[148];
        sv12[151] = w2_c3 * sv12[149];
        sv12[152] = sv12[67] + sv12[65];
        sv12[153] = sv12[44] * sp[6];
        sv12[154] = sv12[44] * sp[5];
        sv12[155] = sv12[152] + sv12[66];
        sv12[156] = sv12[150] + sv12[153];
        sv12[157] = sv12[151] + sv12[154];
        sv12[158] = 0.5 * sv12[74] * sv12[109];
        sv12[159] = 0.5 * sv12[74] * sv12[110];
        sv12[160] = w2_c4 * sp[6];
        sv12[161] = w2_c4 * sp[5];
        sv12[162] = sv12[160] + sv12[160];
        sv12[163] = sv12[161] + sv12[161];
        sv12[164] = 2 * sv12[107] * sv12[73];
        sv12[165] = sp[72] + -1 * sv12[164];
        sv12[166] = sv12[165] / (2 * sv12[50]);
        sv12[167] = sv12[162] / (2 * sv12[50]);
        sv12[168] = sv12[163] / (2 * sv12[50]);
        sv12[169] = sp[6] + sv12[167];
        sv12[170] = sp[5] + sv12[168];
        sv12[171] = 0.5 * sv12[166] * sv12[55];
        sv12[172] = 0.5 * sv12[169] * sv12[55];
        sv12[173] = 0.5 * sv12[170] * sv12[55];
        sv12[174] = sv12[171] + sv12[159];
        sv12[175] = sv12[155] + -1 * sv12[158];
        sv12[176] = 0.5 * (1.0 + sv12[107]) * sv12[77];
        sv12[177] = -1 * sv12[174] + -1 * sv12[176];
        sv12[178] = sv12[175] / (0.5 * sv12[54]);
        sv12[179] = sv12[156] / (0.5 * sv12[54]);
        sv12[180] = sv12[157] / (0.5 * sv12[54]);
        sv12[181] = sv12[177] / (0.5 * sv12[54]);
        sv12[182] = -1 * sv12[172] / (0.5 * sv12[54]);
        sv12[183] = -1 * sv12[173] / (0.5 * sv12[54]);
        sv12[184] = sv12[2] + sv12[15];
        sv12[185] = 2.0 * sv12[178] * (sv12[184] / 2);
        sv12[186] = 2.0 * sv12[179] * (sv12[184] / 2);
        sv12[187] = 2.0 * sv12[180] * (sv12[184] / 2);
        sv12[188] = 2.0 * sv12[181] * (sv12[184] / 2);
        sv12[189] = 2.0 * sv12[182] * (sv12[184] / 2);
        sv12[190] = 2.0 * sv12[183] * (sv12[184] / 2);
        sv12[191] = 2.0 * sv12[109] * (sp[91] / 2);
        sv12[192] = 2.0 * sv12[110] * (sp[91] / 2);
        sv12[193] = sv12[185] + sv12[191];
        sv12[194] = sv12[188] + sv12[192];
        sv12[195] = sv12[146] + sv12[193];
        sv12[196] = sv12[139] + sv12[186];
        sv12[197] = sv12[140] + sv12[187];
        sv12[198] = sv12[147] + sv12[194];
        sv12[199] = sv12[142] + sv12[189];
        sv12[200] = sv12[143] + sv12[190];
        sv12[201] = w2_c1 * sv12[11];
        sv12[202] = w2_c0 * sv12[15];
        sv12[203] = sv12[201] + sv12[202];
        sv12[204] = 2.0 * sv12[58] * (sv12[137] / 2);
        sv12[205] = 2.0 * (0.0001 + sv12[55]) * (sp[71] / 2);
        sv12[206] = sv12[204] + sv12[205];
        sv12[207] = 2.0 * sv12[77] * (sv12[184] / 2);
        sv12[208] = 2.0 * (0.0001 + sv12[55]) * (sp[91] / 2);
        sv12[209] = sv12[207] + sv12[208];
        sv12[210] = sv12[206] + sv12[209];
        sv12[211] = sv12[203] + -1 * sv12[210];
        sv12[212] = sv12[211] + sp[94];
        sv12[213] = sv12[212] * sv12[15];
        sv12[214] = sv12[212] * sv12[11];
        sv12[215] = sv12[212] * sv12[93];
        sv12[216] = sv12[212] * sv12[94];
        sv12[217] = sv12[212] * (-1 * sv12[80]);
        sv12[218] = sv12[212] * (-1 * sv12[81]);
        sv12[219] = sv12[212] * (-1 * sv12[90]);
        sv12[220] = sv12[212] * (-1 * sv12[91]);
        sv12[221] = sv12[212] * (-1 * sv12[92]);
        sv12[222] = sv12[212] * (-1 * sv12[85]);
        sv12[223] = sv12[212] * (-1 * sv12[86]);
        sv12[224] = sv12[212] * (-1 * sv12[87]);
        sv12[225] = sv12[212] * sp[3];
        sv12[226] = sv12[212] * sp[4];
        sv12[227] = sv12[212] * (-1 * sv12[195]);
        sv12[228] = sv12[212] * (-1 * sv12[196]);
        sv12[229] = sv12[212] * (-1 * sv12[197]);
        sv12[230] = sv12[212] * (-1 * sv12[198]);
        sv12[231] = sv12[212] * (-1 * sv12[199]);
        sv12[232] = sv12[212] * (-1 * sv12[200]);
        sv12[233] = 2.0 * sv12[58] * (sp[6] / 2);
        sv12[234] = 2.0 * sv12[58] * (sp[5] / 2);
        sv12[235] = 2.0 * sv12[58] * (sp[4] / 2);
        sv12[236] = 2.0 * sv12[58] * (sp[3] / 2);
        sv12[237] = 2.0 * (0.0001 + sv12[55]) * (sp[39] / 2);
        sv12[238] = 2.0 * (0.0001 + sv12[55]) * (sp[36] / 2);
        sv12[239] = 2.0 * (0.0001 + sv12[55]) * (sp[38] / 2);
        sv12[240] = 2.0 * sv12[77] * (sp[95] / 2);
        sv12[241] = 2.0 * sv12[77] * (sp[96] / 2);
        sv12[242] = 2.0 * (0.0001 + sv12[55]) * (sp[97] / 2);
        sv12[243] = 2.0 * (0.0001 + sv12[55]) * (sp[98] / 2);
        sv12[244] = 2.0 * (0.0001 + sv12[55]) * (sp[99] / 2);
        sv12[245] = sv12[240] + sv12[235];
        sv12[246] = sv12[241] + sv12[236];
        sv12[247] = sv12[242] + sv12[237];
        sv12[248] = sv12[243] + sv12[238];
        sv12[249] = sv12[244] + sv12[239];
        sv12[250] = sv12[37] + -1 * sv12[245];
        sv12[251] = sv12[36] + -1 * sv12[246];
        sv12[252] = 2.0 * sv12[131] * (sv12[184] / 2);
        sv12[253] = 2.0 * sv12[132] * (sv12[184] / 2);
        sv12[254] = 2.0 * sv12[133] * (sv12[184] / 2);
        sv12[255] = 2.0 * sv12[134] * (sv12[184] / 2);
        sv12[256] = 2.0 * sv12[135] * (sv12[184] / 2);
        sv12[257] = 2.0 * sv12[136] * (sv12[184] / 2);
        sv12[258] = 2.0 * sv12[109] * (sp[112] / 2);
        sv12[259] = 2.0 * sv12[110] * (sp[112] / 2);
        sv12[260] = sv12[252] + sv12[258];
        sv12[261] = sv12[255] + sv12[259];
        sv12[262] = sv12[6] + sv12[6];
        sv12[263] = 2.0 * sv12[178] * (sv12[262] / 2);
        sv12[264] = 2.0 * sv12[179] * (sv12[262] / 2);
        sv12[265] = 2.0 * sv12[180] * (sv12[262] / 2);
        sv12[266] = 2.0 * sv12[181] * (sv12[262] / 2);
        sv12[267] = 2.0 * sv12[182] * (sv12[262] / 2);
        sv12[268] = 2.0 * sv12[183] * (sv12[262] / 2);
        sv12[269] = 2.0 * sv12[109] * (sp[116] / 2);
        sv12[270] = 2.0 * sv12[110] * (sp[116] / 2);
        sv12[271] = sv12[263] + sv12[269];
        sv12[272] = sv12[266] + sv12[270];
        sv12[273] = sv12[260] + sv12[271];
        sv12[274] = sv12[264] + sv12[253];
        sv12[275] = sv12[265] + sv12[254];
        sv12[276] = sv12[261] + sv12[272];
        sv12[277] = sv12[267] + sv12[256];
        sv12[278] = sv12[268] + sv12[257];
        sv12[279] = w2_c1 * sv12[2];
        sv12[280] = w2_c0 * sv12[6];
        sv12[281] = sv12[279] + sv12[280];
        sv12[282] = 2.0 * sv12[58] * (sv12[184] / 2);
        sv12[283] = 2.0 * (0.0001 + sv12[55]) * (sp[112] / 2);
        sv12[284] = sv12[282] + sv12[283];
        sv12[285] = 2.0 * sv12[77] * (sv12[262] / 2);
        sv12[286] = 2.0 * (0.0001 + sv12[55]) * (sp[116] / 2);
        sv12[287] = sv12[285] + sv12[286];
        sv12[288] = sv12[284] + sv12[287];
        sv12[289] = sv12[281] + -1 * sv12[288];
        sv12[290] = sv12[289] + sp[119];
        sv12[291] = sv12[290] * sv12[6];
        sv12[292] = sv12[290] * sv12[2];
        sv12[293] = sv12[290] * (-1 * sv12[233]);
        sv12[294] = sv12[290] * (-1 * sv12[234]);
        sv12[295] = sv12[290] * sv12[250];
        sv12[296] = sv12[290] * sv12[251];
        sv12[297] = sv12[290] * (-1 * sv12[86]);
        sv12[298] = sv12[290] * (-1 * sv12[85]);
        sv12[299] = sv12[290] * (-1 * sv12[87]);
        sv12[300] = sv12[290] * (-1 * sv12[247]);
        sv12[301] = sv12[290] * (-1 * sv12[248]);
        sv12[302] = sv12[290] * (-1 * sv12[249]);
        sv12[303] = sv12[290] * sp[6];
        sv12[304] = sv12[290] * sp[5];
        sv12[305] = sv12[290] * (-1 * sv12[273]);
        sv12[306] = sv12[290] * (-1 * sv12[274]);
        sv12[307] = sv12[290] * (-1 * sv12[275]);
        sv12[308] = sv12[290] * (-1 * sv12[276]);
        sv12[309] = sv12[290] * (-1 * sv12[277]);
        sv12[310] = sv12[290] * (-1 * sv12[278]);
        sv12[311] = sv12[291] + sv12[213];
        sv12[312] = sv12[292] + sv12[214];
        sv12[313] = sv12[215] + sv12[293];
        sv12[314] = sv12[216] + sv12[294];
        sv12[315] = sv12[295] + sv12[217];
        sv12[316] = sv12[296] + sv12[218];
        sv12[317] = sv12[219] + sv12[297];
        sv12[318] = sv12[220] + sv12[298];
        sv12[319] = sv12[221] + sv12[299];
        sv12[320] = sv12[300] + sv12[222];
        sv12[321] = sv12[301] + sv12[223];
        sv12[322] = sv12[302] + sv12[224];
        sv12[323] = sv12[225] + sv12[303];
        sv12[324] = sv12[304] + sv12[226];
        sv12[325] = sv12[305] + sv12[227];
        sv12[326] = sv12[306] + sv12[228];
        sv12[327] = sv12[229] + sv12[307];
        sv12[328] = sv12[308] + sv12[230];
        sv12[329] = sv12[309] + sv12[231];
        sv12[330] = sv12[232] + sv12[310];
        sv12[331] = std::sqrt(sv12[25]);
        sv12[332] = 0.5 * (2.0 * sp[23]) * sv12[331];
        sv12[333] = w1_c3 * (0.09 * sv12[38]);
        sv12[334] = w1_c3 * sv12[333];
        sv12[335] = w1_c4 * w1_c4;
        sv12[336] = std::sqrt(1e-8 + sv12[335]);
        sv12[337] = w1_c4 + sv12[336];
        sv12[338] = sv12[334] / (0.5 * sv12[337]);
        sv12[339] = sv12[332] / (0.0001 + sv12[338]);
        sv12[340] = std::exp(-2.0 * sv12[339]);
        sv12[341] = (1.0 + sv12[340]) / (1.0 + -1 * sv12[340]);
        sv12[342] = -1 * (1.0 / sv12[339]) + sv12[341];
        sv12[343] = sv12[342] * (2.0 * sp[23]);
        sv12[344] = sv12[343] / sv12[331];
        sv12[345] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[339]) * (2.0 * sp[23]);
        sv12[346] = sv12[345] * (2.0 * sp[23]);
        sv12[347] = sv12[346] / (0.0001 + sv12[338]);
        sv12[348] = (sv12[339] >= 0.1 ? sv12[344] : sv12[347]);
        sv12[349] = sv12[311] * sv12[348];
        sv12[350] = sv12[312] * sv12[348];
        sv12[351] = sv12[313] * sv12[348];
        sv12[352] = sv12[314] * sv12[348];
        sv12[353] = sv12[315] * sv12[348];
        sv12[354] = sv12[316] * sv12[348];
        sv12[355] = sv12[317] * sv12[348];
        sv12[356] = sv12[318] * sv12[348];
        sv12[357] = sv12[319] * sv12[348];
        sv12[358] = sv12[320] * sv12[348];
        sv12[359] = sv12[321] * sv12[348];
        sv12[360] = sv12[322] * sv12[348];
        sv12[361] = sv12[323] * sv12[348];
        sv12[362] = sv12[324] * sv12[348];
        sv12[363] = sv12[325] * sv12[348];
        sv12[364] = sv12[326] * sv12[348];
        sv12[365] = sv12[327] * sv12[348];
        sv12[366] = sv12[328] * sv12[348];
        sv12[367] = sv12[329] * sv12[348];
        sv12[368] = sv12[330] * sv12[348];
        sv12[369] = sv12[28] + sv12[351];
        sv12[370] = sv12[29] + sv12[352];
        sv12[371] = sv12[30] + sv12[353];
        sv12[372] = sv12[31] + sv12[354];
        sv12[373] = sp[3] * sv12[58];
        sv12[374] = sp[4] * sv12[58];
        sv12[375] = sp[6] * sv12[77];
        sv12[376] = sp[5] * sv12[77];
        sv12[377] = sv12[373] + sv12[375];
        sv12[378] = sv12[374] + sv12[376];
        sv12[379] = sv12[36] + -1 * sv12[377];
        sv12[380] = sv12[37] + -1 * sv12[378];
        sv12[381] = sp[122] * sv12[131];
        sv12[382] = sp[122] * sv12[132];
        sv12[383] = sp[122] * sv12[133];
        sv12[384] = sp[122] * sv12[134];
        sv12[385] = sp[122] * sv12[135];
        sv12[386] = sp[122] * sv12[136];
        sv12[387] = sp[125] * sv12[178];
        sv12[388] = sp[125] * sv12[179];
        sv12[389] = sp[125] * sv12[180];
        sv12[390] = sp[125] * sv12[181];
        sv12[391] = sp[125] * sv12[182];
        sv12[392] = sp[125] * sv12[183];
        sv12[393] = sv12[381] + sv12[387];
        sv12[394] = sv12[382] + sv12[388];
        sv12[395] = sv12[389] + sv12[383];
        sv12[396] = sv12[384] + sv12[390];
        sv12[397] = sv12[385] + sv12[391];
        sv12[398] = sv12[392] + sv12[386];
        sv12[399] = w2_d1_c1 * sp[3];
        sv12[400] = w2_d0_c1 * sp[4];
        sv12[401] = sv12[399] + sv12[400];
        sv12[402] = sv12[401] + sv12[401];
        sv12[403] = sv12[402] / 2 * (sv12[402] / 2);
        sv12[404] = w2_d1_c0 * sp[3];
        sv12[405] = w2_d0_c0 * sp[4];
        sv12[406] = sv12[404] + sv12[405];
        sv12[407] = w2_d0_c1 * sp[5];
        sv12[408] = w2_d1_c1 * sp[6];
        sv12[409] = sv12[407] + sv12[408];
        sv12[410] = sv12[406] + sv12[409];
        sv12[411] = sv12[410] / 2 * (sv12[410] / 2);
        sv12[412] = sv12[403] + sv12[411];
        sv12[413] = w2_d0_c0 * sp[5];
        sv12[414] = w2_d1_c0 * sp[6];
        sv12[415] = sv12[413] + sv12[414];
        sv12[416] = sv12[415] + sv12[415];
        sv12[417] = sv12[416] / 2 * (sv12[416] / 2);
        sv12[418] = sv12[417] + sv12[411];
        sv12[419] = sv12[412] + sv12[418];
        sv12[420] = 2.0 * sv12[419] * sv12[109];
        sv12[421] = 2.0 * sv12[419] * sv12[110];
        sv12[422] = sv12[402] / 2 * (sp[34] / 2);
        sv12[423] = sv12[402] / 2 * (sp[35] / 2);
        sv12[424] = sv12[422] + sv12[422];
        sv12[425] = sv12[423] + sv12[423];
        sv12[426] = sv12[410] / 2 * (sp[6] / 2);
        sv12[427] = sv12[410] / 2 * (sp[5] / 2);
        sv12[428] = sv12[410] / 2 * (sp[4] / 2);
        sv12[429] = sv12[410] / 2 * (sp[3] / 2);
        sv12[430] = sv12[426] + sv12[426];
        sv12[431] = sv12[427] + sv12[427];
        sv12[432] = sv12[428] + sv12[428];
        sv12[433] = sv12[429] + sv12[429];
        sv12[434] = sv12[424] + sv12[430];
        sv12[435] = sv12[425] + sv12[431];
        sv12[436] = sv12[416] / 2 * (sp[95] / 2);
        sv12[437] = sv12[416] / 2 * (sp[96] / 2);
        sv12[438] = sv12[436] + sv12[436];
        sv12[439] = sv12[437] + sv12[437];
        sv12[440] = sv12[438] + sv12[432];
        sv12[441] = sv12[439] + sv12[433];
        sv12[442] = sv12[434] + sv12[430];
        sv12[443] = sv12[435] + sv12[431];
        sv12[444] = sv12[440] + sv12[432];
        sv12[445] = sv12[441] + sv12[433];
        sv12[446] = 2.0 * sv12[442] * sv12[55];
        sv12[447] = 2.0 * sv12[443] * sv12[55];
        sv12[448] = 2.0 * sv12[444] * sv12[55];
        sv12[449] = 2.0 * sv12[445] * sv12[55];
        sv12[450] = -1 * sv12[393] + -1 * sv12[420];
        sv12[451] = 1.0 + -1 * sv12[396] + -1 * sv12[421];
        sv12[452] = sv12[379] + -1 * sv12[394];
        sv12[453] = sv12[380] + -1 * sv12[395];
        sv12[454] = w2_c1 * sp[122];
        sv12[455] = w2_c0 * sp[125];
        sv12[456] = sv12[454] + sv12[455];
        sv12[457] = sp[122] * sv12[58];
        sv12[458] = sp[125] * sv12[77];
        sv12[459] = sv12[457] + sv12[458];
        sv12[460] = sv12[456] + -1 * sv12[459];
        sv12[461] = w2_c4 + sv12[460];
        sv12[462] = 2.0 * sv12[419] * sv12[55];
        sv12[463] = sv12[461] + -1 * sv12[462];
        sv12[464] = sv12[463] * sp[125];
        sv12[465] = sv12[463] * sp[122];
        sv12[466] = sv12[463] * (-1 * sv12[446]);
        sv12[467] = sv12[463] * (-1 * sv12[447]);
        sv12[468] = sv12[463] * (-1 * sv12[448]);
        sv12[469] = sv12[463] * (-1 * sv12[449]);
        sv12[470] = sv12[450] * sv12[463];
        sv12[471] = sv12[452] * sv12[463];
        sv12[472] = sv12[453] * sv12[463];
        sv12[473] = sv12[463] * sv12[451];
        sv12[474] = sv12[463] * (-1 * sv12[397]);
        sv12[475] = sv12[463] * (-1 * sv12[398]);
        sv12[476] = sv12[464] * sv12[348];
        sv12[477] = sv12[465] * sv12[348];
        sv12[478] = sv12[466] * sv12[348];
        sv12[479] = sv12[467] * sv12[348];
        sv12[480] = sv12[468] * sv12[348];
        sv12[481] = sv12[469] * sv12[348];
        sv12[482] = sv12[470] * sv12[348];
        sv12[483] = sv12[471] * sv12[348];
        sv12[484] = sv12[472] * sv12[348];
        sv12[485] = sv12[473] * sv12[348];
        sv12[486] = sv12[474] * sv12[348];
        sv12[487] = sv12[475] * sv12[348];
        sv12[488] = sv12[349] + sv12[476];
        sv12[489] = sv12[350] + sv12[477];
        sv12[490] = sv12[369] + sv12[478];
        sv12[491] = sv12[370] + sv12[479];
        sv12[492] = sv12[371] + sv12[480];
        sv12[493] = sv12[372] + sv12[481];
        sv12[494] = sv12[363] + sv12[482];
        sv12[495] = sv12[364] + sv12[483];
        sv12[496] = sv12[365] + sv12[484];
        sv12[497] = sv12[366] + sv12[485];
        sv12[498] = sv12[367] + sv12[486];
        sv12[499] = sv12[368] + sv12[487];
        sv12[500] = sv12[58] / 1.3 * sp[3];
        sv12[501] = sv12[58] / 1.3 * sp[4];
        sv12[502] = sv12[77] / 1.3 * sp[6];
        sv12[503] = sv12[77] / 1.3 * sp[5];
        sv12[504] = sv12[500] + sv12[502];
        sv12[505] = sv12[503] + sv12[501];
        sv12[506] = sv12[36] + -1 * sv12[504];
        sv12[507] = sv12[37] + -1 * sv12[505];
        sv12[508] = w2_c3 * w2_c3;
        sv12[509] = std::sqrt(1e-8 + sv12[508]);
        sv12[510] = w2_c3 + sv12[509];
        sv12[511] = 1.92 * w1_c4 * (1.0 / (0.5 * sv12[510]));
        sv12[512] = w1_c4 / (0.5 * sv12[510]);
        sv12[513] = sv12[511] + 1.92 * sv12[512];
        sv12[514] = 2.0 * sv12[419] * (0.09 * (1.44 * sv12[38]));
        sv12[515] = sp[128] * (sv12[131] / 1.3);
        sv12[516] = sp[128] * (sv12[132] / 1.3);
        sv12[517] = sp[128] * (sv12[133] / 1.3);
        sv12[518] = sp[128] * (sv12[134] / 1.3);
        sv12[519] = sp[128] * (sv12[135] / 1.3);
        sv12[520] = sp[128] * (sv12[136] / 1.3);
        sv12[521] = sp[131] * (sv12[178] / 1.3);
        sv12[522] = sp[131] * (sv12[179] / 1.3);
        sv12[523] = sp[131] * (sv12[180] / 1.3);
        sv12[524] = sp[131] * (sv12[181] / 1.3);
        sv12[525] = sp[131] * (sv12[182] / 1.3);
        sv12[526] = sp[131] * (sv12[183] / 1.3);
        sv12[527] = sv12[515] + sv12[521];
        sv12[528] = sv12[516] + sv12[522];
        sv12[529] = sv12[523] + sv12[517];
        sv12[530] = sv12[518] + sv12[524];
        sv12[531] = sv12[519] + sv12[525];
        sv12[532] = sv12[526] + sv12[520];
        sv12[533] = w2_c3 + w2_c3;
        sv12[534] = sv12[533] / (2 * sv12[509]);
        sv12[535] = 0.5 * (1.0 + sv12[534]) * sv12[512];
        sv12[536] = -1 * sv12[535] / (0.5 * sv12[510]);
        sv12[537] = 1.92 * w1_c4 * sv12[536];
        sv12[538] = -1 * sv12[527] + sv12[537];
        sv12[539] = w1_c3 * (0.09 * (1.44 * sv12[38]));
        sv12[540] = 2.0 * sv12[442] * sv12[539];
        sv12[541] = 2.0 * sv12[443] * sv12[539];
        sv12[542] = 2.0 * sv12[444] * sv12[539];
        sv12[543] = 2.0 * sv12[445] * sv12[539];
        sv12[544] = sv12[538] + -1 * sv12[514];
        sv12[545] = sv12[513] + -1 * sv12[530];
        sv12[546] = sv12[506] + -1 * sv12[531];
        sv12[547] = sv12[507] + -1 * sv12[532];
        sv12[548] = w2_c1 * sp[128];
        sv12[549] = w2_c0 * sp[131];
        sv12[550] = sv12[548] + sv12[549];
        sv12[551] = sp[128] * (sv12[58] / 1.3);
        sv12[552] = sp[131] * (sv12[77] / 1.3);
        sv12[553] = sv12[551] + sv12[552];
        sv12[554] = sv12[550] + -1 * sv12[553];
        sv12[555] = 1.92 * w1_c4 * sv12[512];
        sv12[556] = sv12[554] + sv12[555];
        sv12[557] = 2.0 * sv12[419] * sv12[539];
        sv12[558] = sv12[556] + -1 * sv12[557];
        sv12[559] = sv12[558] * sp[131];
        sv12[560] = sv12[558] * sp[128];
        sv12[561] = sv12[558] * (-1 * sv12[540]);
        sv12[562] = sv12[558] * (-1 * sv12[541]);
        sv12[563] = sv12[558] * (-1 * sv12[542]);
        sv12[564] = sv12[558] * (-1 * sv12[543]);
        sv12[565] = sv12[558] * sv12[544];
        sv12[566] = sv12[558] * (-1 * sv12[528]);
        sv12[567] = sv12[558] * (-1 * sv12[529]);
        sv12[568] = sv12[545] * sv12[558];
        sv12[569] = sv12[546] * sv12[558];
        sv12[570] = sv12[547] * sv12[558];
        sv12[571] = sv12[332] / (0.0001 + sv12[338] / 1.3);
        sv12[572] = std::exp(-2.0 * sv12[571]);
        sv12[573] = (1.0 + sv12[572]) / (1.0 + -1 * sv12[572]);
        sv12[574] = -1 * (1.0 / sv12[571]) + sv12[573];
        sv12[575] = sv12[574] * (2.0 * sp[23]);
        sv12[576] = sv12[575] / sv12[331];
        sv12[577] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[571]) * (2.0 * sp[23]);
        sv12[578] = sv12[577] * (2.0 * sp[23]);
        sv12[579] = sv12[578] / (0.0001 + sv12[338] / 1.3);
        sv12[580] = (sv12[571] >= 0.1 ? sv12[576] : sv12[579]);
        sv12[581] = sv12[559] * sv12[580];
        sv12[582] = sv12[560] * sv12[580];
        sv12[583] = sv12[561] * sv12[580];
        sv12[584] = sv12[562] * sv12[580];
        sv12[585] = sv12[563] * sv12[580];
        sv12[586] = sv12[564] * sv12[580];
        sv12[587] = sv12[565] * sv12[580];
        sv12[588] = sv12[566] * sv12[580];
        sv12[589] = sv12[567] * sv12[580];
        sv12[590] = sv12[568] * sv12[580];
        sv12[591] = sv12[569] * sv12[580];
        sv12[592] = sv12[570] * sv12[580];
        sv12[593] = sv12[488] + sv12[581];
        sv12[594] = sv12[489] + sv12[582];
        sv12[595] = sv12[490] + sv12[583];
        sv12[596] = sv12[491] + sv12[584];
        sv12[597] = sv12[492] + sv12[585];
        sv12[598] = sv12[493] + sv12[586];
        sv12[599] = sv12[494] + sv12[587];
        sv12[600] = sv12[495] + sv12[588];
        sv12[601] = sv12[496] + sv12[589];
        sv12[602] = sv12[497] + sv12[590];
        sv12[603] = sv12[498] + sv12[591];
        sv12[604] = sv12[499] + sv12[592];
        sv12[605] = w1_c4 + sv12[599];
        sv12[606] = w2_c3 * (0.09 * (1.44 * sv12[38]));
        sv12[607] = 2.0 * sv12[419] * sv12[606];
        sv12[608] = sv12[602] + -1 * sv12[607];
        sv12[609] = sv12[605] + -1 * sv12[462];
        sv12[610] = w1_c3 * w1_c3;
        sv12[611] = std::sqrt(1e-8 + sv12[610]);
        sv12[612] = w1_c3 + sv12[611];
        sv12[613] = w1_c4 / (0.5 * sv12[612]);
        sv12[614] = 1.92 * w1_c4 * sv12[613];
        sv12[615] = sv12[608] + sv12[614];
        sv12[616] = w1_c2 * sp[3];
        sv12[617] = w1_c2 * sp[4];
        sv12[618] = w1_c2 * sp[5];
        sv12[619] = w1_c2 * sp[6];
        sv12[620] = sv12[595] + -1 * sv12[616];
        sv12[621] = sv12[596] + -1 * sv12[617];
        sv12[622] = sv12[597] + -1 * sv12[618];
        sv12[623] = sv12[598] + -1 * sv12[619];
        sv12[624] = sp[136] * (0.0001 + sv12[338]);
        sv12[625] = sp[137] * (0.0001 + sv12[338]);
        sv12[626] = sv12[600] + sv12[624];
        sv12[627] = sv12[601] + sv12[625];
        sv12[628] = sp[142] * (0.0001 + sv12[338] / 1.3);
        sv12[629] = sp[143] * (0.0001 + sv12[338] / 1.3);
        sv12[630] = sv12[603] + sv12[628];
        sv12[631] = sv12[604] + sv12[629];
        sv12[632] = w1_c1 * sp[122];
        sv12[633] = w1_c0 * sp[125];
        sv12[634] = sv12[632] + sv12[633];
        sv12[635] = sv12[634] + sv12[609];
        sv12[636] = w1_c1 * sp[128];
        sv12[637] = w1_c0 * sp[131];
        sv12[638] = sv12[636] + sv12[637];
        sv12[639] = sv12[638] + sv12[615];
        sv12[640] = sv12[137] / 2 * (sp[34] / 2);
        sv12[641] = sv12[137] / 2 * (sp[35] / 2);
        sv12[642] = sv12[184] / 2 * (sp[6] / 2);
        sv12[643] = sv12[184] / 2 * (sp[5] / 2);
        sv12[644] = sv12[184] / 2 * (sp[4] / 2);
        sv12[645] = sv12[184] / 2 * (sp[3] / 2);
        sv12[646] = sv12[640] + sv12[642];
        sv12[647] = sv12[641] + sv12[643];
        sv12[648] = sv12[262] / 2 * (sp[95] / 2);
        sv12[649] = sv12[262] / 2 * (sp[96] / 2);
        sv12[650] = sv12[648] + sv12[644];
        sv12[651] = sv12[649] + sv12[645];
        sv12[652] = sv12[646] + sv12[642];
        sv12[653] = sv12[647] + sv12[643];
        sv12[654] = sv12[650] + sv12[644];
        sv12[655] = sv12[651] + sv12[645];
        sv12[656] = sv12[652] * (2.0 * (0.0001 + sv12[338]));
        sv12[657] = sv12[653] * (2.0 * (0.0001 + sv12[338]));
        sv12[658] = sv12[654] * (2.0 * (0.0001 + sv12[338]));
        sv12[659] = sv12[655] * (2.0 * (0.0001 + sv12[338]));
        sv12[660] = sv12[620] + sv12[656];
        sv12[661] = sv12[621] + sv12[657];
        sv12[662] = sv12[622] + sv12[658];
        sv12[663] = sv12[623] + sv12[659];
        sv12[664] = sv12[8] + sv12[593];
        sv12[665] = sv12[17] + sv12[594];
        sv12[666] = sv12[664] * sp[144];
        sv12[667] = sv12[665] * sp[144];
        sv12[668] = sv12[660] * sp[144];
        sv12[669] = sv12[661] * sp[144];
        sv12[670] = sv12[662] * sp[144];
        sv12[671] = sv12[663] * sp[144];
        sv12[672] = sv12[355] * sp[144];
        sv12[673] = sv12[356] * sp[144];
        sv12[674] = sv12[357] * sp[144];
        sv12[675] = sv12[358] * sp[144];
        sv12[676] = sv12[359] * sp[144];
        sv12[677] = sv12[360] * sp[144];
        sv12[678] = sv12[361] * sp[144];
        sv12[679] = sv12[362] * sp[144];
        sv12[680] = sv12[635] * sp[144];
        sv12[681] = sv12[626] * sp[144];
        sv12[682] = sv12[627] * sp[144];
        sv12[683] = sv12[639] * sp[144];
        sv12[684] = sv12[630] * sp[144];
        sv12[685] = sv12[631] * sp[144];
        sv12[686] = sv12[18] * sp[144];
        const double fw0 = sv12[666] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            BF0[i] += fw0 * FE70_C0_Q12[0][iq][i];
        const double fw1 = sv12[670] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF1[i] += fw1 * FE70_C0_D10_Q12[0][iq][i];
        const double fw2 = sv12[677] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF2[i] += fw2 * FE70_C0_D02_Q12[0][0][i];
        const double fw3 = sv12[671] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF3[i] += fw3 * FE70_C0_D01_Q12[0][iq][i];
        const double fw4 = sv12[676] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF4[i] += fw4 * FE70_C0_D02_Q12[0][0][i];
        const double fw5 = sv12[675] * weights12[iq];
        for (int i = 0; i < 4; ++i)
            BF5[i] += fw5 * FE70_C0_D11_Q12[0][0][i];
        const double fw6 = sv12[667] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            BF6[i] += fw6 * FE70_C0_Q12[0][iq][i];
        const double fw7 = sv12[669] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF7[i] += fw7 * FE70_C0_D10_Q12[0][iq][i];
        const double fw8 = sv12[674] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF8[i] += fw8 * FE70_C0_D02_Q12[0][0][i];
        const double fw9 = sv12[668] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF9[i] += fw9 * FE70_C0_D01_Q12[0][iq][i];
        const double fw10 = sv12[672] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF10[i] += fw10 * FE70_C0_D02_Q12[0][0][i];
        const double fw11 = sv12[673] * weights12[iq];
        for (int i = 0; i < 4; ++i)
            BF11[i] += fw11 * FE70_C0_D11_Q12[0][0][i];
        const double fw12 = sv12[679] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF12[i] += fw12 * FE3_C0_D01_Q12[0][0][i];
        const double fw13 = sv12[686] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF13[i] += fw13 * FE3_C0_Q12[0][iq][i];
        const double fw14 = sv12[678] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF14[i] += fw14 * FE3_C0_D01_Q12[0][0][i];
        const double fw15 = sv12[682] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF15[i] += fw15 * FE3_C0_D01_Q12[0][0][i];
        const double fw16 = sv12[680] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF16[i] += fw16 * FE3_C0_Q12[0][iq][i];
        const double fw17 = sv12[681] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF17[i] += fw17 * FE3_C0_D01_Q12[0][0][i];
        const double fw18 = sv12[685] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF18[i] += fw18 * FE3_C0_D01_Q12[0][0][i];
        const double fw19 = sv12[683] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF19[i] += fw19 * FE3_C0_Q12[0][iq][i];
        const double fw20 = sv12[684] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF20[i] += fw20 * FE3_C0_D01_Q12[0][0][i];
    }
    std::fill(A, A + 21, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[3] = { 0, 1, 5 };
    static const int DM2[5] = { 0, 2, 3, 4, 5 };
    static const int DM3[3] = { 0, 2, 4 };
    static const int DM4[4] = { 0, 3, 4, 5 };
    static const int DM5[5] = { 6, 7, 9, 10, 11 };
    static const int DM6[3] = { 6, 7, 11 };
    static const int DM7[5] = { 6, 8, 9, 10, 11 };
    static const int DM8[3] = { 6, 8, 10 };
    static const int DM9[4] = { 6, 9, 10, 11 };
    static const int DM10[2] = { 12, 14 };
    static const int DM11[2] = { 15, 17 };
    static const int DM12[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 5; ++i)
        A[DM0[i]] += BF1[i];
    for (int i = 0; i < 3; ++i)
        A[DM1[i]] += BF2[i];
    for (int i = 0; i < 5; ++i)
        A[DM2[i]] += BF3[i];
    for (int i = 0; i < 3; ++i)
        A[DM3[i]] += BF4[i];
    for (int i = 0; i < 4; ++i)
        A[DM4[i]] += BF5[i];
    for (int i = 0; i < 6; ++i)
        A[i + 6] += BF6[i];
    for (int i = 0; i < 5; ++i)
        A[DM5[i]] += BF7[i];
    for (int i = 0; i < 3; ++i)
        A[DM6[i]] += BF8[i];
    for (int i = 0; i < 5; ++i)
        A[DM7[i]] += BF9[i];
    for (int i = 0; i < 3; ++i)
        A[DM8[i]] += BF10[i];
    for (int i = 0; i < 4; ++i)
        A[DM9[i]] += BF11[i];
    for (int i = 0; i < 2; ++i)
        A[i + 12] += BF12[i];
    for (int i = 0; i < 3; ++i)
        A[i + 12] += BF13[i];
    for (int i = 0; i < 2; ++i)
        A[DM10[i]] += BF14[i];
    for (int i = 0; i < 2; ++i)
        A[i + 15] += BF15[i];
    for (int i = 0; i < 3; ++i)
        A[i + 15] += BF16[i];
    for (int i = 0; i < 2; ++i)
        A[DM11[i]] += BF17[i];
    for (int i = 0; i < 2; ++i)
        A[i + 18] += BF18[i];
    for (int i = 0; i < 3; ++i)
        A[i + 18] += BF19[i];
    for (int i = 0; i < 2; ++i)
        A[DM12[i]] += BF20[i];
  }

};


class ransnonlinear_exterior_facet_integral_0_3: public ufc::exterior_facet_integral
{
public:

  ransnonlinear_exterior_facet_integral_0_3() : ufc::exterior_facet_integral()
  {

  }

  ~ransnonlinear_exterior_facet_integral_0_3() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 21
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.1739274225687268, 0.3260725774312731, 0.3260725774312731, 0.1739274225687268 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE33_C0_D01_F_Q4[3][4][5] =
        { { { 1.0, -0.7222726231881047, 3.722272623188091, -0.2777273768118826, -3.722272623188107 },
            { 1.0, 0.3200379128302891, 2.679962087169697, -1.320037912830275, -2.679962087169714 },
            { 1.0, 1.679962087169715, 1.320037912830271, -2.679962087169701, -1.320037912830287 },
            { 1.0, 2.722272623188108, 0.2777273768118786, -3.722272623188096, -0.2777273768118922 } },
          { { -2.72227262318811, -0.722272623188105, 0.0, 3.444545246376218, 0.0 },
            { -1.679962087169718, 0.3200379128302888, 0.0, 1.359924174339433, 0.0 },
            { -0.3200379128302928, 1.679962087169715, 0.0, -1.359924174339417, 0.0 },
            { 0.7222726231881, 2.722272623188108, 0.0, -3.444545246376202, 0.0 } },
          { { -2.72227262318811, -1.0, 0.2777273768118848, 3.722272623188112, -0.2777273768118925 },
            { -1.679962087169717, -1.0, 1.320037912830276, 2.679962087169721, -1.320037912830287 },
            { -0.3200379128302917, -1.0, 2.6799620871697, 1.320037912830298, -2.679962087169714 },
            { 0.7222726231880999, -1.0, 3.722272623188092, 0.2777273768119067, -3.722272623188106 } } };
    alignas(32) static const double FE33_C0_D10_F_Q4[3][4][5] =
        { { { 1.0, 2.722272623188104, 0.2777273768118936, -0.2777273768118936, -3.722272623188106 },
            { 1.0, 1.679962087169712, 1.320037912830285, -1.320037912830285, -2.679962087169713 },
            { 1.0, 0.3200379128302879, 2.679962087169708, -2.679962087169708, -1.320037912830288 },
            { 1.0, -0.7222726231881051, 3.722272623188099, -3.722272623188099, -0.2777273768118945 } },
          { { -2.722272623188107, -1.0, 0.277727376811893, -0.277727376811893, 3.72227262318811 },
            { -1.679962087169713, -1.0, 1.320037912830285, -1.320037912830285, 2.679962087169716 },
            { -0.3200379128302884, -1.0, 2.679962087169709, -2.679962087169709, 1.320037912830289 },
            { 0.7222726231881045, -1.0, 3.722272623188099, -3.722272623188099, 0.2777273768118963 } },
          { { -2.722272623188106, -0.7222726231881095, 0.0, 0.0, 3.444545246376216 },
            { -1.679962087169712, 0.3200379128302852, 0.0, 0.0, 1.359924174339427 },
            { -0.3200379128302857, 1.679962087169712, 0.0, 0.0, -1.359924174339426 },
            { 0.7222726231881069, 2.722272623188104, 0.0, 0.0, -3.444545246376211 } } };
    alignas(32) static const double FE33_C0_F_Q4[3][4][6] =
        { { { 0.0, 0.8013460293699309, -0.05979028222412166, 0.2584442528541909, 0.0, 0.0 },
            { 0.0, 0.2277840767909521, -0.1121969667939041, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.1121969667939041, 0.227784076790952, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.05979028222412169, 0.8013460293699309, 0.2584442528541908, 0.0, 0.0 } },
          { { 0.8013460293699309, 0.0, -0.05979028222412166, 0.0, 0.2584442528541908, 0.0 },
            { 0.2277840767909521, 0.0, -0.1121969667939041, 0.0, 0.8844128900029518, 0.0 },
            { -0.1121969667939041, 0.0, 0.2277840767909521, 0.0, 0.8844128900029519, 0.0 },
            { -0.05979028222412166, 0.0, 0.8013460293699309, 0.0, 0.2584442528541906, 0.0 } },
          { { 0.8013460293699309, -0.05979028222412169, 0.0, 0.0, 0.0, 0.2584442528541908 },
            { 0.2277840767909521, -0.1121969667939041, 0.0, 0.0, 0.0, 0.8844128900029519 },
            { -0.1121969667939041, 0.2277840767909522, 0.0, 0.0, 0.0, 0.884412890002952 },
            { -0.05979028222412169, 0.8013460293699308, 0.0, 0.0, 0.0, 0.2584442528541909 } } };
    alignas(32) static const double FE35_C2_D01_F_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE35_C2_F_Q4[3][4][3] =
        { { { 0.0, 0.9305681557970263, 0.06943184420297369 },
            { 0.0, 0.6699905217924281, 0.3300094782075718 },
            { 0.0, 0.3300094782075719, 0.6699905217924279 },
            { 0.0, 0.06943184420297382, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.0, 0.06943184420297369 },
            { 0.6699905217924281, 0.0, 0.3300094782075718 },
            { 0.3300094782075719, 0.0, 0.669990521792428 },
            { 0.06943184420297382, 0.0, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.06943184420297367, 0.0 },
            { 0.6699905217924281, 0.3300094782075718, 0.0 },
            { 0.3300094782075719, 0.6699905217924281, 0.0 },
            { 0.06943184420297374, 0.9305681557970263, 0.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE35_C2_D01_F_Q4[0][0][0] + coordinate_dofs[2] * FE35_C2_D01_F_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE35_C2_D01_F_Q4[0][0][0] + coordinate_dofs[5] * FE35_C2_D01_F_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE35_C2_D01_F_Q4[0][0][0] + coordinate_dofs[4] * FE35_C2_D01_F_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE35_C2_D01_F_Q4[0][0][0] + coordinate_dofs[3] * FE35_C2_D01_F_Q4[0][0][1];
    const double w1_d1_c3 = w[1][15] * FE35_C2_D01_F_Q4[0][0][0] + w[1][17] * FE35_C2_D01_F_Q4[0][0][1];
    double w1_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c3 += w[1][ic + 15] * FE35_C2_D01_F_Q4[0][0][ic];
    const double w1_d1_c4 = w[1][18] * FE35_C2_D01_F_Q4[0][0][0] + w[1][20] * FE35_C2_D01_F_Q4[0][0][1];
    double w1_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c4 += w[1][ic + 18] * FE35_C2_D01_F_Q4[0][0][ic];
    alignas(32) double sp[74];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = triangle_reference_facet_normals[facet][1] * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = triangle_reference_facet_normals[facet][0] * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet][0] * sp[9];
    sp[11] = -1 * J_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[20] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[21] = sp[19] + sp[20];
    sp[22] = std::sqrt(sp[21]);
    sp[23] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[24] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[25] = sp[23] + sp[24];
    sp[26] = std::sqrt(sp[25]);
    sp[27] = sp[22] * sp[26];
    sp[28] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[29] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[30] = sp[28] + sp[29];
    sp[31] = std::sqrt(sp[30]);
    sp[32] = sp[27] * sp[31];
    sp[33] = triangle_reference_cell_volume * sp[2];
    sp[34] = std::abs(sp[33]);
    sp[35] = sp[32] / (4.0 * sp[34]);
    sp[36] = sp[3] * sp[17];
    sp[37] = sp[5] * sp[17];
    sp[38] = sp[11] * sp[18];
    sp[39] = sp[9] * sp[18];
    sp[40] = sp[36] + sp[38];
    sp[41] = sp[37] + sp[39];
    sp[42] = w1_d1_c3 * sp[3];
    sp[43] = w1_d0_c3 * sp[5];
    sp[44] = sp[42] + sp[43];
    sp[45] = sp[44] * sp[17];
    sp[46] = w1_d0_c3 * sp[9];
    sp[47] = w1_d1_c3 * sp[11];
    sp[48] = sp[46] + sp[47];
    sp[49] = sp[48] * sp[18];
    sp[50] = sp[45] + sp[49];
    sp[51] = w1_d1_c4 * sp[3];
    sp[52] = w1_d0_c4 * sp[5];
    sp[53] = sp[51] + sp[52];
    sp[54] = sp[53] * sp[17];
    sp[55] = w1_d0_c4 * sp[9];
    sp[56] = w1_d1_c4 * sp[11];
    sp[57] = sp[55] + sp[56];
    sp[58] = sp[57] * sp[18];
    sp[59] = sp[54] + sp[58];
    sp[60] = sp[11] + sp[11];
    sp[61] = sp[9] + sp[9];
    sp[62] = sp[5] + sp[5];
    sp[63] = sp[3] + sp[3];
    sp[64] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[65] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[66] = sp[64] + sp[65];
    sp[67] = sp[66] * sp[66];
    sp[68] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[69] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[70] = sp[68] + sp[69];
    sp[71] = sp[70] * sp[70];
    sp[72] = sp[67] + sp[71];
    sp[73] = std::sqrt(sp[72]);
    alignas(32) double BF0[6] = {};
    alignas(32) double BF1[5] = {};
    alignas(32) double BF2[5] = {};
    alignas(32) double BF3[6] = {};
    alignas(32) double BF4[5] = {};
    alignas(32) double BF5[5] = {};
    alignas(32) double BF6[2] = {};
    alignas(32) double BF7[3] = {};
    alignas(32) double BF8[2] = {};
    alignas(32) double BF9[2] = {};
    alignas(32) double BF10[3] = {};
    alignas(32) double BF11[2] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w1_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c4 += w[1][ic + 18] * FE35_C2_F_Q4[facet][iq][ic];
        double w1_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c3 += w[1][ic + 15] * FE35_C2_F_Q4[facet][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3 += w[3][ic] * FE35_C2_F_Q4[facet][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE33_C0_F_Q4[facet][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE33_C0_F_Q4[facet][iq][ic];
        const double w1_d1_c0 = w[1][0] * FE33_C0_D01_F_Q4[facet][iq][0] + w[1][2] * FE33_C0_D01_F_Q4[facet][iq][1] + w[1][3] * FE33_C0_D01_F_Q4[facet][iq][2] + w[1][4] * FE33_C0_D01_F_Q4[facet][iq][3] + w[1][5] * FE33_C0_D01_F_Q4[facet][iq][4];
        const double w1_d0_c0 = w[1][0] * FE33_C0_D10_F_Q4[facet][iq][0] + w[1][1] * FE33_C0_D10_F_Q4[facet][iq][1] + w[1][3] * FE33_C0_D10_F_Q4[facet][iq][2] + w[1][4] * FE33_C0_D10_F_Q4[facet][iq][3] + w[1][5] * FE33_C0_D10_F_Q4[facet][iq][4];
        const double w1_d0_c1 = w[1][6] * FE33_C0_D10_F_Q4[facet][iq][0] + w[1][7] * FE33_C0_D10_F_Q4[facet][iq][1] + w[1][9] * FE33_C0_D10_F_Q4[facet][iq][2] + w[1][10] * FE33_C0_D10_F_Q4[facet][iq][3] + w[1][11] * FE33_C0_D10_F_Q4[facet][iq][4];
        const double w1_d1_c1 = w[1][6] * FE33_C0_D01_F_Q4[facet][iq][0] + w[1][8] * FE33_C0_D01_F_Q4[facet][iq][1] + w[1][9] * FE33_C0_D01_F_Q4[facet][iq][2] + w[1][10] * FE33_C0_D01_F_Q4[facet][iq][3] + w[1][11] * FE33_C0_D01_F_Q4[facet][iq][4];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c0 += w[1][ic] * FE33_C0_F_Q4[facet][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c1 += w[1][ic + 6] * FE33_C0_F_Q4[facet][iq][ic];
        alignas(32) double sv4[123];
        sv4[0] = std::exp(w3);
        sv4[1] = w1_c3 * (0.09 * sv4[0]);
        sv4[2] = w1_c3 * sv4[1];
        sv4[3] = w1_c4 * w1_c4;
        sv4[4] = std::sqrt(1e-8 + sv4[3]);
        sv4[5] = w1_c4 + sv4[4];
        sv4[6] = sv4[2] / (0.5 * sv4[5]);
        sv4[7] = w2_c1 * sp[17];
        sv4[8] = w2_c0 * sp[18];
        sv4[9] = sv4[7] + sv4[8];
        sv4[10] = std::tanh(100.0 * sv4[9]);
        sv4[11] = (0.0001 + sv4[6] / 1.3) * (100000.0 * (0.5 + -1 * (0.5 * sv4[10])));
        sv4[12] = sv4[11] * (1.0 / (2.0 * sp[35]));
        sv4[13] = w1_c4 * sv4[12];
        sv4[14] = (0.0001 + sv4[6]) * (100000.0 * (0.5 + -1 * (0.5 * sv4[10])));
        sv4[15] = sv4[14] * (1.0 / (2.0 * sp[35]));
        sv4[16] = w1_c3 * sv4[15];
        sv4[17] = (0.5 + -1 * (0.5 * sv4[10])) * (0.0001 + sv4[6]);
        sv4[18] = sp[40] * sv4[17];
        sv4[19] = sp[41] * sv4[17];
        sv4[20] = w1_c3 * sv4[18];
        sv4[21] = w1_c3 * sv4[19];
        sv4[22] = sp[50] * sv4[17];
        sv4[23] = -1 * sv4[22] + sv4[16];
        sv4[24] = (0.5 + -1 * (0.5 * sv4[10])) * (0.0001 + sv4[6] / 1.3);
        sv4[25] = sp[40] * sv4[24];
        sv4[26] = sp[41] * sv4[24];
        sv4[27] = w1_c4 * sv4[25];
        sv4[28] = w1_c4 * sv4[26];
        sv4[29] = sp[59] * sv4[24];
        sv4[30] = sv4[23] + -1 * sv4[29];
        sv4[31] = w1_d1_c0 * sp[3];
        sv4[32] = w1_d0_c0 * sp[5];
        sv4[33] = sv4[31] + sv4[32];
        sv4[34] = w1_d0_c1 * sp[9];
        sv4[35] = w1_d1_c1 * sp[11];
        sv4[36] = sv4[34] + sv4[35];
        sv4[37] = sv4[33] + sv4[36];
        sv4[38] = 2.0 * (0.0001 + sv4[6]) * (sv4[37] / 2);
        sv4[39] = sv4[38] * sp[17];
        sv4[40] = w1_d0_c0 * sp[9];
        sv4[41] = w1_d1_c0 * sp[11];
        sv4[42] = sv4[40] + sv4[41];
        sv4[43] = sv4[42] + sv4[42];
        sv4[44] = 2.0 * (0.0001 + sv4[6]) * (sv4[43] / 2);
        sv4[45] = sv4[44] * sp[18];
        sv4[46] = sv4[39] + sv4[45];
        sv4[47] = sv4[46] * (-1 * sp[17]);
        sv4[48] = w1_d1_c1 * sp[3];
        sv4[49] = w1_d0_c1 * sp[5];
        sv4[50] = sv4[48] + sv4[49];
        sv4[51] = sv4[50] + sv4[50];
        sv4[52] = 2.0 * (0.0001 + sv4[6]) * (sv4[51] / 2);
        sv4[53] = sv4[52] * sp[17];
        sv4[54] = sv4[38] * sp[18];
        sv4[55] = sv4[53] + sv4[54];
        sv4[56] = sv4[55] * sp[18];
        sv4[57] = sv4[47] + sv4[56];
        sv4[58] = sv4[57] * (-1 * sp[17]);
        sv4[59] = sv4[57] * sp[18];
        sv4[60] = w1_c0 + -1 * w[0][0];
        sv4[61] = sv4[60] * (-1 * sp[17]);
        sv4[62] = w1_c1 + -1 * w[0][1];
        sv4[63] = sv4[62] * sp[18];
        sv4[64] = sv4[61] + sv4[63];
        sv4[65] = 2.0 * (0.0001 + sv4[6]) * (sp[3] / 2);
        sv4[66] = 2.0 * (0.0001 + sv4[6]) * (sp[5] / 2);
        sv4[67] = 2.0 * (0.0001 + sv4[6]) * (sp[9] / 2);
        sv4[68] = 2.0 * (0.0001 + sv4[6]) * (sp[11] / 2);
        sv4[69] = sv4[65] * sp[17];
        sv4[70] = sv4[66] * sp[17];
        sv4[71] = sv4[67] * sp[17];
        sv4[72] = sv4[68] * sp[17];
        sv4[73] = 2.0 * (0.0001 + sv4[6]) * (sp[60] / 2);
        sv4[74] = 2.0 * (0.0001 + sv4[6]) * (sp[61] / 2);
        sv4[75] = sv4[73] * sp[18];
        sv4[76] = sv4[74] * sp[18];
        sv4[77] = sv4[69] + sv4[75];
        sv4[78] = sv4[70] + sv4[76];
        sv4[79] = sv4[77] * (-1 * sp[17]);
        sv4[80] = sv4[78] * (-1 * sp[17]);
        sv4[81] = -1 * sp[17] * sv4[71];
        sv4[82] = -1 * sp[17] * sv4[72];
        sv4[83] = 2.0 * (0.0001 + sv4[6]) * (sp[62] / 2);
        sv4[84] = 2.0 * (0.0001 + sv4[6]) * (sp[63] / 2);
        sv4[85] = sv4[83] * sp[17];
        sv4[86] = sv4[84] * sp[17];
        sv4[87] = sv4[65] * sp[18];
        sv4[88] = sv4[66] * sp[18];
        sv4[89] = sv4[67] * sp[18];
        sv4[90] = sv4[68] * sp[18];
        sv4[91] = sv4[85] + sv4[89];
        sv4[92] = sv4[86] + sv4[90];
        sv4[93] = sv4[87] * sp[18];
        sv4[94] = sv4[88] * sp[18];
        sv4[95] = sv4[91] * sp[18];
        sv4[96] = sv4[92] * sp[18];
        sv4[97] = sv4[79] + sv4[93];
        sv4[98] = sv4[80] + sv4[94];
        sv4[99] = sv4[81] + sv4[95];
        sv4[100] = sv4[82] + sv4[96];
        sv4[101] = sv4[64] * sv4[97];
        sv4[102] = sv4[64] * sv4[98];
        sv4[103] = sv4[64] * sv4[99];
        sv4[104] = sv4[64] * sv4[100];
        sv4[105] = 100000.0 * (0.0001 + sv4[6]) * (1.0 / (2.0 * sp[35]));
        sv4[106] = sv4[64] * sv4[105];
        sv4[107] = sv4[106] * (-1 * sp[17]);
        sv4[108] = sv4[106] * sp[18];
        sv4[109] = -1 * sv4[58] + sv4[107];
        sv4[110] = -1 * sv4[59] + sv4[108];
        sv4[111] = sv4[13] * sp[73];
        sv4[112] = sv4[30] * sp[73];
        sv4[113] = -1 * sv4[20] * sp[73];
        sv4[114] = -1 * sv4[21] * sp[73];
        sv4[115] = -1 * sv4[27] * sp[73];
        sv4[116] = -1 * sv4[28] * sp[73];
        sv4[117] = sv4[109] * sp[73];
        sv4[118] = sv4[110] * sp[73];
        sv4[119] = -1 * sv4[101] * sp[73];
        sv4[120] = -1 * sv4[102] * sp[73];
        sv4[121] = -1 * sv4[103] * sp[73];
        sv4[122] = -1 * sv4[104] * sp[73];
        const double fw0 = sv4[117] * weights4[iq];
        for (int i = 0; i < 6; ++i)
            BF0[i] += fw0 * FE33_C0_F_Q4[facet][iq][i];
        const double fw1 = sv4[120] * weights4[iq];
        for (int i = 0; i < 5; ++i)
            BF1[i] += fw1 * FE33_C0_D10_F_Q4[facet][iq][i];
        const double fw2 = sv4[119] * weights4[iq];
        for (int i = 0; i < 5; ++i)
            BF2[i] += fw2 * FE33_C0_D01_F_Q4[facet][iq][i];
        const double fw3 = sv4[118] * weights4[iq];
        for (int i = 0; i < 6; ++i)
            BF3[i] += fw3 * FE33_C0_F_Q4[facet][iq][i];
        const double fw4 = sv4[121] * weights4[iq];
        for (int i = 0; i < 5; ++i)
            BF4[i] += fw4 * FE33_C0_D10_F_Q4[facet][iq][i];
        const double fw5 = sv4[122] * weights4[iq];
        for (int i = 0; i < 5; ++i)
            BF5[i] += fw5 * FE33_C0_D01_F_Q4[facet][iq][i];
        const double fw6 = sv4[114] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF6[i] += fw6 * FE35_C2_D01_F_Q4[0][0][i];
        const double fw7 = sv4[112] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            BF7[i] += fw7 * FE35_C2_F_Q4[facet][iq][i];
        const double fw8 = sv4[113] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF8[i] += fw8 * FE35_C2_D01_F_Q4[0][0][i];
        const double fw9 = sv4[116] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF9[i] += fw9 * FE35_C2_D01_F_Q4[0][0][i];
        const double fw10 = sv4[111] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            BF10[i] += fw10 * FE35_C2_F_Q4[facet][iq][i];
        const double fw11 = sv4[115] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF11[i] += fw11 * FE35_C2_D01_F_Q4[0][0][i];
    }
    std::fill(A, A + 21, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    static const int DM4[2] = { 15, 17 };
    static const int DM5[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 5; ++i)
        A[DM0[i]] += BF1[i];
    for (int i = 0; i < 5; ++i)
        A[DM1[i]] += BF2[i];
    for (int i = 0; i < 6; ++i)
        A[i + 6] += BF3[i];
    for (int i = 0; i < 5; ++i)
        A[DM2[i]] += BF4[i];
    for (int i = 0; i < 5; ++i)
        A[DM3[i]] += BF5[i];
    for (int i = 0; i < 2; ++i)
        A[i + 15] += BF6[i];
    for (int i = 0; i < 3; ++i)
        A[i + 15] += BF7[i];
    for (int i = 0; i < 2; ++i)
        A[DM4[i]] += BF8[i];
    for (int i = 0; i < 2; ++i)
        A[i + 18] += BF9[i];
    for (int i = 0; i < 3; ++i)
        A[i + 18] += BF10[i];
    for (int i = 0; i < 2; ++i)
        A[DM5[i]] += BF11[i];
  }

};


class ransnonlinear_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  ransnonlinear_cell_integral_1_otherwise() : ufc::cell_integral()
  {

  }

  ~ransnonlinear_cell_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({false, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 225
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    alignas(32) static const double FE96_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE96_C0_D02_Q12[1][1][3] = { { { 3.999999999999998, 4.000000000000004, -7.999999999999995 } } };
    alignas(32) static const double FE96_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE96_C0_D11_Q12[1][1][4] = { { { 4.0, 3.999999999999997, -3.999999999999997, -4.000000000000005 } } };
    alignas(32) static const double FE96_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803568, 0.2205142679699366 },
            { -0.05512856699248404, -0.05512856699248409, 0.6533077030470597, 0.2205142679699364, 0.2205142679699362, 0.01592089499803596 },
            { 0.6533077030470594, -0.05512856699248415, -0.05512856699248411, 0.01592089499803581, 0.2205142679699364, 0.2205142679699366 },
            { -0.1249989825350975, 0.001430579517788794, -0.1249989825350975, 0.4999959301403892, 0.2485755252716258, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788821, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880001, 0.173768363654174, -0.1177151633084292, 0.790160442765823, 0.06597478591860526, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880001, 0.1353078281686267, 0.06597478591860512, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860538 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880001, 0.06597478591860524, 0.1353078281686266, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860538 },
            { 0.1737683636541741, -0.04749625719880015, -0.1177151633084292, 0.06597478591860535, 0.7901604427658229, 0.1353078281686269 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q12[0][0][1];
    const double w3_d1 = w[3][0] * FE3_C0_D01_Q12[0][0][0] + w[3][2] * FE3_C0_D01_Q12[0][0][1];
    double w3_d0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w3_d0 += w[3][ic] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c3 = w[2][15] * FE3_C0_D01_Q12[0][0][0] + w[2][17] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c3 += w[2][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c4 = w[2][18] * FE3_C0_D01_Q12[0][0][0] + w[2][20] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c4 += w[2][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    const double w1_d11_c1 = w[1][6] * FE96_C0_D02_Q12[0][0][0] + w[1][8] * FE96_C0_D02_Q12[0][0][1] + w[1][10] * FE96_C0_D02_Q12[0][0][2];
    const double w1_d01_c1 = w[1][6] * FE96_C0_D11_Q12[0][0][0] + w[1][9] * FE96_C0_D11_Q12[0][0][1] + w[1][10] * FE96_C0_D11_Q12[0][0][2] + w[1][11] * FE96_C0_D11_Q12[0][0][3];
    const double w1_d00_c1 = w[1][6] * FE96_C0_D02_Q12[0][0][0] + w[1][7] * FE96_C0_D02_Q12[0][0][1] + w[1][11] * FE96_C0_D02_Q12[0][0][2];
    const double w1_d01_c0 = w[1][0] * FE96_C0_D11_Q12[0][0][0] + w[1][3] * FE96_C0_D11_Q12[0][0][1] + w[1][4] * FE96_C0_D11_Q12[0][0][2] + w[1][5] * FE96_C0_D11_Q12[0][0][3];
    const double w1_d11_c0 = w[1][0] * FE96_C0_D02_Q12[0][0][0] + w[1][2] * FE96_C0_D02_Q12[0][0][1] + w[1][4] * FE96_C0_D02_Q12[0][0][2];
    const double w1_d00_c0 = w[1][0] * FE96_C0_D02_Q12[0][0][0] + w[1][1] * FE96_C0_D02_Q12[0][0][1] + w[1][5] * FE96_C0_D02_Q12[0][0][2];
    const double w1_d1_c2 = w[1][12] * FE3_C0_D01_Q12[0][0][0] + w[1][14] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c2 += w[1][ic + 12] * FE3_C0_D01_Q12[0][0][ic];
    const double w1_d1_c3 = w[1][15] * FE3_C0_D01_Q12[0][0][0] + w[1][17] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c3 += w[1][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w1_d1_c4 = w[1][18] * FE3_C0_D01_Q12[0][0][0] + w[1][20] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c4 += w[1][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    alignas(32) double sp[188];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[8] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[9] = sp[7] + sp[8];
    sp[10] = std::sqrt(sp[9]);
    sp[11] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[12] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[13] = sp[11] + sp[12];
    sp[14] = std::sqrt(sp[13]);
    sp[15] = sp[10] * sp[14];
    sp[16] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[17] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[18] = sp[16] + sp[17];
    sp[19] = std::sqrt(sp[18]);
    sp[20] = sp[15] * sp[19];
    sp[21] = triangle_reference_cell_volume * sp[2];
    sp[22] = std::abs(sp[21]);
    sp[23] = sp[20] / (4.0 * sp[22]);
    sp[24] = 2.0 * sp[23] * (2.0 * sp[23]);
    sp[25] = sp[3] * sp[6];
    sp[26] = sp[3] * sp[5];
    sp[27] = sp[3] * sp[3];
    sp[28] = sp[3] * sp[4];
    sp[29] = sp[4] * sp[6];
    sp[30] = sp[5] * sp[4];
    sp[31] = sp[4] * sp[4];
    sp[32] = sp[5] * sp[6];
    sp[33] = sp[5] * sp[5];
    sp[34] = sp[6] * sp[6];
    sp[35] = w3_d1 * sp[3];
    sp[36] = w3_d0 * sp[4];
    sp[37] = sp[35] + sp[36];
    sp[38] = w2_d1_c3 * sp[3];
    sp[39] = w2_d0_c3 * sp[4];
    sp[40] = sp[38] + sp[39];
    sp[41] = w2_d1_c4 * sp[3];
    sp[42] = w2_d0_c4 * sp[4];
    sp[43] = sp[41] + sp[42];
    sp[44] = sp[3] + sp[3];
    sp[45] = sp[4] + sp[4];
    sp[46] = sp[28] + sp[28];
    sp[47] = sp[27] + sp[27];
    sp[48] = sp[46] + sp[46];
    sp[49] = sp[31] + sp[31];
    sp[50] = w3_d0 * sp[5];
    sp[51] = w3_d1 * sp[6];
    sp[52] = sp[50] + sp[51];
    sp[53] = w2_d0_c3 * sp[5];
    sp[54] = w2_d1_c3 * sp[6];
    sp[55] = sp[53] + sp[54];
    sp[56] = w2_d0_c4 * sp[5];
    sp[57] = w2_d1_c4 * sp[6];
    sp[58] = sp[56] + sp[57];
    sp[59] = sp[26] + sp[29];
    sp[60] = sp[32] + sp[32];
    sp[61] = sp[43] + sp[43];
    sp[62] = w1_d11_c1 * sp[3];
    sp[63] = w1_d01_c1 * sp[4];
    sp[64] = sp[62] + sp[63];
    sp[65] = sp[64] * sp[3];
    sp[66] = w1_d01_c1 * sp[3];
    sp[67] = w1_d00_c1 * sp[4];
    sp[68] = sp[66] + sp[67];
    sp[69] = sp[68] * sp[4];
    sp[70] = sp[65] + sp[69];
    sp[71] = sp[70] + sp[70];
    sp[72] = sp[58] + sp[58];
    sp[73] = w1_d01_c0 * sp[5];
    sp[74] = w1_d11_c0 * sp[6];
    sp[75] = sp[73] + sp[74];
    sp[76] = sp[75] * sp[3];
    sp[77] = w1_d00_c0 * sp[5];
    sp[78] = w1_d01_c0 * sp[6];
    sp[79] = sp[77] + sp[78];
    sp[80] = sp[79] * sp[4];
    sp[81] = sp[76] + sp[80];
    sp[82] = w1_d00_c1 * sp[5];
    sp[83] = w1_d01_c1 * sp[6];
    sp[84] = sp[82] + sp[83];
    sp[85] = sp[84] * sp[5];
    sp[86] = w1_d01_c1 * sp[5];
    sp[87] = w1_d11_c1 * sp[6];
    sp[88] = sp[86] + sp[87];
    sp[89] = sp[88] * sp[6];
    sp[90] = sp[85] + sp[89];
    sp[91] = sp[81] + sp[90];
    sp[92] = w1_d1_c2 * sp[3];
    sp[93] = w1_d0_c2 * sp[4];
    sp[94] = sp[92] + sp[93];
    sp[95] = sp[5] + sp[5];
    sp[96] = sp[6] + sp[6];
    sp[97] = sp[60] + sp[60];
    sp[98] = sp[34] + sp[34];
    sp[99] = sp[33] + sp[33];
    sp[100] = w1_d11_c0 * sp[3];
    sp[101] = w1_d01_c0 * sp[4];
    sp[102] = sp[100] + sp[101];
    sp[103] = sp[102] * sp[3];
    sp[104] = w1_d01_c0 * sp[3];
    sp[105] = w1_d00_c0 * sp[4];
    sp[106] = sp[104] + sp[105];
    sp[107] = sp[106] * sp[4];
    sp[108] = sp[103] + sp[107];
    sp[109] = sp[68] * sp[5];
    sp[110] = sp[64] * sp[6];
    sp[111] = sp[109] + sp[110];
    sp[112] = sp[108] + sp[111];
    sp[113] = sp[79] * sp[5];
    sp[114] = sp[75] * sp[6];
    sp[115] = sp[113] + sp[114];
    sp[116] = sp[115] + sp[115];
    sp[117] = w1_d0_c2 * sp[5];
    sp[118] = w1_d1_c2 * sp[6];
    sp[119] = sp[117] + sp[118];
    sp[120] = sp[28] + sp[32];
    sp[121] = sp[27] + sp[34];
    sp[122] = sp[33] + sp[31];
    sp[123] = w1_d1_c3 * sp[3];
    sp[124] = w1_d0_c3 * sp[4];
    sp[125] = sp[123] + sp[124];
    sp[126] = w1_d0_c3 * sp[5];
    sp[127] = w1_d1_c3 * sp[6];
    sp[128] = sp[126] + sp[127];
    sp[129] = w1_d1_c4 * sp[3];
    sp[130] = w1_d0_c4 * sp[4];
    sp[131] = sp[129] + sp[130];
    sp[132] = w1_d0_c4 * sp[5];
    sp[133] = w1_d1_c4 * sp[6];
    sp[134] = sp[132] + sp[133];
    sp[135] = sp[125] * sp[3];
    sp[136] = sp[125] * sp[4];
    sp[137] = sp[128] * sp[6];
    sp[138] = sp[128] * sp[5];
    sp[139] = sp[135] + sp[137];
    sp[140] = sp[138] + sp[136];
    sp[141] = sp[131] * sp[3];
    sp[142] = sp[131] * sp[4];
    sp[143] = sp[134] * sp[6];
    sp[144] = sp[134] * sp[5];
    sp[145] = sp[141] + sp[143];
    sp[146] = sp[144] + sp[142];
    sp[147] = sp[44] / 2 * (sp[44] / 2);
    sp[148] = sp[44] / 2 * (sp[45] / 2);
    sp[149] = sp[45] / 2 * (sp[45] / 2);
    sp[150] = sp[3] / 2 * (sp[6] / 2);
    sp[151] = sp[4] / 2 * (sp[6] / 2);
    sp[152] = sp[6] / 2 * (sp[6] / 2);
    sp[153] = sp[5] / 2 * (sp[6] / 2);
    sp[154] = sp[3] / 2 * (sp[5] / 2);
    sp[155] = sp[5] / 2 * (sp[4] / 2);
    sp[156] = sp[5] / 2 * (sp[5] / 2);
    sp[157] = sp[3] / 2 * (sp[4] / 2);
    sp[158] = sp[4] / 2 * (sp[4] / 2);
    sp[159] = sp[3] / 2 * (sp[3] / 2);
    sp[160] = sp[147] + sp[152];
    sp[161] = sp[148] + sp[153];
    sp[162] = sp[149] + sp[156];
    sp[163] = sp[95] / 2 * (sp[96] / 2);
    sp[164] = sp[95] / 2 * (sp[95] / 2);
    sp[165] = sp[96] / 2 * (sp[96] / 2);
    sp[166] = sp[163] + sp[157];
    sp[167] = sp[165] + sp[159];
    sp[168] = sp[164] + sp[158];
    sp[169] = sp[150] + sp[150];
    sp[170] = sp[154] + sp[154];
    sp[171] = sp[166] + sp[157];
    sp[172] = sp[167] + sp[159];
    sp[173] = sp[151] + sp[151];
    sp[174] = sp[155] + sp[155];
    sp[175] = sp[168] + sp[158];
    sp[176] = sp[160] + sp[152];
    sp[177] = sp[161] + sp[153];
    sp[178] = sp[162] + sp[156];
    sp[179] = std::abs(sp[2]);
    sp[180] = sp[6] * sp[179];
    sp[181] = sp[5] * sp[179];
    sp[182] = sp[3] * sp[179];
    sp[183] = sp[4] * sp[179];
    sp[184] = -1 * sp[3] * sp[179];
    sp[185] = -1 * sp[4] * sp[179];
    sp[186] = -1 * sp[5] * sp[179];
    sp[187] = -1 * sp[6] * sp[179];
    alignas(32) double BF0[6][6] = {};
    alignas(32) double BF1[6][5] = {};
    alignas(32) double TP0[6] = {};
    alignas(32) double BF2[6][5] = {};
    alignas(32) double TP1[6] = {};
    alignas(32) double TP2[6] = {};
    alignas(32) double BF3[6][6] = {};
    alignas(32) double BF4[6][5] = {};
    alignas(32) double TP3[6] = {};
    alignas(32) double BF5[6][5] = {};
    alignas(32) double TP4[6] = {};
    alignas(32) double TP5[6] = {};
    alignas(32) double TP6[6] = {};
    alignas(32) double TP7[6] = {};
    alignas(32) double TP8[6] = {};
    alignas(32) double BF6[6][3] = {};
    alignas(32) double TP9[6] = {};
    alignas(32) double TP10[6] = {};
    alignas(32) double BF7[6][3] = {};
    alignas(32) double TP11[6] = {};
    alignas(32) double BF8[5][6] = {};
    alignas(32) double BF9[5][5] = {};
    alignas(32) double TP12[5] = {};
    alignas(32) double BF10[5][5] = {};
    alignas(32) double TP13[5] = {};
    alignas(32) double TP14[5] = {};
    alignas(32) double BF11[5][6] = {};
    alignas(32) double BF12[5][5] = {};
    alignas(32) double TP15[5] = {};
    alignas(32) double BF13[5][5] = {};
    alignas(32) double TP16[5] = {};
    alignas(32) double TP17[5] = {};
    alignas(32) double TP18[5] = {};
    alignas(32) double TP19[5] = {};
    alignas(32) double TP20[5] = {};
    alignas(32) double BF14[5][3] = {};
    alignas(32) double TP21[5] = {};
    alignas(32) double TP22[5] = {};
    alignas(32) double BF15[5][3] = {};
    alignas(32) double TP23[5] = {};
    alignas(32) double TP24[6] = {};
    alignas(32) double TP25[5] = {};
    alignas(32) double TP26[3] = {};
    alignas(32) double TP27[5] = {};
    alignas(32) double TP28[3] = {};
    alignas(32) double TP29[4] = {};
    alignas(32) double TP30[6] = {};
    alignas(32) double TP31[5] = {};
    alignas(32) double TP32[3] = {};
    alignas(32) double TP33[5] = {};
    alignas(32) double TP34[3] = {};
    alignas(32) double TP35[4] = {};
    alignas(32) double TP36[2] = {};
    alignas(32) double TP37[2] = {};
    alignas(32) double TP38[3] = {};
    alignas(32) double TP39[3] = {};
    alignas(32) double BF16[5][6] = {};
    alignas(32) double BF17[5][5] = {};
    alignas(32) double TP40[5] = {};
    alignas(32) double BF18[5][5] = {};
    alignas(32) double TP41[5] = {};
    alignas(32) double TP42[5] = {};
    alignas(32) double BF19[5][6] = {};
    alignas(32) double BF20[5][5] = {};
    alignas(32) double TP43[5] = {};
    alignas(32) double BF21[5][5] = {};
    alignas(32) double TP44[5] = {};
    alignas(32) double TP45[5] = {};
    alignas(32) double TP46[5] = {};
    alignas(32) double TP47[5] = {};
    alignas(32) double TP48[5] = {};
    alignas(32) double BF22[5][3] = {};
    alignas(32) double TP49[5] = {};
    alignas(32) double TP50[5] = {};
    alignas(32) double BF23[5][3] = {};
    alignas(32) double TP51[5] = {};
    alignas(32) double TP52[6] = {};
    alignas(32) double TP53[5] = {};
    alignas(32) double TP54[5] = {};
    alignas(32) double TP55[3] = {};
    alignas(32) double TP56[4] = {};
    alignas(32) double TP57[6] = {};
    alignas(32) double TP58[5] = {};
    alignas(32) double TP59[3] = {};
    alignas(32) double TP60[5] = {};
    alignas(32) double TP61[3] = {};
    alignas(32) double TP62[4] = {};
    alignas(32) double TP63[2] = {};
    alignas(32) double TP64[2] = {};
    alignas(32) double TP65[3] = {};
    alignas(32) double TP66[3] = {};
    alignas(32) double TP67[6] = {};
    alignas(32) double TP68[5] = {};
    alignas(32) double TP69[3] = {};
    alignas(32) double TP70[5] = {};
    alignas(32) double TP71[3] = {};
    alignas(32) double TP72[4] = {};
    alignas(32) double TP73[6] = {};
    alignas(32) double TP74[5] = {};
    alignas(32) double TP75[3] = {};
    alignas(32) double TP76[5] = {};
    alignas(32) double TP77[3] = {};
    alignas(32) double TP78[4] = {};
    alignas(32) double TP79[2] = {};
    alignas(32) double TP80[2] = {};
    alignas(32) double TP81[3] = {};
    alignas(32) double TP82[3] = {};
    alignas(32) double BF24[6][6] = {};
    alignas(32) double BF25[6][5] = {};
    alignas(32) double TP83[6] = {};
    alignas(32) double BF26[6][5] = {};
    alignas(32) double TP84[6] = {};
    alignas(32) double TP85[6] = {};
    alignas(32) double BF27[6][6] = {};
    alignas(32) double BF28[6][5] = {};
    alignas(32) double TP86[6] = {};
    alignas(32) double BF29[6][5] = {};
    alignas(32) double TP87[6] = {};
    alignas(32) double TP88[6] = {};
    alignas(32) double TP89[6] = {};
    alignas(32) double TP90[6] = {};
    alignas(32) double TP91[6] = {};
    alignas(32) double BF30[6][3] = {};
    alignas(32) double TP92[6] = {};
    alignas(32) double TP93[6] = {};
    alignas(32) double BF31[6][3] = {};
    alignas(32) double TP94[6] = {};
    alignas(32) double BF32[5][6] = {};
    alignas(32) double TP95[5] = {};
    alignas(32) double BF33[5][5] = {};
    alignas(32) double TP96[5] = {};
    alignas(32) double TP97[5] = {};
    alignas(32) double BF34[5][6] = {};
    alignas(32) double BF35[5][5] = {};
    alignas(32) double TP98[5] = {};
    alignas(32) double BF36[5][5] = {};
    alignas(32) double TP99[5] = {};
    alignas(32) double TP100[5] = {};
    alignas(32) double TP101[5] = {};
    alignas(32) double TP102[5] = {};
    alignas(32) double TP103[5] = {};
    alignas(32) double BF37[5][3] = {};
    alignas(32) double TP104[5] = {};
    alignas(32) double TP105[5] = {};
    alignas(32) double BF38[5][3] = {};
    alignas(32) double TP106[5] = {};
    alignas(32) double TP107[6] = {};
    alignas(32) double TP108[5] = {};
    alignas(32) double TP109[5] = {};
    alignas(32) double TP110[4] = {};
    alignas(32) double TP111[6] = {};
    alignas(32) double TP112[5] = {};
    alignas(32) double TP113[3] = {};
    alignas(32) double TP114[5] = {};
    alignas(32) double TP115[3] = {};
    alignas(32) double TP116[4] = {};
    alignas(32) double TP117[2] = {};
    alignas(32) double TP118[2] = {};
    alignas(32) double TP119[3] = {};
    alignas(32) double TP120[3] = {};
    alignas(32) double BF39[5][6] = {};
    alignas(32) double BF40[5][5] = {};
    alignas(32) double TP121[5] = {};
    alignas(32) double TP122[5] = {};
    alignas(32) double TP123[5] = {};
    alignas(32) double BF41[5][6] = {};
    alignas(32) double BF42[5][5] = {};
    alignas(32) double TP124[5] = {};
    alignas(32) double BF43[5][5] = {};
    alignas(32) double TP125[5] = {};
    alignas(32) double TP126[5] = {};
    alignas(32) double TP127[5] = {};
    alignas(32) double TP128[5] = {};
    alignas(32) double TP129[5] = {};
    alignas(32) double BF44[5][3] = {};
    alignas(32) double TP130[5] = {};
    alignas(32) double TP131[5] = {};
    alignas(32) double BF45[5][3] = {};
    alignas(32) double TP132[5] = {};
    alignas(32) double TP133[6] = {};
    alignas(32) double TP134[5] = {};
    alignas(32) double TP135[5] = {};
    alignas(32) double TP136[4] = {};
    alignas(32) double TP137[6] = {};
    alignas(32) double TP138[5] = {};
    alignas(32) double TP139[5] = {};
    alignas(32) double TP140[3] = {};
    alignas(32) double TP141[4] = {};
    alignas(32) double TP142[2] = {};
    alignas(32) double TP143[2] = {};
    alignas(32) double TP144[3] = {};
    alignas(32) double TP145[3] = {};
    alignas(32) double TP146[6] = {};
    alignas(32) double TP147[5] = {};
    alignas(32) double TP148[3] = {};
    alignas(32) double TP149[5] = {};
    alignas(32) double TP150[3] = {};
    alignas(32) double TP151[6] = {};
    alignas(32) double TP152[5] = {};
    alignas(32) double TP153[3] = {};
    alignas(32) double TP154[5] = {};
    alignas(32) double TP155[3] = {};
    alignas(32) double TP156[4] = {};
    alignas(32) double TP157[2] = {};
    alignas(32) double TP158[2] = {};
    alignas(32) double TP159[3] = {};
    alignas(32) double TP160[3] = {};
    alignas(32) double TP161[6] = {};
    alignas(32) double TP162[5] = {};
    alignas(32) double TP163[3] = {};
    alignas(32) double TP164[5] = {};
    alignas(32) double TP165[3] = {};
    alignas(32) double TP166[4] = {};
    alignas(32) double TP167[6] = {};
    alignas(32) double TP168[5] = {};
    alignas(32) double TP169[3] = {};
    alignas(32) double TP170[5] = {};
    alignas(32) double TP171[3] = {};
    alignas(32) double TP172[4] = {};
    alignas(32) double TP173[2] = {};
    alignas(32) double TP174[2] = {};
    alignas(32) double TP175[3] = {};
    alignas(32) double TP176[3] = {};
    alignas(32) double TP177[6] = {};
    alignas(32) double TP178[5] = {};
    alignas(32) double TP179[3] = {};
    alignas(32) double TP180[5] = {};
    alignas(32) double TP181[3] = {};
    alignas(32) double TP182[4] = {};
    alignas(32) double TP183[6] = {};
    alignas(32) double TP184[5] = {};
    alignas(32) double TP185[3] = {};
    alignas(32) double TP186[5] = {};
    alignas(32) double TP187[3] = {};
    alignas(32) double TP188[4] = {};
    alignas(32) double TP189[2] = {};
    alignas(32) double TP190[3] = {};
    alignas(32) double TP191[3] = {};
    alignas(32) double TP192[6] = {};
    alignas(32) double TP193[5] = {};
    alignas(32) double TP194[3] = {};
    alignas(32) double TP195[5] = {};
    alignas(32) double TP196[3] = {};
    alignas(32) double TP197[4] = {};
    alignas(32) double TP198[6] = {};
    alignas(32) double TP199[5] = {};
    alignas(32) double TP200[3] = {};
    alignas(32) double TP201[5] = {};
    alignas(32) double TP202[3] = {};
    alignas(32) double TP203[4] = {};
    alignas(32) double TP204[2] = {};
    alignas(32) double TP205[2] = {};
    alignas(32) double TP206[2] = {};
    alignas(32) double TP207[3] = {};
    alignas(32) double TP208[2] = {};
    alignas(32) double TP209[2] = {};
    alignas(32) double TP210[3] = {};
    alignas(32) double TP211[2] = {};
    alignas(32) double BF46[3][6] = {};
    alignas(32) double BF47[3][5] = {};
    alignas(32) double TP212[3] = {};
    alignas(32) double BF48[3][5] = {};
    alignas(32) double TP213[3] = {};
    alignas(32) double TP214[3] = {};
    alignas(32) double BF49[3][6] = {};
    alignas(32) double BF50[3][5] = {};
    alignas(32) double TP215[3] = {};
    alignas(32) double BF51[3][5] = {};
    alignas(32) double TP216[3] = {};
    alignas(32) double TP217[3] = {};
    alignas(32) double TP218[3] = {};
    alignas(32) double TP219[3] = {};
    alignas(32) double TP220[3] = {};
    alignas(32) double BF52[3][3] = {};
    alignas(32) double TP221[3] = {};
    alignas(32) double TP222[3] = {};
    alignas(32) double BF53[3][3] = {};
    alignas(32) double TP223[3] = {};
    alignas(32) double TP224[6] = {};
    alignas(32) double TP225[5] = {};
    alignas(32) double TP226[3] = {};
    alignas(32) double TP227[5] = {};
    alignas(32) double TP228[3] = {};
    alignas(32) double TP229[4] = {};
    alignas(32) double TP230[6] = {};
    alignas(32) double TP231[5] = {};
    alignas(32) double TP232[3] = {};
    alignas(32) double TP233[5] = {};
    alignas(32) double TP234[3] = {};
    alignas(32) double TP235[4] = {};
    alignas(32) double TP236[2] = {};
    alignas(32) double TP237[2] = {};
    alignas(32) double TP238[2] = {};
    alignas(32) double TP239[3] = {};
    alignas(32) double TP240[2] = {};
    alignas(32) double TP241[2] = {};
    alignas(32) double TP242[3] = {};
    alignas(32) double TP243[2] = {};
    alignas(32) double TP244[6] = {};
    alignas(32) double TP245[5] = {};
    alignas(32) double TP246[3] = {};
    alignas(32) double TP247[5] = {};
    alignas(32) double TP248[3] = {};
    alignas(32) double TP249[4] = {};
    alignas(32) double TP250[6] = {};
    alignas(32) double TP251[5] = {};
    alignas(32) double TP252[3] = {};
    alignas(32) double TP253[5] = {};
    alignas(32) double TP254[3] = {};
    alignas(32) double TP255[4] = {};
    alignas(32) double TP256[2] = {};
    alignas(32) double TP257[2] = {};
    alignas(32) double TP258[2] = {};
    alignas(32) double TP259[3] = {};
    alignas(32) double TP260[2] = {};
    alignas(32) double TP261[2] = {};
    alignas(32) double TP262[3] = {};
    alignas(32) double TP263[2] = {};
    alignas(32) double BF54[3][6] = {};
    alignas(32) double BF55[3][5] = {};
    alignas(32) double TP264[3] = {};
    alignas(32) double BF56[3][5] = {};
    alignas(32) double TP265[3] = {};
    alignas(32) double TP266[3] = {};
    alignas(32) double BF57[3][6] = {};
    alignas(32) double BF58[3][5] = {};
    alignas(32) double TP267[3] = {};
    alignas(32) double BF59[3][5] = {};
    alignas(32) double TP268[3] = {};
    alignas(32) double TP269[3] = {};
    alignas(32) double TP270[3] = {};
    alignas(32) double TP271[3] = {};
    alignas(32) double TP272[3] = {};
    alignas(32) double BF60[3][3] = {};
    alignas(32) double TP273[3] = {};
    alignas(32) double TP274[3] = {};
    alignas(32) double BF61[3][3] = {};
    alignas(32) double TP275[3] = {};
    alignas(32) double TP276[6] = {};
    alignas(32) double TP277[5] = {};
    alignas(32) double TP278[3] = {};
    alignas(32) double TP279[5] = {};
    alignas(32) double TP280[3] = {};
    alignas(32) double TP281[4] = {};
    alignas(32) double TP282[6] = {};
    alignas(32) double TP283[5] = {};
    alignas(32) double TP284[3] = {};
    alignas(32) double TP285[5] = {};
    alignas(32) double TP286[3] = {};
    alignas(32) double TP287[4] = {};
    alignas(32) double TP288[2] = {};
    alignas(32) double TP289[2] = {};
    alignas(32) double TP290[2] = {};
    alignas(32) double TP291[3] = {};
    alignas(32) double TP292[2] = {};
    alignas(32) double TP293[2] = {};
    alignas(32) double TP294[3] = {};
    alignas(32) double TP295[2] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c1 += w[1][ic + 6] * FE96_C0_Q12[0][iq][ic];
        const double w1_d1_c0 = w[1][0] * FE96_C0_D01_Q12[0][iq][0] + w[1][2] * FE96_C0_D01_Q12[0][iq][1] + w[1][3] * FE96_C0_D01_Q12[0][iq][2] + w[1][4] * FE96_C0_D01_Q12[0][iq][3] + w[1][5] * FE96_C0_D01_Q12[0][iq][4];
        const double w1_d0_c0 = w[1][0] * FE96_C0_D10_Q12[0][iq][0] + w[1][1] * FE96_C0_D10_Q12[0][iq][1] + w[1][3] * FE96_C0_D10_Q12[0][iq][2] + w[1][4] * FE96_C0_D10_Q12[0][iq][3] + w[1][5] * FE96_C0_D10_Q12[0][iq][4];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c0 += w[1][ic] * FE96_C0_Q12[0][iq][ic];
        const double w1_d1_c1 = w[1][6] * FE96_C0_D01_Q12[0][iq][0] + w[1][8] * FE96_C0_D01_Q12[0][iq][1] + w[1][9] * FE96_C0_D01_Q12[0][iq][2] + w[1][10] * FE96_C0_D01_Q12[0][iq][3] + w[1][11] * FE96_C0_D01_Q12[0][iq][4];
        const double w1_d0_c1 = w[1][6] * FE96_C0_D10_Q12[0][iq][0] + w[1][7] * FE96_C0_D10_Q12[0][iq][1] + w[1][9] * FE96_C0_D10_Q12[0][iq][2] + w[1][10] * FE96_C0_D10_Q12[0][iq][3] + w[1][11] * FE96_C0_D10_Q12[0][iq][4];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE96_C0_Q12[0][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE96_C0_Q12[0][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3 += w[3][ic] * FE3_C0_Q12[0][iq][ic];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE3_C0_Q12[0][iq][ic];
        double w1_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c3 += w[1][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w1_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c4 += w[1][ic + 18] * FE3_C0_Q12[0][iq][ic];
        const double w2_d1_c1 = w[2][6] * FE96_C0_D01_Q12[0][iq][0] + w[2][8] * FE96_C0_D01_Q12[0][iq][1] + w[2][9] * FE96_C0_D01_Q12[0][iq][2] + w[2][10] * FE96_C0_D01_Q12[0][iq][3] + w[2][11] * FE96_C0_D01_Q12[0][iq][4];
        const double w2_d0_c1 = w[2][6] * FE96_C0_D10_Q12[0][iq][0] + w[2][7] * FE96_C0_D10_Q12[0][iq][1] + w[2][9] * FE96_C0_D10_Q12[0][iq][2] + w[2][10] * FE96_C0_D10_Q12[0][iq][3] + w[2][11] * FE96_C0_D10_Q12[0][iq][4];
        const double w2_d1_c0 = w[2][0] * FE96_C0_D01_Q12[0][iq][0] + w[2][2] * FE96_C0_D01_Q12[0][iq][1] + w[2][3] * FE96_C0_D01_Q12[0][iq][2] + w[2][4] * FE96_C0_D01_Q12[0][iq][3] + w[2][5] * FE96_C0_D01_Q12[0][iq][4];
        const double w2_d0_c0 = w[2][0] * FE96_C0_D10_Q12[0][iq][0] + w[2][1] * FE96_C0_D10_Q12[0][iq][1] + w[2][3] * FE96_C0_D10_Q12[0][iq][2] + w[2][4] * FE96_C0_D10_Q12[0][iq][3] + w[2][5] * FE96_C0_D10_Q12[0][iq][4];
        alignas(32) double sv12[2698];
        sv12[0] = w1_c1 * sp[3];
        sv12[1] = w1_c1 * sp[4];
        sv12[2] = w1_d1_c0 * sp[3];
        sv12[3] = w1_d0_c0 * sp[4];
        sv12[4] = sv12[2] + sv12[3];
        sv12[5] = w1_c0 * sp[6];
        sv12[6] = w1_c0 * sp[5];
        sv12[7] = w1_d0_c0 * sp[5];
        sv12[8] = w1_d1_c0 * sp[6];
        sv12[9] = sv12[7] + sv12[8];
        sv12[10] = sv12[0] + sv12[5];
        sv12[11] = sv12[6] + sv12[1];
        sv12[12] = w1_d1_c1 * sp[3];
        sv12[13] = w1_d0_c1 * sp[4];
        sv12[14] = sv12[12] + sv12[13];
        sv12[15] = w1_d0_c1 * sp[5];
        sv12[16] = w1_d1_c1 * sp[6];
        sv12[17] = sv12[15] + sv12[16];
        sv12[18] = sv12[14] + sv12[9];
        sv12[19] = sv12[18] * sp[3];
        sv12[20] = sv12[18] * sp[4];
        sv12[21] = sv12[18] * sp[5];
        sv12[22] = sv12[18] * sp[6];
        sv12[23] = w1_c0 + w1_c0;
        sv12[24] = w1_c1 + w1_c1;
        sv12[25] = w1_c0 * w1_c0;
        sv12[26] = w1_c1 * w1_c1;
        sv12[27] = sv12[25] + sv12[26];
        sv12[28] = std::sqrt(1e-9 + sv12[27]);
        sv12[29] = sv12[24] / (2 * sv12[28]);
        sv12[30] = sv12[23] / (2 * sv12[28]);
        sv12[31] = sp[24] * sv12[29];
        sv12[32] = sp[24] * sv12[30];
        sv12[33] = sv12[19] * sv12[31];
        sv12[34] = sv12[19] * sv12[32];
        sv12[35] = sv12[20] * sv12[31];
        sv12[36] = sv12[20] * sv12[32];
        sv12[37] = sv12[21] * sv12[31];
        sv12[38] = sv12[21] * sv12[32];
        sv12[39] = sv12[22] * sv12[31];
        sv12[40] = sv12[22] * sv12[32];
        sv12[41] = sp[24] * sv12[28];
        sv12[42] = sp[25] * sv12[41];
        sv12[43] = sp[29] * sv12[41];
        sv12[44] = sp[32] * sv12[41];
        sv12[45] = sp[34] * sv12[41];
        sv12[46] = sp[26] * sv12[41];
        sv12[47] = sp[30] * sv12[41];
        sv12[48] = sp[33] * sv12[41];
        sv12[49] = sp[27] * sv12[41];
        sv12[50] = sp[28] * sv12[41];
        sv12[51] = sp[31] * sv12[41];
        sv12[52] = w2_c1 * sp[3];
        sv12[53] = w2_c1 * sp[4];
        sv12[54] = w2_c0 * sp[6];
        sv12[55] = w2_c0 * sp[5];
        sv12[56] = sv12[52] + sv12[54];
        sv12[57] = sv12[55] + sv12[53];
        sv12[58] = std::exp(w3);
        sv12[59] = sp[37] * sv12[58];
        sv12[60] = w2_c3 * (0.09 * sv12[59]);
        sv12[61] = sp[40] * (0.09 * sv12[58]);
        sv12[62] = sv12[60] + sv12[61];
        sv12[63] = w2_c3 * sv12[62];
        sv12[64] = w2_c3 * (0.09 * sv12[58]);
        sv12[65] = sp[40] * sv12[64];
        sv12[66] = sv12[63] + sv12[65];
        sv12[67] = w2_c4 * sp[43];
        sv12[68] = sv12[67] + sv12[67];
        sv12[69] = w2_c4 * w2_c4;
        sv12[70] = std::sqrt(1e-8 + sv12[69]);
        sv12[71] = sv12[68] / (2 * sv12[70]);
        sv12[72] = sp[43] + sv12[71];
        sv12[73] = w2_c3 * sv12[64];
        sv12[74] = w2_c4 + sv12[70];
        sv12[75] = sv12[73] / (0.5 * sv12[74]);
        sv12[76] = 0.5 * sv12[72] * sv12[75];
        sv12[77] = sv12[66] + -1 * sv12[76];
        sv12[78] = sv12[77] / (0.5 * sv12[74]);
        sv12[79] = 2.0 * sv12[78] * (sp[44] / 2);
        sv12[80] = 2.0 * sv12[78] * (sp[45] / 2);
        sv12[81] = 2.0 * (0.0001 + sv12[75]) * (sp[47] / 2);
        sv12[82] = 2.0 * (0.0001 + sv12[75]) * (sp[48] / 2);
        sv12[83] = 2.0 * (0.0001 + sv12[75]) * (sp[49] / 2);
        sv12[84] = sp[52] * sv12[58];
        sv12[85] = w2_c3 * (0.09 * sv12[84]);
        sv12[86] = sp[55] * (0.09 * sv12[58]);
        sv12[87] = sv12[85] + sv12[86];
        sv12[88] = w2_c3 * sv12[87];
        sv12[89] = sp[55] * sv12[64];
        sv12[90] = sv12[88] + sv12[89];
        sv12[91] = w2_c4 * sp[58];
        sv12[92] = sv12[91] + sv12[91];
        sv12[93] = sv12[92] / (2 * sv12[70]);
        sv12[94] = sp[58] + sv12[93];
        sv12[95] = 0.5 * sv12[94] * sv12[75];
        sv12[96] = sv12[90] + -1 * sv12[95];
        sv12[97] = sv12[96] / (0.5 * sv12[74]);
        sv12[98] = 2.0 * sv12[97] * (sp[6] / 2);
        sv12[99] = 2.0 * sv12[97] * (sp[5] / 2);
        sv12[100] = 2.0 * sv12[97] * (sp[4] / 2);
        sv12[101] = 2.0 * sv12[97] * (sp[3] / 2);
        sv12[102] = 2.0 * (0.0001 + sv12[75]) * (sp[34] / 2);
        sv12[103] = 2.0 * (0.0001 + sv12[75]) * (sp[60] / 2);
        sv12[104] = 2.0 * (0.0001 + sv12[75]) * (sp[33] / 2);
        sv12[105] = 2.0 * (0.0001 + sv12[75]) * (sp[59] / 2);
        sv12[106] = 2.0 * (0.0001 + sv12[75]) * (sp[25] / 2);
        sv12[107] = 2.0 * (0.0001 + sv12[75]) * (sp[30] / 2);
        sv12[108] = sv12[79] + sv12[98];
        sv12[109] = sv12[80] + sv12[99];
        sv12[110] = sv12[81] + sv12[102];
        sv12[111] = sv12[82] + sv12[103];
        sv12[112] = sv12[83] + sv12[104];
        sv12[113] = sv12[56] + -1 * sv12[108];
        sv12[114] = sv12[57] + -1 * sv12[109];
        sv12[115] = 0.09 * sv12[58] * sp[3];
        sv12[116] = 0.09 * sv12[58] * sp[4];
        sv12[117] = w2_c3 * sv12[115];
        sv12[118] = w2_c3 * sv12[116];
        sv12[119] = sv12[62] + sv12[60];
        sv12[120] = sv12[64] * sp[3];
        sv12[121] = sv12[64] * sp[4];
        sv12[122] = sv12[119] + sv12[61];
        sv12[123] = sv12[117] + sv12[120];
        sv12[124] = sv12[118] + sv12[121];
        sv12[125] = sv12[64] + sv12[64];
        sv12[126] = w2_c4 + w2_c4;
        sv12[127] = sv12[126] / (2 * sv12[70]);
        sv12[128] = 0.5 * (1.0 + sv12[127]) * sv12[75];
        sv12[129] = sv12[125] / (0.5 * sv12[74]);
        sv12[130] = -1 * sv12[128] / (0.5 * sv12[74]);
        sv12[131] = 0.5 * sv12[72] * sv12[129];
        sv12[132] = 0.5 * sv12[72] * sv12[130];
        sv12[133] = w2_c4 * sp[3];
        sv12[134] = w2_c4 * sp[4];
        sv12[135] = sv12[133] + sv12[133];
        sv12[136] = sv12[134] + sv12[134];
        sv12[137] = 2 * sv12[127] * sv12[71];
        sv12[138] = sp[61] + -1 * sv12[137];
        sv12[139] = sv12[138] / (2 * sv12[70]);
        sv12[140] = sv12[135] / (2 * sv12[70]);
        sv12[141] = sv12[136] / (2 * sv12[70]);
        sv12[142] = sp[3] + sv12[140];
        sv12[143] = sp[4] + sv12[141];
        sv12[144] = 0.5 * sv12[139] * sv12[75];
        sv12[145] = 0.5 * sv12[142] * sv12[75];
        sv12[146] = 0.5 * sv12[143] * sv12[75];
        sv12[147] = sv12[144] + sv12[132];
        sv12[148] = sv12[122] + -1 * sv12[131];
        sv12[149] = 0.5 * (1.0 + sv12[127]) * sv12[78];
        sv12[150] = -1 * sv12[147] + -1 * sv12[149];
        sv12[151] = sv12[148] / (0.5 * sv12[74]);
        sv12[152] = sv12[123] / (0.5 * sv12[74]);
        sv12[153] = sv12[124] / (0.5 * sv12[74]);
        sv12[154] = sv12[150] / (0.5 * sv12[74]);
        sv12[155] = -1 * sv12[145] / (0.5 * sv12[74]);
        sv12[156] = -1 * sv12[146] / (0.5 * sv12[74]);
        sv12[157] = sv12[14] + sv12[14];
        sv12[158] = 2.0 * sv12[151] * (sv12[157] / 2);
        sv12[159] = 2.0 * sv12[152] * (sv12[157] / 2);
        sv12[160] = 2.0 * sv12[153] * (sv12[157] / 2);
        sv12[161] = 2.0 * sv12[154] * (sv12[157] / 2);
        sv12[162] = 2.0 * sv12[155] * (sv12[157] / 2);
        sv12[163] = 2.0 * sv12[156] * (sv12[157] / 2);
        sv12[164] = 2.0 * sv12[129] * (sp[71] / 2);
        sv12[165] = 2.0 * sv12[130] * (sp[71] / 2);
        sv12[166] = sv12[158] + sv12[164];
        sv12[167] = sv12[161] + sv12[165];
        sv12[168] = 0.09 * sv12[58] * sp[6];
        sv12[169] = 0.09 * sv12[58] * sp[5];
        sv12[170] = w2_c3 * sv12[168];
        sv12[171] = w2_c3 * sv12[169];
        sv12[172] = sv12[87] + sv12[85];
        sv12[173] = sv12[64] * sp[6];
        sv12[174] = sv12[64] * sp[5];
        sv12[175] = sv12[172] + sv12[86];
        sv12[176] = sv12[170] + sv12[173];
        sv12[177] = sv12[171] + sv12[174];
        sv12[178] = 0.5 * sv12[94] * sv12[129];
        sv12[179] = 0.5 * sv12[94] * sv12[130];
        sv12[180] = w2_c4 * sp[6];
        sv12[181] = w2_c4 * sp[5];
        sv12[182] = sv12[180] + sv12[180];
        sv12[183] = sv12[181] + sv12[181];
        sv12[184] = 2 * sv12[127] * sv12[93];
        sv12[185] = sp[72] + -1 * sv12[184];
        sv12[186] = sv12[185] / (2 * sv12[70]);
        sv12[187] = sv12[182] / (2 * sv12[70]);
        sv12[188] = sv12[183] / (2 * sv12[70]);
        sv12[189] = sp[6] + sv12[187];
        sv12[190] = sp[5] + sv12[188];
        sv12[191] = 0.5 * sv12[186] * sv12[75];
        sv12[192] = 0.5 * sv12[189] * sv12[75];
        sv12[193] = 0.5 * sv12[190] * sv12[75];
        sv12[194] = sv12[191] + sv12[179];
        sv12[195] = sv12[175] + -1 * sv12[178];
        sv12[196] = 0.5 * (1.0 + sv12[127]) * sv12[97];
        sv12[197] = -1 * sv12[194] + -1 * sv12[196];
        sv12[198] = sv12[195] / (0.5 * sv12[74]);
        sv12[199] = sv12[176] / (0.5 * sv12[74]);
        sv12[200] = sv12[177] / (0.5 * sv12[74]);
        sv12[201] = sv12[197] / (0.5 * sv12[74]);
        sv12[202] = -1 * sv12[192] / (0.5 * sv12[74]);
        sv12[203] = -1 * sv12[193] / (0.5 * sv12[74]);
        sv12[204] = sv12[4] + sv12[17];
        sv12[205] = 2.0 * sv12[198] * (sv12[204] / 2);
        sv12[206] = 2.0 * sv12[199] * (sv12[204] / 2);
        sv12[207] = 2.0 * sv12[200] * (sv12[204] / 2);
        sv12[208] = 2.0 * sv12[201] * (sv12[204] / 2);
        sv12[209] = 2.0 * sv12[202] * (sv12[204] / 2);
        sv12[210] = 2.0 * sv12[203] * (sv12[204] / 2);
        sv12[211] = 2.0 * sv12[129] * (sp[91] / 2);
        sv12[212] = 2.0 * sv12[130] * (sp[91] / 2);
        sv12[213] = sv12[205] + sv12[211];
        sv12[214] = sv12[208] + sv12[212];
        sv12[215] = sv12[166] + sv12[213];
        sv12[216] = sv12[159] + sv12[206];
        sv12[217] = sv12[160] + sv12[207];
        sv12[218] = sv12[167] + sv12[214];
        sv12[219] = sv12[162] + sv12[209];
        sv12[220] = sv12[163] + sv12[210];
        sv12[221] = w2_c1 * sv12[14];
        sv12[222] = w2_c0 * sv12[17];
        sv12[223] = sv12[221] + sv12[222];
        sv12[224] = 2.0 * sv12[78] * (sv12[157] / 2);
        sv12[225] = 2.0 * (0.0001 + sv12[75]) * (sp[71] / 2);
        sv12[226] = sv12[224] + sv12[225];
        sv12[227] = 2.0 * sv12[97] * (sv12[204] / 2);
        sv12[228] = 2.0 * (0.0001 + sv12[75]) * (sp[91] / 2);
        sv12[229] = sv12[227] + sv12[228];
        sv12[230] = sv12[226] + sv12[229];
        sv12[231] = sv12[223] + -1 * sv12[230];
        sv12[232] = sv12[231] + sp[94];
        sv12[233] = sv12[232] * sv12[17];
        sv12[234] = sv12[232] * sv12[14];
        sv12[235] = sv12[232] * sv12[113];
        sv12[236] = sv12[232] * sv12[114];
        sv12[237] = sv12[232] * (-1 * sv12[100]);
        sv12[238] = sv12[232] * (-1 * sv12[101]);
        sv12[239] = sv12[232] * (-1 * sv12[110]);
        sv12[240] = sv12[232] * (-1 * sv12[111]);
        sv12[241] = sv12[232] * (-1 * sv12[112]);
        sv12[242] = sv12[232] * (-1 * sv12[105]);
        sv12[243] = sv12[232] * (-1 * sv12[106]);
        sv12[244] = sv12[232] * (-1 * sv12[107]);
        sv12[245] = sv12[232] * sp[3];
        sv12[246] = sv12[232] * sp[4];
        sv12[247] = sv12[232] * (-1 * sv12[215]);
        sv12[248] = sv12[232] * (-1 * sv12[216]);
        sv12[249] = sv12[232] * (-1 * sv12[217]);
        sv12[250] = sv12[232] * (-1 * sv12[218]);
        sv12[251] = sv12[232] * (-1 * sv12[219]);
        sv12[252] = sv12[232] * (-1 * sv12[220]);
        sv12[253] = 2.0 * sv12[78] * (sp[6] / 2);
        sv12[254] = 2.0 * sv12[78] * (sp[5] / 2);
        sv12[255] = 2.0 * sv12[78] * (sp[4] / 2);
        sv12[256] = 2.0 * sv12[78] * (sp[3] / 2);
        sv12[257] = 2.0 * (0.0001 + sv12[75]) * (sp[46] / 2);
        sv12[258] = 2.0 * (0.0001 + sv12[75]) * (sp[27] / 2);
        sv12[259] = 2.0 * (0.0001 + sv12[75]) * (sp[31] / 2);
        sv12[260] = 2.0 * sv12[97] * (sp[95] / 2);
        sv12[261] = 2.0 * sv12[97] * (sp[96] / 2);
        sv12[262] = 2.0 * (0.0001 + sv12[75]) * (sp[97] / 2);
        sv12[263] = 2.0 * (0.0001 + sv12[75]) * (sp[98] / 2);
        sv12[264] = 2.0 * (0.0001 + sv12[75]) * (sp[99] / 2);
        sv12[265] = sv12[260] + sv12[255];
        sv12[266] = sv12[261] + sv12[256];
        sv12[267] = sv12[262] + sv12[257];
        sv12[268] = sv12[263] + sv12[258];
        sv12[269] = sv12[264] + sv12[259];
        sv12[270] = sv12[57] + -1 * sv12[265];
        sv12[271] = sv12[56] + -1 * sv12[266];
        sv12[272] = 2.0 * sv12[151] * (sv12[204] / 2);
        sv12[273] = 2.0 * sv12[152] * (sv12[204] / 2);
        sv12[274] = 2.0 * sv12[153] * (sv12[204] / 2);
        sv12[275] = 2.0 * sv12[154] * (sv12[204] / 2);
        sv12[276] = 2.0 * sv12[155] * (sv12[204] / 2);
        sv12[277] = 2.0 * sv12[156] * (sv12[204] / 2);
        sv12[278] = 2.0 * sv12[129] * (sp[112] / 2);
        sv12[279] = 2.0 * sv12[130] * (sp[112] / 2);
        sv12[280] = sv12[272] + sv12[278];
        sv12[281] = sv12[275] + sv12[279];
        sv12[282] = sv12[9] + sv12[9];
        sv12[283] = 2.0 * sv12[198] * (sv12[282] / 2);
        sv12[284] = 2.0 * sv12[199] * (sv12[282] / 2);
        sv12[285] = 2.0 * sv12[200] * (sv12[282] / 2);
        sv12[286] = 2.0 * sv12[201] * (sv12[282] / 2);
        sv12[287] = 2.0 * sv12[202] * (sv12[282] / 2);
        sv12[288] = 2.0 * sv12[203] * (sv12[282] / 2);
        sv12[289] = 2.0 * sv12[129] * (sp[116] / 2);
        sv12[290] = 2.0 * sv12[130] * (sp[116] / 2);
        sv12[291] = sv12[283] + sv12[289];
        sv12[292] = sv12[286] + sv12[290];
        sv12[293] = sv12[280] + sv12[291];
        sv12[294] = sv12[284] + sv12[273];
        sv12[295] = sv12[285] + sv12[274];
        sv12[296] = sv12[281] + sv12[292];
        sv12[297] = sv12[287] + sv12[276];
        sv12[298] = sv12[288] + sv12[277];
        sv12[299] = w2_c1 * sv12[4];
        sv12[300] = w2_c0 * sv12[9];
        sv12[301] = sv12[299] + sv12[300];
        sv12[302] = 2.0 * sv12[78] * (sv12[204] / 2);
        sv12[303] = 2.0 * (0.0001 + sv12[75]) * (sp[112] / 2);
        sv12[304] = sv12[302] + sv12[303];
        sv12[305] = 2.0 * sv12[97] * (sv12[282] / 2);
        sv12[306] = 2.0 * (0.0001 + sv12[75]) * (sp[116] / 2);
        sv12[307] = sv12[305] + sv12[306];
        sv12[308] = sv12[304] + sv12[307];
        sv12[309] = sv12[301] + -1 * sv12[308];
        sv12[310] = sv12[309] + sp[119];
        sv12[311] = sv12[310] * sv12[9];
        sv12[312] = sv12[310] * sv12[4];
        sv12[313] = sv12[310] * (-1 * sv12[253]);
        sv12[314] = sv12[310] * (-1 * sv12[254]);
        sv12[315] = sv12[310] * sv12[270];
        sv12[316] = sv12[310] * sv12[271];
        sv12[317] = sv12[310] * (-1 * sv12[106]);
        sv12[318] = sv12[310] * (-1 * sv12[105]);
        sv12[319] = sv12[310] * (-1 * sv12[107]);
        sv12[320] = sv12[310] * (-1 * sv12[267]);
        sv12[321] = sv12[310] * (-1 * sv12[268]);
        sv12[322] = sv12[310] * (-1 * sv12[269]);
        sv12[323] = sv12[310] * sp[6];
        sv12[324] = sv12[310] * sp[5];
        sv12[325] = sv12[310] * (-1 * sv12[293]);
        sv12[326] = sv12[310] * (-1 * sv12[294]);
        sv12[327] = sv12[310] * (-1 * sv12[295]);
        sv12[328] = sv12[310] * (-1 * sv12[296]);
        sv12[329] = sv12[310] * (-1 * sv12[297]);
        sv12[330] = sv12[310] * (-1 * sv12[298]);
        sv12[331] = sv12[311] + sv12[233];
        sv12[332] = sv12[312] + sv12[234];
        sv12[333] = sv12[235] + sv12[313];
        sv12[334] = sv12[236] + sv12[314];
        sv12[335] = sv12[315] + sv12[237];
        sv12[336] = sv12[316] + sv12[238];
        sv12[337] = sv12[239] + sv12[317];
        sv12[338] = sv12[240] + sv12[318];
        sv12[339] = sv12[241] + sv12[319];
        sv12[340] = sv12[320] + sv12[242];
        sv12[341] = sv12[321] + sv12[243];
        sv12[342] = sv12[322] + sv12[244];
        sv12[343] = sv12[245] + sv12[323];
        sv12[344] = sv12[324] + sv12[246];
        sv12[345] = sv12[325] + sv12[247];
        sv12[346] = sv12[326] + sv12[248];
        sv12[347] = sv12[249] + sv12[327];
        sv12[348] = sv12[328] + sv12[250];
        sv12[349] = sv12[329] + sv12[251];
        sv12[350] = sv12[252] + sv12[330];
        sv12[351] = std::sqrt(sv12[27]);
        sv12[352] = 0.5 * (2.0 * sp[23]) * sv12[351];
        sv12[353] = w1_c3 * (0.09 * sv12[58]);
        sv12[354] = w1_c3 * sv12[353];
        sv12[355] = w1_c4 * w1_c4;
        sv12[356] = std::sqrt(1e-8 + sv12[355]);
        sv12[357] = w1_c4 + sv12[356];
        sv12[358] = sv12[354] / (0.5 * sv12[357]);
        sv12[359] = sv12[352] / (0.0001 + sv12[358]);
        sv12[360] = sv12[353] + sv12[353];
        sv12[361] = w1_c4 + w1_c4;
        sv12[362] = sv12[361] / (2 * sv12[356]);
        sv12[363] = 0.5 * (1.0 + sv12[362]) * sv12[358];
        sv12[364] = sv12[360] / (0.5 * sv12[357]);
        sv12[365] = -1 * sv12[363] / (0.5 * sv12[357]);
        sv12[366] = sv12[359] * sv12[364];
        sv12[367] = sv12[359] * sv12[365];
        sv12[368] = sv12[24] / (2 * sv12[351]);
        sv12[369] = sv12[23] / (2 * sv12[351]);
        sv12[370] = 0.5 * (2.0 * sp[23]) * sv12[368];
        sv12[371] = 0.5 * (2.0 * sp[23]) * sv12[369];
        sv12[372] = sv12[370] / (0.0001 + sv12[358]);
        sv12[373] = sv12[371] / (0.0001 + sv12[358]);
        sv12[374] = -1 * sv12[366] / (0.0001 + sv12[358]);
        sv12[375] = -1 * sv12[367] / (0.0001 + sv12[358]);
        sv12[376] = sv12[372] * (1.0 / sv12[359]);
        sv12[377] = sv12[373] * (1.0 / sv12[359]);
        sv12[378] = sv12[374] * (1.0 / sv12[359]);
        sv12[379] = sv12[375] * (1.0 / sv12[359]);
        sv12[380] = -1 * sv12[376] / sv12[359];
        sv12[381] = -1 * sv12[377] / sv12[359];
        sv12[382] = -1 * sv12[378] / sv12[359];
        sv12[383] = -1 * sv12[379] / sv12[359];
        sv12[384] = std::exp(-2.0 * sv12[359]);
        sv12[385] = -2.0 * sv12[372] * sv12[384];
        sv12[386] = -2.0 * sv12[373] * sv12[384];
        sv12[387] = -2.0 * sv12[374] * sv12[384];
        sv12[388] = -2.0 * sv12[375] * sv12[384];
        sv12[389] = (1.0 + sv12[384]) / (1.0 + -1 * sv12[384]);
        sv12[390] = -1 * sv12[385] * sv12[389];
        sv12[391] = -1 * sv12[386] * sv12[389];
        sv12[392] = -1 * sv12[387] * sv12[389];
        sv12[393] = -1 * sv12[388] * sv12[389];
        sv12[394] = -1 * sv12[390] + sv12[385];
        sv12[395] = -1 * sv12[391] + sv12[386];
        sv12[396] = -1 * sv12[392] + sv12[387];
        sv12[397] = -1 * sv12[393] + sv12[388];
        sv12[398] = sv12[394] / (1.0 + -1 * sv12[384]);
        sv12[399] = sv12[395] / (1.0 + -1 * sv12[384]);
        sv12[400] = sv12[396] / (1.0 + -1 * sv12[384]);
        sv12[401] = sv12[397] / (1.0 + -1 * sv12[384]);
        sv12[402] = -1 * sv12[380] + sv12[398];
        sv12[403] = -1 * sv12[381] + sv12[399];
        sv12[404] = -1 * sv12[382] + sv12[400];
        sv12[405] = -1 * sv12[383] + sv12[401];
        sv12[406] = sv12[402] * (2.0 * sp[23]);
        sv12[407] = sv12[403] * (2.0 * sp[23]);
        sv12[408] = sv12[404] * (2.0 * sp[23]);
        sv12[409] = sv12[405] * (2.0 * sp[23]);
        sv12[410] = -1 * (1.0 / sv12[359]) + sv12[389];
        sv12[411] = sv12[410] * (2.0 * sp[23]);
        sv12[412] = sv12[411] / sv12[351];
        sv12[413] = sv12[368] * sv12[412];
        sv12[414] = sv12[369] * sv12[412];
        sv12[415] = sv12[406] + -1 * sv12[413];
        sv12[416] = sv12[407] + -1 * sv12[414];
        sv12[417] = sv12[415] / sv12[351];
        sv12[418] = sv12[416] / sv12[351];
        sv12[419] = sv12[408] / sv12[351];
        sv12[420] = sv12[409] / sv12[351];
        sv12[421] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[359]) * (2.0 * sp[23]);
        sv12[422] = sv12[421] * (2.0 * sp[23]);
        sv12[423] = sv12[422] / (0.0001 + sv12[358]);
        sv12[424] = sv12[423] * sv12[364];
        sv12[425] = sv12[423] * sv12[365];
        sv12[426] = 0.5 * (-0.004435991517475 * sv12[372]) * (2.0 * sp[23]);
        sv12[427] = 0.5 * (-0.004435991517475 * sv12[373]) * (2.0 * sp[23]);
        sv12[428] = 0.5 * (-0.004435991517475 * sv12[374]) * (2.0 * sp[23]);
        sv12[429] = 0.5 * (-0.004435991517475 * sv12[375]) * (2.0 * sp[23]);
        sv12[430] = sv12[426] * (2.0 * sp[23]);
        sv12[431] = sv12[427] * (2.0 * sp[23]);
        sv12[432] = sv12[428] * (2.0 * sp[23]);
        sv12[433] = sv12[429] * (2.0 * sp[23]);
        sv12[434] = -1 * sv12[424] + sv12[432];
        sv12[435] = -1 * sv12[425] + sv12[433];
        sv12[436] = sv12[430] / (0.0001 + sv12[358]);
        sv12[437] = sv12[431] / (0.0001 + sv12[358]);
        sv12[438] = sv12[434] / (0.0001 + sv12[358]);
        sv12[439] = sv12[435] / (0.0001 + sv12[358]);
        sv12[440] = (sv12[359] >= 0.1 ? sv12[417] : sv12[436]);
        sv12[441] = (sv12[359] >= 0.1 ? sv12[418] : sv12[437]);
        sv12[442] = (sv12[359] >= 0.1 ? sv12[419] : sv12[438]);
        sv12[443] = (sv12[359] >= 0.1 ? sv12[420] : sv12[439]);
        sv12[444] = sv12[331] * sv12[440];
        sv12[445] = sv12[331] * sv12[441];
        sv12[446] = sv12[331] * sv12[442];
        sv12[447] = sv12[331] * sv12[443];
        sv12[448] = sv12[332] * sv12[440];
        sv12[449] = sv12[332] * sv12[441];
        sv12[450] = sv12[332] * sv12[442];
        sv12[451] = sv12[332] * sv12[443];
        sv12[452] = sv12[333] * sv12[440];
        sv12[453] = sv12[333] * sv12[441];
        sv12[454] = sv12[333] * sv12[442];
        sv12[455] = sv12[333] * sv12[443];
        sv12[456] = sv12[334] * sv12[440];
        sv12[457] = sv12[334] * sv12[441];
        sv12[458] = sv12[334] * sv12[442];
        sv12[459] = sv12[334] * sv12[443];
        sv12[460] = sv12[335] * sv12[440];
        sv12[461] = sv12[335] * sv12[441];
        sv12[462] = sv12[335] * sv12[442];
        sv12[463] = sv12[335] * sv12[443];
        sv12[464] = sv12[336] * sv12[440];
        sv12[465] = sv12[336] * sv12[441];
        sv12[466] = sv12[336] * sv12[442];
        sv12[467] = sv12[336] * sv12[443];
        sv12[468] = sv12[337] * sv12[440];
        sv12[469] = sv12[337] * sv12[441];
        sv12[470] = sv12[337] * sv12[442];
        sv12[471] = sv12[337] * sv12[443];
        sv12[472] = sv12[338] * sv12[440];
        sv12[473] = sv12[338] * sv12[441];
        sv12[474] = sv12[338] * sv12[442];
        sv12[475] = sv12[338] * sv12[443];
        sv12[476] = sv12[339] * sv12[440];
        sv12[477] = sv12[339] * sv12[441];
        sv12[478] = sv12[339] * sv12[442];
        sv12[479] = sv12[339] * sv12[443];
        sv12[480] = sv12[340] * sv12[440];
        sv12[481] = sv12[340] * sv12[441];
        sv12[482] = sv12[340] * sv12[442];
        sv12[483] = sv12[340] * sv12[443];
        sv12[484] = sv12[341] * sv12[440];
        sv12[485] = sv12[341] * sv12[441];
        sv12[486] = sv12[341] * sv12[442];
        sv12[487] = sv12[341] * sv12[443];
        sv12[488] = sv12[342] * sv12[440];
        sv12[489] = sv12[342] * sv12[441];
        sv12[490] = sv12[342] * sv12[442];
        sv12[491] = sv12[342] * sv12[443];
        sv12[492] = sv12[343] * sv12[440];
        sv12[493] = sv12[343] * sv12[441];
        sv12[494] = sv12[343] * sv12[442];
        sv12[495] = sv12[343] * sv12[443];
        sv12[496] = sv12[344] * sv12[440];
        sv12[497] = sv12[344] * sv12[441];
        sv12[498] = sv12[344] * sv12[442];
        sv12[499] = sv12[344] * sv12[443];
        sv12[500] = sv12[345] * sv12[440];
        sv12[501] = sv12[345] * sv12[441];
        sv12[502] = sv12[345] * sv12[442];
        sv12[503] = sv12[345] * sv12[443];
        sv12[504] = sv12[346] * sv12[440];
        sv12[505] = sv12[346] * sv12[441];
        sv12[506] = sv12[346] * sv12[442];
        sv12[507] = sv12[346] * sv12[443];
        sv12[508] = sv12[347] * sv12[440];
        sv12[509] = sv12[347] * sv12[441];
        sv12[510] = sv12[347] * sv12[442];
        sv12[511] = sv12[347] * sv12[443];
        sv12[512] = sv12[348] * sv12[440];
        sv12[513] = sv12[348] * sv12[441];
        sv12[514] = sv12[348] * sv12[442];
        sv12[515] = sv12[348] * sv12[443];
        sv12[516] = sv12[349] * sv12[440];
        sv12[517] = sv12[349] * sv12[441];
        sv12[518] = sv12[349] * sv12[442];
        sv12[519] = sv12[349] * sv12[443];
        sv12[520] = sv12[350] * sv12[440];
        sv12[521] = sv12[350] * sv12[441];
        sv12[522] = sv12[350] * sv12[442];
        sv12[523] = sv12[350] * sv12[443];
        sv12[524] = sv12[271] * sv12[9];
        sv12[525] = sv12[270] * sv12[9];
        sv12[526] = sv12[9] * (-1 * sv12[253]);
        sv12[527] = sv12[9] * (-1 * sv12[254]);
        sv12[528] = sv12[9] * (-1 * sv12[268]);
        sv12[529] = sv12[9] * (-1 * sv12[267]);
        sv12[530] = sv12[9] * (-1 * sv12[269]);
        sv12[531] = sv12[9] * (-1 * sv12[105]);
        sv12[532] = sv12[9] * (-1 * sv12[107]);
        sv12[533] = sv12[9] * (-1 * sv12[106]);
        sv12[534] = sv12[9] * sp[5];
        sv12[535] = sv12[9] * sp[6];
        sv12[536] = sv12[271] * sv12[4];
        sv12[537] = sv12[270] * sv12[4];
        sv12[538] = sv12[4] * (-1 * sv12[253]);
        sv12[539] = sv12[4] * (-1 * sv12[254]);
        sv12[540] = sv12[4] * (-1 * sv12[268]);
        sv12[541] = sv12[4] * (-1 * sv12[267]);
        sv12[542] = sv12[4] * (-1 * sv12[269]);
        sv12[543] = sv12[4] * (-1 * sv12[105]);
        sv12[544] = sv12[4] * (-1 * sv12[107]);
        sv12[545] = sv12[4] * (-1 * sv12[106]);
        sv12[546] = sv12[4] * sp[5];
        sv12[547] = sv12[4] * sp[6];
        sv12[548] = sv12[271] * (-1 * sv12[253]);
        sv12[549] = sv12[270] * (-1 * sv12[253]);
        sv12[550] = -1 * sv12[253] * (-1 * sv12[253]);
        sv12[551] = -1 * sv12[254] * (-1 * sv12[253]);
        sv12[552] = -1 * sv12[268] * (-1 * sv12[253]);
        sv12[553] = -1 * sv12[267] * (-1 * sv12[253]);
        sv12[554] = -1 * sv12[269] * (-1 * sv12[253]);
        sv12[555] = -1 * sv12[105] * (-1 * sv12[253]);
        sv12[556] = -1 * sv12[107] * (-1 * sv12[253]);
        sv12[557] = -1 * sv12[106] * (-1 * sv12[253]);
        sv12[558] = -1 * sv12[253] * sp[5];
        sv12[559] = -1 * sv12[253] * sp[6];
        sv12[560] = sv12[271] * (-1 * sv12[254]);
        sv12[561] = sv12[270] * (-1 * sv12[254]);
        sv12[562] = -1 * sv12[254] * (-1 * sv12[254]);
        sv12[563] = -1 * sv12[268] * (-1 * sv12[254]);
        sv12[564] = -1 * sv12[267] * (-1 * sv12[254]);
        sv12[565] = -1 * sv12[269] * (-1 * sv12[254]);
        sv12[566] = -1 * sv12[105] * (-1 * sv12[254]);
        sv12[567] = -1 * sv12[107] * (-1 * sv12[254]);
        sv12[568] = -1 * sv12[106] * (-1 * sv12[254]);
        sv12[569] = -1 * sv12[254] * sp[5];
        sv12[570] = -1 * sv12[254] * sp[6];
        sv12[571] = sv12[271] * sv12[270];
        sv12[572] = sv12[270] * sv12[270];
        sv12[573] = sv12[270] * (-1 * sv12[268]);
        sv12[574] = sv12[270] * (-1 * sv12[267]);
        sv12[575] = sv12[270] * (-1 * sv12[269]);
        sv12[576] = sv12[270] * (-1 * sv12[105]);
        sv12[577] = sv12[270] * (-1 * sv12[107]);
        sv12[578] = sv12[270] * (-1 * sv12[106]);
        sv12[579] = sv12[270] * sp[5];
        sv12[580] = sv12[270] * sp[6];
        sv12[581] = sv12[271] * sv12[271];
        sv12[582] = sv12[271] * (-1 * sv12[268]);
        sv12[583] = sv12[271] * (-1 * sv12[267]);
        sv12[584] = sv12[271] * (-1 * sv12[269]);
        sv12[585] = sv12[271] * (-1 * sv12[105]);
        sv12[586] = sv12[271] * (-1 * sv12[107]);
        sv12[587] = sv12[271] * (-1 * sv12[106]);
        sv12[588] = sv12[271] * sp[5];
        sv12[589] = sv12[271] * sp[6];
        sv12[590] = -1 * sv12[268] * (-1 * sv12[106]);
        sv12[591] = -1 * sv12[267] * (-1 * sv12[106]);
        sv12[592] = -1 * sv12[269] * (-1 * sv12[106]);
        sv12[593] = -1 * sv12[105] * (-1 * sv12[106]);
        sv12[594] = -1 * sv12[107] * (-1 * sv12[106]);
        sv12[595] = -1 * sv12[106] * (-1 * sv12[106]);
        sv12[596] = -1 * sv12[106] * sp[5];
        sv12[597] = -1 * sv12[106] * sp[6];
        sv12[598] = -1 * sv12[268] * (-1 * sv12[105]);
        sv12[599] = -1 * sv12[267] * (-1 * sv12[105]);
        sv12[600] = -1 * sv12[269] * (-1 * sv12[105]);
        sv12[601] = -1 * sv12[105] * (-1 * sv12[105]);
        sv12[602] = -1 * sv12[105] * (-1 * sv12[107]);
        sv12[603] = -1 * sv12[105] * sp[5];
        sv12[604] = -1 * sv12[105] * sp[6];
        sv12[605] = -1 * sv12[268] * (-1 * sv12[107]);
        sv12[606] = -1 * sv12[267] * (-1 * sv12[107]);
        sv12[607] = -1 * sv12[269] * (-1 * sv12[107]);
        sv12[608] = -1 * sv12[107] * (-1 * sv12[107]);
        sv12[609] = -1 * sv12[107] * sp[5];
        sv12[610] = -1 * sv12[107] * sp[6];
        sv12[611] = -1 * sv12[267] * (-1 * sv12[268]);
        sv12[612] = -1 * sv12[267] * (-1 * sv12[267]);
        sv12[613] = -1 * sv12[267] * (-1 * sv12[269]);
        sv12[614] = -1 * sv12[267] * sp[5];
        sv12[615] = -1 * sv12[267] * sp[6];
        sv12[616] = -1 * sv12[268] * (-1 * sv12[268]);
        sv12[617] = -1 * sv12[268] * (-1 * sv12[269]);
        sv12[618] = -1 * sv12[268] * sp[5];
        sv12[619] = -1 * sv12[268] * sp[6];
        sv12[620] = -1 * sv12[269] * (-1 * sv12[269]);
        sv12[621] = -1 * sv12[269] * sp[5];
        sv12[622] = -1 * sv12[269] * sp[6];
        sv12[623] = sv12[271] * (-1 * sv12[293]);
        sv12[624] = sv12[270] * (-1 * sv12[293]);
        sv12[625] = -1 * sv12[293] * (-1 * sv12[253]);
        sv12[626] = -1 * sv12[293] * (-1 * sv12[254]);
        sv12[627] = -1 * sv12[293] * (-1 * sv12[268]);
        sv12[628] = -1 * sv12[293] * (-1 * sv12[267]);
        sv12[629] = -1 * sv12[293] * (-1 * sv12[269]);
        sv12[630] = -1 * sv12[293] * (-1 * sv12[105]);
        sv12[631] = -1 * sv12[293] * (-1 * sv12[107]);
        sv12[632] = -1 * sv12[293] * (-1 * sv12[106]);
        sv12[633] = -1 * sv12[293] * sp[5];
        sv12[634] = -1 * sv12[293] * sp[6];
        sv12[635] = sv12[271] * (-1 * sv12[294]);
        sv12[636] = sv12[270] * (-1 * sv12[294]);
        sv12[637] = -1 * sv12[294] * (-1 * sv12[253]);
        sv12[638] = -1 * sv12[294] * (-1 * sv12[254]);
        sv12[639] = -1 * sv12[294] * (-1 * sv12[268]);
        sv12[640] = -1 * sv12[294] * (-1 * sv12[267]);
        sv12[641] = -1 * sv12[294] * (-1 * sv12[269]);
        sv12[642] = -1 * sv12[294] * (-1 * sv12[105]);
        sv12[643] = -1 * sv12[294] * (-1 * sv12[107]);
        sv12[644] = -1 * sv12[294] * (-1 * sv12[106]);
        sv12[645] = -1 * sv12[294] * sp[5];
        sv12[646] = -1 * sv12[294] * sp[6];
        sv12[647] = sv12[271] * (-1 * sv12[295]);
        sv12[648] = sv12[270] * (-1 * sv12[295]);
        sv12[649] = -1 * sv12[295] * (-1 * sv12[253]);
        sv12[650] = -1 * sv12[295] * (-1 * sv12[254]);
        sv12[651] = -1 * sv12[295] * (-1 * sv12[268]);
        sv12[652] = -1 * sv12[295] * (-1 * sv12[267]);
        sv12[653] = -1 * sv12[295] * (-1 * sv12[269]);
        sv12[654] = -1 * sv12[295] * (-1 * sv12[105]);
        sv12[655] = -1 * sv12[295] * (-1 * sv12[107]);
        sv12[656] = -1 * sv12[295] * (-1 * sv12[106]);
        sv12[657] = -1 * sv12[295] * sp[5];
        sv12[658] = -1 * sv12[295] * sp[6];
        sv12[659] = sv12[271] * (-1 * sv12[296]);
        sv12[660] = sv12[270] * (-1 * sv12[296]);
        sv12[661] = -1 * sv12[296] * (-1 * sv12[253]);
        sv12[662] = -1 * sv12[296] * (-1 * sv12[254]);
        sv12[663] = -1 * sv12[296] * (-1 * sv12[268]);
        sv12[664] = -1 * sv12[296] * (-1 * sv12[267]);
        sv12[665] = -1 * sv12[296] * (-1 * sv12[269]);
        sv12[666] = -1 * sv12[296] * (-1 * sv12[105]);
        sv12[667] = -1 * sv12[296] * (-1 * sv12[107]);
        sv12[668] = -1 * sv12[296] * (-1 * sv12[106]);
        sv12[669] = -1 * sv12[296] * sp[5];
        sv12[670] = -1 * sv12[296] * sp[6];
        sv12[671] = sv12[271] * (-1 * sv12[297]);
        sv12[672] = sv12[270] * (-1 * sv12[297]);
        sv12[673] = -1 * sv12[297] * (-1 * sv12[253]);
        sv12[674] = -1 * sv12[297] * (-1 * sv12[254]);
        sv12[675] = -1 * sv12[297] * (-1 * sv12[268]);
        sv12[676] = -1 * sv12[297] * (-1 * sv12[267]);
        sv12[677] = -1 * sv12[297] * (-1 * sv12[269]);
        sv12[678] = -1 * sv12[297] * (-1 * sv12[105]);
        sv12[679] = -1 * sv12[297] * (-1 * sv12[107]);
        sv12[680] = -1 * sv12[297] * (-1 * sv12[106]);
        sv12[681] = -1 * sv12[297] * sp[5];
        sv12[682] = -1 * sv12[297] * sp[6];
        sv12[683] = sv12[271] * (-1 * sv12[298]);
        sv12[684] = sv12[270] * (-1 * sv12[298]);
        sv12[685] = -1 * sv12[298] * (-1 * sv12[253]);
        sv12[686] = -1 * sv12[298] * (-1 * sv12[254]);
        sv12[687] = -1 * sv12[298] * (-1 * sv12[268]);
        sv12[688] = -1 * sv12[298] * (-1 * sv12[267]);
        sv12[689] = -1 * sv12[298] * (-1 * sv12[269]);
        sv12[690] = -1 * sv12[298] * (-1 * sv12[105]);
        sv12[691] = -1 * sv12[298] * (-1 * sv12[107]);
        sv12[692] = -1 * sv12[298] * (-1 * sv12[106]);
        sv12[693] = -1 * sv12[298] * sp[5];
        sv12[694] = -1 * sv12[298] * sp[6];
        sv12[695] = 2.0 * sv12[151] * (sp[3] / 2);
        sv12[696] = 2.0 * sv12[151] * (sp[4] / 2);
        sv12[697] = 2.0 * sv12[151] * (sp[6] / 2);
        sv12[698] = 2.0 * sv12[151] * (sp[5] / 2);
        sv12[699] = 2.0 * sv12[152] * (sp[3] / 2);
        sv12[700] = 2.0 * sv12[152] * (sp[4] / 2);
        sv12[701] = 2.0 * sv12[152] * (sp[6] / 2);
        sv12[702] = 2.0 * sv12[152] * (sp[5] / 2);
        sv12[703] = 2.0 * sv12[153] * (sp[3] / 2);
        sv12[704] = 2.0 * sv12[153] * (sp[4] / 2);
        sv12[705] = 2.0 * sv12[153] * (sp[6] / 2);
        sv12[706] = 2.0 * sv12[153] * (sp[5] / 2);
        sv12[707] = 2.0 * sv12[154] * (sp[3] / 2);
        sv12[708] = 2.0 * sv12[154] * (sp[4] / 2);
        sv12[709] = 2.0 * sv12[154] * (sp[6] / 2);
        sv12[710] = 2.0 * sv12[154] * (sp[5] / 2);
        sv12[711] = 2.0 * sv12[155] * (sp[3] / 2);
        sv12[712] = 2.0 * sv12[155] * (sp[4] / 2);
        sv12[713] = 2.0 * sv12[155] * (sp[6] / 2);
        sv12[714] = 2.0 * sv12[155] * (sp[5] / 2);
        sv12[715] = 2.0 * sv12[156] * (sp[3] / 2);
        sv12[716] = 2.0 * sv12[156] * (sp[4] / 2);
        sv12[717] = 2.0 * sv12[156] * (sp[6] / 2);
        sv12[718] = 2.0 * sv12[156] * (sp[5] / 2);
        sv12[719] = 2.0 * sv12[129] * (sp[27] / 2);
        sv12[720] = 2.0 * sv12[129] * (sp[46] / 2);
        sv12[721] = 2.0 * sv12[129] * (sp[31] / 2);
        sv12[722] = 2.0 * sv12[129] * (sp[59] / 2);
        sv12[723] = 2.0 * sv12[129] * (sp[30] / 2);
        sv12[724] = 2.0 * sv12[129] * (sp[25] / 2);
        sv12[725] = 2.0 * sv12[130] * (sp[27] / 2);
        sv12[726] = 2.0 * sv12[130] * (sp[46] / 2);
        sv12[727] = 2.0 * sv12[130] * (sp[31] / 2);
        sv12[728] = 2.0 * sv12[130] * (sp[59] / 2);
        sv12[729] = 2.0 * sv12[130] * (sp[30] / 2);
        sv12[730] = 2.0 * sv12[130] * (sp[25] / 2);
        sv12[731] = 2.0 * sv12[198] * (sp[96] / 2);
        sv12[732] = 2.0 * sv12[198] * (sp[95] / 2);
        sv12[733] = 2.0 * sv12[199] * (sp[96] / 2);
        sv12[734] = 2.0 * sv12[199] * (sp[95] / 2);
        sv12[735] = 2.0 * sv12[200] * (sp[96] / 2);
        sv12[736] = 2.0 * sv12[200] * (sp[95] / 2);
        sv12[737] = 2.0 * sv12[201] * (sp[96] / 2);
        sv12[738] = 2.0 * sv12[201] * (sp[95] / 2);
        sv12[739] = 2.0 * sv12[202] * (sp[96] / 2);
        sv12[740] = 2.0 * sv12[202] * (sp[95] / 2);
        sv12[741] = 2.0 * sv12[203] * (sp[96] / 2);
        sv12[742] = 2.0 * sv12[203] * (sp[95] / 2);
        sv12[743] = 2.0 * sv12[129] * (sp[98] / 2);
        sv12[744] = 2.0 * sv12[129] * (sp[97] / 2);
        sv12[745] = 2.0 * sv12[129] * (sp[99] / 2);
        sv12[746] = 2.0 * sv12[130] * (sp[98] / 2);
        sv12[747] = 2.0 * sv12[130] * (sp[97] / 2);
        sv12[748] = 2.0 * sv12[130] * (sp[99] / 2);
        sv12[749] = sv12[731] + sv12[695];
        sv12[750] = sv12[733] + sv12[699];
        sv12[751] = sv12[735] + sv12[703];
        sv12[752] = sv12[737] + sv12[707];
        sv12[753] = sv12[739] + sv12[711];
        sv12[754] = sv12[741] + sv12[715];
        sv12[755] = sv12[732] + sv12[696];
        sv12[756] = sv12[734] + sv12[700];
        sv12[757] = sv12[736] + sv12[704];
        sv12[758] = sv12[738] + sv12[708];
        sv12[759] = sv12[740] + sv12[712];
        sv12[760] = sv12[742] + sv12[716];
        sv12[761] = sv12[743] + sv12[719];
        sv12[762] = sv12[744] + sv12[720];
        sv12[763] = sv12[745] + sv12[721];
        sv12[764] = sv12[746] + sv12[725];
        sv12[765] = sv12[747] + sv12[726];
        sv12[766] = sv12[748] + sv12[727];
        sv12[767] = sv12[310] * sp[3];
        sv12[768] = sv12[310] * (-1 * sv12[749]);
        sv12[769] = sv12[310] * (-1 * sv12[750]);
        sv12[770] = sv12[310] * (-1 * sv12[751]);
        sv12[771] = sv12[310] * (-1 * sv12[752]);
        sv12[772] = sv12[310] * (-1 * sv12[753]);
        sv12[773] = sv12[310] * (-1 * sv12[754]);
        sv12[774] = sv12[310] * sp[4];
        sv12[775] = sv12[310] * (-1 * sv12[755]);
        sv12[776] = sv12[310] * (-1 * sv12[756]);
        sv12[777] = sv12[310] * (-1 * sv12[757]);
        sv12[778] = sv12[310] * (-1 * sv12[758]);
        sv12[779] = sv12[310] * (-1 * sv12[759]);
        sv12[780] = sv12[310] * (-1 * sv12[760]);
        sv12[781] = sv12[310] * (-1 * sv12[697]);
        sv12[782] = sv12[310] * (-1 * sv12[701]);
        sv12[783] = sv12[310] * (-1 * sv12[705]);
        sv12[784] = sv12[310] * (-1 * sv12[709]);
        sv12[785] = sv12[310] * (-1 * sv12[713]);
        sv12[786] = sv12[310] * (-1 * sv12[717]);
        sv12[787] = sv12[310] * (-1 * sv12[698]);
        sv12[788] = sv12[310] * (-1 * sv12[702]);
        sv12[789] = sv12[310] * (-1 * sv12[706]);
        sv12[790] = sv12[310] * (-1 * sv12[710]);
        sv12[791] = sv12[310] * (-1 * sv12[714]);
        sv12[792] = sv12[310] * (-1 * sv12[718]);
        sv12[793] = sv12[310] * (-1 * sv12[761]);
        sv12[794] = sv12[310] * (-1 * sv12[762]);
        sv12[795] = sv12[310] * (-1 * sv12[763]);
        sv12[796] = sv12[310] * (-1 * sv12[722]);
        sv12[797] = sv12[310] * (-1 * sv12[723]);
        sv12[798] = sv12[310] * (-1 * sv12[724]);
        sv12[799] = sv12[310] * (-1 * sv12[764]);
        sv12[800] = sv12[310] * (-1 * sv12[765]);
        sv12[801] = sv12[310] * (-1 * sv12[766]);
        sv12[802] = sv12[310] * (-1 * sv12[728]);
        sv12[803] = sv12[310] * (-1 * sv12[729]);
        sv12[804] = sv12[310] * (-1 * sv12[730]);
        sv12[805] = sv12[524] + sv12[323];
        sv12[806] = sv12[525] + sv12[324];
        sv12[807] = sv12[536] + sv12[767];
        sv12[808] = sv12[623] + sv12[768];
        sv12[809] = sv12[635] + sv12[769];
        sv12[810] = sv12[647] + sv12[770];
        sv12[811] = sv12[659] + sv12[771];
        sv12[812] = sv12[671] + sv12[772];
        sv12[813] = sv12[683] + sv12[773];
        sv12[814] = sv12[537] + sv12[774];
        sv12[815] = sv12[624] + sv12[775];
        sv12[816] = sv12[636] + sv12[776];
        sv12[817] = sv12[648] + sv12[777];
        sv12[818] = sv12[660] + sv12[778];
        sv12[819] = sv12[672] + sv12[779];
        sv12[820] = sv12[684] + sv12[780];
        sv12[821] = sv12[781] + sv12[625];
        sv12[822] = sv12[637] + sv12[782];
        sv12[823] = sv12[649] + sv12[783];
        sv12[824] = sv12[784] + sv12[661];
        sv12[825] = sv12[673] + sv12[785];
        sv12[826] = sv12[685] + sv12[786];
        sv12[827] = sv12[787] + sv12[626];
        sv12[828] = sv12[638] + sv12[788];
        sv12[829] = sv12[650] + sv12[789];
        sv12[830] = sv12[790] + sv12[662];
        sv12[831] = sv12[674] + sv12[791];
        sv12[832] = sv12[686] + sv12[792];
        sv12[833] = sv12[627] + sv12[793];
        sv12[834] = sv12[628] + sv12[794];
        sv12[835] = sv12[629] + sv12[795];
        sv12[836] = sv12[630] + sv12[796];
        sv12[837] = sv12[631] + sv12[797];
        sv12[838] = sv12[632] + sv12[798];
        sv12[839] = sv12[663] + sv12[799];
        sv12[840] = sv12[664] + sv12[800];
        sv12[841] = sv12[665] + sv12[801];
        sv12[842] = sv12[666] + sv12[802];
        sv12[843] = sv12[667] + sv12[803];
        sv12[844] = sv12[668] + sv12[804];
        sv12[845] = sv12[17] * (-1 * sv12[101]);
        sv12[846] = sv12[17] * (-1 * sv12[100]);
        sv12[847] = sv12[113] * sv12[17];
        sv12[848] = sv12[114] * sv12[17];
        sv12[849] = sv12[17] * (-1 * sv12[106]);
        sv12[850] = sv12[17] * (-1 * sv12[105]);
        sv12[851] = sv12[17] * (-1 * sv12[107]);
        sv12[852] = sv12[17] * (-1 * sv12[111]);
        sv12[853] = sv12[17] * (-1 * sv12[112]);
        sv12[854] = sv12[17] * (-1 * sv12[110]);
        sv12[855] = sv12[17] * sp[4];
        sv12[856] = sv12[17] * sp[3];
        sv12[857] = sv12[14] * (-1 * sv12[101]);
        sv12[858] = sv12[14] * (-1 * sv12[100]);
        sv12[859] = sv12[113] * sv12[14];
        sv12[860] = sv12[114] * sv12[14];
        sv12[861] = sv12[14] * (-1 * sv12[106]);
        sv12[862] = sv12[14] * (-1 * sv12[105]);
        sv12[863] = sv12[14] * (-1 * sv12[107]);
        sv12[864] = sv12[14] * (-1 * sv12[111]);
        sv12[865] = sv12[14] * (-1 * sv12[112]);
        sv12[866] = sv12[14] * (-1 * sv12[110]);
        sv12[867] = sv12[14] * sp[4];
        sv12[868] = sv12[14] * sp[3];
        sv12[869] = sv12[113] * (-1 * sv12[101]);
        sv12[870] = sv12[113] * (-1 * sv12[100]);
        sv12[871] = sv12[113] * sv12[113];
        sv12[872] = sv12[114] * sv12[113];
        sv12[873] = sv12[113] * (-1 * sv12[106]);
        sv12[874] = sv12[113] * (-1 * sv12[105]);
        sv12[875] = sv12[113] * (-1 * sv12[107]);
        sv12[876] = sv12[113] * (-1 * sv12[111]);
        sv12[877] = sv12[113] * (-1 * sv12[112]);
        sv12[878] = sv12[113] * (-1 * sv12[110]);
        sv12[879] = sv12[113] * sp[4];
        sv12[880] = sv12[113] * sp[3];
        sv12[881] = sv12[114] * (-1 * sv12[101]);
        sv12[882] = sv12[114] * (-1 * sv12[100]);
        sv12[883] = sv12[114] * sv12[114];
        sv12[884] = sv12[114] * (-1 * sv12[106]);
        sv12[885] = sv12[114] * (-1 * sv12[105]);
        sv12[886] = sv12[114] * (-1 * sv12[107]);
        sv12[887] = sv12[114] * (-1 * sv12[111]);
        sv12[888] = sv12[114] * (-1 * sv12[112]);
        sv12[889] = sv12[114] * (-1 * sv12[110]);
        sv12[890] = sv12[114] * sp[4];
        sv12[891] = sv12[114] * sp[3];
        sv12[892] = -1 * sv12[101] * (-1 * sv12[100]);
        sv12[893] = -1 * sv12[100] * (-1 * sv12[100]);
        sv12[894] = -1 * sv12[106] * (-1 * sv12[100]);
        sv12[895] = -1 * sv12[105] * (-1 * sv12[100]);
        sv12[896] = -1 * sv12[107] * (-1 * sv12[100]);
        sv12[897] = -1 * sv12[111] * (-1 * sv12[100]);
        sv12[898] = -1 * sv12[112] * (-1 * sv12[100]);
        sv12[899] = -1 * sv12[110] * (-1 * sv12[100]);
        sv12[900] = -1 * sv12[100] * sp[4];
        sv12[901] = -1 * sv12[100] * sp[3];
        sv12[902] = -1 * sv12[101] * (-1 * sv12[101]);
        sv12[903] = -1 * sv12[106] * (-1 * sv12[101]);
        sv12[904] = -1 * sv12[105] * (-1 * sv12[101]);
        sv12[905] = -1 * sv12[107] * (-1 * sv12[101]);
        sv12[906] = -1 * sv12[111] * (-1 * sv12[101]);
        sv12[907] = -1 * sv12[112] * (-1 * sv12[101]);
        sv12[908] = -1 * sv12[110] * (-1 * sv12[101]);
        sv12[909] = -1 * sv12[101] * sp[4];
        sv12[910] = -1 * sv12[101] * sp[3];
        sv12[911] = -1 * sv12[110] * (-1 * sv12[106]);
        sv12[912] = -1 * sv12[110] * (-1 * sv12[105]);
        sv12[913] = -1 * sv12[110] * (-1 * sv12[107]);
        sv12[914] = -1 * sv12[111] * (-1 * sv12[110]);
        sv12[915] = -1 * sv12[112] * (-1 * sv12[110]);
        sv12[916] = -1 * sv12[110] * (-1 * sv12[110]);
        sv12[917] = -1 * sv12[110] * sp[4];
        sv12[918] = -1 * sv12[110] * sp[3];
        sv12[919] = -1 * sv12[111] * (-1 * sv12[106]);
        sv12[920] = -1 * sv12[111] * (-1 * sv12[105]);
        sv12[921] = -1 * sv12[111] * (-1 * sv12[107]);
        sv12[922] = -1 * sv12[111] * (-1 * sv12[111]);
        sv12[923] = -1 * sv12[111] * (-1 * sv12[112]);
        sv12[924] = -1 * sv12[111] * sp[4];
        sv12[925] = -1 * sv12[111] * sp[3];
        sv12[926] = -1 * sv12[112] * (-1 * sv12[106]);
        sv12[927] = -1 * sv12[112] * (-1 * sv12[105]);
        sv12[928] = -1 * sv12[112] * (-1 * sv12[107]);
        sv12[929] = -1 * sv12[112] * (-1 * sv12[112]);
        sv12[930] = -1 * sv12[112] * sp[4];
        sv12[931] = -1 * sv12[112] * sp[3];
        sv12[932] = -1 * sv12[105] * sp[4];
        sv12[933] = -1 * sv12[105] * sp[3];
        sv12[934] = -1 * sv12[106] * sp[4];
        sv12[935] = -1 * sv12[106] * sp[3];
        sv12[936] = -1 * sv12[107] * sp[4];
        sv12[937] = -1 * sv12[107] * sp[3];
        sv12[938] = -1 * sv12[215] * (-1 * sv12[101]);
        sv12[939] = -1 * sv12[215] * (-1 * sv12[100]);
        sv12[940] = sv12[113] * (-1 * sv12[215]);
        sv12[941] = sv12[114] * (-1 * sv12[215]);
        sv12[942] = -1 * sv12[215] * (-1 * sv12[106]);
        sv12[943] = -1 * sv12[215] * (-1 * sv12[105]);
        sv12[944] = -1 * sv12[215] * (-1 * sv12[107]);
        sv12[945] = -1 * sv12[215] * (-1 * sv12[111]);
        sv12[946] = -1 * sv12[215] * (-1 * sv12[112]);
        sv12[947] = -1 * sv12[215] * (-1 * sv12[110]);
        sv12[948] = -1 * sv12[215] * sp[4];
        sv12[949] = -1 * sv12[215] * sp[3];
        sv12[950] = -1 * sv12[216] * (-1 * sv12[101]);
        sv12[951] = -1 * sv12[216] * (-1 * sv12[100]);
        sv12[952] = sv12[113] * (-1 * sv12[216]);
        sv12[953] = sv12[114] * (-1 * sv12[216]);
        sv12[954] = -1 * sv12[216] * (-1 * sv12[106]);
        sv12[955] = -1 * sv12[216] * (-1 * sv12[105]);
        sv12[956] = -1 * sv12[216] * (-1 * sv12[107]);
        sv12[957] = -1 * sv12[216] * (-1 * sv12[111]);
        sv12[958] = -1 * sv12[216] * (-1 * sv12[112]);
        sv12[959] = -1 * sv12[216] * (-1 * sv12[110]);
        sv12[960] = -1 * sv12[216] * sp[4];
        sv12[961] = -1 * sv12[216] * sp[3];
        sv12[962] = -1 * sv12[217] * (-1 * sv12[101]);
        sv12[963] = -1 * sv12[217] * (-1 * sv12[100]);
        sv12[964] = sv12[113] * (-1 * sv12[217]);
        sv12[965] = sv12[114] * (-1 * sv12[217]);
        sv12[966] = -1 * sv12[217] * (-1 * sv12[106]);
        sv12[967] = -1 * sv12[217] * (-1 * sv12[105]);
        sv12[968] = -1 * sv12[217] * (-1 * sv12[107]);
        sv12[969] = -1 * sv12[217] * (-1 * sv12[111]);
        sv12[970] = -1 * sv12[217] * (-1 * sv12[112]);
        sv12[971] = -1 * sv12[217] * (-1 * sv12[110]);
        sv12[972] = -1 * sv12[217] * sp[4];
        sv12[973] = -1 * sv12[217] * sp[3];
        sv12[974] = -1 * sv12[218] * (-1 * sv12[101]);
        sv12[975] = -1 * sv12[218] * (-1 * sv12[100]);
        sv12[976] = sv12[113] * (-1 * sv12[218]);
        sv12[977] = sv12[114] * (-1 * sv12[218]);
        sv12[978] = -1 * sv12[218] * (-1 * sv12[106]);
        sv12[979] = -1 * sv12[218] * (-1 * sv12[105]);
        sv12[980] = -1 * sv12[218] * (-1 * sv12[107]);
        sv12[981] = -1 * sv12[218] * (-1 * sv12[111]);
        sv12[982] = -1 * sv12[218] * (-1 * sv12[112]);
        sv12[983] = -1 * sv12[218] * (-1 * sv12[110]);
        sv12[984] = -1 * sv12[218] * sp[4];
        sv12[985] = -1 * sv12[218] * sp[3];
        sv12[986] = -1 * sv12[219] * (-1 * sv12[101]);
        sv12[987] = -1 * sv12[219] * (-1 * sv12[100]);
        sv12[988] = sv12[113] * (-1 * sv12[219]);
        sv12[989] = sv12[114] * (-1 * sv12[219]);
        sv12[990] = -1 * sv12[219] * (-1 * sv12[106]);
        sv12[991] = -1 * sv12[219] * (-1 * sv12[105]);
        sv12[992] = -1 * sv12[219] * (-1 * sv12[107]);
        sv12[993] = -1 * sv12[219] * (-1 * sv12[111]);
        sv12[994] = -1 * sv12[219] * (-1 * sv12[112]);
        sv12[995] = -1 * sv12[219] * (-1 * sv12[110]);
        sv12[996] = -1 * sv12[219] * sp[4];
        sv12[997] = -1 * sv12[219] * sp[3];
        sv12[998] = -1 * sv12[220] * (-1 * sv12[101]);
        sv12[999] = -1 * sv12[220] * (-1 * sv12[100]);
        sv12[1000] = sv12[113] * (-1 * sv12[220]);
        sv12[1001] = sv12[114] * (-1 * sv12[220]);
        sv12[1002] = -1 * sv12[220] * (-1 * sv12[106]);
        sv12[1003] = -1 * sv12[220] * (-1 * sv12[105]);
        sv12[1004] = -1 * sv12[220] * (-1 * sv12[107]);
        sv12[1005] = -1 * sv12[220] * (-1 * sv12[111]);
        sv12[1006] = -1 * sv12[220] * (-1 * sv12[112]);
        sv12[1007] = -1 * sv12[220] * (-1 * sv12[110]);
        sv12[1008] = -1 * sv12[220] * sp[4];
        sv12[1009] = -1 * sv12[220] * sp[3];
        sv12[1010] = 2.0 * sv12[151] * (sp[44] / 2);
        sv12[1011] = 2.0 * sv12[151] * (sp[45] / 2);
        sv12[1012] = 2.0 * sv12[152] * (sp[44] / 2);
        sv12[1013] = 2.0 * sv12[152] * (sp[45] / 2);
        sv12[1014] = 2.0 * sv12[153] * (sp[44] / 2);
        sv12[1015] = 2.0 * sv12[153] * (sp[45] / 2);
        sv12[1016] = 2.0 * sv12[154] * (sp[44] / 2);
        sv12[1017] = 2.0 * sv12[154] * (sp[45] / 2);
        sv12[1018] = 2.0 * sv12[155] * (sp[44] / 2);
        sv12[1019] = 2.0 * sv12[155] * (sp[45] / 2);
        sv12[1020] = 2.0 * sv12[156] * (sp[44] / 2);
        sv12[1021] = 2.0 * sv12[156] * (sp[45] / 2);
        sv12[1022] = 2.0 * sv12[129] * (sp[48] / 2);
        sv12[1023] = 2.0 * sv12[129] * (sp[49] / 2);
        sv12[1024] = 2.0 * sv12[129] * (sp[47] / 2);
        sv12[1025] = 2.0 * sv12[130] * (sp[48] / 2);
        sv12[1026] = 2.0 * sv12[130] * (sp[49] / 2);
        sv12[1027] = 2.0 * sv12[130] * (sp[47] / 2);
        sv12[1028] = 2.0 * sv12[198] * (sp[3] / 2);
        sv12[1029] = 2.0 * sv12[198] * (sp[4] / 2);
        sv12[1030] = 2.0 * sv12[198] * (sp[6] / 2);
        sv12[1031] = 2.0 * sv12[198] * (sp[5] / 2);
        sv12[1032] = 2.0 * sv12[199] * (sp[3] / 2);
        sv12[1033] = 2.0 * sv12[199] * (sp[4] / 2);
        sv12[1034] = 2.0 * sv12[199] * (sp[6] / 2);
        sv12[1035] = 2.0 * sv12[199] * (sp[5] / 2);
        sv12[1036] = 2.0 * sv12[200] * (sp[3] / 2);
        sv12[1037] = 2.0 * sv12[200] * (sp[4] / 2);
        sv12[1038] = 2.0 * sv12[200] * (sp[6] / 2);
        sv12[1039] = 2.0 * sv12[200] * (sp[5] / 2);
        sv12[1040] = 2.0 * sv12[201] * (sp[3] / 2);
        sv12[1041] = 2.0 * sv12[201] * (sp[4] / 2);
        sv12[1042] = 2.0 * sv12[201] * (sp[6] / 2);
        sv12[1043] = 2.0 * sv12[201] * (sp[5] / 2);
        sv12[1044] = 2.0 * sv12[202] * (sp[3] / 2);
        sv12[1045] = 2.0 * sv12[202] * (sp[4] / 2);
        sv12[1046] = 2.0 * sv12[202] * (sp[6] / 2);
        sv12[1047] = 2.0 * sv12[202] * (sp[5] / 2);
        sv12[1048] = 2.0 * sv12[203] * (sp[3] / 2);
        sv12[1049] = 2.0 * sv12[203] * (sp[4] / 2);
        sv12[1050] = 2.0 * sv12[203] * (sp[6] / 2);
        sv12[1051] = 2.0 * sv12[203] * (sp[5] / 2);
        sv12[1052] = 2.0 * sv12[129] * (sp[60] / 2);
        sv12[1053] = 2.0 * sv12[129] * (sp[33] / 2);
        sv12[1054] = 2.0 * sv12[129] * (sp[34] / 2);
        sv12[1055] = 2.0 * sv12[130] * (sp[60] / 2);
        sv12[1056] = 2.0 * sv12[130] * (sp[33] / 2);
        sv12[1057] = 2.0 * sv12[130] * (sp[34] / 2);
        sv12[1058] = sv12[1010] + sv12[1030];
        sv12[1059] = sv12[1012] + sv12[1034];
        sv12[1060] = sv12[1014] + sv12[1038];
        sv12[1061] = sv12[1016] + sv12[1042];
        sv12[1062] = sv12[1018] + sv12[1046];
        sv12[1063] = sv12[1020] + sv12[1050];
        sv12[1064] = sv12[1011] + sv12[1031];
        sv12[1065] = sv12[1013] + sv12[1035];
        sv12[1066] = sv12[1015] + sv12[1039];
        sv12[1067] = sv12[1017] + sv12[1043];
        sv12[1068] = sv12[1019] + sv12[1047];
        sv12[1069] = sv12[1021] + sv12[1051];
        sv12[1070] = sv12[1022] + sv12[1052];
        sv12[1071] = sv12[1023] + sv12[1053];
        sv12[1072] = sv12[1024] + sv12[1054];
        sv12[1073] = sv12[1025] + sv12[1055];
        sv12[1074] = sv12[1026] + sv12[1056];
        sv12[1075] = sv12[1027] + sv12[1057];
        sv12[1076] = sv12[232] * sp[6];
        sv12[1077] = sv12[232] * sp[5];
        sv12[1078] = sv12[232] * (-1 * sv12[1028]);
        sv12[1079] = sv12[232] * (-1 * sv12[1032]);
        sv12[1080] = sv12[232] * (-1 * sv12[1036]);
        sv12[1081] = sv12[232] * (-1 * sv12[1040]);
        sv12[1082] = sv12[232] * (-1 * sv12[1044]);
        sv12[1083] = sv12[232] * (-1 * sv12[1048]);
        sv12[1084] = sv12[232] * (-1 * sv12[1029]);
        sv12[1085] = sv12[232] * (-1 * sv12[1033]);
        sv12[1086] = sv12[232] * (-1 * sv12[1037]);
        sv12[1087] = sv12[232] * (-1 * sv12[1041]);
        sv12[1088] = sv12[232] * (-1 * sv12[1045]);
        sv12[1089] = sv12[232] * (-1 * sv12[1049]);
        sv12[1090] = sv12[232] * (-1 * sv12[1058]);
        sv12[1091] = sv12[232] * (-1 * sv12[1059]);
        sv12[1092] = sv12[232] * (-1 * sv12[1060]);
        sv12[1093] = sv12[232] * (-1 * sv12[1061]);
        sv12[1094] = sv12[232] * (-1 * sv12[1062]);
        sv12[1095] = sv12[232] * (-1 * sv12[1063]);
        sv12[1096] = sv12[232] * (-1 * sv12[1064]);
        sv12[1097] = sv12[232] * (-1 * sv12[1065]);
        sv12[1098] = sv12[232] * (-1 * sv12[1066]);
        sv12[1099] = sv12[232] * (-1 * sv12[1067]);
        sv12[1100] = sv12[232] * (-1 * sv12[1068]);
        sv12[1101] = sv12[232] * (-1 * sv12[1069]);
        sv12[1102] = sv12[232] * (-1 * sv12[724]);
        sv12[1103] = sv12[232] * (-1 * sv12[722]);
        sv12[1104] = sv12[232] * (-1 * sv12[723]);
        sv12[1105] = sv12[232] * (-1 * sv12[1070]);
        sv12[1106] = sv12[232] * (-1 * sv12[1071]);
        sv12[1107] = sv12[232] * (-1 * sv12[1072]);
        sv12[1108] = sv12[232] * (-1 * sv12[730]);
        sv12[1109] = sv12[232] * (-1 * sv12[728]);
        sv12[1110] = sv12[232] * (-1 * sv12[729]);
        sv12[1111] = sv12[232] * (-1 * sv12[1073]);
        sv12[1112] = sv12[232] * (-1 * sv12[1074]);
        sv12[1113] = sv12[232] * (-1 * sv12[1075]);
        sv12[1114] = sv12[847] + sv12[1076];
        sv12[1115] = sv12[848] + sv12[1077];
        sv12[1116] = sv12[1078] + sv12[938];
        sv12[1117] = sv12[950] + sv12[1079];
        sv12[1118] = sv12[962] + sv12[1080];
        sv12[1119] = sv12[1081] + sv12[974];
        sv12[1120] = sv12[986] + sv12[1082];
        sv12[1121] = sv12[998] + sv12[1083];
        sv12[1122] = sv12[1084] + sv12[939];
        sv12[1123] = sv12[951] + sv12[1085];
        sv12[1124] = sv12[963] + sv12[1086];
        sv12[1125] = sv12[1087] + sv12[975];
        sv12[1126] = sv12[987] + sv12[1088];
        sv12[1127] = sv12[999] + sv12[1089];
        sv12[1128] = sv12[859] + sv12[245];
        sv12[1129] = sv12[860] + sv12[246];
        sv12[1130] = sv12[940] + sv12[1090];
        sv12[1131] = sv12[952] + sv12[1091];
        sv12[1132] = sv12[964] + sv12[1092];
        sv12[1133] = sv12[976] + sv12[1093];
        sv12[1134] = sv12[988] + sv12[1094];
        sv12[1135] = sv12[1000] + sv12[1095];
        sv12[1136] = sv12[941] + sv12[1096];
        sv12[1137] = sv12[953] + sv12[1097];
        sv12[1138] = sv12[965] + sv12[1098];
        sv12[1139] = sv12[977] + sv12[1099];
        sv12[1140] = sv12[989] + sv12[1100];
        sv12[1141] = sv12[1001] + sv12[1101];
        sv12[1142] = sv12[942] + sv12[1102];
        sv12[1143] = sv12[943] + sv12[1103];
        sv12[1144] = sv12[944] + sv12[1104];
        sv12[1145] = sv12[945] + sv12[1105];
        sv12[1146] = sv12[946] + sv12[1106];
        sv12[1147] = sv12[947] + sv12[1107];
        sv12[1148] = sv12[978] + sv12[1108];
        sv12[1149] = sv12[979] + sv12[1109];
        sv12[1150] = sv12[980] + sv12[1110];
        sv12[1151] = sv12[981] + sv12[1111];
        sv12[1152] = sv12[982] + sv12[1112];
        sv12[1153] = sv12[983] + sv12[1113];
        sv12[1154] = sv12[805] + sv12[845];
        sv12[1155] = sv12[806] + sv12[846];
        sv12[1156] = sv12[1114] + sv12[526];
        sv12[1157] = sv12[1115] + sv12[527];
        sv12[1158] = sv12[528] + sv12[849];
        sv12[1159] = sv12[529] + sv12[850];
        sv12[1160] = sv12[530] + sv12[851];
        sv12[1161] = sv12[852] + sv12[531];
        sv12[1162] = sv12[853] + sv12[532];
        sv12[1163] = sv12[854] + sv12[533];
        sv12[1164] = sv12[534] + sv12[855];
        sv12[1165] = sv12[856] + sv12[535];
        sv12[1166] = sv12[807] + sv12[857];
        sv12[1167] = sv12[869] + sv12[548];
        sv12[1168] = sv12[881] + sv12[560];
        sv12[1169] = sv12[571] + sv12[892];
        sv12[1170] = sv12[581] + sv12[902];
        sv12[1171] = sv12[587] + sv12[908];
        sv12[1172] = sv12[585] + sv12[906];
        sv12[1173] = sv12[586] + sv12[907];
        sv12[1174] = sv12[583] + sv12[904];
        sv12[1175] = sv12[582] + sv12[903];
        sv12[1176] = sv12[584] + sv12[905];
        sv12[1177] = sv12[910] + sv12[589];
        sv12[1178] = sv12[588] + sv12[909];
        sv12[1179] = sv12[808] + sv12[1116];
        sv12[1180] = sv12[809] + sv12[1117];
        sv12[1181] = sv12[810] + sv12[1118];
        sv12[1182] = sv12[811] + sv12[1119];
        sv12[1183] = sv12[812] + sv12[1120];
        sv12[1184] = sv12[813] + sv12[1121];
        sv12[1185] = sv12[814] + sv12[858];
        sv12[1186] = sv12[870] + sv12[549];
        sv12[1187] = sv12[561] + sv12[882];
        sv12[1188] = sv12[572] + sv12[893];
        sv12[1189] = sv12[578] + sv12[899];
        sv12[1190] = sv12[576] + sv12[897];
        sv12[1191] = sv12[577] + sv12[898];
        sv12[1192] = sv12[574] + sv12[895];
        sv12[1193] = sv12[573] + sv12[894];
        sv12[1194] = sv12[575] + sv12[896];
        sv12[1195] = sv12[901] + sv12[580];
        sv12[1196] = sv12[579] + sv12[900];
        sv12[1197] = sv12[815] + sv12[1122];
        sv12[1198] = sv12[816] + sv12[1123];
        sv12[1199] = sv12[817] + sv12[1124];
        sv12[1200] = sv12[818] + sv12[1125];
        sv12[1201] = sv12[819] + sv12[1126];
        sv12[1202] = sv12[820] + sv12[1127];
        sv12[1203] = sv12[1128] + sv12[538];
        sv12[1204] = sv12[1129] + sv12[539];
        sv12[1205] = sv12[540] + sv12[861];
        sv12[1206] = sv12[541] + sv12[862];
        sv12[1207] = sv12[542] + sv12[863];
        sv12[1208] = sv12[864] + sv12[543];
        sv12[1209] = sv12[865] + sv12[544];
        sv12[1210] = sv12[866] + sv12[545];
        sv12[1211] = sv12[546] + sv12[867];
        sv12[1212] = sv12[868] + sv12[547];
        sv12[1213] = sv12[871] + sv12[550];
        sv12[1214] = sv12[872] + sv12[551];
        sv12[1215] = sv12[878] + sv12[557];
        sv12[1216] = sv12[876] + sv12[555];
        sv12[1217] = sv12[877] + sv12[556];
        sv12[1218] = sv12[874] + sv12[553];
        sv12[1219] = sv12[873] + sv12[552];
        sv12[1220] = sv12[875] + sv12[554];
        sv12[1221] = sv12[880] + sv12[559];
        sv12[1222] = sv12[558] + sv12[879];
        sv12[1223] = sv12[1130] + sv12[821];
        sv12[1224] = sv12[1131] + sv12[822];
        sv12[1225] = sv12[1132] + sv12[823];
        sv12[1226] = sv12[1133] + sv12[824];
        sv12[1227] = sv12[1134] + sv12[825];
        sv12[1228] = sv12[1135] + sv12[826];
        sv12[1229] = sv12[883] + sv12[562];
        sv12[1230] = sv12[889] + sv12[568];
        sv12[1231] = sv12[887] + sv12[566];
        sv12[1232] = sv12[888] + sv12[567];
        sv12[1233] = sv12[885] + sv12[564];
        sv12[1234] = sv12[884] + sv12[563];
        sv12[1235] = sv12[886] + sv12[565];
        sv12[1236] = sv12[891] + sv12[570];
        sv12[1237] = sv12[569] + sv12[890];
        sv12[1238] = sv12[1136] + sv12[827];
        sv12[1239] = sv12[1137] + sv12[828];
        sv12[1240] = sv12[1138] + sv12[829];
        sv12[1241] = sv12[1139] + sv12[830];
        sv12[1242] = sv12[1140] + sv12[831];
        sv12[1243] = sv12[1141] + sv12[832];
        sv12[1244] = sv12[590] + sv12[911];
        sv12[1245] = sv12[912] + sv12[591];
        sv12[1246] = sv12[913] + sv12[592];
        sv12[1247] = sv12[914] + sv12[593];
        sv12[1248] = sv12[915] + sv12[594];
        sv12[1249] = sv12[916] + sv12[595];
        sv12[1250] = sv12[596] + sv12[917];
        sv12[1251] = sv12[918] + sv12[597];
        sv12[1252] = sv12[598] + sv12[919];
        sv12[1253] = sv12[599] + sv12[920];
        sv12[1254] = sv12[600] + sv12[921];
        sv12[1255] = sv12[922] + sv12[601];
        sv12[1256] = sv12[923] + sv12[602];
        sv12[1257] = sv12[603] + sv12[924];
        sv12[1258] = sv12[925] + sv12[604];
        sv12[1259] = sv12[605] + sv12[926];
        sv12[1260] = sv12[927] + sv12[606];
        sv12[1261] = sv12[928] + sv12[607];
        sv12[1262] = sv12[929] + sv12[608];
        sv12[1263] = sv12[609] + sv12[930];
        sv12[1264] = sv12[931] + sv12[610];
        sv12[1265] = sv12[611] + sv12[593];
        sv12[1266] = sv12[612] + sv12[601];
        sv12[1267] = sv12[613] + sv12[602];
        sv12[1268] = sv12[614] + sv12[932];
        sv12[1269] = sv12[933] + sv12[615];
        sv12[1270] = sv12[616] + sv12[595];
        sv12[1271] = sv12[617] + sv12[594];
        sv12[1272] = sv12[618] + sv12[934];
        sv12[1273] = sv12[935] + sv12[619];
        sv12[1274] = sv12[620] + sv12[608];
        sv12[1275] = sv12[621] + sv12[936];
        sv12[1276] = sv12[937] + sv12[622];
        sv12[1277] = sv12[833] + sv12[1142];
        sv12[1278] = sv12[834] + sv12[1143];
        sv12[1279] = sv12[835] + sv12[1144];
        sv12[1280] = sv12[1145] + sv12[836];
        sv12[1281] = sv12[1146] + sv12[837];
        sv12[1282] = sv12[1147] + sv12[838];
        sv12[1283] = sv12[633] + sv12[948];
        sv12[1284] = sv12[949] + sv12[634];
        sv12[1285] = sv12[639] + sv12[954];
        sv12[1286] = sv12[640] + sv12[955];
        sv12[1287] = sv12[641] + sv12[956];
        sv12[1288] = sv12[957] + sv12[642];
        sv12[1289] = sv12[958] + sv12[643];
        sv12[1290] = sv12[959] + sv12[644];
        sv12[1291] = sv12[645] + sv12[960];
        sv12[1292] = sv12[961] + sv12[646];
        sv12[1293] = sv12[651] + sv12[966];
        sv12[1294] = sv12[652] + sv12[967];
        sv12[1295] = sv12[653] + sv12[968];
        sv12[1296] = sv12[969] + sv12[654];
        sv12[1297] = sv12[970] + sv12[655];
        sv12[1298] = sv12[971] + sv12[656];
        sv12[1299] = sv12[657] + sv12[972];
        sv12[1300] = sv12[973] + sv12[658];
        sv12[1301] = sv12[839] + sv12[1148];
        sv12[1302] = sv12[840] + sv12[1149];
        sv12[1303] = sv12[841] + sv12[1150];
        sv12[1304] = sv12[1151] + sv12[842];
        sv12[1305] = sv12[1152] + sv12[843];
        sv12[1306] = sv12[1153] + sv12[844];
        sv12[1307] = sv12[669] + sv12[984];
        sv12[1308] = sv12[985] + sv12[670];
        sv12[1309] = sv12[675] + sv12[990];
        sv12[1310] = sv12[676] + sv12[991];
        sv12[1311] = sv12[677] + sv12[992];
        sv12[1312] = sv12[993] + sv12[678];
        sv12[1313] = sv12[994] + sv12[679];
        sv12[1314] = sv12[995] + sv12[680];
        sv12[1315] = sv12[681] + sv12[996];
        sv12[1316] = sv12[997] + sv12[682];
        sv12[1317] = sv12[687] + sv12[1002];
        sv12[1318] = sv12[688] + sv12[1003];
        sv12[1319] = sv12[689] + sv12[1004];
        sv12[1320] = sv12[1005] + sv12[690];
        sv12[1321] = sv12[1006] + sv12[691];
        sv12[1322] = sv12[1007] + sv12[692];
        sv12[1323] = sv12[693] + sv12[1008];
        sv12[1324] = sv12[1009] + sv12[694];
        sv12[1325] = (sv12[359] >= 0.1 ? sv12[412] : sv12[423]);
        sv12[1326] = sv12[1154] * sv12[1325];
        sv12[1327] = sv12[1155] * sv12[1325];
        sv12[1328] = sv12[1156] * sv12[1325];
        sv12[1329] = sv12[1157] * sv12[1325];
        sv12[1330] = sv12[1158] * sv12[1325];
        sv12[1331] = sv12[1159] * sv12[1325];
        sv12[1332] = sv12[1160] * sv12[1325];
        sv12[1333] = sv12[1161] * sv12[1325];
        sv12[1334] = sv12[1162] * sv12[1325];
        sv12[1335] = sv12[1163] * sv12[1325];
        sv12[1336] = sv12[1164] * sv12[1325];
        sv12[1337] = sv12[1165] * sv12[1325];
        sv12[1338] = sv12[1166] * sv12[1325];
        sv12[1339] = sv12[1167] * sv12[1325];
        sv12[1340] = sv12[1168] * sv12[1325];
        sv12[1341] = sv12[1169] * sv12[1325];
        sv12[1342] = sv12[1170] * sv12[1325];
        sv12[1343] = sv12[1171] * sv12[1325];
        sv12[1344] = sv12[1172] * sv12[1325];
        sv12[1345] = sv12[1173] * sv12[1325];
        sv12[1346] = sv12[1174] * sv12[1325];
        sv12[1347] = sv12[1175] * sv12[1325];
        sv12[1348] = sv12[1176] * sv12[1325];
        sv12[1349] = sv12[1177] * sv12[1325];
        sv12[1350] = sv12[1178] * sv12[1325];
        sv12[1351] = sv12[1179] * sv12[1325];
        sv12[1352] = sv12[1180] * sv12[1325];
        sv12[1353] = sv12[1181] * sv12[1325];
        sv12[1354] = sv12[1182] * sv12[1325];
        sv12[1355] = sv12[1183] * sv12[1325];
        sv12[1356] = sv12[1184] * sv12[1325];
        sv12[1357] = sv12[1185] * sv12[1325];
        sv12[1358] = sv12[1186] * sv12[1325];
        sv12[1359] = sv12[1187] * sv12[1325];
        sv12[1360] = sv12[1188] * sv12[1325];
        sv12[1361] = sv12[1189] * sv12[1325];
        sv12[1362] = sv12[1190] * sv12[1325];
        sv12[1363] = sv12[1191] * sv12[1325];
        sv12[1364] = sv12[1192] * sv12[1325];
        sv12[1365] = sv12[1193] * sv12[1325];
        sv12[1366] = sv12[1194] * sv12[1325];
        sv12[1367] = sv12[1195] * sv12[1325];
        sv12[1368] = sv12[1196] * sv12[1325];
        sv12[1369] = sv12[1197] * sv12[1325];
        sv12[1370] = sv12[1198] * sv12[1325];
        sv12[1371] = sv12[1199] * sv12[1325];
        sv12[1372] = sv12[1200] * sv12[1325];
        sv12[1373] = sv12[1201] * sv12[1325];
        sv12[1374] = sv12[1202] * sv12[1325];
        sv12[1375] = sv12[1203] * sv12[1325];
        sv12[1376] = sv12[1204] * sv12[1325];
        sv12[1377] = sv12[1205] * sv12[1325];
        sv12[1378] = sv12[1206] * sv12[1325];
        sv12[1379] = sv12[1207] * sv12[1325];
        sv12[1380] = sv12[1208] * sv12[1325];
        sv12[1381] = sv12[1209] * sv12[1325];
        sv12[1382] = sv12[1210] * sv12[1325];
        sv12[1383] = sv12[1211] * sv12[1325];
        sv12[1384] = sv12[1212] * sv12[1325];
        sv12[1385] = sv12[1213] * sv12[1325];
        sv12[1386] = sv12[1214] * sv12[1325];
        sv12[1387] = sv12[1215] * sv12[1325];
        sv12[1388] = sv12[1216] * sv12[1325];
        sv12[1389] = sv12[1217] * sv12[1325];
        sv12[1390] = sv12[1218] * sv12[1325];
        sv12[1391] = sv12[1219] * sv12[1325];
        sv12[1392] = sv12[1220] * sv12[1325];
        sv12[1393] = sv12[1221] * sv12[1325];
        sv12[1394] = sv12[1222] * sv12[1325];
        sv12[1395] = sv12[1223] * sv12[1325];
        sv12[1396] = sv12[1224] * sv12[1325];
        sv12[1397] = sv12[1225] * sv12[1325];
        sv12[1398] = sv12[1226] * sv12[1325];
        sv12[1399] = sv12[1227] * sv12[1325];
        sv12[1400] = sv12[1228] * sv12[1325];
        sv12[1401] = sv12[1229] * sv12[1325];
        sv12[1402] = sv12[1230] * sv12[1325];
        sv12[1403] = sv12[1231] * sv12[1325];
        sv12[1404] = sv12[1232] * sv12[1325];
        sv12[1405] = sv12[1233] * sv12[1325];
        sv12[1406] = sv12[1234] * sv12[1325];
        sv12[1407] = sv12[1235] * sv12[1325];
        sv12[1408] = sv12[1236] * sv12[1325];
        sv12[1409] = sv12[1237] * sv12[1325];
        sv12[1410] = sv12[1238] * sv12[1325];
        sv12[1411] = sv12[1239] * sv12[1325];
        sv12[1412] = sv12[1240] * sv12[1325];
        sv12[1413] = sv12[1241] * sv12[1325];
        sv12[1414] = sv12[1242] * sv12[1325];
        sv12[1415] = sv12[1243] * sv12[1325];
        sv12[1416] = sv12[1244] * sv12[1325];
        sv12[1417] = sv12[1245] * sv12[1325];
        sv12[1418] = sv12[1246] * sv12[1325];
        sv12[1419] = sv12[1247] * sv12[1325];
        sv12[1420] = sv12[1248] * sv12[1325];
        sv12[1421] = sv12[1249] * sv12[1325];
        sv12[1422] = sv12[1250] * sv12[1325];
        sv12[1423] = sv12[1251] * sv12[1325];
        sv12[1424] = sv12[1252] * sv12[1325];
        sv12[1425] = sv12[1253] * sv12[1325];
        sv12[1426] = sv12[1254] * sv12[1325];
        sv12[1427] = sv12[1255] * sv12[1325];
        sv12[1428] = sv12[1256] * sv12[1325];
        sv12[1429] = sv12[1257] * sv12[1325];
        sv12[1430] = sv12[1258] * sv12[1325];
        sv12[1431] = sv12[1259] * sv12[1325];
        sv12[1432] = sv12[1260] * sv12[1325];
        sv12[1433] = sv12[1261] * sv12[1325];
        sv12[1434] = sv12[1262] * sv12[1325];
        sv12[1435] = sv12[1263] * sv12[1325];
        sv12[1436] = sv12[1264] * sv12[1325];
        sv12[1437] = sv12[1265] * sv12[1325];
        sv12[1438] = sv12[1266] * sv12[1325];
        sv12[1439] = sv12[1267] * sv12[1325];
        sv12[1440] = sv12[1268] * sv12[1325];
        sv12[1441] = sv12[1269] * sv12[1325];
        sv12[1442] = sv12[1270] * sv12[1325];
        sv12[1443] = sv12[1271] * sv12[1325];
        sv12[1444] = sv12[1272] * sv12[1325];
        sv12[1445] = sv12[1273] * sv12[1325];
        sv12[1446] = sv12[1274] * sv12[1325];
        sv12[1447] = sv12[1275] * sv12[1325];
        sv12[1448] = sv12[1276] * sv12[1325];
        sv12[1449] = sp[120] * sv12[1325];
        sv12[1450] = sp[121] * sv12[1325];
        sv12[1451] = sp[122] * sv12[1325];
        sv12[1452] = sv12[1277] * sv12[1325];
        sv12[1453] = sv12[1278] * sv12[1325];
        sv12[1454] = sv12[1279] * sv12[1325];
        sv12[1455] = sv12[1280] * sv12[1325];
        sv12[1456] = sv12[1281] * sv12[1325];
        sv12[1457] = sv12[1282] * sv12[1325];
        sv12[1458] = sv12[1283] * sv12[1325];
        sv12[1459] = sv12[1284] * sv12[1325];
        sv12[1460] = sv12[1285] * sv12[1325];
        sv12[1461] = sv12[1286] * sv12[1325];
        sv12[1462] = sv12[1287] * sv12[1325];
        sv12[1463] = sv12[1288] * sv12[1325];
        sv12[1464] = sv12[1289] * sv12[1325];
        sv12[1465] = sv12[1290] * sv12[1325];
        sv12[1466] = sv12[1291] * sv12[1325];
        sv12[1467] = sv12[1292] * sv12[1325];
        sv12[1468] = sv12[1293] * sv12[1325];
        sv12[1469] = sv12[1294] * sv12[1325];
        sv12[1470] = sv12[1295] * sv12[1325];
        sv12[1471] = sv12[1296] * sv12[1325];
        sv12[1472] = sv12[1297] * sv12[1325];
        sv12[1473] = sv12[1298] * sv12[1325];
        sv12[1474] = sv12[1299] * sv12[1325];
        sv12[1475] = sv12[1300] * sv12[1325];
        sv12[1476] = sv12[1301] * sv12[1325];
        sv12[1477] = sv12[1302] * sv12[1325];
        sv12[1478] = sv12[1303] * sv12[1325];
        sv12[1479] = sv12[1304] * sv12[1325];
        sv12[1480] = sv12[1305] * sv12[1325];
        sv12[1481] = sv12[1306] * sv12[1325];
        sv12[1482] = sv12[1307] * sv12[1325];
        sv12[1483] = sv12[1308] * sv12[1325];
        sv12[1484] = sv12[1309] * sv12[1325];
        sv12[1485] = sv12[1310] * sv12[1325];
        sv12[1486] = sv12[1311] * sv12[1325];
        sv12[1487] = sv12[1312] * sv12[1325];
        sv12[1488] = sv12[1313] * sv12[1325];
        sv12[1489] = sv12[1314] * sv12[1325];
        sv12[1490] = sv12[1315] * sv12[1325];
        sv12[1491] = sv12[1316] * sv12[1325];
        sv12[1492] = sv12[1317] * sv12[1325];
        sv12[1493] = sv12[1318] * sv12[1325];
        sv12[1494] = sv12[1319] * sv12[1325];
        sv12[1495] = sv12[1320] * sv12[1325];
        sv12[1496] = sv12[1321] * sv12[1325];
        sv12[1497] = sv12[1322] * sv12[1325];
        sv12[1498] = sv12[1323] * sv12[1325];
        sv12[1499] = sv12[1324] * sv12[1325];
        sv12[1500] = sv12[42] + sv12[1339];
        sv12[1501] = sv12[43] + sv12[1340];
        sv12[1502] = sv12[44] + sv12[1341];
        sv12[1503] = sv12[45] + sv12[1342];
        sv12[1504] = sv12[46] + sv12[1358];
        sv12[1505] = sv12[47] + sv12[1359];
        sv12[1506] = sv12[48] + sv12[1360];
        sv12[1507] = sv12[33] + sv12[452];
        sv12[1508] = sv12[35] + sv12[456];
        sv12[1509] = sv12[37] + sv12[460];
        sv12[1510] = sv12[39] + sv12[464];
        sv12[1511] = sv12[34] + sv12[453];
        sv12[1512] = sv12[36] + sv12[457];
        sv12[1513] = sv12[38] + sv12[461];
        sv12[1514] = sv12[40] + sv12[465];
        sv12[1515] = sv12[49] + sv12[1385];
        sv12[1516] = sv12[50] + sv12[1386];
        sv12[1517] = sv12[51] + sv12[1401];
        sv12[1518] = sp[3] * sv12[78];
        sv12[1519] = sp[4] * sv12[78];
        sv12[1520] = sp[6] * sv12[97];
        sv12[1521] = sp[5] * sv12[97];
        sv12[1522] = sv12[1518] + sv12[1520];
        sv12[1523] = sv12[1519] + sv12[1521];
        sv12[1524] = sv12[56] + -1 * sv12[1522];
        sv12[1525] = sv12[57] + -1 * sv12[1523];
        sv12[1526] = sp[125] * sv12[151];
        sv12[1527] = sp[125] * sv12[152];
        sv12[1528] = sp[125] * sv12[153];
        sv12[1529] = sp[125] * sv12[154];
        sv12[1530] = sp[125] * sv12[155];
        sv12[1531] = sp[125] * sv12[156];
        sv12[1532] = sp[128] * sv12[198];
        sv12[1533] = sp[128] * sv12[199];
        sv12[1534] = sp[128] * sv12[200];
        sv12[1535] = sp[128] * sv12[201];
        sv12[1536] = sp[128] * sv12[202];
        sv12[1537] = sp[128] * sv12[203];
        sv12[1538] = sv12[1526] + sv12[1532];
        sv12[1539] = sv12[1527] + sv12[1533];
        sv12[1540] = sv12[1534] + sv12[1528];
        sv12[1541] = sv12[1529] + sv12[1535];
        sv12[1542] = sv12[1530] + sv12[1536];
        sv12[1543] = sv12[1537] + sv12[1531];
        sv12[1544] = w2_d1_c1 * sp[3];
        sv12[1545] = w2_d0_c1 * sp[4];
        sv12[1546] = sv12[1544] + sv12[1545];
        sv12[1547] = sv12[1546] + sv12[1546];
        sv12[1548] = sv12[1547] / 2 * (sv12[1547] / 2);
        sv12[1549] = w2_d1_c0 * sp[3];
        sv12[1550] = w2_d0_c0 * sp[4];
        sv12[1551] = sv12[1549] + sv12[1550];
        sv12[1552] = w2_d0_c1 * sp[5];
        sv12[1553] = w2_d1_c1 * sp[6];
        sv12[1554] = sv12[1552] + sv12[1553];
        sv12[1555] = sv12[1551] + sv12[1554];
        sv12[1556] = sv12[1555] / 2 * (sv12[1555] / 2);
        sv12[1557] = sv12[1548] + sv12[1556];
        sv12[1558] = w2_d0_c0 * sp[5];
        sv12[1559] = w2_d1_c0 * sp[6];
        sv12[1560] = sv12[1558] + sv12[1559];
        sv12[1561] = sv12[1560] + sv12[1560];
        sv12[1562] = sv12[1561] / 2 * (sv12[1561] / 2);
        sv12[1563] = sv12[1562] + sv12[1556];
        sv12[1564] = sv12[1557] + sv12[1563];
        sv12[1565] = 2.0 * sv12[1564] * sv12[129];
        sv12[1566] = 2.0 * sv12[1564] * sv12[130];
        sv12[1567] = sv12[1547] / 2 * (sp[44] / 2);
        sv12[1568] = sv12[1547] / 2 * (sp[45] / 2);
        sv12[1569] = sv12[1567] + sv12[1567];
        sv12[1570] = sv12[1568] + sv12[1568];
        sv12[1571] = sv12[1555] / 2 * (sp[6] / 2);
        sv12[1572] = sv12[1555] / 2 * (sp[5] / 2);
        sv12[1573] = sv12[1555] / 2 * (sp[4] / 2);
        sv12[1574] = sv12[1555] / 2 * (sp[3] / 2);
        sv12[1575] = sv12[1571] + sv12[1571];
        sv12[1576] = sv12[1572] + sv12[1572];
        sv12[1577] = sv12[1573] + sv12[1573];
        sv12[1578] = sv12[1574] + sv12[1574];
        sv12[1579] = sv12[1569] + sv12[1575];
        sv12[1580] = sv12[1570] + sv12[1576];
        sv12[1581] = sv12[1561] / 2 * (sp[95] / 2);
        sv12[1582] = sv12[1561] / 2 * (sp[96] / 2);
        sv12[1583] = sv12[1581] + sv12[1581];
        sv12[1584] = sv12[1582] + sv12[1582];
        sv12[1585] = sv12[1583] + sv12[1577];
        sv12[1586] = sv12[1584] + sv12[1578];
        sv12[1587] = sv12[1579] + sv12[1575];
        sv12[1588] = sv12[1580] + sv12[1576];
        sv12[1589] = sv12[1585] + sv12[1577];
        sv12[1590] = sv12[1586] + sv12[1578];
        sv12[1591] = 2.0 * sv12[1587] * sv12[75];
        sv12[1592] = 2.0 * sv12[1588] * sv12[75];
        sv12[1593] = 2.0 * sv12[1589] * sv12[75];
        sv12[1594] = 2.0 * sv12[1590] * sv12[75];
        sv12[1595] = -1 * sv12[1538] + -1 * sv12[1565];
        sv12[1596] = 1.0 + -1 * sv12[1541] + -1 * sv12[1566];
        sv12[1597] = sv12[1524] + -1 * sv12[1539];
        sv12[1598] = sv12[1525] + -1 * sv12[1540];
        sv12[1599] = w2_c1 * sp[125];
        sv12[1600] = w2_c0 * sp[128];
        sv12[1601] = sv12[1599] + sv12[1600];
        sv12[1602] = sp[125] * sv12[78];
        sv12[1603] = sp[128] * sv12[97];
        sv12[1604] = sv12[1602] + sv12[1603];
        sv12[1605] = sv12[1601] + -1 * sv12[1604];
        sv12[1606] = w2_c4 + sv12[1605];
        sv12[1607] = 2.0 * sv12[1564] * sv12[75];
        sv12[1608] = sv12[1606] + -1 * sv12[1607];
        sv12[1609] = sv12[1608] * sp[128];
        sv12[1610] = sv12[1608] * sp[125];
        sv12[1611] = sv12[1608] * (-1 * sv12[1591]);
        sv12[1612] = sv12[1608] * (-1 * sv12[1592]);
        sv12[1613] = sv12[1608] * (-1 * sv12[1593]);
        sv12[1614] = sv12[1608] * (-1 * sv12[1594]);
        sv12[1615] = sv12[1595] * sv12[1608];
        sv12[1616] = sv12[1597] * sv12[1608];
        sv12[1617] = sv12[1598] * sv12[1608];
        sv12[1618] = sv12[1608] * sv12[1596];
        sv12[1619] = sv12[1608] * (-1 * sv12[1542]);
        sv12[1620] = sv12[1608] * (-1 * sv12[1543]);
        sv12[1621] = sv12[1609] * sv12[440];
        sv12[1622] = sv12[1609] * sv12[441];
        sv12[1623] = sv12[1609] * sv12[442];
        sv12[1624] = sv12[1609] * sv12[443];
        sv12[1625] = sv12[1610] * sv12[440];
        sv12[1626] = sv12[1610] * sv12[441];
        sv12[1627] = sv12[1610] * sv12[442];
        sv12[1628] = sv12[1610] * sv12[443];
        sv12[1629] = sv12[1611] * sv12[440];
        sv12[1630] = sv12[1611] * sv12[441];
        sv12[1631] = sv12[1611] * sv12[442];
        sv12[1632] = sv12[1611] * sv12[443];
        sv12[1633] = sv12[1612] * sv12[440];
        sv12[1634] = sv12[1612] * sv12[441];
        sv12[1635] = sv12[1612] * sv12[442];
        sv12[1636] = sv12[1612] * sv12[443];
        sv12[1637] = sv12[1613] * sv12[440];
        sv12[1638] = sv12[1613] * sv12[441];
        sv12[1639] = sv12[1613] * sv12[442];
        sv12[1640] = sv12[1613] * sv12[443];
        sv12[1641] = sv12[1614] * sv12[440];
        sv12[1642] = sv12[1614] * sv12[441];
        sv12[1643] = sv12[1614] * sv12[442];
        sv12[1644] = sv12[1614] * sv12[443];
        sv12[1645] = sv12[1615] * sv12[440];
        sv12[1646] = sv12[1615] * sv12[441];
        sv12[1647] = sv12[1615] * sv12[442];
        sv12[1648] = sv12[1615] * sv12[443];
        sv12[1649] = sv12[1616] * sv12[440];
        sv12[1650] = sv12[1616] * sv12[441];
        sv12[1651] = sv12[1616] * sv12[442];
        sv12[1652] = sv12[1616] * sv12[443];
        sv12[1653] = sv12[1617] * sv12[440];
        sv12[1654] = sv12[1617] * sv12[441];
        sv12[1655] = sv12[1617] * sv12[442];
        sv12[1656] = sv12[1617] * sv12[443];
        sv12[1657] = sv12[1618] * sv12[440];
        sv12[1658] = sv12[1618] * sv12[441];
        sv12[1659] = sv12[1618] * sv12[442];
        sv12[1660] = sv12[1618] * sv12[443];
        sv12[1661] = sv12[1619] * sv12[440];
        sv12[1662] = sv12[1619] * sv12[441];
        sv12[1663] = sv12[1619] * sv12[442];
        sv12[1664] = sv12[1619] * sv12[443];
        sv12[1665] = sv12[1620] * sv12[440];
        sv12[1666] = sv12[1620] * sv12[441];
        sv12[1667] = sv12[1620] * sv12[442];
        sv12[1668] = sv12[1620] * sv12[443];
        sv12[1669] = sv12[1524] * sp[128];
        sv12[1670] = sv12[1525] * sp[128];
        sv12[1671] = sv12[1524] * sp[125];
        sv12[1672] = sv12[1525] * sp[125];
        sv12[1673] = sv12[1524] * (-1 * sv12[1591]);
        sv12[1674] = sv12[1525] * (-1 * sv12[1591]);
        sv12[1675] = sv12[1524] * (-1 * sv12[1592]);
        sv12[1676] = sv12[1525] * (-1 * sv12[1592]);
        sv12[1677] = sv12[1524] * (-1 * sv12[1593]);
        sv12[1678] = sv12[1525] * (-1 * sv12[1593]);
        sv12[1679] = sv12[1524] * (-1 * sv12[1594]);
        sv12[1680] = sv12[1525] * (-1 * sv12[1594]);
        sv12[1681] = sv12[1524] * sv12[1595];
        sv12[1682] = sv12[1525] * sv12[1595];
        sv12[1683] = sv12[1524] * sv12[1597];
        sv12[1684] = sv12[1525] * sv12[1597];
        sv12[1685] = sv12[1524] * sv12[1598];
        sv12[1686] = sv12[1525] * sv12[1598];
        sv12[1687] = sv12[1524] * sv12[1596];
        sv12[1688] = sv12[1525] * sv12[1596];
        sv12[1689] = sv12[1524] * (-1 * sv12[1542]);
        sv12[1690] = sv12[1525] * (-1 * sv12[1542]);
        sv12[1691] = sv12[1524] * (-1 * sv12[1543]);
        sv12[1692] = sv12[1525] * (-1 * sv12[1543]);
        sv12[1693] = sp[3] * sv12[151];
        sv12[1694] = sp[3] * sv12[152];
        sv12[1695] = sp[3] * sv12[153];
        sv12[1696] = sp[3] * sv12[154];
        sv12[1697] = sp[3] * sv12[155];
        sv12[1698] = sp[3] * sv12[156];
        sv12[1699] = sp[4] * sv12[151];
        sv12[1700] = sp[4] * sv12[152];
        sv12[1701] = sp[4] * sv12[153];
        sv12[1702] = sp[4] * sv12[154];
        sv12[1703] = sp[4] * sv12[155];
        sv12[1704] = sp[4] * sv12[156];
        sv12[1705] = sp[6] * sv12[198];
        sv12[1706] = sp[6] * sv12[199];
        sv12[1707] = sp[6] * sv12[200];
        sv12[1708] = sp[6] * sv12[201];
        sv12[1709] = sp[6] * sv12[202];
        sv12[1710] = sp[6] * sv12[203];
        sv12[1711] = sp[5] * sv12[198];
        sv12[1712] = sp[5] * sv12[199];
        sv12[1713] = sp[5] * sv12[200];
        sv12[1714] = sp[5] * sv12[201];
        sv12[1715] = sp[5] * sv12[202];
        sv12[1716] = sp[5] * sv12[203];
        sv12[1717] = sv12[1693] + sv12[1705];
        sv12[1718] = sv12[1699] + sv12[1711];
        sv12[1719] = sv12[1694] + sv12[1706];
        sv12[1720] = sv12[1700] + sv12[1712];
        sv12[1721] = sv12[1707] + sv12[1695];
        sv12[1722] = sv12[1713] + sv12[1701];
        sv12[1723] = sv12[1696] + sv12[1708];
        sv12[1724] = sv12[1702] + sv12[1714];
        sv12[1725] = sv12[1697] + sv12[1709];
        sv12[1726] = sv12[1703] + sv12[1715];
        sv12[1727] = sv12[1710] + sv12[1698];
        sv12[1728] = sv12[1716] + sv12[1704];
        sv12[1729] = sv12[1608] * sp[6];
        sv12[1730] = sv12[1608] * sp[5];
        sv12[1731] = sv12[1608] * sp[3];
        sv12[1732] = sv12[1608] * sp[4];
        sv12[1733] = sv12[1608] * (-1 * sv12[1717]);
        sv12[1734] = sv12[1608] * (-1 * sv12[1718]);
        sv12[1735] = sv12[1608] * (-1 * sv12[1719]);
        sv12[1736] = sv12[1608] * (-1 * sv12[1720]);
        sv12[1737] = sv12[1608] * (-1 * sv12[1721]);
        sv12[1738] = sv12[1608] * (-1 * sv12[1722]);
        sv12[1739] = sv12[1608] * (-1 * sv12[1723]);
        sv12[1740] = sv12[1608] * (-1 * sv12[1724]);
        sv12[1741] = sv12[1608] * (-1 * sv12[1725]);
        sv12[1742] = sv12[1608] * (-1 * sv12[1726]);
        sv12[1743] = sv12[1608] * (-1 * sv12[1727]);
        sv12[1744] = sv12[1608] * (-1 * sv12[1728]);
        sv12[1745] = sv12[1669] + sv12[1729];
        sv12[1746] = sv12[1670] + sv12[1730];
        sv12[1747] = sv12[1671] + sv12[1731];
        sv12[1748] = sv12[1672] + sv12[1732];
        sv12[1749] = sv12[1681] + sv12[1733];
        sv12[1750] = sv12[1682] + sv12[1734];
        sv12[1751] = sv12[1683] + sv12[1735];
        sv12[1752] = sv12[1684] + sv12[1736];
        sv12[1753] = sv12[1685] + sv12[1737];
        sv12[1754] = sv12[1686] + sv12[1738];
        sv12[1755] = sv12[1687] + sv12[1739];
        sv12[1756] = sv12[1688] + sv12[1740];
        sv12[1757] = sv12[1689] + sv12[1741];
        sv12[1758] = sv12[1690] + sv12[1742];
        sv12[1759] = sv12[1691] + sv12[1743];
        sv12[1760] = sv12[1692] + sv12[1744];
        sv12[1761] = sv12[1745] * sv12[1325];
        sv12[1762] = sv12[1746] * sv12[1325];
        sv12[1763] = sv12[1747] * sv12[1325];
        sv12[1764] = sv12[1748] * sv12[1325];
        sv12[1765] = sv12[1673] * sv12[1325];
        sv12[1766] = sv12[1674] * sv12[1325];
        sv12[1767] = sv12[1675] * sv12[1325];
        sv12[1768] = sv12[1676] * sv12[1325];
        sv12[1769] = sv12[1677] * sv12[1325];
        sv12[1770] = sv12[1678] * sv12[1325];
        sv12[1771] = sv12[1679] * sv12[1325];
        sv12[1772] = sv12[1680] * sv12[1325];
        sv12[1773] = sv12[1749] * sv12[1325];
        sv12[1774] = sv12[1750] * sv12[1325];
        sv12[1775] = sv12[1751] * sv12[1325];
        sv12[1776] = sv12[1752] * sv12[1325];
        sv12[1777] = sv12[1753] * sv12[1325];
        sv12[1778] = sv12[1754] * sv12[1325];
        sv12[1779] = sv12[1755] * sv12[1325];
        sv12[1780] = sv12[1756] * sv12[1325];
        sv12[1781] = sv12[1757] * sv12[1325];
        sv12[1782] = sv12[1758] * sv12[1325];
        sv12[1783] = sv12[1759] * sv12[1325];
        sv12[1784] = sv12[1760] * sv12[1325];
        sv12[1785] = sv12[444] + sv12[1621];
        sv12[1786] = sv12[445] + sv12[1622];
        sv12[1787] = sv12[446] + sv12[1623];
        sv12[1788] = sv12[447] + sv12[1624];
        sv12[1789] = sv12[448] + sv12[1625];
        sv12[1790] = sv12[1507] + sv12[1629];
        sv12[1791] = sv12[1508] + sv12[1633];
        sv12[1792] = sv12[1509] + sv12[1637];
        sv12[1793] = sv12[1510] + sv12[1641];
        sv12[1794] = sv12[500] + sv12[1645];
        sv12[1795] = sv12[504] + sv12[1649];
        sv12[1796] = sv12[508] + sv12[1653];
        sv12[1797] = sv12[512] + sv12[1657];
        sv12[1798] = sv12[516] + sv12[1661];
        sv12[1799] = sv12[520] + sv12[1665];
        sv12[1800] = sv12[449] + sv12[1626];
        sv12[1801] = sv12[1511] + sv12[1630];
        sv12[1802] = sv12[1512] + sv12[1634];
        sv12[1803] = sv12[1513] + sv12[1638];
        sv12[1804] = sv12[1514] + sv12[1642];
        sv12[1805] = sv12[501] + sv12[1646];
        sv12[1806] = sv12[505] + sv12[1650];
        sv12[1807] = sv12[509] + sv12[1654];
        sv12[1808] = sv12[513] + sv12[1658];
        sv12[1809] = sv12[517] + sv12[1662];
        sv12[1810] = sv12[521] + sv12[1666];
        sv12[1811] = sv12[450] + sv12[1627];
        sv12[1812] = sv12[451] + sv12[1628];
        sv12[1813] = sv12[454] + sv12[1631];
        sv12[1814] = sv12[455] + sv12[1632];
        sv12[1815] = sv12[458] + sv12[1635];
        sv12[1816] = sv12[459] + sv12[1636];
        sv12[1817] = sv12[462] + sv12[1639];
        sv12[1818] = sv12[463] + sv12[1640];
        sv12[1819] = sv12[466] + sv12[1643];
        sv12[1820] = sv12[467] + sv12[1644];
        sv12[1821] = sv12[502] + sv12[1647];
        sv12[1822] = sv12[503] + sv12[1648];
        sv12[1823] = sv12[506] + sv12[1651];
        sv12[1824] = sv12[507] + sv12[1652];
        sv12[1825] = sv12[510] + sv12[1655];
        sv12[1826] = sv12[511] + sv12[1656];
        sv12[1827] = sv12[514] + sv12[1659];
        sv12[1828] = sv12[515] + sv12[1660];
        sv12[1829] = sv12[518] + sv12[1663];
        sv12[1830] = sv12[519] + sv12[1664];
        sv12[1831] = sv12[522] + sv12[1667];
        sv12[1832] = sv12[523] + sv12[1668];
        sv12[1833] = sv12[78] / 1.3 * sp[3];
        sv12[1834] = sv12[78] / 1.3 * sp[4];
        sv12[1835] = sv12[97] / 1.3 * sp[6];
        sv12[1836] = sv12[97] / 1.3 * sp[5];
        sv12[1837] = sv12[1833] + sv12[1835];
        sv12[1838] = sv12[1836] + sv12[1834];
        sv12[1839] = sv12[56] + -1 * sv12[1837];
        sv12[1840] = sv12[57] + -1 * sv12[1838];
        sv12[1841] = w2_c3 * w2_c3;
        sv12[1842] = std::sqrt(1e-8 + sv12[1841]);
        sv12[1843] = w2_c3 + sv12[1842];
        sv12[1844] = 1.92 * w1_c4 * (1.0 / (0.5 * sv12[1843]));
        sv12[1845] = w1_c4 / (0.5 * sv12[1843]);
        sv12[1846] = sv12[1844] + 1.92 * sv12[1845];
        sv12[1847] = 2.0 * sv12[1564] * (0.09 * (1.44 * sv12[58]));
        sv12[1848] = sp[131] * (sv12[151] / 1.3);
        sv12[1849] = sp[131] * (sv12[152] / 1.3);
        sv12[1850] = sp[131] * (sv12[153] / 1.3);
        sv12[1851] = sp[131] * (sv12[154] / 1.3);
        sv12[1852] = sp[131] * (sv12[155] / 1.3);
        sv12[1853] = sp[131] * (sv12[156] / 1.3);
        sv12[1854] = sp[134] * (sv12[198] / 1.3);
        sv12[1855] = sp[134] * (sv12[199] / 1.3);
        sv12[1856] = sp[134] * (sv12[200] / 1.3);
        sv12[1857] = sp[134] * (sv12[201] / 1.3);
        sv12[1858] = sp[134] * (sv12[202] / 1.3);
        sv12[1859] = sp[134] * (sv12[203] / 1.3);
        sv12[1860] = sv12[1848] + sv12[1854];
        sv12[1861] = sv12[1849] + sv12[1855];
        sv12[1862] = sv12[1856] + sv12[1850];
        sv12[1863] = sv12[1851] + sv12[1857];
        sv12[1864] = sv12[1852] + sv12[1858];
        sv12[1865] = sv12[1859] + sv12[1853];
        sv12[1866] = w2_c3 + w2_c3;
        sv12[1867] = sv12[1866] / (2 * sv12[1842]);
        sv12[1868] = 0.5 * (1.0 + sv12[1867]) * sv12[1845];
        sv12[1869] = -1 * sv12[1868] / (0.5 * sv12[1843]);
        sv12[1870] = 1.92 * w1_c4 * sv12[1869];
        sv12[1871] = -1 * sv12[1860] + sv12[1870];
        sv12[1872] = w1_c3 * (0.09 * (1.44 * sv12[58]));
        sv12[1873] = 2.0 * sv12[1587] * sv12[1872];
        sv12[1874] = 2.0 * sv12[1588] * sv12[1872];
        sv12[1875] = 2.0 * sv12[1589] * sv12[1872];
        sv12[1876] = 2.0 * sv12[1590] * sv12[1872];
        sv12[1877] = sv12[1871] + -1 * sv12[1847];
        sv12[1878] = sv12[1846] + -1 * sv12[1863];
        sv12[1879] = sv12[1839] + -1 * sv12[1864];
        sv12[1880] = sv12[1840] + -1 * sv12[1865];
        sv12[1881] = w2_c1 * sp[131];
        sv12[1882] = w2_c0 * sp[134];
        sv12[1883] = sv12[1881] + sv12[1882];
        sv12[1884] = sp[131] * (sv12[78] / 1.3);
        sv12[1885] = sp[134] * (sv12[97] / 1.3);
        sv12[1886] = sv12[1884] + sv12[1885];
        sv12[1887] = sv12[1883] + -1 * sv12[1886];
        sv12[1888] = 1.92 * w1_c4 * sv12[1845];
        sv12[1889] = sv12[1887] + sv12[1888];
        sv12[1890] = 2.0 * sv12[1564] * sv12[1872];
        sv12[1891] = sv12[1889] + -1 * sv12[1890];
        sv12[1892] = sv12[1891] * sp[134];
        sv12[1893] = sv12[1891] * sp[131];
        sv12[1894] = sv12[1891] * (-1 * sv12[1873]);
        sv12[1895] = sv12[1891] * (-1 * sv12[1874]);
        sv12[1896] = sv12[1891] * (-1 * sv12[1875]);
        sv12[1897] = sv12[1891] * (-1 * sv12[1876]);
        sv12[1898] = sv12[1891] * sv12[1877];
        sv12[1899] = sv12[1891] * (-1 * sv12[1861]);
        sv12[1900] = sv12[1891] * (-1 * sv12[1862]);
        sv12[1901] = sv12[1878] * sv12[1891];
        sv12[1902] = sv12[1879] * sv12[1891];
        sv12[1903] = sv12[1880] * sv12[1891];
        sv12[1904] = sv12[352] / (0.0001 + sv12[358] / 1.3);
        sv12[1905] = sv12[364] / 1.3 * sv12[1904];
        sv12[1906] = sv12[365] / 1.3 * sv12[1904];
        sv12[1907] = sv12[370] / (0.0001 + sv12[358] / 1.3);
        sv12[1908] = sv12[371] / (0.0001 + sv12[358] / 1.3);
        sv12[1909] = -1 * sv12[1905] / (0.0001 + sv12[358] / 1.3);
        sv12[1910] = -1 * sv12[1906] / (0.0001 + sv12[358] / 1.3);
        sv12[1911] = sv12[1907] * (1.0 / sv12[1904]);
        sv12[1912] = sv12[1908] * (1.0 / sv12[1904]);
        sv12[1913] = sv12[1909] * (1.0 / sv12[1904]);
        sv12[1914] = sv12[1910] * (1.0 / sv12[1904]);
        sv12[1915] = -1 * sv12[1911] / sv12[1904];
        sv12[1916] = -1 * sv12[1912] / sv12[1904];
        sv12[1917] = -1 * sv12[1913] / sv12[1904];
        sv12[1918] = -1 * sv12[1914] / sv12[1904];
        sv12[1919] = std::exp(-2.0 * sv12[1904]);
        sv12[1920] = -2.0 * sv12[1907] * sv12[1919];
        sv12[1921] = -2.0 * sv12[1908] * sv12[1919];
        sv12[1922] = -2.0 * sv12[1909] * sv12[1919];
        sv12[1923] = -2.0 * sv12[1910] * sv12[1919];
        sv12[1924] = (1.0 + sv12[1919]) / (1.0 + -1 * sv12[1919]);
        sv12[1925] = -1 * sv12[1920] * sv12[1924];
        sv12[1926] = -1 * sv12[1921] * sv12[1924];
        sv12[1927] = -1 * sv12[1922] * sv12[1924];
        sv12[1928] = -1 * sv12[1923] * sv12[1924];
        sv12[1929] = -1 * sv12[1925] + sv12[1920];
        sv12[1930] = -1 * sv12[1926] + sv12[1921];
        sv12[1931] = -1 * sv12[1927] + sv12[1922];
        sv12[1932] = -1 * sv12[1928] + sv12[1923];
        sv12[1933] = sv12[1929] / (1.0 + -1 * sv12[1919]);
        sv12[1934] = sv12[1930] / (1.0 + -1 * sv12[1919]);
        sv12[1935] = sv12[1931] / (1.0 + -1 * sv12[1919]);
        sv12[1936] = sv12[1932] / (1.0 + -1 * sv12[1919]);
        sv12[1937] = -1 * sv12[1915] + sv12[1933];
        sv12[1938] = -1 * sv12[1916] + sv12[1934];
        sv12[1939] = -1 * sv12[1917] + sv12[1935];
        sv12[1940] = -1 * sv12[1918] + sv12[1936];
        sv12[1941] = sv12[1937] * (2.0 * sp[23]);
        sv12[1942] = sv12[1938] * (2.0 * sp[23]);
        sv12[1943] = sv12[1939] * (2.0 * sp[23]);
        sv12[1944] = sv12[1940] * (2.0 * sp[23]);
        sv12[1945] = -1 * (1.0 / sv12[1904]) + sv12[1924];
        sv12[1946] = sv12[1945] * (2.0 * sp[23]);
        sv12[1947] = sv12[1946] / sv12[351];
        sv12[1948] = sv12[368] * sv12[1947];
        sv12[1949] = sv12[369] * sv12[1947];
        sv12[1950] = sv12[1941] + -1 * sv12[1948];
        sv12[1951] = sv12[1942] + -1 * sv12[1949];
        sv12[1952] = sv12[1950] / sv12[351];
        sv12[1953] = sv12[1951] / sv12[351];
        sv12[1954] = sv12[1943] / sv12[351];
        sv12[1955] = sv12[1944] / sv12[351];
        sv12[1956] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[1904]) * (2.0 * sp[23]);
        sv12[1957] = sv12[1956] * (2.0 * sp[23]);
        sv12[1958] = sv12[1957] / (0.0001 + sv12[358] / 1.3);
        sv12[1959] = sv12[364] / 1.3 * sv12[1958];
        sv12[1960] = sv12[365] / 1.3 * sv12[1958];
        sv12[1961] = 0.5 * (-0.004435991517475 * sv12[1907]) * (2.0 * sp[23]);
        sv12[1962] = 0.5 * (-0.004435991517475 * sv12[1908]) * (2.0 * sp[23]);
        sv12[1963] = 0.5 * (-0.004435991517475 * sv12[1909]) * (2.0 * sp[23]);
        sv12[1964] = 0.5 * (-0.004435991517475 * sv12[1910]) * (2.0 * sp[23]);
        sv12[1965] = sv12[1961] * (2.0 * sp[23]);
        sv12[1966] = sv12[1962] * (2.0 * sp[23]);
        sv12[1967] = sv12[1963] * (2.0 * sp[23]);
        sv12[1968] = sv12[1964] * (2.0 * sp[23]);
        sv12[1969] = -1 * sv12[1959] + sv12[1967];
        sv12[1970] = -1 * sv12[1960] + sv12[1968];
        sv12[1971] = sv12[1965] / (0.0001 + sv12[358] / 1.3);
        sv12[1972] = sv12[1966] / (0.0001 + sv12[358] / 1.3);
        sv12[1973] = sv12[1969] / (0.0001 + sv12[358] / 1.3);
        sv12[1974] = sv12[1970] / (0.0001 + sv12[358] / 1.3);
        sv12[1975] = (sv12[1904] >= 0.1 ? sv12[1952] : sv12[1971]);
        sv12[1976] = (sv12[1904] >= 0.1 ? sv12[1953] : sv12[1972]);
        sv12[1977] = (sv12[1904] >= 0.1 ? sv12[1954] : sv12[1973]);
        sv12[1978] = (sv12[1904] >= 0.1 ? sv12[1955] : sv12[1974]);
        sv12[1979] = sv12[1892] * sv12[1975];
        sv12[1980] = sv12[1892] * sv12[1976];
        sv12[1981] = sv12[1892] * sv12[1977];
        sv12[1982] = sv12[1892] * sv12[1978];
        sv12[1983] = sv12[1893] * sv12[1975];
        sv12[1984] = sv12[1893] * sv12[1976];
        sv12[1985] = sv12[1893] * sv12[1977];
        sv12[1986] = sv12[1893] * sv12[1978];
        sv12[1987] = sv12[1894] * sv12[1975];
        sv12[1988] = sv12[1894] * sv12[1976];
        sv12[1989] = sv12[1894] * sv12[1977];
        sv12[1990] = sv12[1894] * sv12[1978];
        sv12[1991] = sv12[1895] * sv12[1975];
        sv12[1992] = sv12[1895] * sv12[1976];
        sv12[1993] = sv12[1895] * sv12[1977];
        sv12[1994] = sv12[1895] * sv12[1978];
        sv12[1995] = sv12[1896] * sv12[1975];
        sv12[1996] = sv12[1896] * sv12[1976];
        sv12[1997] = sv12[1896] * sv12[1977];
        sv12[1998] = sv12[1896] * sv12[1978];
        sv12[1999] = sv12[1897] * sv12[1975];
        sv12[2000] = sv12[1897] * sv12[1976];
        sv12[2001] = sv12[1897] * sv12[1977];
        sv12[2002] = sv12[1897] * sv12[1978];
        sv12[2003] = sv12[1898] * sv12[1975];
        sv12[2004] = sv12[1898] * sv12[1976];
        sv12[2005] = sv12[1898] * sv12[1977];
        sv12[2006] = sv12[1898] * sv12[1978];
        sv12[2007] = sv12[1899] * sv12[1975];
        sv12[2008] = sv12[1899] * sv12[1976];
        sv12[2009] = sv12[1899] * sv12[1977];
        sv12[2010] = sv12[1899] * sv12[1978];
        sv12[2011] = sv12[1900] * sv12[1975];
        sv12[2012] = sv12[1900] * sv12[1976];
        sv12[2013] = sv12[1900] * sv12[1977];
        sv12[2014] = sv12[1900] * sv12[1978];
        sv12[2015] = sv12[1901] * sv12[1975];
        sv12[2016] = sv12[1901] * sv12[1976];
        sv12[2017] = sv12[1901] * sv12[1977];
        sv12[2018] = sv12[1901] * sv12[1978];
        sv12[2019] = sv12[1902] * sv12[1975];
        sv12[2020] = sv12[1902] * sv12[1976];
        sv12[2021] = sv12[1902] * sv12[1977];
        sv12[2022] = sv12[1902] * sv12[1978];
        sv12[2023] = sv12[1903] * sv12[1975];
        sv12[2024] = sv12[1903] * sv12[1976];
        sv12[2025] = sv12[1903] * sv12[1977];
        sv12[2026] = sv12[1903] * sv12[1978];
        sv12[2027] = sp[134] * (-1 * sv12[1847]);
        sv12[2028] = sp[134] * sv12[1846];
        sv12[2029] = sv12[1839] * sp[134];
        sv12[2030] = sv12[1840] * sp[134];
        sv12[2031] = sp[131] * (-1 * sv12[1847]);
        sv12[2032] = sp[131] * sv12[1846];
        sv12[2033] = sv12[1839] * sp[131];
        sv12[2034] = sv12[1840] * sp[131];
        sv12[2035] = -1 * sv12[1873] * (-1 * sv12[1847]);
        sv12[2036] = sv12[1846] * (-1 * sv12[1873]);
        sv12[2037] = sv12[1839] * (-1 * sv12[1873]);
        sv12[2038] = sv12[1840] * (-1 * sv12[1873]);
        sv12[2039] = -1 * sv12[1874] * (-1 * sv12[1847]);
        sv12[2040] = sv12[1846] * (-1 * sv12[1874]);
        sv12[2041] = sv12[1839] * (-1 * sv12[1874]);
        sv12[2042] = sv12[1840] * (-1 * sv12[1874]);
        sv12[2043] = -1 * sv12[1875] * (-1 * sv12[1847]);
        sv12[2044] = sv12[1846] * (-1 * sv12[1875]);
        sv12[2045] = sv12[1839] * (-1 * sv12[1875]);
        sv12[2046] = sv12[1840] * (-1 * sv12[1875]);
        sv12[2047] = -1 * sv12[1876] * (-1 * sv12[1847]);
        sv12[2048] = sv12[1846] * (-1 * sv12[1876]);
        sv12[2049] = sv12[1839] * (-1 * sv12[1876]);
        sv12[2050] = sv12[1840] * (-1 * sv12[1876]);
        sv12[2051] = sv12[1877] * (-1 * sv12[1847]);
        sv12[2052] = sv12[1877] * sv12[1846];
        sv12[2053] = sv12[1839] * sv12[1877];
        sv12[2054] = sv12[1840] * sv12[1877];
        sv12[2055] = -1 * sv12[1861] * (-1 * sv12[1847]);
        sv12[2056] = sv12[1846] * (-1 * sv12[1861]);
        sv12[2057] = sv12[1839] * (-1 * sv12[1861]);
        sv12[2058] = sv12[1840] * (-1 * sv12[1861]);
        sv12[2059] = -1 * sv12[1862] * (-1 * sv12[1847]);
        sv12[2060] = sv12[1846] * (-1 * sv12[1862]);
        sv12[2061] = sv12[1839] * (-1 * sv12[1862]);
        sv12[2062] = sv12[1840] * (-1 * sv12[1862]);
        sv12[2063] = sv12[1878] * (-1 * sv12[1847]);
        sv12[2064] = sv12[1878] * sv12[1846];
        sv12[2065] = sv12[1878] * sv12[1839];
        sv12[2066] = sv12[1878] * sv12[1840];
        sv12[2067] = sv12[1879] * (-1 * sv12[1847]);
        sv12[2068] = sv12[1879] * sv12[1846];
        sv12[2069] = sv12[1879] * sv12[1839];
        sv12[2070] = sv12[1879] * sv12[1840];
        sv12[2071] = sv12[1880] * (-1 * sv12[1847]);
        sv12[2072] = sv12[1880] * sv12[1846];
        sv12[2073] = sv12[1880] * sv12[1839];
        sv12[2074] = sv12[1880] * sv12[1840];
        sv12[2075] = sv12[151] / 1.3 * sp[3];
        sv12[2076] = sv12[152] / 1.3 * sp[3];
        sv12[2077] = sv12[153] / 1.3 * sp[3];
        sv12[2078] = sv12[154] / 1.3 * sp[3];
        sv12[2079] = sv12[155] / 1.3 * sp[3];
        sv12[2080] = sv12[156] / 1.3 * sp[3];
        sv12[2081] = sv12[151] / 1.3 * sp[4];
        sv12[2082] = sv12[152] / 1.3 * sp[4];
        sv12[2083] = sv12[153] / 1.3 * sp[4];
        sv12[2084] = sv12[154] / 1.3 * sp[4];
        sv12[2085] = sv12[155] / 1.3 * sp[4];
        sv12[2086] = sv12[156] / 1.3 * sp[4];
        sv12[2087] = sv12[198] / 1.3 * sp[6];
        sv12[2088] = sv12[199] / 1.3 * sp[6];
        sv12[2089] = sv12[200] / 1.3 * sp[6];
        sv12[2090] = sv12[201] / 1.3 * sp[6];
        sv12[2091] = sv12[202] / 1.3 * sp[6];
        sv12[2092] = sv12[203] / 1.3 * sp[6];
        sv12[2093] = sv12[198] / 1.3 * sp[5];
        sv12[2094] = sv12[199] / 1.3 * sp[5];
        sv12[2095] = sv12[200] / 1.3 * sp[5];
        sv12[2096] = sv12[201] / 1.3 * sp[5];
        sv12[2097] = sv12[202] / 1.3 * sp[5];
        sv12[2098] = sv12[203] / 1.3 * sp[5];
        sv12[2099] = sv12[2075] + sv12[2087];
        sv12[2100] = sv12[2093] + sv12[2081];
        sv12[2101] = sv12[2076] + sv12[2088];
        sv12[2102] = sv12[2094] + sv12[2082];
        sv12[2103] = sv12[2077] + sv12[2089];
        sv12[2104] = sv12[2095] + sv12[2083];
        sv12[2105] = sv12[2078] + sv12[2090];
        sv12[2106] = sv12[2096] + sv12[2084];
        sv12[2107] = sv12[2079] + sv12[2091];
        sv12[2108] = sv12[2097] + sv12[2085];
        sv12[2109] = sv12[2080] + sv12[2092];
        sv12[2110] = sv12[2098] + sv12[2086];
        sv12[2111] = 0.5 * (1.0 + sv12[1867]) * (1.0 / (0.5 * sv12[1843]));
        sv12[2112] = -1 * sv12[2111] / (0.5 * sv12[1843]);
        sv12[2113] = 1.92 * w1_c4 * sv12[2112];
        sv12[2114] = sv12[2113] + 1.92 * sv12[1869];
        sv12[2115] = 2.0 * sv12[1587] * (0.09 * (1.44 * sv12[58]));
        sv12[2116] = 2.0 * sv12[1588] * (0.09 * (1.44 * sv12[58]));
        sv12[2117] = 2.0 * sv12[1589] * (0.09 * (1.44 * sv12[58]));
        sv12[2118] = 2.0 * sv12[1590] * (0.09 * (1.44 * sv12[58]));
        sv12[2119] = 1.92 * (1.0 / (0.5 * sv12[1843])) + 1.92 * (1.0 / (0.5 * sv12[1843]));
        sv12[2120] = sv12[1891] * sp[6];
        sv12[2121] = sv12[1891] * sp[5];
        sv12[2122] = sv12[1891] * sp[3];
        sv12[2123] = sv12[1891] * sp[4];
        sv12[2124] = sv12[1891] * (-1 * sv12[2115]);
        sv12[2125] = sv12[1891] * (-1 * sv12[2116]);
        sv12[2126] = sv12[1891] * (-1 * sv12[2117]);
        sv12[2127] = sv12[1891] * (-1 * sv12[2118]);
        sv12[2128] = sv12[1891] * sv12[2114];
        sv12[2129] = sv12[1891] * (-1 * sv12[2099]);
        sv12[2130] = sv12[1891] * (-1 * sv12[2100]);
        sv12[2131] = sv12[1891] * (-1 * sv12[2101]);
        sv12[2132] = sv12[1891] * (-1 * sv12[2102]);
        sv12[2133] = sv12[1891] * (-1 * sv12[2103]);
        sv12[2134] = sv12[1891] * (-1 * sv12[2104]);
        sv12[2135] = sv12[1891] * sv12[2119];
        sv12[2136] = sv12[1891] * (-1 * sv12[2105]);
        sv12[2137] = sv12[1891] * (-1 * sv12[2106]);
        sv12[2138] = sv12[1891] * (-1 * sv12[2107]);
        sv12[2139] = sv12[1891] * (-1 * sv12[2108]);
        sv12[2140] = sv12[1891] * (-1 * sv12[2109]);
        sv12[2141] = sv12[1891] * (-1 * sv12[2110]);
        sv12[2142] = sv12[2029] + sv12[2120];
        sv12[2143] = sv12[2030] + sv12[2121];
        sv12[2144] = sv12[2033] + sv12[2122];
        sv12[2145] = sv12[2034] + sv12[2123];
        sv12[2146] = sv12[2035] + sv12[2124];
        sv12[2147] = sv12[2039] + sv12[2125];
        sv12[2148] = sv12[2043] + sv12[2126];
        sv12[2149] = sv12[2047] + sv12[2127];
        sv12[2150] = sv12[2052] + sv12[2128];
        sv12[2151] = sv12[2053] + sv12[2129];
        sv12[2152] = sv12[2054] + sv12[2130];
        sv12[2153] = sv12[2057] + sv12[2131];
        sv12[2154] = sv12[2058] + sv12[2132];
        sv12[2155] = sv12[2061] + sv12[2133];
        sv12[2156] = sv12[2062] + sv12[2134];
        sv12[2157] = sv12[2135] + sv12[2064];
        sv12[2158] = sv12[2065] + sv12[2136];
        sv12[2159] = sv12[2066] + sv12[2137];
        sv12[2160] = sv12[2069] + sv12[2138];
        sv12[2161] = sv12[2070] + sv12[2139];
        sv12[2162] = sv12[2073] + sv12[2140];
        sv12[2163] = sv12[2074] + sv12[2141];
        sv12[2164] = (sv12[1904] >= 0.1 ? sv12[1947] : sv12[1958]);
        sv12[2165] = sv12[2027] * sv12[2164];
        sv12[2166] = sv12[2028] * sv12[2164];
        sv12[2167] = sv12[2142] * sv12[2164];
        sv12[2168] = sv12[2143] * sv12[2164];
        sv12[2169] = sv12[2031] * sv12[2164];
        sv12[2170] = sv12[2032] * sv12[2164];
        sv12[2171] = sv12[2144] * sv12[2164];
        sv12[2172] = sv12[2145] * sv12[2164];
        sv12[2173] = sv12[2146] * sv12[2164];
        sv12[2174] = sv12[2036] * sv12[2164];
        sv12[2175] = sv12[2037] * sv12[2164];
        sv12[2176] = sv12[2038] * sv12[2164];
        sv12[2177] = sv12[2147] * sv12[2164];
        sv12[2178] = sv12[2040] * sv12[2164];
        sv12[2179] = sv12[2041] * sv12[2164];
        sv12[2180] = sv12[2042] * sv12[2164];
        sv12[2181] = sv12[2148] * sv12[2164];
        sv12[2182] = sv12[2044] * sv12[2164];
        sv12[2183] = sv12[2045] * sv12[2164];
        sv12[2184] = sv12[2046] * sv12[2164];
        sv12[2185] = sv12[2149] * sv12[2164];
        sv12[2186] = sv12[2048] * sv12[2164];
        sv12[2187] = sv12[2049] * sv12[2164];
        sv12[2188] = sv12[2050] * sv12[2164];
        sv12[2189] = sv12[2051] * sv12[2164];
        sv12[2190] = sv12[2150] * sv12[2164];
        sv12[2191] = sv12[2151] * sv12[2164];
        sv12[2192] = sv12[2152] * sv12[2164];
        sv12[2193] = sv12[2055] * sv12[2164];
        sv12[2194] = sv12[2056] * sv12[2164];
        sv12[2195] = sv12[2153] * sv12[2164];
        sv12[2196] = sv12[2154] * sv12[2164];
        sv12[2197] = sv12[2059] * sv12[2164];
        sv12[2198] = sv12[2060] * sv12[2164];
        sv12[2199] = sv12[2155] * sv12[2164];
        sv12[2200] = sv12[2156] * sv12[2164];
        sv12[2201] = sv12[2063] * sv12[2164];
        sv12[2202] = sv12[2157] * sv12[2164];
        sv12[2203] = sv12[2158] * sv12[2164];
        sv12[2204] = sv12[2159] * sv12[2164];
        sv12[2205] = sv12[2067] * sv12[2164];
        sv12[2206] = sv12[2068] * sv12[2164];
        sv12[2207] = sv12[2160] * sv12[2164];
        sv12[2208] = sv12[2161] * sv12[2164];
        sv12[2209] = sv12[2071] * sv12[2164];
        sv12[2210] = sv12[2072] * sv12[2164];
        sv12[2211] = sv12[2162] * sv12[2164];
        sv12[2212] = sv12[2163] * sv12[2164];
        sv12[2213] = sv12[1981] + sv12[2165];
        sv12[2214] = sv12[1982] + sv12[2166];
        sv12[2215] = sv12[1985] + sv12[2169];
        sv12[2216] = sv12[1986] + sv12[2170];
        sv12[2217] = sv12[1989] + sv12[2173];
        sv12[2218] = sv12[1990] + sv12[2174];
        sv12[2219] = sv12[1993] + sv12[2177];
        sv12[2220] = sv12[1994] + sv12[2178];
        sv12[2221] = sv12[1997] + sv12[2181];
        sv12[2222] = sv12[1998] + sv12[2182];
        sv12[2223] = sv12[2001] + sv12[2185];
        sv12[2224] = sv12[2002] + sv12[2186];
        sv12[2225] = sv12[2005] + sv12[2189];
        sv12[2226] = sv12[2006] + sv12[2190];
        sv12[2227] = sv12[2009] + sv12[2193];
        sv12[2228] = sv12[2010] + sv12[2194];
        sv12[2229] = sv12[2013] + sv12[2197];
        sv12[2230] = sv12[2014] + sv12[2198];
        sv12[2231] = sv12[2017] + sv12[2201];
        sv12[2232] = sv12[2018] + sv12[2202];
        sv12[2233] = sv12[2021] + sv12[2205];
        sv12[2234] = sv12[2022] + sv12[2206];
        sv12[2235] = sv12[2025] + sv12[2209];
        sv12[2236] = sv12[2026] + sv12[2210];
        sv12[2237] = sv12[1785] + sv12[1979];
        sv12[2238] = sv12[1786] + sv12[1980];
        sv12[2239] = sv12[2213] + sv12[1787];
        sv12[2240] = sv12[2214] + sv12[1788];
        sv12[2241] = sv12[1789] + sv12[1983];
        sv12[2242] = sv12[1790] + sv12[1987];
        sv12[2243] = sv12[1791] + sv12[1991];
        sv12[2244] = sv12[1792] + sv12[1995];
        sv12[2245] = sv12[1793] + sv12[1999];
        sv12[2246] = sv12[1794] + sv12[2003];
        sv12[2247] = sv12[1795] + sv12[2007];
        sv12[2248] = sv12[1796] + sv12[2011];
        sv12[2249] = sv12[1797] + sv12[2015];
        sv12[2250] = sv12[1798] + sv12[2019];
        sv12[2251] = sv12[1799] + sv12[2023];
        sv12[2252] = sv12[1800] + sv12[1984];
        sv12[2253] = sv12[1801] + sv12[1988];
        sv12[2254] = sv12[1802] + sv12[1992];
        sv12[2255] = sv12[1803] + sv12[1996];
        sv12[2256] = sv12[1804] + sv12[2000];
        sv12[2257] = sv12[1805] + sv12[2004];
        sv12[2258] = sv12[1806] + sv12[2008];
        sv12[2259] = sv12[1807] + sv12[2012];
        sv12[2260] = sv12[1808] + sv12[2016];
        sv12[2261] = sv12[1809] + sv12[2020];
        sv12[2262] = sv12[1810] + sv12[2024];
        sv12[2263] = sv12[2215] + sv12[1811];
        sv12[2264] = sv12[2216] + sv12[1812];
        sv12[2265] = sv12[2217] + sv12[1813];
        sv12[2266] = sv12[2218] + sv12[1814];
        sv12[2267] = sv12[2219] + sv12[1815];
        sv12[2268] = sv12[2220] + sv12[1816];
        sv12[2269] = sv12[2221] + sv12[1817];
        sv12[2270] = sv12[2222] + sv12[1818];
        sv12[2271] = sv12[2223] + sv12[1819];
        sv12[2272] = sv12[2224] + sv12[1820];
        sv12[2273] = sv12[2225] + sv12[1821];
        sv12[2274] = sv12[2226] + sv12[1822];
        sv12[2275] = sv12[2227] + sv12[1823];
        sv12[2276] = sv12[2228] + sv12[1824];
        sv12[2277] = sv12[2229] + sv12[1825];
        sv12[2278] = sv12[2230] + sv12[1826];
        sv12[2279] = sv12[2231] + sv12[1827];
        sv12[2280] = sv12[2232] + sv12[1828];
        sv12[2281] = sv12[2233] + sv12[1829];
        sv12[2282] = sv12[2234] + sv12[1830];
        sv12[2283] = sv12[2235] + sv12[1831];
        sv12[2284] = sv12[2236] + sv12[1832];
        sv12[2285] = sp[121] * (0.0001 + sv12[358]);
        sv12[2286] = sp[120] * (0.0001 + sv12[358]);
        sv12[2287] = sp[122] * (0.0001 + sv12[358]);
        sv12[2288] = sp[139] * sv12[364];
        sv12[2289] = sp[139] * sv12[365];
        sv12[2290] = sp[140] * sv12[364];
        sv12[2291] = sp[140] * sv12[365];
        sv12[2292] = sv12[2275] + sv12[2288];
        sv12[2293] = sv12[2276] + sv12[2289];
        sv12[2294] = sv12[2285] + sv12[1775];
        sv12[2295] = sv12[2286] + sv12[1776];
        sv12[2296] = sv12[2277] + sv12[2290];
        sv12[2297] = sv12[2278] + sv12[2291];
        sv12[2298] = sv12[2286] + sv12[1777];
        sv12[2299] = sv12[2287] + sv12[1778];
        sv12[2300] = sp[121] * (0.0001 + sv12[358] / 1.3);
        sv12[2301] = sp[120] * (0.0001 + sv12[358] / 1.3);
        sv12[2302] = sp[122] * (0.0001 + sv12[358] / 1.3);
        sv12[2303] = sp[145] * (sv12[364] / 1.3);
        sv12[2304] = sp[145] * (sv12[365] / 1.3);
        sv12[2305] = sp[146] * (sv12[364] / 1.3);
        sv12[2306] = sp[146] * (sv12[365] / 1.3);
        sv12[2307] = sv12[2281] + sv12[2303];
        sv12[2308] = sv12[2282] + sv12[2304];
        sv12[2309] = sv12[2300] + sv12[2207];
        sv12[2310] = sv12[2301] + sv12[2208];
        sv12[2311] = sv12[2283] + sv12[2305];
        sv12[2312] = sv12[2284] + sv12[2306];
        sv12[2313] = sv12[2301] + sv12[2211];
        sv12[2314] = sv12[2302] + sv12[2212];
        sv12[2315] = sp[169] * (2.0 * (0.0001 + sv12[358]));
        sv12[2316] = sp[170] * (2.0 * (0.0001 + sv12[358]));
        sv12[2317] = sp[171] * (2.0 * (0.0001 + sv12[358]));
        sv12[2318] = sp[172] * (2.0 * (0.0001 + sv12[358]));
        sv12[2319] = sp[173] * (2.0 * (0.0001 + sv12[358]));
        sv12[2320] = sp[174] * (2.0 * (0.0001 + sv12[358]));
        sv12[2321] = sp[175] * (2.0 * (0.0001 + sv12[358]));
        sv12[2322] = sp[176] * (2.0 * (0.0001 + sv12[358]));
        sv12[2323] = sp[177] * (2.0 * (0.0001 + sv12[358]));
        sv12[2324] = sp[178] * (2.0 * (0.0001 + sv12[358]));
        sv12[2325] = sv12[157] / 2 * (sp[44] / 2);
        sv12[2326] = sv12[157] / 2 * (sp[45] / 2);
        sv12[2327] = sv12[204] / 2 * (sp[6] / 2);
        sv12[2328] = sv12[204] / 2 * (sp[5] / 2);
        sv12[2329] = sv12[204] / 2 * (sp[4] / 2);
        sv12[2330] = sv12[204] / 2 * (sp[3] / 2);
        sv12[2331] = sv12[2325] + sv12[2327];
        sv12[2332] = sv12[2326] + sv12[2328];
        sv12[2333] = sv12[282] / 2 * (sp[95] / 2);
        sv12[2334] = sv12[282] / 2 * (sp[96] / 2);
        sv12[2335] = sv12[2333] + sv12[2329];
        sv12[2336] = sv12[2334] + sv12[2330];
        sv12[2337] = sv12[2331] + sv12[2327];
        sv12[2338] = sv12[2332] + sv12[2328];
        sv12[2339] = sv12[2335] + sv12[2329];
        sv12[2340] = sv12[2336] + sv12[2330];
        sv12[2341] = sv12[2337] * (2.0 * sv12[364]);
        sv12[2342] = sv12[2337] * (2.0 * sv12[365]);
        sv12[2343] = sv12[2338] * (2.0 * sv12[364]);
        sv12[2344] = sv12[2338] * (2.0 * sv12[365]);
        sv12[2345] = sv12[2339] * (2.0 * sv12[364]);
        sv12[2346] = sv12[2339] * (2.0 * sv12[365]);
        sv12[2347] = sv12[2340] * (2.0 * sv12[364]);
        sv12[2348] = sv12[2340] * (2.0 * sv12[365]);
        sv12[2349] = sv12[1500] + sv12[2315];
        sv12[2350] = sv12[1501] + sv12[2316];
        sv12[2351] = sv12[1502] + sv12[2317];
        sv12[2352] = sv12[1503] + sv12[2318];
        sv12[2353] = sv12[1504] + sv12[2319];
        sv12[2354] = sv12[1505] + sv12[2320];
        sv12[2355] = sv12[1506] + sv12[2321];
        sv12[2356] = sv12[1515] + sv12[2322];
        sv12[2357] = sv12[1516] + sv12[2323];
        sv12[2358] = sv12[1517] + sv12[2324];
        sv12[2359] = sv12[2265] + sv12[2341];
        sv12[2360] = sv12[2266] + sv12[2342];
        sv12[2361] = sv12[2267] + sv12[2343];
        sv12[2362] = sv12[2268] + sv12[2344];
        sv12[2363] = sv12[2269] + sv12[2345];
        sv12[2364] = sv12[2270] + sv12[2346];
        sv12[2365] = sv12[2271] + sv12[2347];
        sv12[2366] = sv12[2272] + sv12[2348];
        sv12[2367] = w1_c3 * w1_c3;
        sv12[2368] = std::sqrt(1e-8 + sv12[2367]);
        sv12[2369] = w1_c3 + sv12[2368];
        sv12[2370] = w1_c4 / (0.5 * sv12[2369]);
        sv12[2371] = w1_c3 + w1_c3;
        sv12[2372] = sv12[2371] / (2 * sv12[2368]);
        sv12[2373] = 0.5 * (1.0 + sv12[2372]) * sv12[2370];
        sv12[2374] = -1 * sv12[2373] / (0.5 * sv12[2369]);
        sv12[2375] = 1.92 * w1_c4 * sv12[2374];
        sv12[2376] = 1.92 * w1_c4 * (1.0 / (0.5 * sv12[2369]));
        sv12[2377] = sv12[2376] + 1.92 * sv12[2370];
        sv12[2378] = sv12[2279] + sv12[2375];
        sv12[2379] = sv12[2280] + sv12[2377];
        sv12[2380] = sp[125] + sv12[2246];
        sv12[2381] = sp[128] + sv12[2257];
        sv12[2382] = sv12[10] + sv12[1773];
        sv12[2383] = sv12[11] + sv12[1774];
        sv12[2384] = sp[131] + sv12[2249];
        sv12[2385] = sp[134] + sv12[2260];
        sv12[2386] = sv12[10] + sv12[2203];
        sv12[2387] = sv12[11] + sv12[2204];
        sv12[2388] = sv12[10] + sv12[1326];
        sv12[2389] = sv12[11] + sv12[1327];
        sv12[2390] = sv12[4] + sv12[2237];
        sv12[2391] = sv12[9] + sv12[2238];
        sv12[2392] = sv12[14] + sv12[2241];
        sv12[2393] = sv12[17] + sv12[2252];
        sv12[2394] = sv12[10] + sv12[1375];
        sv12[2395] = sv12[11] + sv12[1376];
        sv12[2396] = sv12[2388] * sp[179];
        sv12[2397] = sv12[2389] * sp[179];
        sv12[2398] = sv12[2390] * sp[179];
        sv12[2399] = sv12[2391] * sp[179];
        sv12[2400] = sv12[1328] * sp[179];
        sv12[2401] = sv12[1329] * sp[179];
        sv12[2402] = sv12[2239] * sp[179];
        sv12[2403] = sv12[2240] * sp[179];
        sv12[2404] = sv12[1330] * sp[179];
        sv12[2405] = sv12[1331] * sp[179];
        sv12[2406] = sv12[1332] * sp[179];
        sv12[2407] = sv12[1333] * sp[179];
        sv12[2408] = sv12[1334] * sp[179];
        sv12[2409] = sv12[1335] * sp[179];
        sv12[2410] = sv12[1336] * sp[179];
        sv12[2411] = sv12[1337] * sp[179];
        sv12[2412] = sv12[1761] * sp[179];
        sv12[2413] = sv12[1762] * sp[179];
        sv12[2414] = sv12[2167] * sp[179];
        sv12[2415] = sv12[2168] * sp[179];
        sv12[2416] = sv12[1338] * sp[179];
        sv12[2417] = sv12[2349] * sp[179];
        sv12[2418] = sv12[2350] * sp[179];
        sv12[2419] = sv12[2351] * sp[179];
        sv12[2420] = sv12[2352] * sp[179];
        sv12[2421] = sv12[1343] * sp[179];
        sv12[2422] = sv12[1344] * sp[179];
        sv12[2423] = sv12[1345] * sp[179];
        sv12[2424] = sv12[1346] * sp[179];
        sv12[2425] = sv12[1347] * sp[179];
        sv12[2426] = sv12[1348] * sp[179];
        sv12[2427] = sv12[1349] * sp[179];
        sv12[2428] = sv12[1350] * sp[179];
        sv12[2429] = sv12[1351] * sp[179];
        sv12[2430] = sv12[1352] * sp[179];
        sv12[2431] = sv12[1353] * sp[179];
        sv12[2432] = sv12[1354] * sp[179];
        sv12[2433] = sv12[1355] * sp[179];
        sv12[2434] = sv12[1356] * sp[179];
        sv12[2435] = sv12[1357] * sp[179];
        sv12[2436] = sv12[2353] * sp[179];
        sv12[2437] = sv12[2354] * sp[179];
        sv12[2438] = sv12[2355] * sp[179];
        sv12[2439] = sv12[1361] * sp[179];
        sv12[2440] = sv12[1362] * sp[179];
        sv12[2441] = sv12[1363] * sp[179];
        sv12[2442] = sv12[1364] * sp[179];
        sv12[2443] = sv12[1365] * sp[179];
        sv12[2444] = sv12[1366] * sp[179];
        sv12[2445] = sv12[1367] * sp[179];
        sv12[2446] = sv12[1368] * sp[179];
        sv12[2447] = sv12[1369] * sp[179];
        sv12[2448] = sv12[1370] * sp[179];
        sv12[2449] = sv12[1371] * sp[179];
        sv12[2450] = sv12[1372] * sp[179];
        sv12[2451] = sv12[1373] * sp[179];
        sv12[2452] = sv12[1374] * sp[179];
        sv12[2453] = sv12[2392] * sp[179];
        sv12[2454] = sv12[2242] * sp[179];
        sv12[2455] = sv12[2243] * sp[179];
        sv12[2456] = sv12[2244] * sp[179];
        sv12[2457] = sv12[2245] * sp[179];
        sv12[2458] = sv12[468] * sp[179];
        sv12[2459] = sv12[472] * sp[179];
        sv12[2460] = sv12[476] * sp[179];
        sv12[2461] = sv12[480] * sp[179];
        sv12[2462] = sv12[484] * sp[179];
        sv12[2463] = sv12[488] * sp[179];
        sv12[2464] = sv12[492] * sp[179];
        sv12[2465] = sv12[496] * sp[179];
        sv12[2466] = sv12[2380] * sp[179];
        sv12[2467] = sv12[2247] * sp[179];
        sv12[2468] = sv12[2248] * sp[179];
        sv12[2469] = sv12[2384] * sp[179];
        sv12[2470] = sv12[2250] * sp[179];
        sv12[2471] = sv12[2251] * sp[179];
        sv12[2472] = sv12[2393] * sp[179];
        sv12[2473] = sv12[2253] * sp[179];
        sv12[2474] = sv12[2254] * sp[179];
        sv12[2475] = sv12[2255] * sp[179];
        sv12[2476] = sv12[2256] * sp[179];
        sv12[2477] = sv12[469] * sp[179];
        sv12[2478] = sv12[473] * sp[179];
        sv12[2479] = sv12[477] * sp[179];
        sv12[2480] = sv12[481] * sp[179];
        sv12[2481] = sv12[485] * sp[179];
        sv12[2482] = sv12[489] * sp[179];
        sv12[2483] = sv12[493] * sp[179];
        sv12[2484] = sv12[497] * sp[179];
        sv12[2485] = sv12[2381] * sp[179];
        sv12[2486] = sv12[2258] * sp[179];
        sv12[2487] = sv12[2259] * sp[179];
        sv12[2488] = sv12[2385] * sp[179];
        sv12[2489] = sv12[2261] * sp[179];
        sv12[2490] = sv12[2262] * sp[179];
        sv12[2491] = sv12[2394] * sp[179];
        sv12[2492] = sv12[2395] * sp[179];
        sv12[2493] = sv12[2263] * sp[179];
        sv12[2494] = sv12[2264] * sp[179];
        sv12[2495] = sv12[1377] * sp[179];
        sv12[2496] = sv12[1378] * sp[179];
        sv12[2497] = sv12[1379] * sp[179];
        sv12[2498] = sv12[1380] * sp[179];
        sv12[2499] = sv12[1381] * sp[179];
        sv12[2500] = sv12[1382] * sp[179];
        sv12[2501] = sv12[1383] * sp[179];
        sv12[2502] = sv12[1384] * sp[179];
        sv12[2503] = sv12[1763] * sp[179];
        sv12[2504] = sv12[1764] * sp[179];
        sv12[2505] = sv12[2171] * sp[179];
        sv12[2506] = sv12[2172] * sp[179];
        sv12[2507] = sv12[2356] * sp[179];
        sv12[2508] = sv12[2357] * sp[179];
        sv12[2509] = sv12[1387] * sp[179];
        sv12[2510] = sv12[1388] * sp[179];
        sv12[2511] = sv12[1389] * sp[179];
        sv12[2512] = sv12[1390] * sp[179];
        sv12[2513] = sv12[1391] * sp[179];
        sv12[2514] = sv12[1392] * sp[179];
        sv12[2515] = sv12[1393] * sp[179];
        sv12[2516] = sv12[1394] * sp[179];
        sv12[2517] = sv12[1395] * sp[179];
        sv12[2518] = sv12[1396] * sp[179];
        sv12[2519] = sv12[1397] * sp[179];
        sv12[2520] = sv12[1398] * sp[179];
        sv12[2521] = sv12[1399] * sp[179];
        sv12[2522] = sv12[1400] * sp[179];
        sv12[2523] = sv12[2358] * sp[179];
        sv12[2524] = sv12[1402] * sp[179];
        sv12[2525] = sv12[1403] * sp[179];
        sv12[2526] = sv12[1404] * sp[179];
        sv12[2527] = sv12[1405] * sp[179];
        sv12[2528] = sv12[1406] * sp[179];
        sv12[2529] = sv12[1407] * sp[179];
        sv12[2530] = sv12[1408] * sp[179];
        sv12[2531] = sv12[1409] * sp[179];
        sv12[2532] = sv12[1410] * sp[179];
        sv12[2533] = sv12[1411] * sp[179];
        sv12[2534] = sv12[1412] * sp[179];
        sv12[2535] = sv12[1413] * sp[179];
        sv12[2536] = sv12[1414] * sp[179];
        sv12[2537] = sv12[1415] * sp[179];
        sv12[2538] = sv12[2359] * sp[179];
        sv12[2539] = sv12[2360] * sp[179];
        sv12[2540] = sv12[1765] * sp[179];
        sv12[2541] = sv12[1766] * sp[179];
        sv12[2542] = sv12[2175] * sp[179];
        sv12[2543] = sv12[2176] * sp[179];
        sv12[2544] = sv12[2361] * sp[179];
        sv12[2545] = sv12[2362] * sp[179];
        sv12[2546] = sv12[1767] * sp[179];
        sv12[2547] = sv12[1768] * sp[179];
        sv12[2548] = sv12[2179] * sp[179];
        sv12[2549] = sv12[2180] * sp[179];
        sv12[2550] = sv12[2363] * sp[179];
        sv12[2551] = sv12[2364] * sp[179];
        sv12[2552] = sv12[1769] * sp[179];
        sv12[2553] = sv12[1770] * sp[179];
        sv12[2554] = sv12[2183] * sp[179];
        sv12[2555] = sv12[2184] * sp[179];
        sv12[2556] = sv12[2365] * sp[179];
        sv12[2557] = sv12[2366] * sp[179];
        sv12[2558] = sv12[1771] * sp[179];
        sv12[2559] = sv12[1772] * sp[179];
        sv12[2560] = sv12[2187] * sp[179];
        sv12[2561] = sv12[2188] * sp[179];
        sv12[2562] = sv12[470] * sp[179];
        sv12[2563] = sv12[471] * sp[179];
        sv12[2564] = sv12[1416] * sp[179];
        sv12[2565] = sv12[1417] * sp[179];
        sv12[2566] = sv12[1418] * sp[179];
        sv12[2567] = sv12[1419] * sp[179];
        sv12[2568] = sv12[1420] * sp[179];
        sv12[2569] = sv12[1421] * sp[179];
        sv12[2570] = sv12[1422] * sp[179];
        sv12[2571] = sv12[1423] * sp[179];
        sv12[2572] = sv12[474] * sp[179];
        sv12[2573] = sv12[475] * sp[179];
        sv12[2574] = sv12[1424] * sp[179];
        sv12[2575] = sv12[1425] * sp[179];
        sv12[2576] = sv12[1426] * sp[179];
        sv12[2577] = sv12[1427] * sp[179];
        sv12[2578] = sv12[1428] * sp[179];
        sv12[2579] = sv12[1429] * sp[179];
        sv12[2580] = sv12[1430] * sp[179];
        sv12[2581] = sv12[478] * sp[179];
        sv12[2582] = sv12[479] * sp[179];
        sv12[2583] = sv12[1431] * sp[179];
        sv12[2584] = sv12[1432] * sp[179];
        sv12[2585] = sv12[1433] * sp[179];
        sv12[2586] = sv12[1434] * sp[179];
        sv12[2587] = sv12[1435] * sp[179];
        sv12[2588] = sv12[1436] * sp[179];
        sv12[2589] = sv12[482] * sp[179];
        sv12[2590] = sv12[483] * sp[179];
        sv12[2591] = sv12[1437] * sp[179];
        sv12[2592] = sv12[1438] * sp[179];
        sv12[2593] = sv12[1439] * sp[179];
        sv12[2594] = sv12[1440] * sp[179];
        sv12[2595] = sv12[1441] * sp[179];
        sv12[2596] = sv12[486] * sp[179];
        sv12[2597] = sv12[487] * sp[179];
        sv12[2598] = sv12[1442] * sp[179];
        sv12[2599] = sv12[1443] * sp[179];
        sv12[2600] = sv12[1444] * sp[179];
        sv12[2601] = sv12[1445] * sp[179];
        sv12[2602] = sv12[490] * sp[179];
        sv12[2603] = sv12[491] * sp[179];
        sv12[2604] = sv12[1446] * sp[179];
        sv12[2605] = sv12[1447] * sp[179];
        sv12[2606] = sv12[1448] * sp[179];
        sv12[2607] = sv12[494] * sp[179];
        sv12[2608] = sv12[495] * sp[179];
        sv12[2609] = sv12[1449] * sp[179];
        sv12[2610] = sv12[1450] * sp[179];
        sv12[2611] = sv12[498] * sp[179];
        sv12[2612] = sv12[499] * sp[179];
        sv12[2613] = sv12[1451] * sp[179];
        sv12[2614] = sv12[2273] * sp[179];
        sv12[2615] = (1.0 + sv12[2274]) * sp[179];
        sv12[2616] = sv12[1452] * sp[179];
        sv12[2617] = sv12[1453] * sp[179];
        sv12[2618] = sv12[1454] * sp[179];
        sv12[2619] = sv12[1455] * sp[179];
        sv12[2620] = sv12[1456] * sp[179];
        sv12[2621] = sv12[1457] * sp[179];
        sv12[2622] = sv12[1458] * sp[179];
        sv12[2623] = sv12[1459] * sp[179];
        sv12[2624] = sv12[2382] * sp[179];
        sv12[2625] = sv12[2383] * sp[179];
        sv12[2626] = sv12[2191] * sp[179];
        sv12[2627] = sv12[2192] * sp[179];
        sv12[2628] = sv12[2292] * sp[179];
        sv12[2629] = sv12[2293] * sp[179];
        sv12[2630] = sv12[1460] * sp[179];
        sv12[2631] = sv12[1461] * sp[179];
        sv12[2632] = sv12[1462] * sp[179];
        sv12[2633] = sv12[1463] * sp[179];
        sv12[2634] = sv12[1464] * sp[179];
        sv12[2635] = sv12[1465] * sp[179];
        sv12[2636] = sv12[1466] * sp[179];
        sv12[2637] = sv12[1467] * sp[179];
        sv12[2638] = sv12[2294] * sp[179];
        sv12[2639] = sv12[2295] * sp[179];
        sv12[2640] = sv12[2195] * sp[179];
        sv12[2641] = sv12[2196] * sp[179];
        sv12[2642] = sv12[2296] * sp[179];
        sv12[2643] = sv12[2297] * sp[179];
        sv12[2644] = sv12[1468] * sp[179];
        sv12[2645] = sv12[1469] * sp[179];
        sv12[2646] = sv12[1470] * sp[179];
        sv12[2647] = sv12[1471] * sp[179];
        sv12[2648] = sv12[1472] * sp[179];
        sv12[2649] = sv12[1473] * sp[179];
        sv12[2650] = sv12[1474] * sp[179];
        sv12[2651] = sv12[1475] * sp[179];
        sv12[2652] = sv12[2298] * sp[179];
        sv12[2653] = sv12[2299] * sp[179];
        sv12[2654] = sv12[2199] * sp[179];
        sv12[2655] = sv12[2200] * sp[179];
        sv12[2656] = sv12[2378] * sp[179];
        sv12[2657] = sv12[2379] * sp[179];
        sv12[2658] = sv12[1476] * sp[179];
        sv12[2659] = sv12[1477] * sp[179];
        sv12[2660] = sv12[1478] * sp[179];
        sv12[2661] = sv12[1479] * sp[179];
        sv12[2662] = sv12[1480] * sp[179];
        sv12[2663] = sv12[1481] * sp[179];
        sv12[2664] = sv12[1482] * sp[179];
        sv12[2665] = sv12[1483] * sp[179];
        sv12[2666] = sv12[1779] * sp[179];
        sv12[2667] = sv12[1780] * sp[179];
        sv12[2668] = sv12[2386] * sp[179];
        sv12[2669] = sv12[2387] * sp[179];
        sv12[2670] = sv12[2307] * sp[179];
        sv12[2671] = sv12[2308] * sp[179];
        sv12[2672] = sv12[1484] * sp[179];
        sv12[2673] = sv12[1485] * sp[179];
        sv12[2674] = sv12[1486] * sp[179];
        sv12[2675] = sv12[1487] * sp[179];
        sv12[2676] = sv12[1488] * sp[179];
        sv12[2677] = sv12[1489] * sp[179];
        sv12[2678] = sv12[1490] * sp[179];
        sv12[2679] = sv12[1491] * sp[179];
        sv12[2680] = sv12[1781] * sp[179];
        sv12[2681] = sv12[1782] * sp[179];
        sv12[2682] = sv12[2309] * sp[179];
        sv12[2683] = sv12[2310] * sp[179];
        sv12[2684] = sv12[2311] * sp[179];
        sv12[2685] = sv12[2312] * sp[179];
        sv12[2686] = sv12[1492] * sp[179];
        sv12[2687] = sv12[1493] * sp[179];
        sv12[2688] = sv12[1494] * sp[179];
        sv12[2689] = sv12[1495] * sp[179];
        sv12[2690] = sv12[1496] * sp[179];
        sv12[2691] = sv12[1497] * sp[179];
        sv12[2692] = sv12[1498] * sp[179];
        sv12[2693] = sv12[1499] * sp[179];
        sv12[2694] = sv12[1783] * sp[179];
        sv12[2695] = sv12[1784] * sp[179];
        sv12[2696] = sv12[2313] * sp[179];
        sv12[2697] = sv12[2314] * sp[179];
        const double fw0 = sv12[2399] * weights12[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF0[i][j] += TF0[i] * FE96_C0_Q12[0][iq][j];
        const double fw1 = sv12[2397] * weights12[iq];
        alignas(32) double TF1[6];
        for (int i = 0; i < 6; ++i)
            TF1[i] = fw1 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF1[i][j] += TF1[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw2 = sv12[2406] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP0[i] += fw2 * FE96_C0_Q12[0][iq][i];
        const double fw3 = sv12[2396] * weights12[iq];
        alignas(32) double TF2[6];
        for (int i = 0; i < 6; ++i)
            TF2[i] = fw3 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF2[i][j] += TF2[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw4 = sv12[2404] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP1[i] += fw4 * FE96_C0_Q12[0][iq][i];
        const double fw5 = sv12[2405] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP2[i] += fw5 * FE96_C0_Q12[0][iq][i];
        const double fw6 = sv12[2398] * weights12[iq];
        alignas(32) double TF3[6];
        for (int i = 0; i < 6; ++i)
            TF3[i] = fw6 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF3[i][j] += TF3[i] * FE96_C0_Q12[0][iq][j];
        const double fw7 = sv12[2401] * weights12[iq];
        alignas(32) double TF4[6];
        for (int i = 0; i < 6; ++i)
            TF4[i] = fw7 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF4[i][j] += TF4[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw8 = sv12[2408] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP3[i] += fw8 * FE96_C0_Q12[0][iq][i];
        const double fw9 = sv12[2400] * weights12[iq];
        alignas(32) double TF5[6];
        for (int i = 0; i < 6; ++i)
            TF5[i] = fw9 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF5[i][j] += TF5[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw10 = sv12[2409] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP4[i] += fw10 * FE96_C0_Q12[0][iq][i];
        const double fw11 = sv12[2407] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP5[i] += fw11 * FE96_C0_Q12[0][iq][i];
        const double fw12 = sv12[2410] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP6[i] += fw12 * FE96_C0_Q12[0][iq][i];
        const double fw13 = sv12[2411] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP7[i] += fw13 * FE96_C0_Q12[0][iq][i];
        const double fw14 = sv12[2413] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP8[i] += fw14 * FE96_C0_Q12[0][iq][i];
        const double fw15 = sv12[2402] * weights12[iq];
        alignas(32) double TF6[6];
        for (int i = 0; i < 6; ++i)
            TF6[i] = fw15 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF6[i][j] += TF6[i] * FE3_C0_Q12[0][iq][j];
        const double fw16 = sv12[2412] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP9[i] += fw16 * FE96_C0_Q12[0][iq][i];
        const double fw17 = sv12[2415] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP10[i] += fw17 * FE96_C0_Q12[0][iq][i];
        const double fw18 = sv12[2403] * weights12[iq];
        alignas(32) double TF7[6];
        for (int i = 0; i < 6; ++i)
            TF7[i] = fw18 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF7[i][j] += TF7[i] * FE3_C0_Q12[0][iq][j];
        const double fw19 = sv12[2414] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP11[i] += fw19 * FE96_C0_Q12[0][iq][i];
        const double fw20 = sv12[2475] * weights12[iq];
        alignas(32) double TF8[5];
        for (int i = 0; i < 5; ++i)
            TF8[i] = fw20 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF8[i][j] += TF8[i] * FE96_C0_Q12[0][iq][j];
        const double fw21 = sv12[2438] * weights12[iq];
        alignas(32) double TF9[5];
        for (int i = 0; i < 5; ++i)
            TF9[i] = fw21 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF9[i][j] += TF9[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw22 = sv12[2444] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP12[i] += fw22 * FE96_C0_D10_Q12[0][iq][i];
        const double fw23 = sv12[2419] * weights12[iq];
        alignas(32) double TF10[5];
        for (int i = 0; i < 5; ++i)
            TF10[i] = fw23 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF10[i][j] += TF10[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw24 = sv12[2443] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP13[i] += fw24 * FE96_C0_D10_Q12[0][iq][i];
        const double fw25 = sv12[2442] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP14[i] += fw25 * FE96_C0_D10_Q12[0][iq][i];
        const double fw26 = sv12[2456] * weights12[iq];
        alignas(32) double TF11[5];
        for (int i = 0; i < 5; ++i)
            TF11[i] = fw26 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF11[i][j] += TF11[i] * FE96_C0_Q12[0][iq][j];
        const double fw27 = sv12[2437] * weights12[iq];
        alignas(32) double TF12[5];
        for (int i = 0; i < 5; ++i)
            TF12[i] = fw27 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF12[i][j] += TF12[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw28 = sv12[2441] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP15[i] += fw28 * FE96_C0_D10_Q12[0][iq][i];
        const double fw29 = sv12[2436] * weights12[iq];
        alignas(32) double TF13[5];
        for (int i = 0; i < 5; ++i)
            TF13[i] = fw29 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF13[i][j] += TF13[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw30 = sv12[2439] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP16[i] += fw30 * FE96_C0_D10_Q12[0][iq][i];
        const double fw31 = sv12[2440] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP17[i] += fw31 * FE96_C0_D10_Q12[0][iq][i];
        const double fw32 = sv12[2446] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP18[i] += fw32 * FE96_C0_D10_Q12[0][iq][i];
        const double fw33 = sv12[2445] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP19[i] += fw33 * FE96_C0_D10_Q12[0][iq][i];
        const double fw34 = sv12[2553] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP20[i] += fw34 * FE96_C0_D10_Q12[0][iq][i];
        const double fw35 = sv12[2550] * weights12[iq];
        alignas(32) double TF14[5];
        for (int i = 0; i < 5; ++i)
            TF14[i] = fw35 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF14[i][j] += TF14[i] * FE3_C0_Q12[0][iq][j];
        const double fw36 = sv12[2552] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP21[i] += fw36 * FE96_C0_D10_Q12[0][iq][i];
        const double fw37 = sv12[2555] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP22[i] += fw37 * FE96_C0_D10_Q12[0][iq][i];
        const double fw38 = sv12[2551] * weights12[iq];
        alignas(32) double TF15[5];
        for (int i = 0; i < 5; ++i)
            TF15[i] = fw38 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF15[i][j] += TF15[i] * FE3_C0_Q12[0][iq][j];
        const double fw39 = sv12[2554] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP23[i] += fw39 * FE96_C0_D10_Q12[0][iq][i];
        const double fw40 = sv12[2482] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP24[j] += fw40 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP25[j] += fw22 * FE96_C0_D10_Q12[0][iq][j];
        const double fw41 = sv12[2604] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP26[j] += fw41 * FE96_C0_D02_Q12[0][0][j];
        const double fw42 = sv12[2426] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP27[j] += fw42 * FE96_C0_D01_Q12[0][iq][j];
        const double fw43 = sv12[2599] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP28[j] += fw43 * FE96_C0_D02_Q12[0][0][j];
        const double fw44 = sv12[2593] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP29[j] += fw44 * FE96_C0_D11_Q12[0][0][j];
        const double fw45 = sv12[2463] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP30[j] += fw45 * FE96_C0_Q12[0][iq][j];
        const double fw46 = sv12[2529] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP31[j] += fw46 * FE96_C0_D10_Q12[0][iq][j];
        const double fw47 = sv12[2585] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP32[j] += fw47 * FE96_C0_D02_Q12[0][0][j];
        const double fw48 = sv12[2514] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP33[j] += fw48 * FE96_C0_D01_Q12[0][iq][j];
        const double fw49 = sv12[2566] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP34[j] += fw49 * FE96_C0_D02_Q12[0][0][j];
        const double fw50 = sv12[2576] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP35[j] += fw50 * FE96_C0_D11_Q12[0][0][j];
        const double fw51 = sv12[2605] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP36[j] += fw51 * FE3_C0_D01_Q12[0][0][j];
        const double fw52 = sv12[2606] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP37[j] += fw52 * FE3_C0_D01_Q12[0][0][j];
        const double fw53 = sv12[2602] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP38[j] += fw53 * FE3_C0_Q12[0][iq][j];
        const double fw54 = sv12[2603] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP39[j] += fw54 * FE3_C0_Q12[0][iq][j];
        const double fw55 = sv12[2476] * weights12[iq];
        alignas(32) double TF16[5];
        for (int i = 0; i < 5; ++i)
            TF16[i] = fw55 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF16[i][j] += TF16[i] * FE96_C0_Q12[0][iq][j];
        alignas(32) double TF17[5];
        for (int i = 0; i < 5; ++i)
            TF17[i] = fw23 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF17[i][j] += TF17[i] * FE96_C0_D10_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP40[i] += fw42 * FE96_C0_D01_Q12[0][iq][i];
        const double fw56 = sv12[2420] * weights12[iq];
        alignas(32) double TF18[5];
        for (int i = 0; i < 5; ++i)
            TF18[i] = fw56 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF18[i][j] += TF18[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw57 = sv12[2425] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP41[i] += fw57 * FE96_C0_D01_Q12[0][iq][i];
        const double fw58 = sv12[2424] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP42[i] += fw58 * FE96_C0_D01_Q12[0][iq][i];
        const double fw59 = sv12[2457] * weights12[iq];
        alignas(32) double TF19[5];
        for (int i = 0; i < 5; ++i)
            TF19[i] = fw59 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF19[i][j] += TF19[i] * FE96_C0_Q12[0][iq][j];
        const double fw60 = sv12[2418] * weights12[iq];
        alignas(32) double TF20[5];
        for (int i = 0; i < 5; ++i)
            TF20[i] = fw60 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF20[i][j] += TF20[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw61 = sv12[2423] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP43[i] += fw61 * FE96_C0_D01_Q12[0][iq][i];
        const double fw62 = sv12[2417] * weights12[iq];
        alignas(32) double TF21[5];
        for (int i = 0; i < 5; ++i)
            TF21[i] = fw62 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF21[i][j] += TF21[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw63 = sv12[2421] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP44[i] += fw63 * FE96_C0_D01_Q12[0][iq][i];
        const double fw64 = sv12[2422] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP45[i] += fw64 * FE96_C0_D01_Q12[0][iq][i];
        const double fw65 = sv12[2428] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP46[i] += fw65 * FE96_C0_D01_Q12[0][iq][i];
        const double fw66 = sv12[2427] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP47[i] += fw66 * FE96_C0_D01_Q12[0][iq][i];
        const double fw67 = sv12[2559] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP48[i] += fw67 * FE96_C0_D01_Q12[0][iq][i];
        const double fw68 = sv12[2556] * weights12[iq];
        alignas(32) double TF22[5];
        for (int i = 0; i < 5; ++i)
            TF22[i] = fw68 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF22[i][j] += TF22[i] * FE3_C0_Q12[0][iq][j];
        const double fw69 = sv12[2558] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP49[i] += fw69 * FE96_C0_D01_Q12[0][iq][i];
        const double fw70 = sv12[2561] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP50[i] += fw70 * FE96_C0_D01_Q12[0][iq][i];
        const double fw71 = sv12[2557] * weights12[iq];
        alignas(32) double TF23[5];
        for (int i = 0; i < 5; ++i)
            TF23[i] = fw71 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF23[i][j] += TF23[i] * FE3_C0_Q12[0][iq][j];
        const double fw72 = sv12[2560] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP51[i] += fw72 * FE96_C0_D01_Q12[0][iq][i];
        const double fw73 = sv12[2481] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP52[j] += fw73 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP53[j] += fw24 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP54[j] += fw57 * FE96_C0_D01_Q12[0][iq][j];
        const double fw74 = sv12[2598] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP55[j] += fw74 * FE96_C0_D02_Q12[0][0][j];
        const double fw75 = sv12[2591] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP56[j] += fw75 * FE96_C0_D11_Q12[0][0][j];
        const double fw76 = sv12[2462] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP57[j] += fw76 * FE96_C0_Q12[0][iq][j];
        const double fw77 = sv12[2528] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP58[j] += fw77 * FE96_C0_D10_Q12[0][iq][j];
        const double fw78 = sv12[2583] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP59[j] += fw78 * FE96_C0_D02_Q12[0][0][j];
        const double fw79 = sv12[2513] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP60[j] += fw79 * FE96_C0_D01_Q12[0][iq][j];
        const double fw80 = sv12[2564] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP61[j] += fw80 * FE96_C0_D02_Q12[0][0][j];
        const double fw81 = sv12[2574] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP62[j] += fw81 * FE96_C0_D11_Q12[0][0][j];
        const double fw82 = sv12[2600] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP63[j] += fw82 * FE3_C0_D01_Q12[0][0][j];
        const double fw83 = sv12[2601] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP64[j] += fw83 * FE3_C0_D01_Q12[0][0][j];
        const double fw84 = sv12[2596] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP65[j] += fw84 * FE3_C0_Q12[0][iq][j];
        const double fw85 = sv12[2597] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP66[j] += fw85 * FE3_C0_Q12[0][iq][j];
        const double fw86 = sv12[2480] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP67[j] += fw86 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP68[j] += fw25 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP69[j] += fw44 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP70[j] += fw58 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP71[j] += fw75 * FE96_C0_D02_Q12[0][0][j];
        const double fw87 = sv12[2592] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP72[j] += fw87 * FE96_C0_D11_Q12[0][0][j];
        const double fw88 = sv12[2461] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP73[j] += fw88 * FE96_C0_Q12[0][iq][j];
        const double fw89 = sv12[2527] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP74[j] += fw89 * FE96_C0_D10_Q12[0][iq][j];
        const double fw90 = sv12[2584] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP75[j] += fw90 * FE96_C0_D02_Q12[0][0][j];
        const double fw91 = sv12[2512] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP76[j] += fw91 * FE96_C0_D01_Q12[0][iq][j];
        const double fw92 = sv12[2565] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP77[j] += fw92 * FE96_C0_D02_Q12[0][0][j];
        const double fw93 = sv12[2575] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP78[j] += fw93 * FE96_C0_D11_Q12[0][0][j];
        const double fw94 = sv12[2594] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP79[j] += fw94 * FE3_C0_D01_Q12[0][0][j];
        const double fw95 = sv12[2595] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP80[j] += fw95 * FE3_C0_D01_Q12[0][0][j];
        const double fw96 = sv12[2589] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP81[j] += fw96 * FE3_C0_Q12[0][iq][j];
        const double fw97 = sv12[2590] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP82[j] += fw97 * FE3_C0_Q12[0][iq][j];
        const double fw98 = sv12[2472] * weights12[iq];
        alignas(32) double TF24[6];
        for (int i = 0; i < 6; ++i)
            TF24[i] = fw98 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF24[i][j] += TF24[i] * FE96_C0_Q12[0][iq][j];
        const double fw99 = sv12[2435] * weights12[iq];
        alignas(32) double TF25[6];
        for (int i = 0; i < 6; ++i)
            TF25[i] = fw99 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF25[i][j] += TF25[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw100 = sv12[2497] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP83[i] += fw100 * FE96_C0_Q12[0][iq][i];
        const double fw101 = sv12[2416] * weights12[iq];
        alignas(32) double TF26[6];
        for (int i = 0; i < 6; ++i)
            TF26[i] = fw101 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF26[i][j] += TF26[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw102 = sv12[2495] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP84[i] += fw102 * FE96_C0_Q12[0][iq][i];
        const double fw103 = sv12[2496] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP85[i] += fw103 * FE96_C0_Q12[0][iq][i];
        const double fw104 = sv12[2453] * weights12[iq];
        alignas(32) double TF27[6];
        for (int i = 0; i < 6; ++i)
            TF27[i] = fw104 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF27[i][j] += TF27[i] * FE96_C0_Q12[0][iq][j];
        const double fw105 = sv12[2492] * weights12[iq];
        alignas(32) double TF28[6];
        for (int i = 0; i < 6; ++i)
            TF28[i] = fw105 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF28[i][j] += TF28[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw106 = sv12[2499] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP86[i] += fw106 * FE96_C0_Q12[0][iq][i];
        const double fw107 = sv12[2491] * weights12[iq];
        alignas(32) double TF29[6];
        for (int i = 0; i < 6; ++i)
            TF29[i] = fw107 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF29[i][j] += TF29[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw108 = sv12[2500] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP87[i] += fw108 * FE96_C0_Q12[0][iq][i];
        const double fw109 = sv12[2498] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP88[i] += fw109 * FE96_C0_Q12[0][iq][i];
        const double fw110 = sv12[2501] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP89[i] += fw110 * FE96_C0_Q12[0][iq][i];
        const double fw111 = sv12[2502] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP90[i] += fw111 * FE96_C0_Q12[0][iq][i];
        const double fw112 = sv12[2504] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP91[i] += fw112 * FE96_C0_Q12[0][iq][i];
        const double fw113 = sv12[2493] * weights12[iq];
        alignas(32) double TF30[6];
        for (int i = 0; i < 6; ++i)
            TF30[i] = fw113 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF30[i][j] += TF30[i] * FE3_C0_Q12[0][iq][j];
        const double fw114 = sv12[2503] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP92[i] += fw114 * FE96_C0_Q12[0][iq][i];
        const double fw115 = sv12[2506] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP93[i] += fw115 * FE96_C0_Q12[0][iq][i];
        const double fw116 = sv12[2494] * weights12[iq];
        alignas(32) double TF31[6];
        for (int i = 0; i < 6; ++i)
            TF31[i] = fw116 * FE96_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF31[i][j] += TF31[i] * FE3_C0_Q12[0][iq][j];
        const double fw117 = sv12[2505] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            TP94[i] += fw117 * FE96_C0_Q12[0][iq][i];
        const double fw118 = sv12[2474] * weights12[iq];
        alignas(32) double TF32[5];
        for (int i = 0; i < 5; ++i)
            TF32[i] = fw118 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF32[i][j] += TF32[i] * FE96_C0_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP95[i] += fw46 * FE96_C0_D10_Q12[0][iq][i];
        alignas(32) double TF33[5];
        for (int i = 0; i < 5; ++i)
            TF33[i] = fw60 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF33[i][j] += TF33[i] * FE96_C0_D01_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP96[i] += fw77 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            TP97[i] += fw89 * FE96_C0_D10_Q12[0][iq][i];
        const double fw119 = sv12[2455] * weights12[iq];
        alignas(32) double TF34[5];
        for (int i = 0; i < 5; ++i)
            TF34[i] = fw119 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF34[i][j] += TF34[i] * FE96_C0_Q12[0][iq][j];
        const double fw120 = sv12[2523] * weights12[iq];
        alignas(32) double TF35[5];
        for (int i = 0; i < 5; ++i)
            TF35[i] = fw120 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF35[i][j] += TF35[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw121 = sv12[2526] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP98[i] += fw121 * FE96_C0_D10_Q12[0][iq][i];
        const double fw122 = sv12[2508] * weights12[iq];
        alignas(32) double TF36[5];
        for (int i = 0; i < 5; ++i)
            TF36[i] = fw122 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF36[i][j] += TF36[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw123 = sv12[2524] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP99[i] += fw123 * FE96_C0_D10_Q12[0][iq][i];
        const double fw124 = sv12[2525] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP100[i] += fw124 * FE96_C0_D10_Q12[0][iq][i];
        const double fw125 = sv12[2531] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP101[i] += fw125 * FE96_C0_D10_Q12[0][iq][i];
        const double fw126 = sv12[2530] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP102[i] += fw126 * FE96_C0_D10_Q12[0][iq][i];
        const double fw127 = sv12[2547] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP103[i] += fw127 * FE96_C0_D10_Q12[0][iq][i];
        const double fw128 = sv12[2544] * weights12[iq];
        alignas(32) double TF37[5];
        for (int i = 0; i < 5; ++i)
            TF37[i] = fw128 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF37[i][j] += TF37[i] * FE3_C0_Q12[0][iq][j];
        const double fw129 = sv12[2546] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP104[i] += fw129 * FE96_C0_D10_Q12[0][iq][i];
        const double fw130 = sv12[2549] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP105[i] += fw130 * FE96_C0_D10_Q12[0][iq][i];
        const double fw131 = sv12[2545] * weights12[iq];
        alignas(32) double TF38[5];
        for (int i = 0; i < 5; ++i)
            TF38[i] = fw131 * FE96_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF38[i][j] += TF38[i] * FE3_C0_Q12[0][iq][j];
        const double fw132 = sv12[2548] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP106[i] += fw132 * FE96_C0_D10_Q12[0][iq][i];
        const double fw133 = sv12[2479] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP107[j] += fw133 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP108[j] += fw28 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP109[j] += fw61 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 4; ++j)
            TP110[j] += fw90 * FE96_C0_D11_Q12[0][0][j];
        const double fw134 = sv12[2460] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP111[j] += fw134 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP112[j] += fw121 * FE96_C0_D10_Q12[0][iq][j];
        const double fw135 = sv12[2586] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP113[j] += fw135 * FE96_C0_D02_Q12[0][0][j];
        const double fw136 = sv12[2511] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP114[j] += fw136 * FE96_C0_D01_Q12[0][iq][j];
        const double fw137 = sv12[2568] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP115[j] += fw137 * FE96_C0_D02_Q12[0][0][j];
        const double fw138 = sv12[2578] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP116[j] += fw138 * FE96_C0_D11_Q12[0][0][j];
        const double fw139 = sv12[2587] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP117[j] += fw139 * FE3_C0_D01_Q12[0][0][j];
        const double fw140 = sv12[2588] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP118[j] += fw140 * FE3_C0_D01_Q12[0][0][j];
        const double fw141 = sv12[2581] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP119[j] += fw141 * FE3_C0_Q12[0][iq][j];
        const double fw142 = sv12[2582] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP120[j] += fw142 * FE3_C0_Q12[0][iq][j];
        const double fw143 = sv12[2473] * weights12[iq];
        alignas(32) double TF39[5];
        for (int i = 0; i < 5; ++i)
            TF39[i] = fw143 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF39[i][j] += TF39[i] * FE96_C0_Q12[0][iq][j];
        alignas(32) double TF40[5];
        for (int i = 0; i < 5; ++i)
            TF40[i] = fw29 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF40[i][j] += TF40[i] * FE96_C0_D10_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP121[i] += fw48 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            TP122[i] += fw79 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            TP123[i] += fw91 * FE96_C0_D01_Q12[0][iq][i];
        const double fw144 = sv12[2454] * weights12[iq];
        alignas(32) double TF41[5];
        for (int i = 0; i < 5; ++i)
            TF41[i] = fw144 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF41[i][j] += TF41[i] * FE96_C0_Q12[0][iq][j];
        alignas(32) double TF42[5];
        for (int i = 0; i < 5; ++i)
            TF42[i] = fw122 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF42[i][j] += TF42[i] * FE96_C0_D10_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP124[i] += fw136 * FE96_C0_D01_Q12[0][iq][i];
        const double fw145 = sv12[2507] * weights12[iq];
        alignas(32) double TF43[5];
        for (int i = 0; i < 5; ++i)
            TF43[i] = fw145 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF43[i][j] += TF43[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw146 = sv12[2509] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP125[i] += fw146 * FE96_C0_D01_Q12[0][iq][i];
        const double fw147 = sv12[2510] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP126[i] += fw147 * FE96_C0_D01_Q12[0][iq][i];
        const double fw148 = sv12[2516] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP127[i] += fw148 * FE96_C0_D01_Q12[0][iq][i];
        const double fw149 = sv12[2515] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP128[i] += fw149 * FE96_C0_D01_Q12[0][iq][i];
        const double fw150 = sv12[2541] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP129[i] += fw150 * FE96_C0_D01_Q12[0][iq][i];
        const double fw151 = sv12[2538] * weights12[iq];
        alignas(32) double TF44[5];
        for (int i = 0; i < 5; ++i)
            TF44[i] = fw151 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF44[i][j] += TF44[i] * FE3_C0_Q12[0][iq][j];
        const double fw152 = sv12[2540] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP130[i] += fw152 * FE96_C0_D01_Q12[0][iq][i];
        const double fw153 = sv12[2543] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP131[i] += fw153 * FE96_C0_D01_Q12[0][iq][i];
        const double fw154 = sv12[2539] * weights12[iq];
        alignas(32) double TF45[5];
        for (int i = 0; i < 5; ++i)
            TF45[i] = fw154 * FE96_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF45[i][j] += TF45[i] * FE3_C0_Q12[0][iq][j];
        const double fw155 = sv12[2542] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP132[i] += fw155 * FE96_C0_D01_Q12[0][iq][i];
        const double fw156 = sv12[2477] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP133[j] += fw156 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP134[j] += fw30 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP135[j] += fw63 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 4; ++j)
            TP136[j] += fw92 * FE96_C0_D11_Q12[0][0][j];
        const double fw157 = sv12[2458] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP137[j] += fw157 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP138[j] += fw123 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP139[j] += fw146 * FE96_C0_D01_Q12[0][iq][j];
        const double fw158 = sv12[2569] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP140[j] += fw158 * FE96_C0_D02_Q12[0][0][j];
        const double fw159 = sv12[2567] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP141[j] += fw159 * FE96_C0_D11_Q12[0][0][j];
        const double fw160 = sv12[2570] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP142[j] += fw160 * FE3_C0_D01_Q12[0][0][j];
        const double fw161 = sv12[2571] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP143[j] += fw161 * FE3_C0_D01_Q12[0][0][j];
        const double fw162 = sv12[2562] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP144[j] += fw162 * FE3_C0_Q12[0][iq][j];
        const double fw163 = sv12[2563] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP145[j] += fw163 * FE3_C0_Q12[0][iq][j];
        const double fw164 = sv12[2478] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP146[j] += fw164 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP147[j] += fw31 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP148[j] += fw50 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP149[j] += fw64 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP150[j] += fw81 * FE96_C0_D02_Q12[0][0][j];
        const double fw165 = sv12[2459] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP151[j] += fw165 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP152[j] += fw124 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP153[j] += fw138 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP154[j] += fw147 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP155[j] += fw159 * FE96_C0_D02_Q12[0][0][j];
        const double fw166 = sv12[2577] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP156[j] += fw166 * FE96_C0_D11_Q12[0][0][j];
        const double fw167 = sv12[2579] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP157[j] += fw167 * FE3_C0_D01_Q12[0][0][j];
        const double fw168 = sv12[2580] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP158[j] += fw168 * FE3_C0_D01_Q12[0][0][j];
        const double fw169 = sv12[2572] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP159[j] += fw169 * FE3_C0_Q12[0][iq][j];
        const double fw170 = sv12[2573] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP160[j] += fw170 * FE3_C0_Q12[0][iq][j];
        const double fw171 = sv12[2484] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP161[j] += fw171 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP162[j] += fw32 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP163[j] += fw51 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP164[j] += fw65 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP165[j] += fw82 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP166[j] += fw94 * FE96_C0_D11_Q12[0][0][j];
        const double fw172 = sv12[2465] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP167[j] += fw172 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP168[j] += fw125 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP169[j] += fw139 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP170[j] += fw148 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP171[j] += fw160 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP172[j] += fw167 * FE96_C0_D11_Q12[0][0][j];
        const double fw173 = sv12[2613] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP173[j] += fw173 * FE3_C0_D01_Q12[0][0][j];
        const double fw174 = sv12[2609] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP174[j] += fw174 * FE3_C0_D01_Q12[0][0][j];
        const double fw175 = sv12[2611] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP175[j] += fw175 * FE3_C0_Q12[0][iq][j];
        const double fw176 = sv12[2612] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP176[j] += fw176 * FE3_C0_Q12[0][iq][j];
        const double fw177 = sv12[2483] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP177[j] += fw177 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP178[j] += fw33 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP179[j] += fw52 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP180[j] += fw66 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP181[j] += fw83 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP182[j] += fw95 * FE96_C0_D11_Q12[0][0][j];
        const double fw178 = sv12[2464] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP183[j] += fw178 * FE96_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP184[j] += fw126 * FE96_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP185[j] += fw140 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP186[j] += fw149 * FE96_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP187[j] += fw161 * FE96_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP188[j] += fw168 * FE96_C0_D11_Q12[0][0][j];
        const double fw179 = sv12[2610] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP189[j] += fw179 * FE3_C0_D01_Q12[0][0][j];
        const double fw180 = sv12[2607] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP190[j] += fw180 * FE3_C0_Q12[0][iq][j];
        const double fw181 = sv12[2608] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP191[j] += fw181 * FE3_C0_Q12[0][iq][j];
        const double fw182 = sv12[2487] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP192[j] += fw182 * FE96_C0_Q12[0][iq][j];
        const double fw183 = sv12[2449] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP193[j] += fw183 * FE96_C0_D10_Q12[0][iq][j];
        const double fw184 = sv12[2646] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP194[j] += fw184 * FE96_C0_D02_Q12[0][0][j];
        const double fw185 = sv12[2431] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP195[j] += fw185 * FE96_C0_D01_Q12[0][iq][j];
        const double fw186 = sv12[2644] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP196[j] += fw186 * FE96_C0_D02_Q12[0][0][j];
        const double fw187 = sv12[2645] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP197[j] += fw187 * FE96_C0_D11_Q12[0][0][j];
        const double fw188 = sv12[2468] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP198[j] += fw188 * FE96_C0_Q12[0][iq][j];
        const double fw189 = sv12[2534] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP199[j] += fw189 * FE96_C0_D10_Q12[0][iq][j];
        const double fw190 = sv12[2648] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP200[j] += fw190 * FE96_C0_D02_Q12[0][0][j];
        const double fw191 = sv12[2519] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP201[j] += fw191 * FE96_C0_D01_Q12[0][iq][j];
        const double fw192 = sv12[2649] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP202[j] += fw192 * FE96_C0_D02_Q12[0][0][j];
        const double fw193 = sv12[2647] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP203[j] += fw193 * FE96_C0_D11_Q12[0][0][j];
        const double fw194 = sv12[2650] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP204[j] += fw194 * FE3_C0_D01_Q12[0][0][j];
        const double fw195 = sv12[2651] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP205[j] += fw195 * FE3_C0_D01_Q12[0][0][j];
        const double fw196 = sv12[2653] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP206[j] += fw196 * FE3_C0_D01_Q12[0][0][j];
        const double fw197 = sv12[2642] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP207[j] += fw197 * FE3_C0_Q12[0][iq][j];
        const double fw198 = sv12[2652] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP208[j] += fw198 * FE3_C0_D01_Q12[0][0][j];
        const double fw199 = sv12[2655] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP209[j] += fw199 * FE3_C0_D01_Q12[0][0][j];
        const double fw200 = sv12[2643] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP210[j] += fw200 * FE3_C0_Q12[0][iq][j];
        const double fw201 = sv12[2654] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP211[j] += fw201 * FE3_C0_D01_Q12[0][0][j];
        const double fw202 = sv12[2485] * weights12[iq];
        alignas(32) double TF46[3];
        for (int i = 0; i < 3; ++i)
            TF46[i] = fw202 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF46[i][j] += TF46[i] * FE96_C0_Q12[0][iq][j];
        const double fw203 = sv12[2447] * weights12[iq];
        alignas(32) double TF47[3];
        for (int i = 0; i < 3; ++i)
            TF47[i] = fw203 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF47[i][j] += TF47[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw204 = sv12[2618] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP212[i] += fw204 * FE3_C0_Q12[0][iq][i];
        const double fw205 = sv12[2429] * weights12[iq];
        alignas(32) double TF48[3];
        for (int i = 0; i < 3; ++i)
            TF48[i] = fw205 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF48[i][j] += TF48[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw206 = sv12[2616] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP213[i] += fw206 * FE3_C0_Q12[0][iq][i];
        const double fw207 = sv12[2617] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP214[i] += fw207 * FE3_C0_Q12[0][iq][i];
        const double fw208 = sv12[2466] * weights12[iq];
        alignas(32) double TF49[3];
        for (int i = 0; i < 3; ++i)
            TF49[i] = fw208 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF49[i][j] += TF49[i] * FE96_C0_Q12[0][iq][j];
        const double fw209 = sv12[2532] * weights12[iq];
        alignas(32) double TF50[3];
        for (int i = 0; i < 3; ++i)
            TF50[i] = fw209 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF50[i][j] += TF50[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw210 = sv12[2620] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP215[i] += fw210 * FE3_C0_Q12[0][iq][i];
        const double fw211 = sv12[2517] * weights12[iq];
        alignas(32) double TF51[3];
        for (int i = 0; i < 3; ++i)
            TF51[i] = fw211 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF51[i][j] += TF51[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw212 = sv12[2621] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP216[i] += fw212 * FE3_C0_Q12[0][iq][i];
        const double fw213 = sv12[2619] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP217[i] += fw213 * FE3_C0_Q12[0][iq][i];
        const double fw214 = sv12[2622] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP218[i] += fw214 * FE3_C0_Q12[0][iq][i];
        const double fw215 = sv12[2623] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP219[i] += fw215 * FE3_C0_Q12[0][iq][i];
        const double fw216 = sv12[2625] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP220[i] += fw216 * FE3_C0_Q12[0][iq][i];
        const double fw217 = sv12[2614] * weights12[iq];
        alignas(32) double TF52[3];
        for (int i = 0; i < 3; ++i)
            TF52[i] = fw217 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF52[i][j] += TF52[i] * FE3_C0_Q12[0][iq][j];
        const double fw218 = sv12[2624] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP221[i] += fw218 * FE3_C0_Q12[0][iq][i];
        const double fw219 = sv12[2627] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP222[i] += fw219 * FE3_C0_Q12[0][iq][i];
        const double fw220 = sv12[2615] * weights12[iq];
        alignas(32) double TF53[3];
        for (int i = 0; i < 3; ++i)
            TF53[i] = fw220 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF53[i][j] += TF53[i] * FE3_C0_Q12[0][iq][j];
        const double fw221 = sv12[2626] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP223[i] += fw221 * FE3_C0_Q12[0][iq][i];
        const double fw222 = sv12[2486] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP224[j] += fw222 * FE96_C0_Q12[0][iq][j];
        const double fw223 = sv12[2448] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP225[j] += fw223 * FE96_C0_D10_Q12[0][iq][j];
        const double fw224 = sv12[2632] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP226[j] += fw224 * FE96_C0_D02_Q12[0][0][j];
        const double fw225 = sv12[2430] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP227[j] += fw225 * FE96_C0_D01_Q12[0][iq][j];
        const double fw226 = sv12[2630] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP228[j] += fw226 * FE96_C0_D02_Q12[0][0][j];
        const double fw227 = sv12[2631] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP229[j] += fw227 * FE96_C0_D11_Q12[0][0][j];
        const double fw228 = sv12[2467] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP230[j] += fw228 * FE96_C0_Q12[0][iq][j];
        const double fw229 = sv12[2533] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP231[j] += fw229 * FE96_C0_D10_Q12[0][iq][j];
        const double fw230 = sv12[2634] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP232[j] += fw230 * FE96_C0_D02_Q12[0][0][j];
        const double fw231 = sv12[2518] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP233[j] += fw231 * FE96_C0_D01_Q12[0][iq][j];
        const double fw232 = sv12[2635] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP234[j] += fw232 * FE96_C0_D02_Q12[0][0][j];
        const double fw233 = sv12[2633] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP235[j] += fw233 * FE96_C0_D11_Q12[0][0][j];
        const double fw234 = sv12[2636] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP236[j] += fw234 * FE3_C0_D01_Q12[0][0][j];
        const double fw235 = sv12[2637] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP237[j] += fw235 * FE3_C0_D01_Q12[0][0][j];
        const double fw236 = sv12[2639] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP238[j] += fw236 * FE3_C0_D01_Q12[0][0][j];
        const double fw237 = sv12[2628] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP239[j] += fw237 * FE3_C0_Q12[0][iq][j];
        const double fw238 = sv12[2638] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP240[j] += fw238 * FE3_C0_D01_Q12[0][0][j];
        const double fw239 = sv12[2641] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP241[j] += fw239 * FE3_C0_D01_Q12[0][0][j];
        const double fw240 = sv12[2629] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP242[j] += fw240 * FE3_C0_Q12[0][iq][j];
        const double fw241 = sv12[2640] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP243[j] += fw241 * FE3_C0_D01_Q12[0][0][j];
        const double fw242 = sv12[2490] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP244[j] += fw242 * FE96_C0_Q12[0][iq][j];
        const double fw243 = sv12[2452] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP245[j] += fw243 * FE96_C0_D10_Q12[0][iq][j];
        const double fw244 = sv12[2688] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP246[j] += fw244 * FE96_C0_D02_Q12[0][0][j];
        const double fw245 = sv12[2434] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP247[j] += fw245 * FE96_C0_D01_Q12[0][iq][j];
        const double fw246 = sv12[2686] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP248[j] += fw246 * FE96_C0_D02_Q12[0][0][j];
        const double fw247 = sv12[2687] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP249[j] += fw247 * FE96_C0_D11_Q12[0][0][j];
        const double fw248 = sv12[2471] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP250[j] += fw248 * FE96_C0_Q12[0][iq][j];
        const double fw249 = sv12[2537] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP251[j] += fw249 * FE96_C0_D10_Q12[0][iq][j];
        const double fw250 = sv12[2690] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP252[j] += fw250 * FE96_C0_D02_Q12[0][0][j];
        const double fw251 = sv12[2522] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP253[j] += fw251 * FE96_C0_D01_Q12[0][iq][j];
        const double fw252 = sv12[2691] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP254[j] += fw252 * FE96_C0_D02_Q12[0][0][j];
        const double fw253 = sv12[2689] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP255[j] += fw253 * FE96_C0_D11_Q12[0][0][j];
        const double fw254 = sv12[2692] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP256[j] += fw254 * FE3_C0_D01_Q12[0][0][j];
        const double fw255 = sv12[2693] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP257[j] += fw255 * FE3_C0_D01_Q12[0][0][j];
        const double fw256 = sv12[2695] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP258[j] += fw256 * FE3_C0_D01_Q12[0][0][j];
        const double fw257 = sv12[2684] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP259[j] += fw257 * FE3_C0_Q12[0][iq][j];
        const double fw258 = sv12[2694] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP260[j] += fw258 * FE3_C0_D01_Q12[0][0][j];
        const double fw259 = sv12[2697] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP261[j] += fw259 * FE3_C0_D01_Q12[0][0][j];
        const double fw260 = sv12[2685] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP262[j] += fw260 * FE3_C0_Q12[0][iq][j];
        const double fw261 = sv12[2696] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP263[j] += fw261 * FE3_C0_D01_Q12[0][0][j];
        const double fw262 = sv12[2488] * weights12[iq];
        alignas(32) double TF54[3];
        for (int i = 0; i < 3; ++i)
            TF54[i] = fw262 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF54[i][j] += TF54[i] * FE96_C0_Q12[0][iq][j];
        const double fw263 = sv12[2450] * weights12[iq];
        alignas(32) double TF55[3];
        for (int i = 0; i < 3; ++i)
            TF55[i] = fw263 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF55[i][j] += TF55[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw264 = sv12[2660] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP264[i] += fw264 * FE3_C0_Q12[0][iq][i];
        const double fw265 = sv12[2432] * weights12[iq];
        alignas(32) double TF56[3];
        for (int i = 0; i < 3; ++i)
            TF56[i] = fw265 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF56[i][j] += TF56[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw266 = sv12[2658] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP265[i] += fw266 * FE3_C0_Q12[0][iq][i];
        const double fw267 = sv12[2659] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP266[i] += fw267 * FE3_C0_Q12[0][iq][i];
        const double fw268 = sv12[2469] * weights12[iq];
        alignas(32) double TF57[3];
        for (int i = 0; i < 3; ++i)
            TF57[i] = fw268 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 6; ++j)
                BF57[i][j] += TF57[i] * FE96_C0_Q12[0][iq][j];
        const double fw269 = sv12[2535] * weights12[iq];
        alignas(32) double TF58[3];
        for (int i = 0; i < 3; ++i)
            TF58[i] = fw269 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF58[i][j] += TF58[i] * FE96_C0_D10_Q12[0][iq][j];
        const double fw270 = sv12[2662] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP267[i] += fw270 * FE3_C0_Q12[0][iq][i];
        const double fw271 = sv12[2520] * weights12[iq];
        alignas(32) double TF59[3];
        for (int i = 0; i < 3; ++i)
            TF59[i] = fw271 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF59[i][j] += TF59[i] * FE96_C0_D01_Q12[0][iq][j];
        const double fw272 = sv12[2663] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP268[i] += fw272 * FE3_C0_Q12[0][iq][i];
        const double fw273 = sv12[2661] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP269[i] += fw273 * FE3_C0_Q12[0][iq][i];
        const double fw274 = sv12[2664] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP270[i] += fw274 * FE3_C0_Q12[0][iq][i];
        const double fw275 = sv12[2665] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP271[i] += fw275 * FE3_C0_Q12[0][iq][i];
        const double fw276 = sv12[2667] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP272[i] += fw276 * FE3_C0_Q12[0][iq][i];
        const double fw277 = sv12[2656] * weights12[iq];
        alignas(32) double TF60[3];
        for (int i = 0; i < 3; ++i)
            TF60[i] = fw277 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF60[i][j] += TF60[i] * FE3_C0_Q12[0][iq][j];
        const double fw278 = sv12[2666] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP273[i] += fw278 * FE3_C0_Q12[0][iq][i];
        const double fw279 = sv12[2669] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP274[i] += fw279 * FE3_C0_Q12[0][iq][i];
        const double fw280 = sv12[2657] * weights12[iq];
        alignas(32) double TF61[3];
        for (int i = 0; i < 3; ++i)
            TF61[i] = fw280 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF61[i][j] += TF61[i] * FE3_C0_Q12[0][iq][j];
        const double fw281 = sv12[2668] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP275[i] += fw281 * FE3_C0_Q12[0][iq][i];
        const double fw282 = sv12[2489] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP276[j] += fw282 * FE96_C0_Q12[0][iq][j];
        const double fw283 = sv12[2451] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP277[j] += fw283 * FE96_C0_D10_Q12[0][iq][j];
        const double fw284 = sv12[2674] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP278[j] += fw284 * FE96_C0_D02_Q12[0][0][j];
        const double fw285 = sv12[2433] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP279[j] += fw285 * FE96_C0_D01_Q12[0][iq][j];
        const double fw286 = sv12[2672] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP280[j] += fw286 * FE96_C0_D02_Q12[0][0][j];
        const double fw287 = sv12[2673] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP281[j] += fw287 * FE96_C0_D11_Q12[0][0][j];
        const double fw288 = sv12[2470] * weights12[iq];
        for (int j = 0; j < 6; ++j)
            TP282[j] += fw288 * FE96_C0_Q12[0][iq][j];
        const double fw289 = sv12[2536] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP283[j] += fw289 * FE96_C0_D10_Q12[0][iq][j];
        const double fw290 = sv12[2676] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP284[j] += fw290 * FE96_C0_D02_Q12[0][0][j];
        const double fw291 = sv12[2521] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP285[j] += fw291 * FE96_C0_D01_Q12[0][iq][j];
        const double fw292 = sv12[2677] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP286[j] += fw292 * FE96_C0_D02_Q12[0][0][j];
        const double fw293 = sv12[2675] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP287[j] += fw293 * FE96_C0_D11_Q12[0][0][j];
        const double fw294 = sv12[2678] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP288[j] += fw294 * FE3_C0_D01_Q12[0][0][j];
        const double fw295 = sv12[2679] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP289[j] += fw295 * FE3_C0_D01_Q12[0][0][j];
        const double fw296 = sv12[2681] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP290[j] += fw296 * FE3_C0_D01_Q12[0][0][j];
        const double fw297 = sv12[2670] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP291[j] += fw297 * FE3_C0_Q12[0][iq][j];
        const double fw298 = sv12[2680] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP292[j] += fw298 * FE3_C0_D01_Q12[0][0][j];
        const double fw299 = sv12[2683] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP293[j] += fw299 * FE3_C0_D01_Q12[0][0][j];
        const double fw300 = sv12[2671] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP294[j] += fw300 * FE3_C0_Q12[0][iq][j];
        const double fw301 = sv12[2682] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP295[j] += fw301 * FE3_C0_D01_Q12[0][0][j];
    }
    std::fill(A, A + 12, 0.0);
    A[12] = -0.1666666666666677 * sp[186] + -0.1666666666666685 * sp[187];
    std::fill(A + 13, A + 34, 0.0);
    A[34] = 0.1666666666666674 * sp[186];
    std::fill(A + 35, A + 56, 0.0);
    A[56] = 0.1666666666666677 * sp[187];
    std::fill(A + 57, A + 75, 0.0);
    A[75] = 0.1666666666666665 * sp[186] + 0.1666666666666648 * sp[187];
    A[76] = 0.1666666666666663 * sp[186] + 0.3333333333333322 * sp[187];
    A[77] = 0.3333333333333338 * sp[186] + 0.1666666666666643 * sp[187];
    std::fill(A + 78, A + 96, 0.0);
    A[96] = -0.1666666666666665 * sp[186] + 0.1666666666666693 * sp[187];
    A[97] = -0.1666666666666663 * sp[186];
    A[98] = -0.3333333333333338 * sp[186] + -0.1666666666666662 * sp[187];
    std::fill(A + 99, A + 117, 0.0);
    A[117] = 0.1666666666666682 * sp[186] + -0.1666666666666668 * sp[187];
    A[118] = -0.1666666666666677 * sp[186] + -0.3333333333333345 * sp[187];
    A[119] = -0.1666666666666665 * sp[187];
    std::fill(A + 120, A + 138, 0.0);
    A[138] = -0.1666666666666677 * sp[185] + -0.1666666666666685 * sp[184];
    std::fill(A + 139, A + 160, 0.0);
    A[160] = 0.1666666666666674 * sp[185];
    std::fill(A + 161, A + 182, 0.0);
    A[182] = 0.1666666666666677 * sp[184];
    std::fill(A + 183, A + 201, 0.0);
    A[201] = 0.1666666666666665 * sp[185] + 0.1666666666666648 * sp[184];
    A[202] = 0.1666666666666663 * sp[185] + 0.3333333333333322 * sp[184];
    A[203] = 0.3333333333333338 * sp[185] + 0.1666666666666643 * sp[184];
    std::fill(A + 204, A + 222, 0.0);
    A[222] = -0.1666666666666665 * sp[185] + 0.1666666666666693 * sp[184];
    A[223] = -0.1666666666666663 * sp[185];
    A[224] = -0.3333333333333338 * sp[185] + -0.1666666666666662 * sp[184];
    std::fill(A + 225, A + 243, 0.0);
    A[243] = 0.1666666666666682 * sp[185] + -0.1666666666666668 * sp[184];
    A[244] = -0.1666666666666677 * sp[185] + -0.3333333333333345 * sp[184];
    A[245] = -0.1666666666666665 * sp[184];
    std::fill(A + 246, A + 252, 0.0);
    A[252] = -0.1666666666666677 * sp[181] + -0.1666666666666685 * sp[180];
    std::fill(A + 253, A + 255, 0.0);
    A[255] = 0.1666666666666665 * sp[181] + 0.1666666666666648 * sp[180];
    A[256] = -0.1666666666666665 * sp[181] + 0.1666666666666693 * sp[180];
    A[257] = 0.1666666666666682 * sp[181] + -0.1666666666666668 * sp[180];
    A[258] = -0.1666666666666677 * sp[183] + -0.1666666666666685 * sp[182];
    std::fill(A + 259, A + 261, 0.0);
    A[261] = 0.1666666666666665 * sp[183] + 0.1666666666666648 * sp[182];
    A[262] = -0.1666666666666665 * sp[183] + 0.1666666666666693 * sp[182];
    A[263] = 0.1666666666666682 * sp[183] + -0.1666666666666668 * sp[182];
    std::fill(A + 264, A + 274, 0.0);
    A[274] = 0.1666666666666674 * sp[181];
    A[275] = 0.0;
    A[276] = 0.1666666666666663 * sp[181] + 0.3333333333333322 * sp[180];
    A[277] = -0.1666666666666663 * sp[181];
    A[278] = -0.1666666666666677 * sp[181] + -0.3333333333333345 * sp[180];
    A[279] = 0.0;
    A[280] = 0.1666666666666674 * sp[183];
    A[281] = 0.0;
    A[282] = 0.1666666666666663 * sp[183] + 0.3333333333333322 * sp[182];
    A[283] = -0.1666666666666663 * sp[183];
    A[284] = -0.1666666666666677 * sp[183] + -0.3333333333333345 * sp[182];
    std::fill(A + 285, A + 296, 0.0);
    A[296] = 0.1666666666666677 * sp[180];
    A[297] = 0.3333333333333338 * sp[181] + 0.1666666666666643 * sp[180];
    A[298] = -0.3333333333333338 * sp[181] + -0.1666666666666662 * sp[180];
    A[299] = -0.1666666666666665 * sp[180];
    std::fill(A + 300, A + 302, 0.0);
    A[302] = 0.1666666666666677 * sp[182];
    A[303] = 0.3333333333333338 * sp[183] + 0.1666666666666643 * sp[182];
    A[304] = -0.3333333333333338 * sp[183] + -0.1666666666666662 * sp[182];
    A[305] = -0.1666666666666665 * sp[182];
    std::fill(A + 306, A + 441, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[3] = { 0, 1, 5 };
    static const int DM2[5] = { 0, 2, 3, 4, 5 };
    static const int DM3[3] = { 0, 2, 4 };
    static const int DM4[4] = { 0, 3, 4, 5 };
    static const int DM5[5] = { 6, 7, 9, 10, 11 };
    static const int DM6[3] = { 6, 7, 11 };
    static const int DM7[5] = { 6, 8, 9, 10, 11 };
    static const int DM8[3] = { 6, 8, 10 };
    static const int DM9[4] = { 6, 9, 10, 11 };
    static const int DM10[2] = { 12, 14 };
    static const int DM11[2] = { 15, 17 };
    static const int DM12[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + j] += BF0[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM0[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + DM1[j]] += FE96_C0_D02_Q12[0][0][j] * TP0[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM2[j]] += BF2[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + DM3[j]] += FE96_C0_D02_Q12[0][0][j] * TP1[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * i + DM4[j]] += FE96_C0_D11_Q12[0][0][j] * TP2[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + (j + 6)] += BF3[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM5[j]] += BF4[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + DM6[j]] += FE96_C0_D02_Q12[0][0][j] * TP3[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM7[j]] += BF5[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + DM8[j]] += FE96_C0_D02_Q12[0][0][j] * TP4[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * i + DM9[j]] += FE96_C0_D11_Q12[0][0][j] * TP5[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * i + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP6[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * i + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP7[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * i + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP8[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + (j + 15)] += BF6[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * i + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP9[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * i + (j + 18)] += FE3_C0_D01_Q12[0][0][j] * TP10[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + (j + 18)] += BF7[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * i + DM12[j]] += FE3_C0_D01_Q12[0][0][j] * TP11[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM0[i] + j] += BF8[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM0[j]] += BF9[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + DM1[j]] += FE96_C0_D02_Q12[0][0][j] * TP12[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM2[j]] += BF10[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][j] * TP13[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM0[i] + DM4[j]] += FE96_C0_D11_Q12[0][0][j] * TP14[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM0[i] + (j + 6)] += BF11[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM5[j]] += BF12[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][j] * TP15[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM7[j]] += BF13[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][j] * TP16[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM0[i] + DM9[j]] += FE96_C0_D11_Q12[0][0][j] * TP17[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP18[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP19[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP20[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + (j + 15)] += BF14[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP21[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][j] * TP22[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + (j + 18)] += BF15[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][j] * TP23[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM1[i] + j] += FE96_C0_D02_Q12[0][0][i] * TP24[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM1[i] + DM0[j]] += FE96_C0_D02_Q12[0][0][i] * TP25[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + DM1[j]] += FE96_C0_D02_Q12[0][0][i] * TP26[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM1[i] + DM2[j]] += FE96_C0_D02_Q12[0][0][i] * TP27[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][i] * TP28[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM1[i] + DM4[j]] += FE96_C0_D02_Q12[0][0][i] * TP29[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM1[i] + (j + 6)] += FE96_C0_D02_Q12[0][0][i] * TP30[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM1[i] + DM5[j]] += FE96_C0_D02_Q12[0][0][i] * TP31[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][i] * TP32[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM1[i] + DM7[j]] += FE96_C0_D02_Q12[0][0][i] * TP33[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][i] * TP34[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM1[i] + DM9[j]] += FE96_C0_D02_Q12[0][0][i] * TP35[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + (j + 12)] += FE96_C0_D02_Q12[0][0][i] * TP36[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + DM10[j]] += FE96_C0_D02_Q12[0][0][i] * TP37[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + (j + 15)] += FE96_C0_D02_Q12[0][0][i] * TP38[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + (j + 18)] += FE96_C0_D02_Q12[0][0][i] * TP39[j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM2[i] + j] += BF16[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM0[j]] += BF17[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + DM1[j]] += FE96_C0_D02_Q12[0][0][j] * TP40[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM2[j]] += BF18[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][j] * TP41[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM2[i] + DM4[j]] += FE96_C0_D11_Q12[0][0][j] * TP42[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM2[i] + (j + 6)] += BF19[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM5[j]] += BF20[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][j] * TP43[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM7[j]] += BF21[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][j] * TP44[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM2[i] + DM9[j]] += FE96_C0_D11_Q12[0][0][j] * TP45[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP46[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP47[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP48[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + (j + 15)] += BF22[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP49[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][j] * TP50[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + (j + 18)] += BF23[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][j] * TP51[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM3[i] + j] += FE96_C0_D02_Q12[0][0][i] * TP52[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM3[i] + DM0[j]] += FE96_C0_D02_Q12[0][0][i] * TP53[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + DM1[j]] += FE96_C0_D02_Q12[0][0][i] * TP28[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM3[i] + DM2[j]] += FE96_C0_D02_Q12[0][0][i] * TP54[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][i] * TP55[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM3[i] + DM4[j]] += FE96_C0_D02_Q12[0][0][i] * TP56[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM3[i] + (j + 6)] += FE96_C0_D02_Q12[0][0][i] * TP57[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM3[i] + DM5[j]] += FE96_C0_D02_Q12[0][0][i] * TP58[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][i] * TP59[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM3[i] + DM7[j]] += FE96_C0_D02_Q12[0][0][i] * TP60[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][i] * TP61[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM3[i] + DM9[j]] += FE96_C0_D02_Q12[0][0][i] * TP62[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + (j + 12)] += FE96_C0_D02_Q12[0][0][i] * TP63[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + DM10[j]] += FE96_C0_D02_Q12[0][0][i] * TP64[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + (j + 15)] += FE96_C0_D02_Q12[0][0][i] * TP65[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + (j + 18)] += FE96_C0_D02_Q12[0][0][i] * TP66[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM4[i] + j] += FE96_C0_D11_Q12[0][0][i] * TP67[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM4[i] + DM0[j]] += FE96_C0_D11_Q12[0][0][i] * TP68[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + DM1[j]] += FE96_C0_D11_Q12[0][0][i] * TP69[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM4[i] + DM2[j]] += FE96_C0_D11_Q12[0][0][i] * TP70[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + DM3[j]] += FE96_C0_D11_Q12[0][0][i] * TP71[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM4[i] + DM4[j]] += FE96_C0_D11_Q12[0][0][i] * TP72[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM4[i] + (j + 6)] += FE96_C0_D11_Q12[0][0][i] * TP73[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM4[i] + DM5[j]] += FE96_C0_D11_Q12[0][0][i] * TP74[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + DM6[j]] += FE96_C0_D11_Q12[0][0][i] * TP75[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM4[i] + DM7[j]] += FE96_C0_D11_Q12[0][0][i] * TP76[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + DM8[j]] += FE96_C0_D11_Q12[0][0][i] * TP77[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM4[i] + DM9[j]] += FE96_C0_D11_Q12[0][0][i] * TP78[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + (j + 12)] += FE96_C0_D11_Q12[0][0][i] * TP79[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + DM10[j]] += FE96_C0_D11_Q12[0][0][i] * TP80[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + (j + 15)] += FE96_C0_D11_Q12[0][0][i] * TP81[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + (j + 18)] += FE96_C0_D11_Q12[0][0][i] * TP82[j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + j] += BF24[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM0[j]] += BF25[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + DM1[j]] += FE96_C0_D02_Q12[0][0][j] * TP83[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM2[j]] += BF26[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + DM3[j]] += FE96_C0_D02_Q12[0][0][j] * TP84[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 6) + DM4[j]] += FE96_C0_D11_Q12[0][0][j] * TP85[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + (j + 6)] += BF27[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM5[j]] += BF28[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + DM6[j]] += FE96_C0_D02_Q12[0][0][j] * TP86[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM7[j]] += BF29[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + DM8[j]] += FE96_C0_D02_Q12[0][0][j] * TP87[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 6) + DM9[j]] += FE96_C0_D11_Q12[0][0][j] * TP88[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 6) + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP89[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 6) + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP90[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 6) + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP91[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + (j + 15)] += BF30[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 6) + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP92[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 6) + (j + 18)] += FE3_C0_D01_Q12[0][0][j] * TP93[i];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + (j + 18)] += BF31[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 6) + DM12[j]] += FE3_C0_D01_Q12[0][0][j] * TP94[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM5[i] + j] += BF32[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM0[j]] += BF12[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + DM1[j]] += FE96_C0_D02_Q12[0][0][j] * TP95[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM2[j]] += BF33[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][j] * TP96[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM5[i] + DM4[j]] += FE96_C0_D11_Q12[0][0][j] * TP97[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM5[i] + (j + 6)] += BF34[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM5[j]] += BF35[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][j] * TP98[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM7[j]] += BF36[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][j] * TP99[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM5[i] + DM9[j]] += FE96_C0_D11_Q12[0][0][j] * TP100[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP101[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP102[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP103[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 15)] += BF37[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP104[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][j] * TP105[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 18)] += BF38[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][j] * TP106[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM6[i] + j] += FE96_C0_D02_Q12[0][0][i] * TP107[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM6[i] + DM0[j]] += FE96_C0_D02_Q12[0][0][i] * TP108[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + DM1[j]] += FE96_C0_D02_Q12[0][0][i] * TP32[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM6[i] + DM2[j]] += FE96_C0_D02_Q12[0][0][i] * TP109[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][i] * TP59[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM6[i] + DM4[j]] += FE96_C0_D02_Q12[0][0][i] * TP110[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM6[i] + (j + 6)] += FE96_C0_D02_Q12[0][0][i] * TP111[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM6[i] + DM5[j]] += FE96_C0_D02_Q12[0][0][i] * TP112[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][i] * TP113[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM6[i] + DM7[j]] += FE96_C0_D02_Q12[0][0][i] * TP114[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][i] * TP115[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM6[i] + DM9[j]] += FE96_C0_D02_Q12[0][0][i] * TP116[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + (j + 12)] += FE96_C0_D02_Q12[0][0][i] * TP117[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + DM10[j]] += FE96_C0_D02_Q12[0][0][i] * TP118[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + (j + 15)] += FE96_C0_D02_Q12[0][0][i] * TP119[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + (j + 18)] += FE96_C0_D02_Q12[0][0][i] * TP120[j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM7[i] + j] += BF39[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM0[j]] += BF40[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + DM1[j]] += FE96_C0_D02_Q12[0][0][j] * TP121[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM2[j]] += BF21[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][j] * TP122[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM7[i] + DM4[j]] += FE96_C0_D11_Q12[0][0][j] * TP123[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM7[i] + (j + 6)] += BF41[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM5[j]] += BF42[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][j] * TP124[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM7[j]] += BF43[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][j] * TP125[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM7[i] + DM9[j]] += FE96_C0_D11_Q12[0][0][j] * TP126[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP127[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP128[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP129[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + (j + 15)] += BF44[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP130[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][j] * TP131[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + (j + 18)] += BF45[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][j] * TP132[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM8[i] + j] += FE96_C0_D02_Q12[0][0][i] * TP133[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM8[i] + DM0[j]] += FE96_C0_D02_Q12[0][0][i] * TP134[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + DM1[j]] += FE96_C0_D02_Q12[0][0][i] * TP34[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM8[i] + DM2[j]] += FE96_C0_D02_Q12[0][0][i] * TP135[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + DM3[j]] += FE96_C0_D02_Q12[0][0][i] * TP61[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM8[i] + DM4[j]] += FE96_C0_D02_Q12[0][0][i] * TP136[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM8[i] + (j + 6)] += FE96_C0_D02_Q12[0][0][i] * TP137[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM8[i] + DM5[j]] += FE96_C0_D02_Q12[0][0][i] * TP138[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + DM6[j]] += FE96_C0_D02_Q12[0][0][i] * TP115[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM8[i] + DM7[j]] += FE96_C0_D02_Q12[0][0][i] * TP139[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + DM8[j]] += FE96_C0_D02_Q12[0][0][i] * TP140[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM8[i] + DM9[j]] += FE96_C0_D02_Q12[0][0][i] * TP141[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + (j + 12)] += FE96_C0_D02_Q12[0][0][i] * TP142[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + DM10[j]] += FE96_C0_D02_Q12[0][0][i] * TP143[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + (j + 15)] += FE96_C0_D02_Q12[0][0][i] * TP144[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + (j + 18)] += FE96_C0_D02_Q12[0][0][i] * TP145[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM9[i] + j] += FE96_C0_D11_Q12[0][0][i] * TP146[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM9[i] + DM0[j]] += FE96_C0_D11_Q12[0][0][i] * TP147[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + DM1[j]] += FE96_C0_D11_Q12[0][0][i] * TP148[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM9[i] + DM2[j]] += FE96_C0_D11_Q12[0][0][i] * TP149[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + DM3[j]] += FE96_C0_D11_Q12[0][0][i] * TP150[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM9[i] + DM4[j]] += FE96_C0_D11_Q12[0][0][i] * TP78[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM9[i] + (j + 6)] += FE96_C0_D11_Q12[0][0][i] * TP151[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM9[i] + DM5[j]] += FE96_C0_D11_Q12[0][0][i] * TP152[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + DM6[j]] += FE96_C0_D11_Q12[0][0][i] * TP153[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM9[i] + DM7[j]] += FE96_C0_D11_Q12[0][0][i] * TP154[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + DM8[j]] += FE96_C0_D11_Q12[0][0][i] * TP155[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM9[i] + DM9[j]] += FE96_C0_D11_Q12[0][0][i] * TP156[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + (j + 12)] += FE96_C0_D11_Q12[0][0][i] * TP157[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + DM10[j]] += FE96_C0_D11_Q12[0][0][i] * TP158[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + (j + 15)] += FE96_C0_D11_Q12[0][0][i] * TP159[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + (j + 18)] += FE96_C0_D11_Q12[0][0][i] * TP160[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 12) + j] += FE3_C0_D01_Q12[0][0][i] * TP161[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 12) + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP162[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP163[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 12) + DM2[j]] += FE3_C0_D01_Q12[0][0][i] * TP164[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + DM3[j]] += FE3_C0_D01_Q12[0][0][i] * TP165[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 12) + DM4[j]] += FE3_C0_D01_Q12[0][0][i] * TP166[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 12) + (j + 6)] += FE3_C0_D01_Q12[0][0][i] * TP167[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 12) + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP168[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + DM6[j]] += FE3_C0_D01_Q12[0][0][i] * TP169[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 12) + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP170[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + DM8[j]] += FE3_C0_D01_Q12[0][0][i] * TP171[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 12) + DM9[j]] += FE3_C0_D01_Q12[0][0][i] * TP172[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + (j + 12)] += FE3_C0_D01_Q12[0][0][i] * TP173[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + DM10[j]] += FE3_C0_D01_Q12[0][0][i] * TP174[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP175[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP176[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM10[i] + j] += FE3_C0_D01_Q12[0][0][i] * TP177[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM10[i] + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP178[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP179[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM10[i] + DM2[j]] += FE3_C0_D01_Q12[0][0][i] * TP180[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + DM3[j]] += FE3_C0_D01_Q12[0][0][i] * TP181[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM10[i] + DM4[j]] += FE3_C0_D01_Q12[0][0][i] * TP182[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM10[i] + (j + 6)] += FE3_C0_D01_Q12[0][0][i] * TP183[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM10[i] + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP184[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + DM6[j]] += FE3_C0_D01_Q12[0][0][i] * TP185[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM10[i] + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP186[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + DM8[j]] += FE3_C0_D01_Q12[0][0][i] * TP187[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM10[i] + DM9[j]] += FE3_C0_D01_Q12[0][0][i] * TP188[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][i] * TP174[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][i] * TP189[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP190[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP191[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + j] += FE3_C0_D01_Q12[0][0][i] * TP192[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP193[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP194[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM2[j]] += FE3_C0_D01_Q12[0][0][i] * TP195[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + DM3[j]] += FE3_C0_D01_Q12[0][0][i] * TP196[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 15) + DM4[j]] += FE3_C0_D01_Q12[0][0][i] * TP197[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + (j + 6)] += FE3_C0_D01_Q12[0][0][i] * TP198[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP199[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + DM6[j]] += FE3_C0_D01_Q12[0][0][i] * TP200[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP201[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + DM8[j]] += FE3_C0_D01_Q12[0][0][i] * TP202[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 15) + DM9[j]] += FE3_C0_D01_Q12[0][0][i] * TP203[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 12)] += FE3_C0_D01_Q12[0][0][i] * TP204[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM10[j]] += FE3_C0_D01_Q12[0][0][i] * TP205[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP206[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP207[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM11[j]] += FE3_C0_D01_Q12[0][0][i] * TP208[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP209[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP210[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM12[j]] += FE3_C0_D01_Q12[0][0][i] * TP211[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + j] += BF46[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM0[j]] += BF47[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + DM1[j]] += FE96_C0_D02_Q12[0][0][j] * TP212[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM2[j]] += BF48[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + DM3[j]] += FE96_C0_D02_Q12[0][0][j] * TP213[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 15) + DM4[j]] += FE96_C0_D11_Q12[0][0][j] * TP214[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 15) + (j + 6)] += BF49[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM5[j]] += BF50[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + DM6[j]] += FE96_C0_D02_Q12[0][0][j] * TP215[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 15) + DM7[j]] += BF51[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + DM8[j]] += FE96_C0_D02_Q12[0][0][j] * TP216[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 15) + DM9[j]] += FE96_C0_D11_Q12[0][0][j] * TP217[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP218[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP219[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP220[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += BF52[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP221[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 18)] += FE3_C0_D01_Q12[0][0][j] * TP222[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += BF53[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM12[j]] += FE3_C0_D01_Q12[0][0][j] * TP223[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM11[i] + j] += FE3_C0_D01_Q12[0][0][i] * TP224[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM11[i] + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP225[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM11[i] + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP226[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM11[i] + DM2[j]] += FE3_C0_D01_Q12[0][0][i] * TP227[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM11[i] + DM3[j]] += FE3_C0_D01_Q12[0][0][i] * TP228[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM11[i] + DM4[j]] += FE3_C0_D01_Q12[0][0][i] * TP229[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM11[i] + (j + 6)] += FE3_C0_D01_Q12[0][0][i] * TP230[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM11[i] + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP231[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM11[i] + DM6[j]] += FE3_C0_D01_Q12[0][0][i] * TP232[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM11[i] + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP233[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM11[i] + DM8[j]] += FE3_C0_D01_Q12[0][0][i] * TP234[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM11[i] + DM9[j]] += FE3_C0_D01_Q12[0][0][i] * TP235[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][i] * TP236[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][i] * TP237[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP238[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM11[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP239[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][i] * TP240[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP241[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM11[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP242[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][i] * TP243[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + j] += FE3_C0_D01_Q12[0][0][i] * TP244[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP245[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP246[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM2[j]] += FE3_C0_D01_Q12[0][0][i] * TP247[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + DM3[j]] += FE3_C0_D01_Q12[0][0][i] * TP248[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 18) + DM4[j]] += FE3_C0_D01_Q12[0][0][i] * TP249[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + (j + 6)] += FE3_C0_D01_Q12[0][0][i] * TP250[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP251[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + DM6[j]] += FE3_C0_D01_Q12[0][0][i] * TP252[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP253[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + DM8[j]] += FE3_C0_D01_Q12[0][0][i] * TP254[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 18) + DM9[j]] += FE3_C0_D01_Q12[0][0][i] * TP255[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 12)] += FE3_C0_D01_Q12[0][0][i] * TP256[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM10[j]] += FE3_C0_D01_Q12[0][0][i] * TP257[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP258[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP259[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM11[j]] += FE3_C0_D01_Q12[0][0][i] * TP260[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP261[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP262[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM12[j]] += FE3_C0_D01_Q12[0][0][i] * TP263[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + j] += BF54[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM0[j]] += BF55[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + DM1[j]] += FE96_C0_D02_Q12[0][0][j] * TP264[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM2[j]] += BF56[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + DM3[j]] += FE96_C0_D02_Q12[0][0][j] * TP265[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 18) + DM4[j]] += FE96_C0_D11_Q12[0][0][j] * TP266[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 18) + (j + 6)] += BF57[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM5[j]] += BF58[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + DM6[j]] += FE96_C0_D02_Q12[0][0][j] * TP267[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 18) + DM7[j]] += BF59[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + DM8[j]] += FE96_C0_D02_Q12[0][0][j] * TP268[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 18) + DM9[j]] += FE96_C0_D11_Q12[0][0][j] * TP269[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP270[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP271[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP272[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += BF60[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP273[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 18)] += FE3_C0_D01_Q12[0][0][j] * TP274[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += BF61[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM12[j]] += FE3_C0_D01_Q12[0][0][j] * TP275[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM12[i] + j] += FE3_C0_D01_Q12[0][0][i] * TP276[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM12[i] + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP277[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM12[i] + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP278[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM12[i] + DM2[j]] += FE3_C0_D01_Q12[0][0][i] * TP279[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM12[i] + DM3[j]] += FE3_C0_D01_Q12[0][0][i] * TP280[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM12[i] + DM4[j]] += FE3_C0_D01_Q12[0][0][i] * TP281[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM12[i] + (j + 6)] += FE3_C0_D01_Q12[0][0][i] * TP282[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM12[i] + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP283[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM12[i] + DM6[j]] += FE3_C0_D01_Q12[0][0][i] * TP284[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM12[i] + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP285[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM12[i] + DM8[j]] += FE3_C0_D01_Q12[0][0][i] * TP286[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM12[i] + DM9[j]] += FE3_C0_D01_Q12[0][0][i] * TP287[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][i] * TP288[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][i] * TP289[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP290[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM12[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP291[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][i] * TP292[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP293[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM12[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP294[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][i] * TP295[j];
  }

};


class ransnonlinear_exterior_facet_integral_1_3: public ufc::exterior_facet_integral
{
public:

  ransnonlinear_exterior_facet_integral_1_3() : ufc::exterior_facet_integral()
  {

  }

  ~ransnonlinear_exterior_facet_integral_1_3() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 37
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.1739274225687268, 0.3260725774312731, 0.3260725774312731, 0.1739274225687268 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE45_C0_D01_F_Q4[3][4][5] =
        { { { 1.0, -0.7222726231881047, 3.722272623188091, -0.2777273768118826, -3.722272623188107 },
            { 1.0, 0.3200379128302891, 2.679962087169697, -1.320037912830275, -2.679962087169714 },
            { 1.0, 1.679962087169715, 1.320037912830271, -2.679962087169701, -1.320037912830287 },
            { 1.0, 2.722272623188108, 0.2777273768118786, -3.722272623188096, -0.2777273768118922 } },
          { { -2.72227262318811, -0.722272623188105, 0.0, 3.444545246376218, 0.0 },
            { -1.679962087169718, 0.3200379128302888, 0.0, 1.359924174339433, 0.0 },
            { -0.3200379128302928, 1.679962087169715, 0.0, -1.359924174339417, 0.0 },
            { 0.7222726231881, 2.722272623188108, 0.0, -3.444545246376202, 0.0 } },
          { { -2.72227262318811, -1.0, 0.2777273768118848, 3.722272623188112, -0.2777273768118925 },
            { -1.679962087169717, -1.0, 1.320037912830276, 2.679962087169721, -1.320037912830287 },
            { -0.3200379128302917, -1.0, 2.6799620871697, 1.320037912830298, -2.679962087169714 },
            { 0.7222726231880999, -1.0, 3.722272623188092, 0.2777273768119067, -3.722272623188106 } } };
    alignas(32) static const double FE45_C0_D10_F_Q4[3][4][5] =
        { { { 1.0, 2.722272623188104, 0.2777273768118936, -0.2777273768118936, -3.722272623188106 },
            { 1.0, 1.679962087169712, 1.320037912830285, -1.320037912830285, -2.679962087169713 },
            { 1.0, 0.3200379128302879, 2.679962087169708, -2.679962087169708, -1.320037912830288 },
            { 1.0, -0.7222726231881051, 3.722272623188099, -3.722272623188099, -0.2777273768118945 } },
          { { -2.722272623188107, -1.0, 0.277727376811893, -0.277727376811893, 3.72227262318811 },
            { -1.679962087169713, -1.0, 1.320037912830285, -1.320037912830285, 2.679962087169716 },
            { -0.3200379128302884, -1.0, 2.679962087169709, -2.679962087169709, 1.320037912830289 },
            { 0.7222726231881045, -1.0, 3.722272623188099, -3.722272623188099, 0.2777273768118963 } },
          { { -2.722272623188106, -0.7222726231881095, 0.0, 0.0, 3.444545246376216 },
            { -1.679962087169712, 0.3200379128302852, 0.0, 0.0, 1.359924174339427 },
            { -0.3200379128302857, 1.679962087169712, 0.0, 0.0, -1.359924174339426 },
            { 0.7222726231881069, 2.722272623188104, 0.0, 0.0, -3.444545246376211 } } };
    alignas(32) static const double FE45_C0_F_Q4[3][4][6] =
        { { { 0.0, 0.8013460293699309, -0.05979028222412166, 0.2584442528541909, 0.0, 0.0 },
            { 0.0, 0.2277840767909521, -0.1121969667939041, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.1121969667939041, 0.227784076790952, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.05979028222412169, 0.8013460293699309, 0.2584442528541908, 0.0, 0.0 } },
          { { 0.8013460293699309, 0.0, -0.05979028222412166, 0.0, 0.2584442528541908, 0.0 },
            { 0.2277840767909521, 0.0, -0.1121969667939041, 0.0, 0.8844128900029518, 0.0 },
            { -0.1121969667939041, 0.0, 0.2277840767909521, 0.0, 0.8844128900029519, 0.0 },
            { -0.05979028222412166, 0.0, 0.8013460293699309, 0.0, 0.2584442528541906, 0.0 } },
          { { 0.8013460293699309, -0.05979028222412169, 0.0, 0.0, 0.0, 0.2584442528541908 },
            { 0.2277840767909521, -0.1121969667939041, 0.0, 0.0, 0.0, 0.8844128900029519 },
            { -0.1121969667939041, 0.2277840767909522, 0.0, 0.0, 0.0, 0.884412890002952 },
            { -0.05979028222412169, 0.8013460293699308, 0.0, 0.0, 0.0, 0.2584442528541909 } } };
    alignas(32) static const double FE47_C2_D01_F_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE47_C2_F_Q4[3][4][3] =
        { { { 0.0, 0.9305681557970263, 0.06943184420297369 },
            { 0.0, 0.6699905217924281, 0.3300094782075718 },
            { 0.0, 0.3300094782075719, 0.6699905217924279 },
            { 0.0, 0.06943184420297382, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.0, 0.06943184420297369 },
            { 0.6699905217924281, 0.0, 0.3300094782075718 },
            { 0.3300094782075719, 0.0, 0.669990521792428 },
            { 0.06943184420297382, 0.0, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.06943184420297367, 0.0 },
            { 0.6699905217924281, 0.3300094782075718, 0.0 },
            { 0.3300094782075719, 0.6699905217924281, 0.0 },
            { 0.06943184420297374, 0.9305681557970263, 0.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE47_C2_D01_F_Q4[0][0][0] + coordinate_dofs[2] * FE47_C2_D01_F_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE47_C2_D01_F_Q4[0][0][0] + coordinate_dofs[5] * FE47_C2_D01_F_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE47_C2_D01_F_Q4[0][0][0] + coordinate_dofs[4] * FE47_C2_D01_F_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE47_C2_D01_F_Q4[0][0][0] + coordinate_dofs[3] * FE47_C2_D01_F_Q4[0][0][1];
    const double w1_d1_c3 = w[1][15] * FE47_C2_D01_F_Q4[0][0][0] + w[1][17] * FE47_C2_D01_F_Q4[0][0][1];
    double w1_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c3 += w[1][ic + 15] * FE47_C2_D01_F_Q4[0][0][ic];
    const double w1_d1_c4 = w[1][18] * FE47_C2_D01_F_Q4[0][0][0] + w[1][20] * FE47_C2_D01_F_Q4[0][0][1];
    double w1_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c4 += w[1][ic + 18] * FE47_C2_D01_F_Q4[0][0][ic];
    alignas(32) double sp[74];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = triangle_reference_facet_normals[facet][1] * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = triangle_reference_facet_normals[facet][0] * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet][0] * sp[9];
    sp[11] = -1 * J_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[20] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[21] = sp[19] + sp[20];
    sp[22] = std::sqrt(sp[21]);
    sp[23] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[24] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[25] = sp[23] + sp[24];
    sp[26] = std::sqrt(sp[25]);
    sp[27] = sp[22] * sp[26];
    sp[28] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[29] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[30] = sp[28] + sp[29];
    sp[31] = std::sqrt(sp[30]);
    sp[32] = sp[27] * sp[31];
    sp[33] = triangle_reference_cell_volume * sp[2];
    sp[34] = std::abs(sp[33]);
    sp[35] = sp[32] / (4.0 * sp[34]);
    sp[36] = sp[3] * sp[17];
    sp[37] = sp[5] * sp[17];
    sp[38] = sp[11] * sp[18];
    sp[39] = sp[9] * sp[18];
    sp[40] = sp[36] + sp[38];
    sp[41] = sp[37] + sp[39];
    sp[42] = sp[11] + sp[11];
    sp[43] = sp[9] + sp[9];
    sp[44] = sp[5] + sp[5];
    sp[45] = sp[3] + sp[3];
    sp[46] = w1_d1_c3 * sp[3];
    sp[47] = w1_d0_c3 * sp[5];
    sp[48] = sp[46] + sp[47];
    sp[49] = sp[48] * sp[17];
    sp[50] = w1_d0_c3 * sp[9];
    sp[51] = w1_d1_c3 * sp[11];
    sp[52] = sp[50] + sp[51];
    sp[53] = sp[52] * sp[18];
    sp[54] = sp[49] + sp[53];
    sp[55] = w1_d1_c4 * sp[3];
    sp[56] = w1_d0_c4 * sp[5];
    sp[57] = sp[55] + sp[56];
    sp[58] = sp[57] * sp[17];
    sp[59] = w1_d0_c4 * sp[9];
    sp[60] = w1_d1_c4 * sp[11];
    sp[61] = sp[59] + sp[60];
    sp[62] = sp[61] * sp[18];
    sp[63] = sp[58] + sp[62];
    sp[64] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[65] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[66] = sp[64] + sp[65];
    sp[67] = sp[66] * sp[66];
    sp[68] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[69] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[70] = sp[68] + sp[69];
    sp[71] = sp[70] * sp[70];
    sp[72] = sp[67] + sp[71];
    sp[73] = std::sqrt(sp[72]);
    alignas(32) double BF0[6][6] = {};
    alignas(32) double BF1[6][5] = {};
    alignas(32) double BF2[6][5] = {};
    alignas(32) double BF3[6][6] = {};
    alignas(32) double BF4[6][5] = {};
    alignas(32) double BF5[6][5] = {};
    alignas(32) double BF6[6][3] = {};
    alignas(32) double BF7[6][3] = {};
    alignas(32) double BF8[5][6] = {};
    alignas(32) double BF9[5][6] = {};
    alignas(32) double BF10[5][3] = {};
    alignas(32) double BF11[5][3] = {};
    alignas(32) double BF12[5][6] = {};
    alignas(32) double BF13[5][6] = {};
    alignas(32) double BF14[5][3] = {};
    alignas(32) double BF15[5][3] = {};
    alignas(32) double BF16[6][6] = {};
    alignas(32) double BF17[6][5] = {};
    alignas(32) double BF18[6][5] = {};
    alignas(32) double BF19[6][6] = {};
    alignas(32) double BF20[6][5] = {};
    alignas(32) double BF21[6][5] = {};
    alignas(32) double BF22[6][3] = {};
    alignas(32) double BF23[6][3] = {};
    alignas(32) double BF24[5][6] = {};
    alignas(32) double BF25[5][6] = {};
    alignas(32) double BF26[5][3] = {};
    alignas(32) double BF27[5][3] = {};
    alignas(32) double BF28[5][6] = {};
    alignas(32) double BF29[5][6] = {};
    alignas(32) double BF30[5][3] = {};
    alignas(32) double BF31[5][3] = {};
    alignas(32) double TP0[3] = {};
    alignas(32) double TP1[3] = {};
    alignas(32) double TP2[3] = {};
    alignas(32) double BF32[3][3] = {};
    alignas(32) double TP3[3] = {};
    alignas(32) double TP4[3] = {};
    alignas(32) double BF33[3][3] = {};
    alignas(32) double TP5[3] = {};
    alignas(32) double TP6[3] = {};
    alignas(32) double TP7[3] = {};
    alignas(32) double TP8[3] = {};
    alignas(32) double TP9[3] = {};
    alignas(32) double BF34[3][3] = {};
    alignas(32) double BF35[3][3] = {};
    alignas(32) double TP10[3] = {};
    alignas(32) double TP11[3] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w1_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c3 += w[1][ic + 15] * FE47_C2_F_Q4[facet][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3 += w[3][ic] * FE47_C2_F_Q4[facet][iq][ic];
        double w1_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c4 += w[1][ic + 18] * FE47_C2_F_Q4[facet][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE45_C0_F_Q4[facet][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE45_C0_F_Q4[facet][iq][ic];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c0 += w[1][ic] * FE45_C0_F_Q4[facet][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c1 += w[1][ic + 6] * FE45_C0_F_Q4[facet][iq][ic];
        const double w1_d1_c0 = w[1][0] * FE45_C0_D01_F_Q4[facet][iq][0] + w[1][2] * FE45_C0_D01_F_Q4[facet][iq][1] + w[1][3] * FE45_C0_D01_F_Q4[facet][iq][2] + w[1][4] * FE45_C0_D01_F_Q4[facet][iq][3] + w[1][5] * FE45_C0_D01_F_Q4[facet][iq][4];
        const double w1_d0_c0 = w[1][0] * FE45_C0_D10_F_Q4[facet][iq][0] + w[1][1] * FE45_C0_D10_F_Q4[facet][iq][1] + w[1][3] * FE45_C0_D10_F_Q4[facet][iq][2] + w[1][4] * FE45_C0_D10_F_Q4[facet][iq][3] + w[1][5] * FE45_C0_D10_F_Q4[facet][iq][4];
        const double w1_d0_c1 = w[1][6] * FE45_C0_D10_F_Q4[facet][iq][0] + w[1][7] * FE45_C0_D10_F_Q4[facet][iq][1] + w[1][9] * FE45_C0_D10_F_Q4[facet][iq][2] + w[1][10] * FE45_C0_D10_F_Q4[facet][iq][3] + w[1][11] * FE45_C0_D10_F_Q4[facet][iq][4];
        const double w1_d1_c1 = w[1][6] * FE45_C0_D01_F_Q4[facet][iq][0] + w[1][8] * FE45_C0_D01_F_Q4[facet][iq][1] + w[1][9] * FE45_C0_D01_F_Q4[facet][iq][2] + w[1][10] * FE45_C0_D01_F_Q4[facet][iq][3] + w[1][11] * FE45_C0_D01_F_Q4[facet][iq][4];
        alignas(32) double sv4[304];
        sv4[0] = std::exp(w3);
        sv4[1] = w1_c3 * (0.09 * sv4[0]);
        sv4[2] = w1_c3 * sv4[1];
        sv4[3] = w1_c4 * w1_c4;
        sv4[4] = std::sqrt(1e-8 + sv4[3]);
        sv4[5] = w1_c4 + sv4[4];
        sv4[6] = sv4[2] / (0.5 * sv4[5]);
        sv4[7] = w2_c1 * sp[17];
        sv4[8] = w2_c0 * sp[18];
        sv4[9] = sv4[7] + sv4[8];
        sv4[10] = std::tanh(100.0 * sv4[9]);
        sv4[11] = (0.0001 + sv4[6] / 1.3) * (100000.0 * (0.5 + -1 * (0.5 * sv4[10])));
        sv4[12] = sv4[11] * (1.0 / (2.0 * sp[35]));
        sv4[13] = sv4[1] + sv4[1];
        sv4[14] = w1_c4 + w1_c4;
        sv4[15] = sv4[14] / (2 * sv4[4]);
        sv4[16] = 0.5 * (1.0 + sv4[15]) * sv4[6];
        sv4[17] = -1 * sv4[16] / (0.5 * sv4[5]);
        sv4[18] = sv4[13] / (0.5 * sv4[5]);
        sv4[19] = 100000.0 * (0.5 + -1 * (0.5 * sv4[10])) * (sv4[17] / 1.3);
        sv4[20] = 100000.0 * (0.5 + -1 * (0.5 * sv4[10])) * (sv4[18] / 1.3);
        sv4[21] = sv4[19] * (1.0 / (2.0 * sp[35]));
        sv4[22] = sv4[20] * (1.0 / (2.0 * sp[35]));
        sv4[23] = w1_c4 * sv4[21];
        sv4[24] = w1_c4 * sv4[22];
        sv4[25] = sv4[23] + sv4[12];
        sv4[26] = (0.0001 + sv4[6]) * (100000.0 * (0.5 + -1 * (0.5 * sv4[10])));
        sv4[27] = sv4[26] * (1.0 / (2.0 * sp[35]));
        sv4[28] = 100000.0 * (0.5 + -1 * (0.5 * sv4[10])) * sv4[17];
        sv4[29] = 100000.0 * (0.5 + -1 * (0.5 * sv4[10])) * sv4[18];
        sv4[30] = sv4[28] * (1.0 / (2.0 * sp[35]));
        sv4[31] = sv4[29] * (1.0 / (2.0 * sp[35]));
        sv4[32] = w1_c3 * sv4[30];
        sv4[33] = w1_c3 * sv4[31];
        sv4[34] = sv4[33] + sv4[27];
        sv4[35] = (0.5 + -1 * (0.5 * sv4[10])) * (0.0001 + sv4[6]);
        sv4[36] = sp[40] * sv4[35];
        sv4[37] = sp[41] * sv4[35];
        sv4[38] = (0.5 + -1 * (0.5 * sv4[10])) * sv4[17];
        sv4[39] = (0.5 + -1 * (0.5 * sv4[10])) * sv4[18];
        sv4[40] = sp[40] * sv4[38];
        sv4[41] = sp[40] * sv4[39];
        sv4[42] = sp[41] * sv4[38];
        sv4[43] = sp[41] * sv4[39];
        sv4[44] = w1_c3 * sv4[40];
        sv4[45] = w1_c3 * sv4[42];
        sv4[46] = w1_c3 * sv4[41];
        sv4[47] = w1_c3 * sv4[43];
        sv4[48] = sv4[36] + sv4[46];
        sv4[49] = sv4[37] + sv4[47];
        sv4[50] = (0.5 + -1 * (0.5 * sv4[10])) * (0.0001 + sv4[6] / 1.3);
        sv4[51] = sp[40] * sv4[50];
        sv4[52] = sp[41] * sv4[50];
        sv4[53] = (0.5 + -1 * (0.5 * sv4[10])) * (sv4[17] / 1.3);
        sv4[54] = (0.5 + -1 * (0.5 * sv4[10])) * (sv4[18] / 1.3);
        sv4[55] = sp[40] * sv4[53];
        sv4[56] = sp[40] * sv4[54];
        sv4[57] = sp[41] * sv4[53];
        sv4[58] = sp[41] * sv4[54];
        sv4[59] = w1_c4 * sv4[55];
        sv4[60] = w1_c4 * sv4[57];
        sv4[61] = w1_c4 * sv4[56];
        sv4[62] = w1_c4 * sv4[58];
        sv4[63] = sv4[51] + sv4[59];
        sv4[64] = sv4[52] + sv4[60];
        sv4[65] = 2.0 * (0.0001 + sv4[6]) * (sp[3] / 2);
        sv4[66] = 2.0 * (0.0001 + sv4[6]) * (sp[5] / 2);
        sv4[67] = 2.0 * (0.0001 + sv4[6]) * (sp[9] / 2);
        sv4[68] = 2.0 * (0.0001 + sv4[6]) * (sp[11] / 2);
        sv4[69] = sv4[65] * sp[17];
        sv4[70] = sv4[66] * sp[17];
        sv4[71] = sv4[67] * sp[17];
        sv4[72] = sv4[68] * sp[17];
        sv4[73] = 2.0 * (0.0001 + sv4[6]) * (sp[42] / 2);
        sv4[74] = 2.0 * (0.0001 + sv4[6]) * (sp[43] / 2);
        sv4[75] = sv4[73] * sp[18];
        sv4[76] = sv4[74] * sp[18];
        sv4[77] = sv4[69] + sv4[75];
        sv4[78] = sv4[70] + sv4[76];
        sv4[79] = sv4[77] * (-1 * sp[17]);
        sv4[80] = sv4[78] * (-1 * sp[17]);
        sv4[81] = -1 * sp[17] * sv4[71];
        sv4[82] = -1 * sp[17] * sv4[72];
        sv4[83] = 2.0 * (0.0001 + sv4[6]) * (sp[44] / 2);
        sv4[84] = 2.0 * (0.0001 + sv4[6]) * (sp[45] / 2);
        sv4[85] = sv4[83] * sp[17];
        sv4[86] = sv4[84] * sp[17];
        sv4[87] = sv4[65] * sp[18];
        sv4[88] = sv4[66] * sp[18];
        sv4[89] = sv4[67] * sp[18];
        sv4[90] = sv4[68] * sp[18];
        sv4[91] = sv4[85] + sv4[89];
        sv4[92] = sv4[86] + sv4[90];
        sv4[93] = sv4[87] * sp[18];
        sv4[94] = sv4[88] * sp[18];
        sv4[95] = sv4[91] * sp[18];
        sv4[96] = sv4[92] * sp[18];
        sv4[97] = sv4[79] + sv4[93];
        sv4[98] = sv4[80] + sv4[94];
        sv4[99] = sv4[81] + sv4[95];
        sv4[100] = sv4[82] + sv4[96];
        sv4[101] = sv4[97] * (-1 * sp[17]);
        sv4[102] = sv4[98] * (-1 * sp[17]);
        sv4[103] = sv4[99] * (-1 * sp[17]);
        sv4[104] = sv4[100] * (-1 * sp[17]);
        sv4[105] = sv4[97] * sp[18];
        sv4[106] = sv4[98] * sp[18];
        sv4[107] = sv4[99] * sp[18];
        sv4[108] = sv4[100] * sp[18];
        sv4[109] = w1_c0 + -1 * w[0][0];
        sv4[110] = sv4[109] * (-1 * sp[17]);
        sv4[111] = w1_c1 + -1 * w[0][1];
        sv4[112] = sv4[111] * sp[18];
        sv4[113] = sv4[110] + sv4[112];
        sv4[114] = 2.0 * sv4[17] * (sp[3] / 2);
        sv4[115] = 2.0 * sv4[17] * (sp[5] / 2);
        sv4[116] = 2.0 * sv4[17] * (sp[9] / 2);
        sv4[117] = 2.0 * sv4[17] * (sp[11] / 2);
        sv4[118] = 2.0 * sv4[18] * (sp[3] / 2);
        sv4[119] = 2.0 * sv4[18] * (sp[5] / 2);
        sv4[120] = 2.0 * sv4[18] * (sp[9] / 2);
        sv4[121] = 2.0 * sv4[18] * (sp[11] / 2);
        sv4[122] = sv4[114] * sp[17];
        sv4[123] = sv4[115] * sp[17];
        sv4[124] = sv4[116] * sp[17];
        sv4[125] = sv4[117] * sp[17];
        sv4[126] = sv4[118] * sp[17];
        sv4[127] = sv4[119] * sp[17];
        sv4[128] = sv4[120] * sp[17];
        sv4[129] = sv4[121] * sp[17];
        sv4[130] = 2.0 * sv4[17] * (sp[42] / 2);
        sv4[131] = 2.0 * sv4[17] * (sp[43] / 2);
        sv4[132] = 2.0 * sv4[18] * (sp[42] / 2);
        sv4[133] = 2.0 * sv4[18] * (sp[43] / 2);
        sv4[134] = sv4[130] * sp[18];
        sv4[135] = sv4[131] * sp[18];
        sv4[136] = sv4[132] * sp[18];
        sv4[137] = sv4[133] * sp[18];
        sv4[138] = sv4[122] + sv4[134];
        sv4[139] = sv4[123] + sv4[135];
        sv4[140] = sv4[126] + sv4[136];
        sv4[141] = sv4[127] + sv4[137];
        sv4[142] = sv4[138] * (-1 * sp[17]);
        sv4[143] = sv4[139] * (-1 * sp[17]);
        sv4[144] = -1 * sp[17] * sv4[124];
        sv4[145] = -1 * sp[17] * sv4[125];
        sv4[146] = sv4[140] * (-1 * sp[17]);
        sv4[147] = sv4[141] * (-1 * sp[17]);
        sv4[148] = -1 * sp[17] * sv4[128];
        sv4[149] = -1 * sp[17] * sv4[129];
        sv4[150] = 2.0 * sv4[17] * (sp[44] / 2);
        sv4[151] = 2.0 * sv4[17] * (sp[45] / 2);
        sv4[152] = 2.0 * sv4[18] * (sp[44] / 2);
        sv4[153] = 2.0 * sv4[18] * (sp[45] / 2);
        sv4[154] = sv4[150] * sp[17];
        sv4[155] = sv4[151] * sp[17];
        sv4[156] = sv4[152] * sp[17];
        sv4[157] = sv4[153] * sp[17];
        sv4[158] = sv4[114] * sp[18];
        sv4[159] = sv4[115] * sp[18];
        sv4[160] = sv4[116] * sp[18];
        sv4[161] = sv4[117] * sp[18];
        sv4[162] = sv4[118] * sp[18];
        sv4[163] = sv4[119] * sp[18];
        sv4[164] = sv4[120] * sp[18];
        sv4[165] = sv4[121] * sp[18];
        sv4[166] = sv4[154] + sv4[160];
        sv4[167] = sv4[155] + sv4[161];
        sv4[168] = sv4[156] + sv4[164];
        sv4[169] = sv4[157] + sv4[165];
        sv4[170] = sv4[158] * sp[18];
        sv4[171] = sv4[159] * sp[18];
        sv4[172] = sv4[166] * sp[18];
        sv4[173] = sv4[167] * sp[18];
        sv4[174] = sv4[162] * sp[18];
        sv4[175] = sv4[163] * sp[18];
        sv4[176] = sv4[168] * sp[18];
        sv4[177] = sv4[169] * sp[18];
        sv4[178] = sv4[142] + sv4[170];
        sv4[179] = sv4[143] + sv4[171];
        sv4[180] = sv4[144] + sv4[172];
        sv4[181] = sv4[145] + sv4[173];
        sv4[182] = sv4[146] + sv4[174];
        sv4[183] = sv4[147] + sv4[175];
        sv4[184] = sv4[148] + sv4[176];
        sv4[185] = sv4[149] + sv4[177];
        sv4[186] = sv4[113] * sv4[178];
        sv4[187] = sv4[113] * sv4[179];
        sv4[188] = sv4[113] * sv4[180];
        sv4[189] = sv4[113] * sv4[181];
        sv4[190] = sv4[113] * sv4[182];
        sv4[191] = sv4[113] * sv4[183];
        sv4[192] = sv4[113] * sv4[184];
        sv4[193] = sv4[113] * sv4[185];
        sv4[194] = sp[54] * sv4[38];
        sv4[195] = sp[54] * sv4[39];
        sv4[196] = -1 * sv4[194] + sv4[32];
        sv4[197] = sv4[34] + -1 * sv4[195];
        sv4[198] = sp[63] * sv4[53];
        sv4[199] = sp[63] * sv4[54];
        sv4[200] = sv4[196] + -1 * sv4[198];
        sv4[201] = sv4[197] + -1 * sv4[199];
        sv4[202] = w1_d1_c0 * sp[3];
        sv4[203] = w1_d0_c0 * sp[5];
        sv4[204] = sv4[202] + sv4[203];
        sv4[205] = w1_d0_c1 * sp[9];
        sv4[206] = w1_d1_c1 * sp[11];
        sv4[207] = sv4[205] + sv4[206];
        sv4[208] = sv4[204] + sv4[207];
        sv4[209] = 2.0 * sv4[17] * (sv4[208] / 2);
        sv4[210] = 2.0 * sv4[18] * (sv4[208] / 2);
        sv4[211] = sv4[209] * sp[17];
        sv4[212] = sv4[210] * sp[17];
        sv4[213] = w1_d0_c0 * sp[9];
        sv4[214] = w1_d1_c0 * sp[11];
        sv4[215] = sv4[213] + sv4[214];
        sv4[216] = sv4[215] + sv4[215];
        sv4[217] = 2.0 * sv4[17] * (sv4[216] / 2);
        sv4[218] = 2.0 * sv4[18] * (sv4[216] / 2);
        sv4[219] = sv4[217] * sp[18];
        sv4[220] = sv4[218] * sp[18];
        sv4[221] = sv4[211] + sv4[219];
        sv4[222] = sv4[212] + sv4[220];
        sv4[223] = sv4[221] * (-1 * sp[17]);
        sv4[224] = sv4[222] * (-1 * sp[17]);
        sv4[225] = w1_d1_c1 * sp[3];
        sv4[226] = w1_d0_c1 * sp[5];
        sv4[227] = sv4[225] + sv4[226];
        sv4[228] = sv4[227] + sv4[227];
        sv4[229] = 2.0 * sv4[17] * (sv4[228] / 2);
        sv4[230] = 2.0 * sv4[18] * (sv4[228] / 2);
        sv4[231] = sv4[229] * sp[17];
        sv4[232] = sv4[230] * sp[17];
        sv4[233] = sv4[209] * sp[18];
        sv4[234] = sv4[210] * sp[18];
        sv4[235] = sv4[231] + sv4[233];
        sv4[236] = sv4[232] + sv4[234];
        sv4[237] = sv4[235] * sp[18];
        sv4[238] = sv4[236] * sp[18];
        sv4[239] = sv4[223] + sv4[237];
        sv4[240] = sv4[224] + sv4[238];
        sv4[241] = sv4[239] * (-1 * sp[17]);
        sv4[242] = sv4[240] * (-1 * sp[17]);
        sv4[243] = sv4[239] * sp[18];
        sv4[244] = sv4[240] * sp[18];
        sv4[245] = 100000.0 * (0.0001 + sv4[6]) * (1.0 / (2.0 * sp[35]));
        sv4[246] = sv4[245] * (-1 * sp[17]);
        sv4[247] = sv4[245] * sp[18];
        sv4[248] = 100000.0 * sv4[17] * (1.0 / (2.0 * sp[35]));
        sv4[249] = 100000.0 * sv4[18] * (1.0 / (2.0 * sp[35]));
        sv4[250] = sv4[113] * sv4[248];
        sv4[251] = sv4[113] * sv4[249];
        sv4[252] = sv4[250] * (-1 * sp[17]);
        sv4[253] = sv4[250] * sp[18];
        sv4[254] = sv4[251] * (-1 * sp[17]);
        sv4[255] = sv4[251] * sp[18];
        sv4[256] = sv4[246] * (-1 * sp[17]);
        sv4[257] = sv4[246] * sp[18];
        sv4[258] = -1 * sp[17] * sv4[247];
        sv4[259] = sv4[247] * sp[18];
        sv4[260] = -1 * sv4[241] + sv4[252];
        sv4[261] = -1 * sv4[243] + sv4[253];
        sv4[262] = -1 * sv4[242] + sv4[254];
        sv4[263] = -1 * sv4[244] + sv4[255];
        sv4[264] = sv4[25] * sp[73];
        sv4[265] = sv4[24] * sp[73];
        sv4[266] = sv4[200] * sp[73];
        sv4[267] = -1 * sv4[44] * sp[73];
        sv4[268] = -1 * sv4[45] * sp[73];
        sv4[269] = -1 * sv4[63] * sp[73];
        sv4[270] = -1 * sv4[64] * sp[73];
        sv4[271] = -1 * sv4[186] * sp[73];
        sv4[272] = -1 * sv4[187] * sp[73];
        sv4[273] = -1 * sv4[188] * sp[73];
        sv4[274] = -1 * sv4[189] * sp[73];
        sv4[275] = sv4[260] * sp[73];
        sv4[276] = sv4[261] * sp[73];
        sv4[277] = sv4[201] * sp[73];
        sv4[278] = -1 * sv4[48] * sp[73];
        sv4[279] = -1 * sv4[49] * sp[73];
        sv4[280] = -1 * sv4[61] * sp[73];
        sv4[281] = -1 * sv4[62] * sp[73];
        sv4[282] = -1 * sv4[190] * sp[73];
        sv4[283] = -1 * sv4[191] * sp[73];
        sv4[284] = -1 * sv4[192] * sp[73];
        sv4[285] = -1 * sv4[193] * sp[73];
        sv4[286] = sv4[262] * sp[73];
        sv4[287] = sv4[263] * sp[73];
        sv4[288] = -1 * sv4[36] * sp[73];
        sv4[289] = -1 * sv4[37] * sp[73];
        sv4[290] = -1 * sv4[51] * sp[73];
        sv4[291] = -1 * sv4[52] * sp[73];
        sv4[292] = -1 * sv4[101] * sp[73];
        sv4[293] = -1 * sv4[102] * sp[73];
        sv4[294] = -1 * sv4[103] * sp[73];
        sv4[295] = -1 * sv4[104] * sp[73];
        sv4[296] = sv4[256] * sp[73];
        sv4[297] = sv4[257] * sp[73];
        sv4[298] = -1 * sv4[105] * sp[73];
        sv4[299] = -1 * sv4[106] * sp[73];
        sv4[300] = -1 * sv4[107] * sp[73];
        sv4[301] = -1 * sv4[108] * sp[73];
        sv4[302] = sv4[258] * sp[73];
        sv4[303] = sv4[259] * sp[73];
        const double fw0 = sv4[296] * weights4[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE45_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF0[i][j] += TF0[i] * FE45_C0_F_Q4[facet][iq][j];
        const double fw1 = sv4[293] * weights4[iq];
        alignas(32) double TF1[6];
        for (int i = 0; i < 6; ++i)
            TF1[i] = fw1 * FE45_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF1[i][j] += TF1[i] * FE45_C0_D10_F_Q4[facet][iq][j];
        const double fw2 = sv4[292] * weights4[iq];
        alignas(32) double TF2[6];
        for (int i = 0; i < 6; ++i)
            TF2[i] = fw2 * FE45_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF2[i][j] += TF2[i] * FE45_C0_D01_F_Q4[facet][iq][j];
        const double fw3 = sv4[302] * weights4[iq];
        alignas(32) double TF3[6];
        for (int i = 0; i < 6; ++i)
            TF3[i] = fw3 * FE45_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF3[i][j] += TF3[i] * FE45_C0_F_Q4[facet][iq][j];
        const double fw4 = sv4[294] * weights4[iq];
        alignas(32) double TF4[6];
        for (int i = 0; i < 6; ++i)
            TF4[i] = fw4 * FE45_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF4[i][j] += TF4[i] * FE45_C0_D10_F_Q4[facet][iq][j];
        const double fw5 = sv4[295] * weights4[iq];
        alignas(32) double TF5[6];
        for (int i = 0; i < 6; ++i)
            TF5[i] = fw5 * FE45_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF5[i][j] += TF5[i] * FE45_C0_D01_F_Q4[facet][iq][j];
        const double fw6 = sv4[286] * weights4[iq];
        alignas(32) double TF6[6];
        for (int i = 0; i < 6; ++i)
            TF6[i] = fw6 * FE45_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF6[i][j] += TF6[i] * FE47_C2_F_Q4[facet][iq][j];
        const double fw7 = sv4[275] * weights4[iq];
        alignas(32) double TF7[6];
        for (int i = 0; i < 6; ++i)
            TF7[i] = fw7 * FE45_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF7[i][j] += TF7[i] * FE47_C2_F_Q4[facet][iq][j];
        alignas(32) double TF8[5];
        for (int i = 0; i < 5; ++i)
            TF8[i] = fw1 * FE45_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF8[i][j] += TF8[i] * FE45_C0_F_Q4[facet][iq][j];
        const double fw8 = sv4[299] * weights4[iq];
        alignas(32) double TF9[5];
        for (int i = 0; i < 5; ++i)
            TF9[i] = fw8 * FE45_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF9[i][j] += TF9[i] * FE45_C0_F_Q4[facet][iq][j];
        const double fw9 = sv4[283] * weights4[iq];
        alignas(32) double TF10[5];
        for (int i = 0; i < 5; ++i)
            TF10[i] = fw9 * FE45_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF10[i][j] += TF10[i] * FE47_C2_F_Q4[facet][iq][j];
        const double fw10 = sv4[272] * weights4[iq];
        alignas(32) double TF11[5];
        for (int i = 0; i < 5; ++i)
            TF11[i] = fw10 * FE45_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF11[i][j] += TF11[i] * FE47_C2_F_Q4[facet][iq][j];
        alignas(32) double TF12[5];
        for (int i = 0; i < 5; ++i)
            TF12[i] = fw2 * FE45_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF12[i][j] += TF12[i] * FE45_C0_F_Q4[facet][iq][j];
        const double fw11 = sv4[298] * weights4[iq];
        alignas(32) double TF13[5];
        for (int i = 0; i < 5; ++i)
            TF13[i] = fw11 * FE45_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF13[i][j] += TF13[i] * FE45_C0_F_Q4[facet][iq][j];
        const double fw12 = sv4[282] * weights4[iq];
        alignas(32) double TF14[5];
        for (int i = 0; i < 5; ++i)
            TF14[i] = fw12 * FE45_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF14[i][j] += TF14[i] * FE47_C2_F_Q4[facet][iq][j];
        const double fw13 = sv4[271] * weights4[iq];
        alignas(32) double TF15[5];
        for (int i = 0; i < 5; ++i)
            TF15[i] = fw13 * FE45_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF15[i][j] += TF15[i] * FE47_C2_F_Q4[facet][iq][j];
        const double fw14 = sv4[297] * weights4[iq];
        alignas(32) double TF16[6];
        for (int i = 0; i < 6; ++i)
            TF16[i] = fw14 * FE45_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF16[i][j] += TF16[i] * FE45_C0_F_Q4[facet][iq][j];
        alignas(32) double TF17[6];
        for (int i = 0; i < 6; ++i)
            TF17[i] = fw8 * FE45_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF17[i][j] += TF17[i] * FE45_C0_D10_F_Q4[facet][iq][j];
        alignas(32) double TF18[6];
        for (int i = 0; i < 6; ++i)
            TF18[i] = fw11 * FE45_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF18[i][j] += TF18[i] * FE45_C0_D01_F_Q4[facet][iq][j];
        const double fw15 = sv4[303] * weights4[iq];
        alignas(32) double TF19[6];
        for (int i = 0; i < 6; ++i)
            TF19[i] = fw15 * FE45_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF19[i][j] += TF19[i] * FE45_C0_F_Q4[facet][iq][j];
        const double fw16 = sv4[300] * weights4[iq];
        alignas(32) double TF20[6];
        for (int i = 0; i < 6; ++i)
            TF20[i] = fw16 * FE45_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF20[i][j] += TF20[i] * FE45_C0_D10_F_Q4[facet][iq][j];
        const double fw17 = sv4[301] * weights4[iq];
        alignas(32) double TF21[6];
        for (int i = 0; i < 6; ++i)
            TF21[i] = fw17 * FE45_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF21[i][j] += TF21[i] * FE45_C0_D01_F_Q4[facet][iq][j];
        const double fw18 = sv4[287] * weights4[iq];
        alignas(32) double TF22[6];
        for (int i = 0; i < 6; ++i)
            TF22[i] = fw18 * FE45_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF22[i][j] += TF22[i] * FE47_C2_F_Q4[facet][iq][j];
        const double fw19 = sv4[276] * weights4[iq];
        alignas(32) double TF23[6];
        for (int i = 0; i < 6; ++i)
            TF23[i] = fw19 * FE45_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF23[i][j] += TF23[i] * FE47_C2_F_Q4[facet][iq][j];
        alignas(32) double TF24[5];
        for (int i = 0; i < 5; ++i)
            TF24[i] = fw4 * FE45_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF24[i][j] += TF24[i] * FE45_C0_F_Q4[facet][iq][j];
        alignas(32) double TF25[5];
        for (int i = 0; i < 5; ++i)
            TF25[i] = fw16 * FE45_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF25[i][j] += TF25[i] * FE45_C0_F_Q4[facet][iq][j];
        const double fw20 = sv4[284] * weights4[iq];
        alignas(32) double TF26[5];
        for (int i = 0; i < 5; ++i)
            TF26[i] = fw20 * FE45_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF26[i][j] += TF26[i] * FE47_C2_F_Q4[facet][iq][j];
        const double fw21 = sv4[273] * weights4[iq];
        alignas(32) double TF27[5];
        for (int i = 0; i < 5; ++i)
            TF27[i] = fw21 * FE45_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF27[i][j] += TF27[i] * FE47_C2_F_Q4[facet][iq][j];
        alignas(32) double TF28[5];
        for (int i = 0; i < 5; ++i)
            TF28[i] = fw5 * FE45_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF28[i][j] += TF28[i] * FE45_C0_F_Q4[facet][iq][j];
        alignas(32) double TF29[5];
        for (int i = 0; i < 5; ++i)
            TF29[i] = fw17 * FE45_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF29[i][j] += TF29[i] * FE45_C0_F_Q4[facet][iq][j];
        const double fw22 = sv4[285] * weights4[iq];
        alignas(32) double TF30[5];
        for (int i = 0; i < 5; ++i)
            TF30[i] = fw22 * FE45_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF30[i][j] += TF30[i] * FE47_C2_F_Q4[facet][iq][j];
        const double fw23 = sv4[274] * weights4[iq];
        alignas(32) double TF31[5];
        for (int i = 0; i < 5; ++i)
            TF31[i] = fw23 * FE45_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF31[i][j] += TF31[i] * FE47_C2_F_Q4[facet][iq][j];
        const double fw24 = sv4[279] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP0[j] += fw24 * FE47_C2_F_Q4[facet][iq][j];
        const double fw25 = sv4[268] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP1[j] += fw25 * FE47_C2_F_Q4[facet][iq][j];
        const double fw26 = sv4[289] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP2[i] += fw26 * FE47_C2_F_Q4[facet][iq][i];
        const double fw27 = sv4[277] * weights4[iq];
        alignas(32) double TF32[3];
        for (int i = 0; i < 3; ++i)
            TF32[i] = fw27 * FE47_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF32[i][j] += TF32[i] * FE47_C2_F_Q4[facet][iq][j];
        const double fw28 = sv4[288] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP3[i] += fw28 * FE47_C2_F_Q4[facet][iq][i];
        const double fw29 = sv4[291] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP4[i] += fw29 * FE47_C2_F_Q4[facet][iq][i];
        const double fw30 = sv4[266] * weights4[iq];
        alignas(32) double TF33[3];
        for (int i = 0; i < 3; ++i)
            TF33[i] = fw30 * FE47_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF33[i][j] += TF33[i] * FE47_C2_F_Q4[facet][iq][j];
        const double fw31 = sv4[290] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP5[i] += fw31 * FE47_C2_F_Q4[facet][iq][i];
        const double fw32 = sv4[278] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP6[j] += fw32 * FE47_C2_F_Q4[facet][iq][j];
        const double fw33 = sv4[267] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP7[j] += fw33 * FE47_C2_F_Q4[facet][iq][j];
        const double fw34 = sv4[281] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP8[j] += fw34 * FE47_C2_F_Q4[facet][iq][j];
        const double fw35 = sv4[270] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP9[j] += fw35 * FE47_C2_F_Q4[facet][iq][j];
        const double fw36 = sv4[265] * weights4[iq];
        alignas(32) double TF34[3];
        for (int i = 0; i < 3; ++i)
            TF34[i] = fw36 * FE47_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF34[i][j] += TF34[i] * FE47_C2_F_Q4[facet][iq][j];
        const double fw37 = sv4[264] * weights4[iq];
        alignas(32) double TF35[3];
        for (int i = 0; i < 3; ++i)
            TF35[i] = fw37 * FE47_C2_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF35[i][j] += TF35[i] * FE47_C2_F_Q4[facet][iq][j];
        const double fw38 = sv4[280] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP10[j] += fw38 * FE47_C2_F_Q4[facet][iq][j];
        const double fw39 = sv4[269] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP11[j] += fw39 * FE47_C2_F_Q4[facet][iq][j];
    }
    std::fill(A, A + 441, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    static const int DM4[2] = { 15, 17 };
    static const int DM5[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + j] += BF0[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM0[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM1[j]] += BF2[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + (j + 6)] += BF3[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM2[j]] += BF4[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM3[j]] += BF5[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + (j + 15)] += BF6[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + (j + 18)] += BF7[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM0[i] + j] += BF8[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM0[i] + (j + 6)] += BF9[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + (j + 15)] += BF10[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + (j + 18)] += BF11[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM1[i] + j] += BF12[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM1[i] + (j + 6)] += BF13[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + (j + 15)] += BF14[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + (j + 18)] += BF15[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + j] += BF16[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM0[j]] += BF17[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM1[j]] += BF18[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + (j + 6)] += BF19[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM2[j]] += BF20[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM3[j]] += BF21[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + (j + 15)] += BF22[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + (j + 18)] += BF23[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM2[i] + j] += BF24[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM2[i] + (j + 6)] += BF25[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + (j + 15)] += BF26[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + (j + 18)] += BF27[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM3[i] + j] += BF28[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM3[i] + (j + 6)] += BF29[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + (j + 15)] += BF30[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + (j + 18)] += BF31[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += FE47_C2_D01_F_Q4[0][0][i] * TP0[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += FE47_C2_D01_F_Q4[0][0][i] * TP1[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 15)] += FE47_C2_D01_F_Q4[0][0][j] * TP2[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += BF32[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM4[j]] += FE47_C2_D01_F_Q4[0][0][j] * TP3[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 18)] += FE47_C2_D01_F_Q4[0][0][j] * TP4[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += BF33[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM5[j]] += FE47_C2_D01_F_Q4[0][0][j] * TP5[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + (j + 15)] += FE47_C2_D01_F_Q4[0][0][i] * TP6[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + (j + 18)] += FE47_C2_D01_F_Q4[0][0][i] * TP7[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += FE47_C2_D01_F_Q4[0][0][i] * TP8[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += FE47_C2_D01_F_Q4[0][0][i] * TP9[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += BF34[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += BF35[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 15)] += FE47_C2_D01_F_Q4[0][0][i] * TP10[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 18)] += FE47_C2_D01_F_Q4[0][0][i] * TP11[j];
  }

};


class ransnonlinear_form_0: public ufc::form
{
public:

  ransnonlinear_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~ransnonlinear_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "5170caf9c638b0aa6c8c97984ded690867c0e8a02fea8fcc8fceaabc13806d2741a2e3892078c8f4508315bde2116e232af138ed1b3a5ee5605107035c694e01";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 4;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 4)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new ransnonlinear_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new ransnonlinear_dofmap_3();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new ransnonlinear_coordinate_mapping_3();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ransnonlinear_finite_element_6();
    case 1:
        return new ransnonlinear_finite_element_1();
    case 2:
        return new ransnonlinear_finite_element_6();
    case 3:
        return new ransnonlinear_finite_element_6();
    case 4:
        return new ransnonlinear_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ransnonlinear_dofmap_6();
    case 1:
        return new ransnonlinear_dofmap_1();
    case 2:
        return new ransnonlinear_dofmap_6();
    case 3:
        return new ransnonlinear_dofmap_6();
    case 4:
        return new ransnonlinear_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 4;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 3:
        return new ransnonlinear_exterior_facet_integral_0_3();
    default:
        return nullptr;
    }
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new ransnonlinear_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class ransnonlinear_form_1: public ufc::form
{
public:

  ransnonlinear_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~ransnonlinear_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "1ee60bc363cfebec4385c3aa0fcb2a2a15fe6704ce46f4745f5f51eee7776102c0e948139fa402f9e1feeb96e297e8678a90d7ab422645cedff5fd05eebe16e4";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 4;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 4)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new ransnonlinear_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new ransnonlinear_dofmap_3();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new ransnonlinear_coordinate_mapping_3();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ransnonlinear_finite_element_6();
    case 1:
        return new ransnonlinear_finite_element_6();
    case 2:
        return new ransnonlinear_finite_element_1();
    case 3:
        return new ransnonlinear_finite_element_6();
    case 4:
        return new ransnonlinear_finite_element_6();
    case 5:
        return new ransnonlinear_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new ransnonlinear_dofmap_6();
    case 1:
        return new ransnonlinear_dofmap_6();
    case 2:
        return new ransnonlinear_dofmap_1();
    case 3:
        return new ransnonlinear_dofmap_6();
    case 4:
        return new ransnonlinear_dofmap_6();
    case 5:
        return new ransnonlinear_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 4;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 3:
        return new ransnonlinear_exterior_facet_integral_1_3();
    default:
        return nullptr;
    }
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new ransnonlinear_cell_integral_1_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace RANSNONLINEAR
{

class CoefficientSpace_m: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_m(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ransnonlinear_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ransnonlinear_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_m(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ransnonlinear_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ransnonlinear_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u_ff: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u_ff(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ransnonlinear_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ransnonlinear_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u_ff(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ransnonlinear_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ransnonlinear_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_x: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_x(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ransnonlinear_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ransnonlinear_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_x(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ransnonlinear_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ransnonlinear_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_xl: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_xl(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ransnonlinear_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ransnonlinear_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_xl(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ransnonlinear_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ransnonlinear_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ransnonlinear_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ransnonlinear_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ransnonlinear_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ransnonlinear_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_F_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_F_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u_ff Form_F_FunctionSpace_1;

typedef CoefficientSpace_x Form_F_FunctionSpace_2;

typedef CoefficientSpace_xl Form_F_FunctionSpace_3;

typedef CoefficientSpace_m Form_F_FunctionSpace_4;

class Form_F: public dolfin::Form
{
public:

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 4), u_ff(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const ransnonlinear_form_0>();
  }

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(1, 4), u_ff(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    _function_spaces[0] = V0;

    this->u_ff = u_ff;
    this->x = x;
    this->xl = xl;
    this->m = m;

    _ufc_form = std::make_shared<const ransnonlinear_form_0>();
  }

  // Destructor
  ~Form_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "m")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_u_ff;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_x;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_xl;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner u_ff;
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner xl;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_F: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), u_ff(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V0), u_ff(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u_ff = u_ff;
    this->x = x;
    this->xl = xl;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "m")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_u_ff;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_x;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_xl;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u_ff;
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner xl;
  dolfin::MultiMeshCoefficientAssigner m;
};

class Form_J_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ransnonlinear_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ransnonlinear_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ransnonlinear_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ransnonlinear_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ransnonlinear_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ransnonlinear_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<ransnonlinear_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<ransnonlinear_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_J_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u_ff Form_J_FunctionSpace_2;

typedef CoefficientSpace_x Form_J_FunctionSpace_3;

typedef CoefficientSpace_xl Form_J_FunctionSpace_4;

typedef CoefficientSpace_m Form_J_FunctionSpace_5;

class Form_J: public dolfin::Form
{
public:

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 4), u_ff(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const ransnonlinear_form_1>();
  }

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(2, 4), u_ff(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->u_ff = u_ff;
    this->x = x;
    this->xl = xl;
    this->m = m;

    _ufc_form = std::make_shared<const ransnonlinear_form_1>();
  }

  // Destructor
  ~Form_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "m")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_u_ff;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_xl;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner u_ff;
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner xl;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_J: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), u_ff(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u_ff, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V1, V0), u_ff(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u_ff = u_ff;
    this->x = x;
    this->xl = xl;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u_ff")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "m")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u_ff";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_u_ff;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_xl;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u_ff;
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner xl;
  dolfin::MultiMeshCoefficientAssigner m;
};

// Class typedefs
typedef Form_J BilinearForm;
typedef MultiMeshForm_J MultiMeshBilinearForm;
typedef Form_J JacobianForm;
typedef MultiMeshForm_J MultiMeshJacobianForm;
typedef Form_F LinearForm;
typedef MultiMeshForm_F MultiMeshLinearForm;
typedef Form_F ResidualForm;
typedef MultiMeshForm_F MultiMeshResidualForm;
typedef Form_F::TestSpace FunctionSpace;
typedef Form_F::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
