#pragma once

#include <algorithm>
#include <cmath>
#include <fstream>
#include <iostream>
#include <sstream>
#include <type_traits>
#include <string.h>

#include <adolc/adolc.h>

#include <dnsDataInterpreterArray.h>

using namespace std;

void meshGen(int l, int n0, double yCoordinate[]);

template<typename T>
class caseProp {
public:
	int n0, m, l, simpleGridingRatio, deltaTime;
	int convergence = 1;
	double nu, frictionVelocity, reTau;
	double boundaryVelocity[2] = {0};
	double* yCoordinate;
	double* dnsData;
	double* nodeWeight;
	double* initXVelocity;
	double* pressure;
	T* xVelocity;
	T* k;
	T* omega;
	T* nut;
	T* betaML;
	T* R;
	T* solution;
	T* xVelocityGradient;

	double validationVelocity[2305] = {0.0148969760778546, 0.0149917838980048, 0.0159747741342961, 0.00941920133608080 ,-0.00846927922685038 ,0.0116793065132884 ,0.0217105728916473 ,0.0111984277031179 ,0.0175576700991786 ,0.0153808113338324 ,0.00597874075213984 ,0.0128530246709666 ,0.00294257196241362 ,0.0206005563175764 ,0.00114689893030850 ,0.00282999541831968 ,0.00632471305575125 ,-0.0141221416199490 ,0.0306055029281510 ,0.0203745053945620 ,0.0104742168083030 ,0.0326273854009523 ,0.00271013581146302 ,0.0197036755391451 ,0.0192124295839264 ,0.0257197673916550 ,0.0265570859663743 ,0.0156804008267554 ,0.0249293870380373 ,0.0244817098079096 ,0.0333082728752873 ,0.0388644566903948 ,0.0399251329761440 ,0.0210963717801129 ,0.0314070909113043 ,0.0193928295638459 ,0.0212994925851324 ,0.0332664067189665 ,0.0495616030828475 ,0.0274390408624632 ,0.0397498881276006 ,0.0346805559772875 ,0.0490102613881447 ,0.0278463570494776 ,0.0399627746416497 ,0.0460627702111222 ,0.0524438021788087 ,0.0577799189550395 ,0.0440973113317543 ,0.0292221968936239 ,0.0376151816274014 ,0.0353223826668001 ,0.0703428722400204 ,0.0415822811853311 ,0.0561189678370399 ,0.0476140148941174 ,0.0593242042542072 ,0.0436895076343213 ,0.0382151103066124 ,0.0389138407490850 ,0.0589193390985994 ,0.0531634484338117 ,0.0538763651219267 ,0.0709298015064255 ,0.0605521437398418 ,0.0605141105346436 ,0.0753125908997406 ,0.0522905404365045 ,0.0682010441584961 ,0.0704851816507268 ,0.0605966485962205 ,0.0660899008640375 ,0.0531742606851795 ,0.0542525722110141 ,0.0676802471601649 ,0.0747533403222500 ,0.0942850125261624 ,0.0626604932929862 ,0.0721019102457894 ,0.0703028557462905 ,0.0526967708214901 ,0.0685365384606523 ,0.0558785115854488 ,0.0831281552975391 ,0.0667430791767099 ,0.0775233283313932 ,0.0719761107000945 ,0.0813555079464935 ,0.0732159343786627 ,0.0850177532117395 ,0.0884105312360447 ,0.0990345778298155 ,0.0808731646424173 ,0.0623296473056006 ,0.0762159125266339 ,0.0990564432800464 ,0.0756875471161575 ,0.0969171386974057 ,0.0894465980000319 ,0.103471566227189 ,0.0703940000063497 ,0.0889244177402585 ,0.0797212451474020 ,0.121778080307294 ,0.101848488942285 ,0.108284219779166 ,0.0848107974201264 ,0.0916045441889938 ,0.0944641059074981 ,0.109071046178886 ,0.0962060806721236 ,0.106898114581633 ,0.0802628370008885 ,0.0981395000222557 ,0.0943401347484315 ,0.0877034297720080 ,0.109450746509059 ,0.108088840636706 ,0.106501798822445 ,0.0937272205657189 ,0.119235922783416 ,0.112360794106033 ,0.106765339696670 ,0.110881897927516 ,0.108930045650339 ,0.0949448763155321 ,0.110488490284047 ,0.105927334884324 ,0.105345936948327 ,0.104470983443360 ,0.111596428906840 ,0.0978026426411694 ,0.128367294226316 ,0.124822601014555 ,0.120317721483575 ,0.121066289139715 ,0.114329364154359 ,0.133393852821286 ,0.122770825204923 ,0.117853698362128 ,0.139408857684267 ,0.124543289439474 ,0.121795709692792 ,0.125644464022646 ,0.120997737563621 ,0.119171716987563 ,0.156527996921183 ,0.148717975928873 ,0.136134351592383 ,0.121382816406479 ,0.126193319694452 ,0.133977658857686 ,0.144552160616286 ,0.124211955786848 ,0.115128328441949 ,0.124830027071613 ,0.143550108330658 ,0.145022536044329 ,0.146519794189282 ,0.141594153468543 ,0.145627890958619 ,0.139922469833809 ,0.154198216115569 ,0.132854055291292 ,0.151914295564443 ,0.139769906200663 ,0.145801130610360 ,0.155569833459446 ,0.161325906535050 ,0.140650613167348 ,0.165325587091209 ,0.160212431410470 ,0.153824344464573 ,0.153441788021012 ,0.154109936498568 ,0.154145923786483 ,0.158298456244251 ,0.159471903558488 ,0.168110627902116 ,0.176009766867334 ,0.166299144356847 ,0.160422866616113 ,0.169661903570876 ,0.166132272630014 ,0.154891324564334 ,0.175571218311310 ,0.170038619191467 ,0.169207749420995 ,0.173897463355249 ,0.172247063240554 ,0.161106142290446 ,0.169785623271962 ,0.170835453656685 ,0.167863886231912 ,0.190892035946632 ,0.166200706538400 ,0.171005849498899 ,0.169609954509726 ,0.165873876685432 ,0.176579604824607 ,0.176646297700674 ,0.195572725144241 ,0.178666752574863 ,0.171399865871107 ,0.198960572981200 ,0.196156791468908 ,0.182396735490368 ,0.170515402960203 ,0.182013721835530 ,0.185782589642752 ,0.190984682539315 ,0.186494363542235 ,0.194422219129041 ,0.194787942094325 ,0.179243210931736 ,0.183151390776686 ,0.186099939060596 ,0.189311824497218 ,0.192064244933998 ,0.196273690413616 ,0.166735226585959 ,0.193335853591284 ,0.211207484063907 ,0.188993986010153 ,0.209875281626712 ,0.204917210013561 ,0.201999942362913 ,0.204990521675060 ,0.188390439858493 ,0.204070605201823 ,0.221830463506029 ,0.207647477746401 ,0.207951736134896 ,0.201069308873033 ,0.208974862699877 ,0.212478470126245 ,0.215290875574089 ,0.208169912582765 ,0.210404454162428 ,0.233875908866031 ,0.191924460295038 ,0.237671456804569 ,0.219621637006131 ,0.227114608195891 ,0.201339355250129 ,0.212947654357948 ,0.216933358362347 ,0.224807156912205 ,0.204742993021495 ,0.227026343264163 ,0.211045528003255 ,0.224698900484246 ,0.231423558886614 ,0.229033599671771 ,0.237450335042368 ,0.237545771108191 ,0.221836922634022 ,0.232635561574340 ,0.222337221935958 ,0.220277114786074 ,0.244454259334937 ,0.236915498490753 ,0.238071810853906 ,0.249435272656539 ,0.247969836974091 ,0.247223011738745 ,0.257917512283050 ,0.256403894585577 ,0.251191632570586 ,0.243575388968888 ,0.245645463582497 ,0.265761018705313 ,0.239396696113222 ,0.256942380633641 ,0.239366528231011 ,0.270724980144527 ,0.270799163023934 ,0.263851620834835 ,0.264785627868395 ,0.242282160792967 ,0.274603723226759 ,0.248511650800341 ,0.248882196933567 ,0.274510337102984 ,0.265858190164295 ,0.281085906214234 ,0.285364778056840 ,0.288791325452054 ,0.274918408746170 ,0.287935776231669 ,0.286056333503151 ,0.294913699984699 ,0.293613570799259 ,0.298825884259851 ,0.290118621320754 ,0.291551985438487 ,0.304683734053054 ,0.274946445375842 ,0.292710135944860 ,0.286619055501913 ,0.297063151972924 ,0.308934792620486 ,0.312260271492418 ,0.295403563573199 ,0.302388300873168 ,0.310010248741301 ,0.307257366242464 ,0.314726185552610 ,0.317233309429558 ,0.305456384410599 ,0.314504697340708 ,0.296465054008385 ,0.330746617105185 ,0.314505092390058 ,0.310254500259978 ,0.321246553165772 ,0.310987531353679 ,0.326548423822984 ,0.322628350034718 ,0.351484787091842 ,0.342559653873296 ,0.307669134968155 ,0.338509269317276 ,0.321567621241889 ,0.334446448201192 ,0.340083040733187 ,0.347354340288081 ,0.338579530505971 ,0.358500001465461 ,0.339349628482212 ,0.348852121208297 ,0.353636341206276 ,0.349247885927212 ,0.358607527853810 ,0.354426131378476 ,0.344744538163359 ,0.335918266486139 ,0.373939929485557 ,0.350684699112255 ,0.359134597223107 ,0.365098669551460 ,0.361963969967340 ,0.353136737872020 ,0.358856854175481 ,0.363631100527769 ,0.381009584915040 ,0.358946843099930 ,0.376731684672878 ,0.373296231399485 ,0.369191399578709 ,0.362275272540399 ,0.371312590453738 ,0.374592097175407 ,0.362065049255136 ,0.379974822448708 ,0.371120067237098 ,0.379684594120403 ,0.385268133409542 ,0.374134459407532 ,0.381567436387943 ,0.389214627575342 ,0.368615408574957 ,0.398587759082455 ,0.413721611449394 ,0.400316005094080 ,0.388803280049906 ,0.397482226798594 ,0.384066152214866 ,0.414428654604959 ,0.406277044033521 ,0.405958457799352 ,0.390536257380433 ,0.403700491343823 ,0.396118057151491 ,0.399782705814531 ,0.398387900833578 ,0.395016663843713 ,0.397367544131257 ,0.405533026659444 ,0.391815359158274 ,0.416047005758461 ,0.409956017107320 ,0.419283603336442 ,0.416141486417166 ,0.419536870553794 ,0.402045789774841 ,0.408939356143170 ,0.416919049892555 ,0.424714585913276 ,0.437116364520283 ,0.425123369592000 ,0.442814507181411 ,0.437111248117073 ,0.446239167514937 ,0.437892470680436 ,0.432161840710519 ,0.426007009284212 ,0.444449889959039 ,0.453138513685210 ,0.444068118691656 ,0.443612135835115 ,0.447942581847199 ,0.442057066984745 ,0.450070901846835 ,0.455156606435850 ,0.459369411057137 ,0.460206168799777 ,0.468874351940652 ,0.465757176937749 ,0.484692154502804 ,0.471545238283293 ,0.488328937717242 ,0.464897785204296 ,0.479225470377496 ,0.473174491382939 ,0.483582425088086 ,0.485310307956488 ,0.459286783872518 ,0.469639568504797 ,0.470249864023611 ,0.490416444970398 ,0.502824012808485 ,0.486564857712141 ,0.499655230046408 ,0.498674401035261 ,0.484376676904792 ,0.500529669957953 ,0.490687052613181 ,0.515006668966460 ,0.501144334908055 ,0.519444996572783 ,0.500438415093900 ,0.512175333667182 ,0.507234087742817 ,0.489212410699482 ,0.501168684742210 ,0.518663112981670 ,0.513526138700113 ,0.504414679975473 ,0.510854214611329 ,0.521119177405628 ,0.510188809934504 ,0.531353502248113 ,0.516671904932739 ,0.542633626205193 ,0.515201337492612 ,0.529437894440753 ,0.513671734382310 ,0.523071688747109 ,0.525792496849892 ,0.537146363398188 ,0.543953333192369 ,0.538925859675957 ,0.533571293413690 ,0.546827885080925 ,0.548024869921567 ,0.542592052819564 ,0.548447476297145 ,0.548199960103114 ,0.535530381166485 ,0.554315683259148 ,0.541459987009016 ,0.543296815186238 ,0.552400468223294 ,0.548843965301373 ,0.551879796470841 ,0.560423576738841 ,0.566202327843052 ,0.555010413673882 ,0.561515781639072 ,0.557096984954103 ,0.563008968932203 ,0.566339979048226 ,0.556990340711108 ,0.567118367869117 ,0.571586020324683 ,0.567695079512390 ,0.585261413915724 ,0.563060425552617 ,0.562952402283022 ,0.553994206936124 ,0.581760825796471 ,0.582483825529473 ,0.574164071609420 ,0.585090759893772 ,0.579080034230913 ,0.581281901348845 ,0.580627447170210 ,0.585015521888724 ,0.582743624437003 ,0.610706352278134 ,0.572265349698054 ,0.566483009173103 ,0.574706188553304 ,0.576261565437604 ,0.583933907035252 ,0.587655301217246 ,0.588218664399734 ,0.596876344357194 ,0.596407662038433 ,0.601075289846883 ,0.612386558992910 ,0.607870625517338 ,0.583838438953952 ,0.574406454837167 ,0.607735314669517 ,0.581374613162648 ,0.601407569114369 ,0.602099794858376 ,0.625015680781679 ,0.603045857459780 ,0.599653769353855 ,0.608069096725763 ,0.610122048518938 ,0.610298452094168 ,0.605426194899201 ,0.601182066198134 ,0.618450003607977 ,0.603715307633781 ,0.608664156559278 ,0.634121158850650 ,0.618426968049701 ,0.623002782779436 ,0.635177223288972 ,0.624934889943843 ,0.639969657121031 ,0.627950340284327 ,0.643238018642630 ,0.641097345849314 ,0.634352849173590 ,0.629490026916395 ,0.629365916986624 ,0.638731311873519 ,0.638671586443979 ,0.640573256852037 ,0.656089452352056 ,0.644857028559906 ,0.660837789107710 ,0.645638798824929 ,0.662221657280087 ,0.648801495150065 ,0.657305777946423 ,0.666751378235547 ,0.654395277250258 ,0.655632294817951 ,0.681516906108623 ,0.672448934995491 ,0.660063961562722 ,0.672307407373636 ,0.663640236988460 ,0.675710850193494 ,0.684211490684366 ,0.655398843314029 ,0.683112530690020 ,0.688773677806620 ,0.676027713232748 ,0.694365567101184 ,0.679795875142012 ,0.667200803153374 ,0.658958057211654 ,0.678869929327363 ,0.690640433025641 ,0.687971077332345 ,0.690217103902931 ,0.681584144163621 ,0.690060018014045 ,0.673490342700661 ,0.683524100013647 ,0.684176069037497 ,0.698792288881336 ,0.694676399409028 ,0.684476706317128 ,0.697142750839018 ,0.691538894623683 ,0.692960008463988 ,0.709451494211651 ,0.703119194362269 ,0.707135628461660 ,0.713151698902347 ,0.707267576939871 ,0.712118545220575 ,0.714577642761120 ,0.720585086600356 ,0.714760605872783 ,0.725241326864445 ,0.712455084843096 ,0.712853305897798 ,0.731441346542750 ,0.710419882872326 ,0.716571450398557 ,0.726875670798064 ,0.720245087326328 ,0.733860334456770 ,0.731209215395697 ,0.724834702887708 ,0.715187014616884 ,0.729669960975393 ,0.711209788405196 ,0.728507746755899 ,0.735168388031677 ,0.730229416984170 ,0.737905771642335 ,0.750501762514141 ,0.740350324486889 ,0.734772174465958 ,0.739506615064218 ,0.738326853556253 ,0.721900764965131 ,0.731854887803006 ,0.749231878247853 ,0.737509157944537 ,0.744725232774480 ,0.729785999253807 ,0.741441167423111 ,0.747738919491858 ,0.729055850451354 ,0.747076926319601 ,0.742708567815407 ,0.736051652340585 ,0.745987668111808 ,0.728310955063776 ,0.726900232318173 ,0.737312766692850 ,0.740073677795158 ,0.739141676727326 ,0.734505722104713 ,0.755526280896650 ,0.737581162797332 ,0.755500188492234 ,0.763139666763580 ,0.756112732136862 ,0.757928087600588 ,0.754073429434102 ,0.743882238889410 ,0.759119814146417 ,0.770012252116821 ,0.778628449326133 ,0.757780937575739 ,0.746643772635302 ,0.765409474924601 ,0.768334659104507 ,0.763942495352938 ,0.756347877103812 ,0.789690325995439 ,0.747446764890415 ,0.767523279542001 ,0.760973744091899 ,0.769381717503400 ,0.780461514190597 ,0.780189479744495 ,0.773213649251888 ,0.789591035267198 ,0.789532939241720 ,0.791256808845161 ,0.781989683183397 ,0.798181807605364 ,0.795741070863672 ,0.815648724731851 ,0.802610596390410 ,0.804949216533274 ,0.795301788273256 ,0.783270139970597 ,0.793812787525024 ,0.791307080835012 ,0.794594310829726 ,0.807125385600019 ,0.797335219360496 ,0.795270868645176 ,0.801437722783659 ,0.805221132332616 ,0.812213344304555 ,0.799874640028800 ,0.813845174723246 ,0.812714200809781 ,0.826429854491602 ,0.812298295135784 ,0.814320213554446 ,0.805178441820797 ,0.804257373168048 ,0.822424083186005 ,0.818025109355261 ,0.826750440557373 ,0.813971385965230 ,0.843160123303582 ,0.826466307005049 ,0.836875332668979 ,0.825289798006761 ,0.827079980584515 ,0.836743518978578 ,0.836531567714121 ,0.820895449985116 ,0.817888069860705 ,0.823345322304593 ,0.821269266784321 ,0.837118705885661 ,0.833498490744678 ,0.835012892669590 ,0.826159368706063 ,0.848633674287350 ,0.846294111115537 ,0.842059775162588 ,0.854216801180142 ,0.836309205349711 ,0.850233002930476 ,0.850601411999523 ,0.851634544166637 ,0.841868527323705 ,0.853442402487630 ,0.846032183670735 ,0.843217538494975 ,0.841145318135850 ,0.864546156394852 ,0.846693557876639 ,0.854402861557408 ,0.845018479452598 ,0.855101732000046 ,0.826715622040600 ,0.849124407705387 ,0.846681638405203 ,0.851748492322947 ,0.860702328116927 ,0.860518522196395 ,0.884147977919663 ,0.859913267816506 ,0.864053677219650 ,0.851777845296593 ,0.863610173363059 ,0.855912233464377 ,0.870497990237882 ,0.879623867675186 ,0.876029534651094 ,0.865870797865818 ,0.857456571072528 ,0.889242131851427 ,0.896019427329379 ,0.877595005996994 ,0.867358983957788 ,0.890098714743149 ,0.873053437818308 ,0.875136906367756 ,0.889548773770727 ,0.867679801988892 ,0.862806460457681 ,0.887419837002013 ,0.888054379981470 ,0.885829421578642 ,0.890670843916365 ,0.897349405961607 ,0.897050477883546 ,0.882475304296104 ,0.897072720733185 ,0.891512473718321 ,0.885528574314846 ,0.879450942091098 ,0.898650709388812 ,0.889437774007007 ,0.894228345266878 ,0.886620524977982 ,0.879826855252204 ,0.897826863552686 ,0.896265608751956 ,0.909649278772920 ,0.906445040703273 ,0.909726045791496 ,0.892466232474568 ,0.891350735028840 ,0.888779132271315 ,0.907201806230467 ,0.930862811276439 ,0.911735720369157 ,0.898206358978478 ,0.915767337544762 ,0.897569696899164 ,0.896049299085836 ,0.918897423155074 ,0.905360944798146 ,0.917705858807086 ,0.930006351380768 ,0.921336246357319 ,0.927994602844197 ,0.904002977953793 ,0.928028362441234 ,0.944140022538285 ,0.929498394134171 ,0.910000228181421 ,0.924690572051782 ,0.923024347782207 ,0.933148239127808 ,0.934721353781118 ,0.935930925505164 ,0.929504192491190 ,0.928405279599581 ,0.929750110085820 ,0.945420408340645 ,0.919585919285804 ,0.937264968403524 ,0.943255782026899 ,0.935229289879411 ,0.947727272850077 ,0.943430803499725 ,0.935942987117312 ,0.948113635346506 ,0.944984171180866 ,0.944725273522433 ,0.942861772894739 ,0.951733454835841 ,0.933794707639014 ,0.949401668805219 ,0.949071518783876 ,0.946504014957113 ,0.963257985909952 ,0.950489287414091 ,0.964333330898144 ,0.969773408845818 ,0.959528295852730 ,0.964949993217234 ,0.969635173031109 ,0.963493219849394 ,0.970767701437639 ,0.953783351553720 ,0.978556238406702 ,0.958594373209316 ,0.951233640657962 ,0.984392985113543 ,0.970940732059587 ,0.977071211200192 ,0.969957415275323 ,0.964387166068690 ,0.944861114607129 ,0.982844789976991 ,0.974702154667888 ,0.976576570931491 ,0.983581053726406 ,0.966302515394652 ,0.974166547620172 ,0.993894278415851 ,0.989354646328815 ,0.971513187409075 ,0.963238357578301 ,0.980498536802089 ,0.989285964787165 ,0.997499769333024 ,0.989938254906669 ,0.978698882784720 ,0.993899578185682 ,0.980025651324467 ,0.983046334364623 ,0.987020649836420 ,0.982162063510009 ,0.992639348700367 ,0.987238499326572 ,0.994265138623982 ,0.993377784556463 ,0.994780147852598 ,0.994713610158681 ,1.01295297112644 ,1.00758305217574 ,1.00293072155053 ,0.988520532695718 ,0.987781967336038 ,0.985242475846091 ,1.03178195750874 ,1.01629374811204 ,1.00997980969704 ,0.998497595406531 ,0.997606356141126 ,1.01536639504480 ,1.02636083985082 ,0.994596563386792 ,1.00784602640140 ,1.01230707927247 ,0.994030028223967 ,1.02316245666353 ,1.01140341082545 ,1.03546180838364 ,1.01322101267766 ,1.02201182082547 ,1.00728571831879 ,1.01324136224363 ,1.00857277150085 ,1.02496575281298 ,1.03482839504350 ,1.01663358238160 ,1.02770375391562 ,1.01905637519474 ,1.02587107713303 ,1.03757250540822 ,1.02756282816362 ,1.01674156602923 ,1.01927896761112 ,1.02689125695956 ,1.02741331719954 ,1.02140184792260 ,1.03260664133586 ,1.04419528475573 ,1.02973830712562 ,1.03092429949337 ,1.01239478093964 ,1.02809486895239 ,1.02331727415945 ,1.03478765349016 ,1.04530586350118 ,1.05666269275391 ,1.06078494451908 ,1.04298115733030 ,1.04229803813114 ,1.05501516283237 ,1.05307159188824 ,1.05714251160016 ,1.05857279045311 ,1.03728694826581 ,1.05878363959610 ,1.05374460978132 ,1.04832747623041 ,1.05025404556857 ,1.07125457752663 ,1.05158262389234 ,1.04854181647177 ,1.06427686448132 ,1.08345771767534 ,1.06480554433412 ,1.06883299436247 ,1.05755752789372 ,1.08486215951779 ,1.07053988173845 ,1.07575101256551 ,1.06208931776599 ,1.08129042818220 ,1.07778145734518 ,1.06345998915048 ,1.07654740126989 ,1.07275401396292 ,1.07946247941666 ,1.07696447157554 ,1.07866098345351 ,1.07132086485699 ,1.07949708078581 ,1.09146526854105 ,1.10230673179669 ,1.07430480073830 ,1.11073411852384 ,1.10326077962507 ,1.09072507500217 ,1.08705793470676 ,1.08410345729295 ,1.10042770575778 ,1.08616394745777 ,1.08949117006866 ,1.10393617136721 ,1.10044944182164 ,1.10603747363054 ,1.10309732027945 ,1.09500102864484 ,1.09484151987901 ,1.10889367596234 ,1.09516809835993 ,1.11468659042866 ,1.11166701970704 ,1.10756721494674 ,1.10564226114563 ,1.11018617187473 ,1.14271677818339 ,1.10722563337488 ,1.09368406065062 ,1.12930102295457 ,1.11713846053238 ,1.10544088376908 ,1.13897334912051 ,1.11917950420745 ,1.11747203684447 ,1.10761156201747 ,1.10560069903910 ,1.09941585967689 ,1.11371080464102 ,1.10824897570810 ,1.12608755244972 ,1.11726371811487 ,1.13894991569187 ,1.13718582395193 ,1.12453010316907 ,1.12087236285495 ,1.13602165807948 ,1.11382492367883 ,1.13282698696542 ,1.12017887004627 ,1.12364677299365 ,1.12171197572781 ,1.13495629016583 ,1.12217906484579 ,1.12008438797115 ,1.13700978301287 ,1.12799571162164 ,1.13658587164848 ,1.13020110758054 ,1.13714540707973 ,1.10953550643879 ,1.14056864128079 ,1.15516560942494 ,1.14774289339847 ,1.14716896579459 ,1.13637268713399 ,1.14127998079792 ,1.14261249546813 ,1.14182392884540 ,1.13324531502381 ,1.13871747814338 ,1.14117224960456 ,1.13878346580519 ,1.15262836711418 ,1.17031349341389 ,1.13235665748520 ,1.14753340263343 ,1.13247620846639 ,1.16057508209607 ,1.16229911500019 ,1.13221457029642 ,1.16890684478392 ,1.13925301547762 ,1.15299818975021 ,1.16234929202485 ,1.15345188752472 ,1.17554665813013 ,1.18072557877596 ,1.15519317724816 ,1.13533933791627 ,1.15195007006627 ,1.14829889988425 ,1.15029246635479 ,1.14781305185463 ,1.16100188895083 ,1.18239629655706 ,1.15527152606866 ,1.16070484338259 ,1.17624475004516 ,1.17775821418764 ,1.17152540987058 ,1.17796016486196 ,1.17741726021084 ,1.16588242121491 ,1.17496893027103 ,1.16865869479977 ,1.16360131480000 ,1.17988745461257 ,1.17514453590829 ,1.17350879455159 ,1.17919727455002 ,1.18704694691912 ,1.18196934569878 ,1.18084551374026 ,1.18254784956482 ,1.18109220311844 ,1.17365533756061 ,1.19007781710403 ,1.19709906950993 ,1.17844901416208 ,1.20384758429812 ,1.18356752452742 ,1.18364249637514 ,1.17783399341290 ,1.17961663134893 ,1.17872025309047 ,1.19249905454236 ,1.20562026323911 ,1.19560470251142 ,1.19954202301152 ,1.20507846522046 ,1.16731466558070 ,1.19127440677830 ,1.19710015314527 ,1.20136253725490 ,1.18175148361268 ,1.18533131048256 ,1.20388683469747 ,1.19539428671341 ,1.20265089887878 ,1.18807355195281 ,1.18189197604207 ,1.20637200281867 ,1.21122307151703 ,1.21613057215921 ,1.18499810397034 ,1.18745147595280 ,1.18657153501991 ,1.20137336925704 ,1.19611492664872 ,1.21587154808776 ,1.18862933417518 ,1.18620650779402 ,1.20612304683292 ,1.21642930398526 ,1.19689176901694 ,1.19267363577762 ,1.20424668646816 ,1.18976553321746 ,1.20669344346044 ,1.21518387265991 ,1.20945738348381 ,1.18854755098737 ,1.20263178178713 ,1.20532967701554 ,1.22682582130904 ,1.21816851752841 ,1.20877919284086 ,1.22276362077829 ,1.19953264151590 ,1.20679733189665 ,1.22470561160729 ,1.22589382928583 ,1.21845375994537 ,1.21633752271903 ,1.20582873860424 ,1.21939899650424 ,1.20392845030194 ,1.21820520731649 ,1.21551841382645 ,1.22432306269031 ,1.20890132154428 ,1.21974139891403 ,1.22152178081390 ,1.20481622885899 ,1.21556244844278 ,1.23016253911278 ,1.21550439710594 ,1.21147375065453 ,1.21929659609115 ,1.21214899169432 ,1.21949143608784 ,1.21387234873277 ,1.21517671770261 ,1.22011789425007 ,1.22926315464342 ,1.22028874567381 ,1.23238383657046 ,1.19572638039147 ,1.21163743188555 ,1.21858993201712 ,1.20797827036217 ,1.20366044836592 ,1.22268035081281 ,1.22271701503707 ,1.21955381155295 ,1.22068316122368 ,1.20809437157943 ,1.21187311621796 ,1.21583328182944 ,1.21007170864572 ,1.22030880876981 ,1.24067224742599 ,1.21222769281530 ,1.22354448206701 ,1.20673575282766 ,1.23048554597904 ,1.20739859644171 ,1.21917715601272 ,1.21089406644639 ,1.22219015643736 ,1.21716354171101 ,1.21658011373733 ,1.24648092541316 ,1.21064953806473 ,1.21643120600462 ,1.24368025510772 ,1.20533309313821 ,1.22225998745466 ,1.20589541590908 ,1.22689639584087 ,1.21978529812476 ,1.22294124811270 ,1.21354138883612 ,1.21868191593724 ,1.23085513478822 ,1.19325898457653 ,1.19956709275079 ,1.21992468936979 ,1.20909231148142 ,1.21254651684593 ,1.20039081123552 ,1.20617165552672 ,1.21101818454969 ,1.20764201833951 ,1.20606514974640 ,1.21034153219558 ,1.20495333675719 ,1.22760883717258 ,1.20411565287705 ,1.23197942687643 ,1.20984563393492 ,1.19886259280083 ,1.20697318192433 ,1.22227500962296 ,1.22325929256493 ,1.21406227276749 ,1.21508400320243 ,1.21827905577041 ,1.19709958130916 ,1.20561290274533 ,1.19284850677897 ,1.20637896920151 ,1.22007274703601 ,1.21745441409445 ,1.23285828605671 ,1.21133727663350 ,1.18778509248300 ,1.22591399307427 ,1.22151280747093 ,1.20252369035653 ,1.21022614480634 ,1.21543451472862 ,1.21112707157586 ,1.21386366922883 ,1.20539284440826 ,1.20574176299072 ,1.20662088629113 ,1.19743344026784 ,1.21914960618799 ,1.20456331684130 ,1.21093480847834 ,1.19508066366352 ,1.19242764682522 ,1.20182032748806 ,1.19974228167061 ,1.21373823818634 ,1.20737063709364 ,1.20622514429162 ,1.18587060580785 ,1.19013306192293 ,1.20131051338218 ,1.19528122026915 ,1.21113087990155 ,1.21109153818880 ,1.19131202310600 ,1.20531135601992 ,1.20993449886933 ,1.19859985221953 ,1.21103382458420 ,1.20481433309109 ,1.19571105238035 ,1.20171803201966 ,1.19425407011291 ,1.18751107840232 ,1.19458458734395 ,1.19069222668044 ,1.18600368831911 ,1.20667019567018 ,1.19046273067716 ,1.21484377584868 ,1.18384834616653 ,1.19172295551935 ,1.20115620663047 ,1.21186230123210 ,1.18682564280841 ,1.17510741521402 ,1.19024380232507 ,1.16820097297641 ,1.17784154240373 ,1.18246866921603 ,1.19379553507786 ,1.19241141524790 ,1.17689438603440 ,1.18551931315127 ,1.17216719580034 ,1.18108124886150 ,1.19269293938539 ,1.17416759609817 ,1.16864463542056 ,1.16567965222530 ,1.17686471380571 ,1.18208288727042 ,1.18895679946857 ,1.16721045784438 ,1.16726035918032 ,1.15825293259530 ,1.17962991492715 ,1.16167551275813 ,1.15659762856669 ,1.18206240786857 ,1.16718881106273 ,1.16510342804277 ,1.14672428865536 ,1.15993986613232 ,1.15961143592625 ,1.14288755482658 ,1.15094205548197 ,1.14854078223451 ,1.15725859215420 ,1.14129037135885 ,1.16162026770604 ,1.16794874711621 ,1.14643245479880 ,1.14875303368506 ,1.15326635026535 ,1.15958251988685 ,1.15212017729699 ,1.15022046092297 ,1.14076189159681 ,1.14261502805514 ,1.15039385212333 ,1.16041850536332 ,1.14860393573840 ,1.13017970745751 ,1.14588060388963 ,1.13993879251500 ,1.13772945062035 ,1.13727811336953 ,1.12997233283611 ,1.13485195674911 ,1.12950584706244 ,1.13298037472061 ,1.13708270572394 ,1.13692339688771 ,1.13229343586957 ,1.13219388520375 ,1.13330688219864 ,1.13681282205500 ,1.14429631220881 ,1.13692090051558 ,1.12709326137540 ,1.13518015714251 ,1.12597467324647 ,1.10984262824873 ,1.10339760771055 ,1.10895404701178 ,1.12291872739033 ,1.11830374185168 ,1.11649839620343 ,1.12329657173632 ,1.11549018571416 ,1.11495484967172 ,1.12653625091181 ,1.12743334970499 ,1.14314584358076 ,1.12096407416538 ,1.11768319853889 ,1.11050866037606 ,1.11343787598949 ,1.11402468722474 ,1.09611224959271 ,1.11022642376418 ,1.11941541885371 ,1.10533235691000 ,1.11509233375953 ,1.11916440438825 ,1.11912140113434 ,1.11521841798207 ,1.08393159648469 ,1.09996623308870 ,1.11370491435093 ,1.10770675531568 ,1.10286854423719 ,1.10624918628028 ,1.11223072719997 ,1.10151770741091 ,1.09142372843257 ,1.09624836902877 ,1.09499210413892 ,1.10505745287934 ,1.09922307702041 ,1.09958519687229 ,1.09458835043549 ,1.08847732844636 ,1.09170141295021 ,1.09223705550520 ,1.07505877586882 ,1.08978870372986 ,1.09623584218206 ,1.08480822064291 ,1.10058397878773 ,1.08940490613996 ,1.07852655394373 ,1.08011054610334 ,1.07780801406578 ,1.08188120454779 ,1.08591686393745 ,1.07434090100215 ,1.08073445379977 ,1.09257288631744 ,1.08320490591542 ,1.08100264441430 ,1.06346192866053 ,1.06510795821015 ,1.07171551659062 ,1.06711352050928 ,1.05068951550522 ,1.05060576847698 ,1.07481189392552 ,1.05576872524041 ,1.08291344789113 ,1.03869013394790 ,1.06416763638516 ,1.05844626115407 ,1.04962760690885 ,1.05997324826135 ,1.04672147124718 ,1.06197783195733 ,1.05275869210617 ,1.03439612606302 ,1.02524250086628 ,1.04533170073697 ,1.05829806298969 ,1.04731169289546 ,1.04469250228545 ,1.04967753654275 ,1.02749592698015 ,1.05430365736187 ,1.02971148842141 ,1.03762764699954 ,1.03220430711811 ,1.03590556482461 ,1.01352481893838 ,1.04748894894537 ,1.03698810168063 ,1.05089927494522 ,1.04422670660858 ,1.02944480665555 ,1.01919950678919 ,1.01046091611986 ,1.02727970971569 ,1.02855159093584 ,1.03606820610136 ,1.01534017346030 ,1.03204797422862 ,1.02405429809887 ,1.01483313097728 ,1.02955161843596 ,1.02369654717979 ,1.01790894469077 ,1.03826292224959 ,1.02480239402441 ,1.01681726120997 ,1.01990457471578 ,1.01721045914472 ,1.01728593051437 ,1.01928591153371 ,1.00791481969012 ,1.00517976072004 ,1.01594648897494 ,1.03038091677342 ,1.00764178169347 ,0.999762760390636 ,1.00668454492019 ,1.00339985188719 ,1.00413655478312 ,1.01132517983984 ,1.00442995108858 ,0.998946467183423 ,0.999602330898950 ,0.989964703522572 ,0.993744788337780 ,0.987349988275239 ,0.995460140996381 ,0.988898019032783 ,0.991806414092391 ,0.994985454542452 ,0.985117594961996 ,0.996044377337573 ,0.998752705641894 ,0.984823690178010 ,1.00469722585981 ,0.976794945739759 ,0.987831053409746 ,0.975991137770199 ,0.986475728318281 ,0.975761840942701 ,0.982327650491650 ,0.979738932723907 ,0.974360981255114 ,0.964622399635193 ,0.989976598122528 ,1.00337742366593 ,1.00465427720234 ,0.976539224141165 ,0.980035970655046 ,0.974867529941650 ,0.979309474321257 ,0.968381303558404 ,0.957387334701768 ,0.975226568569897 ,0.962341742825646 ,0.954565656822057 ,0.996324485508350 ,0.969234542862422 ,0.974586807392924 ,0.981446685993382 ,0.951642411514590 ,0.971583485299499 ,0.971426452192890 ,0.966189643451642 ,0.965880980519734 ,0.957960574857005 ,0.969402606998288 ,0.952597583479260 ,0.952051159491668 ,0.966180375711280 ,0.974697444769816 ,0.952867058305028 ,0.950572215863475 ,0.958587738946252 ,0.964108561418614 ,0.961935828911478 ,0.953820455327527 ,0.943630934644112 ,0.955121631803284 ,0.946873662460484 ,0.960269491656123 ,0.931243875100668 ,0.945556316833078 ,0.955852193949404 ,0.936807637013407 ,0.934303750476534 ,0.930001657059699 ,0.935328750861938 ,0.934879750406073 ,0.937013411632763 ,0.925564511413849 ,0.933967379227243 ,0.925837251019456 ,0.926913717358409 ,0.920936295774268 ,0.925199249585918 ,0.962420677768743 ,0.959484323663865 ,0.935556178598252 ,0.930627575330141 ,0.908631626308091 ,0.914215068987188 ,0.912503943357666 ,0.922678010458445 ,0.920770870528932 ,0.915630750834804 ,0.909737152743324 ,0.902464515801082 ,0.910347216897949 ,0.920244494909508 ,0.911674612475419 ,0.907747321493102 ,0.911034797387083 ,0.908814456059256 ,0.886057487045204 ,0.901657743520610 ,0.896454392417038 ,0.879614727348356 ,0.885907474481636 ,0.895229143811388 ,0.905913304645549 ,0.894594071907310 ,0.898733508132949 ,0.886352204552772 ,0.872976972939402 ,0.894703167564890 ,0.883462185351485 ,0.903906899304394 ,0.908734958663698 ,0.886867039546492 ,0.901708641286840 ,0.898509480262139 ,0.874010554649992 ,0.887012436819524 ,0.889138177635396 ,0.890933945343369 ,0.891645868427632 ,0.890790956575938 ,0.889996989593984 ,0.879248202805360 ,0.885324437656364 ,0.858156017651157 ,0.868151493033568 ,0.890999656216903 ,0.871513614088536 ,0.880533590400444 ,0.891471270791456 ,0.866629910421388 ,0.865049153694964 ,0.868834806957453 ,0.877287565791746 ,0.869939357516964 ,0.861314930712742 ,0.854465534125416 ,0.865589384344819 ,0.866172545337843 ,0.862118871778631 ,0.863934278269446 ,0.854676850813402 ,0.870196334898275 ,0.842025794337036 ,0.864281146514561 ,0.868583334353023 ,0.852457708402421 ,0.859423098808071 ,0.861953862643538 ,0.851926814598673 ,0.856968568114329 ,0.860253134961486 ,0.845781504046384 ,0.862519570364075 ,0.864123384609096 ,0.855393807329689 ,0.851332128385441 ,0.838529074587834 ,0.854109407474224 ,0.835983510151757 ,0.863024879767586 ,0.851350750485956 ,0.847697185917636 ,0.840069021094206 ,0.821192899616638 ,0.829943455679744 ,0.844491283924318 ,0.863893430571706 ,0.846095472205794 ,0.840708463886074 ,0.831103128168867 ,0.836649831841385 ,0.843946793327701 ,0.830675251566767 ,0.851015559892636 ,0.818771458627724 ,0.826080628560113 ,0.829229291487772 ,0.808019662993915 ,0.832059205711602 ,0.826021944624003 ,0.824882011876263 ,0.830845078094375 ,0.832149889364787 ,0.828541846480275 ,0.814630756351644 ,0.817644076256734 ,0.820426530347824 ,0.803096994368157 ,0.804069685621205 ,0.808916373122365 ,0.812710686794320 ,0.828581302589606 ,0.817373631354069 ,0.803694992591753 ,0.800539089084852 ,0.820868962713261 ,0.831557403813132 ,0.804577390774851 ,0.796785348343973 ,0.786107461168182 ,0.808634880550690 ,0.800422189842185 ,0.807808082510922 ,0.785684943836811 ,0.795785750372295 ,0.785435536648084 ,0.803310545383067 ,0.783622093890641 ,0.786821911317182 ,0.782767796817403 ,0.794722625341556 ,0.787593361730238 ,0.771779147198380 ,0.773994121233369 ,0.768351900087751 ,0.782340070094588 ,0.779062537213968 ,0.757835874773119 ,0.753554597946838 ,0.770638012789575 ,0.776418933296464 ,0.769525025754887 ,0.750774036742688 ,0.749053976058583 ,0.772416778036194 ,0.761463270095766 ,0.758220583361830 ,0.774408041123628 ,0.752439357734061 ,0.760912413718856 ,0.762887064302086 ,0.766053796459637 ,0.748453466208800 ,0.759708185881851 ,0.782753665558752 ,0.739268230064718 ,0.757862790327736 ,0.750346322665360 ,0.743489136237009 ,0.742552173846066 ,0.754957995005833 ,0.772238261033445 ,0.740241742983475 ,0.752683595692820 ,0.740772386428884 ,0.765212660583267 ,0.749973603752894 ,0.742221944422221 ,0.748869756357507 ,0.741680172165551 ,0.751867992454242 ,0.737995098915629 ,0.727686821874881 ,0.740409495163991 ,0.752595372301852 ,0.724052782854373 ,0.732624547220078 ,0.744120281634425 ,0.713888741948726 ,0.738357457794608 ,0.738640604177826 ,0.732247836835227 ,0.721406659271314 ,0.728027653474713 ,0.728015865247774 ,0.735415512073907 ,0.731671179218316 ,0.720500673332648 ,0.739162774393550 ,0.721410669035184 ,0.712741029292334 ,0.715426800653031 ,0.727333099946355 ,0.719629159352383 ,0.725488621538827 ,0.716209218210392 ,0.739296213202974 ,0.696675568821185 ,0.708069720551480 ,0.710276753935291 ,0.710894519475075 ,0.723440472004754 ,0.709942535186381 ,0.705461227480807 ,0.706151024694831 ,0.711826948569701 ,0.696257729420768 ,0.706493135845244 ,0.685159753421433 ,0.698839040763376 ,0.689019080309390 ,0.690709384941838 ,0.698857292399170 ,0.683567209570146 ,0.683705259128568 ,0.677205412389510 ,0.668839895231269 ,0.688361783216967 ,0.700247443656064 ,0.685535637138447 ,0.683741464596691 ,0.674329659301166 ,0.699338188777871 ,0.679709865784754 ,0.693833190083551 ,0.683191801379203 ,0.675611474912964 ,0.687724444519166 ,0.685377340801929 ,0.673079560357111 ,0.685783507854894 ,0.689256950215036 ,0.669396851242610 ,0.666095191346301 ,0.671287381570395 ,0.669335567533271 ,0.672459110602083 ,0.660383095076922 ,0.668634132787857 ,0.670500973128636 ,0.660310485550166 ,0.658576976848280 ,0.642996755216836 ,0.642295991416912 ,0.637881581849222 ,0.638512120128936 ,0.647850006246652 ,0.631684861864984 ,0.668714651497848 ,0.652052811323097 ,0.622376546373667 ,0.629886494185957 ,0.638725081218726 ,0.621018209134711 ,0.631884054578736 ,0.645714001033729 ,0.631471197432433 ,0.630728595297557 ,0.619660075440154 ,0.622379385528654 ,0.612663436574780 ,0.628048113227348 ,0.618093923950215 ,0.628642659698861 ,0.631358366478798 ,0.627915981814335 ,0.614936588763963 ,0.608368126660373 ,0.599271810251912 ,0.610783090827875 ,0.617258735007354 ,0.602301695614059 ,0.602993816690158 ,0.609901005076748 ,0.611383193695877 ,0.587575858330238 ,0.602739519586151 ,0.601689268528198 ,0.597204675970618 ,0.606623841630344 ,0.593029098119164 ,0.587378113114396 ,0.597364113052688 ,0.598160973009727 ,0.590339933296148 ,0.599424229674314 ,0.575223774321142 ,0.578590829676140 ,0.557548342660280 ,0.592409071886257 ,0.576202763735245 ,0.582494742624967 ,0.594024652623590 ,0.583343120530972 ,0.577322672089892 ,0.572131305886957 ,0.577094291607462 ,0.584403294361615 ,0.562080463489737 ,0.575422514977186 ,0.582786928652097 ,0.559605740769252 ,0.579349651308230 ,0.578325366377244 ,0.561501637767731 ,0.554100912445201 ,0.572294393988460 ,0.574854557134375 ,0.571364379858219 ,0.571998491258072 ,0.551337729660546 ,0.567778476901042 ,0.554912903181160 ,0.553866328108077 ,0.542680035181412 ,0.567992084562952 ,0.557484583019012 ,0.564506113103331 ,0.568308081742790 ,0.540546609696842 ,0.557061183931614 ,0.549208399559440 ,0.557174597250094 ,0.557796945760340 ,0.553604714614663 ,0.535895881677451 ,0.541470147788948 ,0.544031429057887 ,0.571621280729304 ,0.550939172285117 ,0.560508353213535 ,0.540065978606390 ,0.536650315667803 ,0.539264668917025 ,0.526447230391838 ,0.542724012513525 ,0.527305693171875 ,0.513709982154064 ,0.534708381547179 ,0.508859666978588 ,0.504636471040844 ,0.524488098097037 ,0.510609888724868 ,0.509516679059320 ,0.515498508296974 ,0.510712982342811 ,0.511847179920645 ,0.515258664964381 ,0.499304691061696 ,0.497189656930708 ,0.486867213003743 ,0.502378573699405 ,0.511331817577590 ,0.496062359928198 ,0.506483275343085 ,0.505247137456978 ,0.508113509865320 ,0.506448781167020 ,0.488004588170819 ,0.484650623933995 ,0.492015900176597 ,0.483184465971324 ,0.502649419609898 ,0.500196457521444 ,0.485611364189697 ,0.478638729360161 ,0.486255078098416 ,0.472808263756195 ,0.476330832240514 ,0.470472332996927 ,0.475015863992669 ,0.483412504066274 ,0.477708780410956 ,0.479861031545189 ,0.457404857549446 ,0.466462016719244 ,0.452927521797991 ,0.464692285707520 ,0.462167976322397 ,0.469927103685597 ,0.465993294834920 ,0.459555230487492 ,0.445978266127286 ,0.444260061930166 ,0.426478385781688 ,0.440469954620606 ,0.427383034651390 ,0.450119257784695 ,0.447749399718590 ,0.438005874490537 ,0.430713922414984 ,0.433787642573860 ,0.446249386664202 ,0.441514160542913 ,0.421344578886490 ,0.425302113209217 ,0.410184033049873 ,0.423149309075631 ,0.424267626447030 ,0.423594447046296 ,0.398132817278409 ,0.417338207868665 ,0.402491853540611 ,0.406205450480129 ,0.416684104050468 ,0.410614056414970 ,0.404817581631952 ,0.411341325455345 ,0.420432986789099 ,0.396662062756833 ,0.388199998340568 ,0.388878590209549 ,0.389852207985685 ,0.391372890601261 ,0.402636811698618 ,0.374792299122380 ,0.396785638835780 ,0.385411786499997 ,0.402956619453954 ,0.382166357043640 ,0.389552576235632 ,0.378852142311979 ,0.380158403174908 ,0.383112605696089 ,0.382162046356912 ,0.377932870060101 ,0.393189185147553 ,0.386128392495221 ,0.397894473606992 ,0.375280012054694 ,0.387425307708725 ,0.354466611490096 ,0.380538837694184 ,0.376559654566571 ,0.367788207000859 ,0.377163483261512 ,0.377661287408713 ,0.377891056485867 ,0.370417913203697 ,0.370890692278813 ,0.356793816862829 ,0.351232215430976 ,0.358151832743142 ,0.361332503719013 ,0.367610446718301 ,0.348824812631034 ,0.350459220180675 ,0.383716738706020 ,0.346360146431285 ,0.370397029901126 ,0.359409489267513 ,0.342817968353759 ,0.345923448484344 ,0.343425387534971 ,0.348893896920985 ,0.356393409583925 ,0.324931962839309 ,0.360114288649670 ,0.346216892855884 ,0.331507980767702 ,0.334288886398836 ,0.337091804072999 ,0.335599711840092 ,0.343182829175484 ,0.340608728267348 ,0.324647967746540 ,0.325457723695097 ,0.332611375237758 ,0.324989315703168 ,0.333656312846882 ,0.313928268812808 ,0.324009828634428 ,0.320669424654559 ,0.330191548350468 ,0.301300979898389 ,0.313241474061917 ,0.312242948075738 ,0.286756948060883 ,0.321120951445542 ,0.335191318535651 ,0.303231151382244 ,0.306873321468934 ,0.297801955101066 ,0.304732177767123 ,0.295526724766467 ,0.296738217724545 ,0.312364511417031 ,0.286133701173501 ,0.287265168232872 ,0.290678868716315 ,0.288522284078223 ,0.302645096661368 ,0.306965629150247 ,0.275267983899498 ,0.277031763320076 ,0.287034756695160 ,0.276407000038460 ,0.298523519412434 ,0.293329702481495 ,0.280933188913295 ,0.279347375844070 ,0.268691033786757 ,0.278072473715854 ,0.280066423460373 ,0.268560711672631 ,0.284775341029702 ,0.270546379095533 ,0.261080887630006 ,0.264229622580119 ,0.269820946933483 ,0.253205368928449 ,0.254660374487115 ,0.277572874111530 ,0.247421789800647 ,0.259942408584183 ,0.256975615758670 ,0.262995708844388 ,0.250675119972121 ,0.219069024473379 ,0.233498720574355 ,0.245441354127605 ,0.241198749113744 ,0.256539473950017 ,0.249269149089252 ,0.238463337319246 ,0.232609305622755 ,0.214580221350236 ,0.246977596331302 ,0.228825266218189 ,0.211163974261738 ,0.230095823961916 ,0.225929542199875 ,0.218333539001234 ,0.228104621566938 ,0.215234867864920 ,0.207964749640292 ,0.203036984690638 ,0.216075910453526 ,0.212577059943739 ,0.222382502527141 ,0.202087588710909 ,0.214163645556500 ,0.200325745404168 ,0.232605408226749 ,0.212469274322481 ,0.225031089851701 ,0.216847431444641 ,0.220112948543577 ,0.198612811652314 ,0.221858555174313 ,0.222936324167393 ,0.186769885148369 ,0.204899119959334 ,0.199270178085243 ,0.206481338036926 ,0.195538742056927 ,0.205956459187082 ,0.208260937305061 ,0.203861167078064 ,0.199354534889249 ,0.186766921180548 ,0.199358636417288 ,0.192696671127275 ,0.184236731082204 ,0.195586727684999 ,0.193173197168278 ,0.196311015585194 ,0.203434322889910 ,0.198393441937787 ,0.204807837715582 ,0.183575941681345 ,0.181342253124218 ,0.188156790085934 ,0.202056139155681 ,0.200378813735294 ,0.185201878194440 ,0.179608262150440 ,0.169486536743871 ,0.190528416006635 ,0.183154442900561 ,0.170264114137460 ,0.177811218359003 ,0.161977447913921 ,0.183686895969522 ,0.176762065376863 ,0.193928424192895 ,0.163135719785695 ,0.185549066819692 ,0.176394398104873 ,0.174897035911583 ,0.180350640145580 ,0.184230838620052 ,0.160698380812539 ,0.183710022093125 ,0.157532968588054 ,0.158003850982267 ,0.161130399181571 ,0.174332621815755 ,0.155379393071997 ,0.168536151195261 ,0.168418825952552 ,0.164951201875344 ,0.168065706976703 ,0.149901543115438 ,0.170815866859622 ,0.160985202801102 ,0.166259508674443 ,0.148232882194812 ,0.157697315567181 ,0.165061993725947 ,0.165535410409421 ,0.153659515892132 ,0.135075684236538 ,0.141750792901407 ,0.154013276275252 ,0.158877458507203 ,0.154673241949315 ,0.143023699757796 ,0.170700998106393 ,0.148087476083594 ,0.155126143963028 ,0.141421035334043 ,0.133534618940738 ,0.150643524279329 ,0.153273732152795 ,0.160225115284311 ,0.135819115069232 ,0.123935332670044 ,0.155494024317078 ,0.141068367419153 ,0.126260538143408 ,0.131046241409648 ,0.127654548434626 ,0.146458042855966 ,0.139875052691465 ,0.135486476644845 ,0.134567774846794 ,0.123052996011530 ,0.140304121262132 ,0.132940947245181 ,0.125970664726334 ,0.125838870949120 ,0.125773650004212 ,0.117024568561720 ,0.132412770973054 ,0.138025078708879 ,0.147946002893763 ,0.127350192426909 ,0.113189194461694 ,0.122527818706463 ,0.109551474724909 ,0.112593284397659 ,0.111239366091505 ,0.108599706724880 ,0.119816792968871 ,0.103984574039918 ,0.120913413517466 ,0.121298328036661 ,0.122821918543476 ,0.111345688073973 ,0.116842530858692 ,0.127786635107165 ,0.109388933112926 ,0.106182099131658 ,0.124788825619554 ,0.0810789638691911 ,0.100703108146408 ,0.128674775369374 ,0.0987594591410129 ,0.0969727150885168 ,0.0894133262623636 ,0.108710503635982 ,0.0787832956815573 ,0.0909908487399405 ,0.103756550928992 ,0.0971743710113744 ,0.102529946662547 ,0.0966570083103468 ,0.101303177941875 ,0.0807221408613926 ,0.0948788485252473 ,0.0761340292630420 ,0.0987342193083687 ,0.0868973009127843 ,0.0956578441157286 ,0.0828314264032925 ,0.0905940340325321 ,0.0969498197142897 ,0.0657135068084582 ,0.0659379181541281 ,0.0653896432897465 ,0.0913003211514014 ,0.0859675726006168 ,0.0739923396343999 ,0.0951085602128464 ,0.0805971486573037 ,0.0624520860009655 ,0.0672299448516236 ,0.0626700625897407 ,0.0851722643030715 ,0.0687131968062904 ,0.0621063919585472 ,0.0671550969290326 ,0.0636626947554694 ,0.0796574953008717 ,0.0750019117867658 ,0.0723526007494690 ,0.0725878619061790 ,0.0679605482930469 ,0.0571429676994282 ,0.0711481836625546 ,0.0566214174128111 ,0.0532141495155091 ,0.0522928836362174 ,0.0708298280731327 ,0.0710453141452526 ,0.0427469463086099 ,0.0579546404243296 ,0.0610554174617539 ,0.0515324537410717 ,0.0643464981021838 ,0.0583811950225039 ,0.0534088632306262 ,0.0484632912479082 ,0.0599077765684745 ,0.0607307744042206 ,0.0560310718258995 ,0.0480402829551074 ,0.0587480545380990 ,0.0395693862159291 ,0.0491827060627547 ,0.0608023902818180 ,0.0440412124039511 ,0.0365998410917400 ,0.0635724804984731 ,0.0407687845942512 ,0.0467539915586591 ,0.0334015851577964 ,0.0434135943270448 ,0.0443073809375390 ,0.0387826160956192 ,0.0410976035860327 ,0.0489822671653349 ,0.0219949416792914 ,0.0371913355545433 ,0.0143233421057793 ,0.0336189893391827 ,0.0517396540875233 ,0.0409453678832666 ,0.0305642554869813 ,0.0263504835272769 ,0.0341150578368137 ,0.0385007959434016 ,0.0271786061660244 ,0.0422781126691229 ,0.0170713503814382 ,0.00435160875633475 ,0.0159465859168525 ,0.0205346597936153 ,0.0178992992202956 ,0.0122523883983521 ,0.0331976804312817 ,0.00276122742052146 ,0.0131053240506843 ,0.00742958432992569 ,0.0114806207947310 ,0.00865906174805910 ,0.0192034468311500 ,0.00310811866987849 ,0.00441100909342428 ,0.0127278960601311 ,0.0216552253686458 ,-0.00863096237382973 ,0.0270106778578809 ,-0.000671783055785325 ,0.0136880672643321 ,0.0168051403225249 ,0.0186391537684571 ,-0.000666669656379754 ,0.00384873949711056 ,0.00108056126446458 ,-0.00425376086067383 ,0.00361853664009016 ,0.00358643412179061};

	~caseProp(){};
	
	double lnLikelihood();
	double validationLnLikelihood(double QoI, int dimensions = 1);
	double observation();
	double validationObservation();
	double QoI();
	double velocityInt();
	void validationBoundary();
	void validationPressure();

	void updateBeta(double QoI[], int dimensions, int decay = 1);
	void updateBeta1(double QoI[], int dimensions, int decay = 1);
};

template<typename T>
void caseProp<T>::validationBoundary(){
	boundaryVelocity[0] = 0;
	boundaryVelocity[1] = -1;
}

template<typename T>
void caseProp<T>::validationPressure(){
	for (int i  = 0; i < m; i++){
		pressure[i] = 0.*sin(yCoordinate[i]);
	}
}

template<typename T>
double caseProp<T>::lnLikelihood(){
	double lnLikelihoodt1 = 0;
	for (int i = 0; i < 19; i++){
		lnLikelihoodt1 = lnLikelihoodt1 - 1e4*pow(xVelocity[(int)(i*pow(2, l))]-validationVelocity[(int)(i*pow(2, 7))], 2);
	}
	// for (int i = 0; i < m; i++){
	// 	lnLikelihoodt1 = lnLikelihoodt1 - 1e4*pow(xVelocity[i]-dnsData[i]*frictionVelocity, 2);
	// }
	return lnLikelihoodt1;
}

template<typename T>
double caseProp<T>::validationLnLikelihood(double QoI, int dimensions){
	double lnLikelihoodt1 = 0;
	for (int i = 0; i < dimensions; i++){};
	lnLikelihoodt1 = lnLikelihoodt1 - 100*pow(QoI-0.747782+0.052, 2);

	return lnLikelihoodt1;
}

template<typename T>
double caseProp<T>::observation(){
	return 0;
}

template<typename T>
double caseProp<T>::validationObservation(){
	double obs = 0;
	xVelocityGradient[0] = (xVelocity[1]-xVelocity[0])/(yCoordinate[1]-yCoordinate[0]);
	xVelocityGradient[m] = (xVelocity[m]-xVelocity[m-1])/(yCoordinate[m]-yCoordinate[m-1]);
	for (int i = 1; i < m-1; i++){
		xVelocityGradient[i] = (xVelocity[i+1] - xVelocity[i-1])/(yCoordinate[i+1]-yCoordinate[i-1]);
	}
	for (int i = 0; i < m; i++){
		obs = obs + nodeWeight[i]*pow(yCoordinate[i], 2)*xVelocityGradient[i];
	}
	return obs;
}

template<typename T>
double caseProp<T>::QoI(){
	return 0;
}

template<typename T>
double caseProp<T>::velocityInt(){
	double interest = 0;
	for (int i = 0; i < m-1; i++){
		interest = interest + nodeWeight[i]*(xVelocity[i]+xVelocity[i+1])/2;
	}
	return interest;
}

template<typename T>
void caseProp<T>::updateBeta(double QoI[], int dimensions, int decay){
	for (int i = 0; i < m; i++){
		betaML[i] = 0; 
		for (int k = 0; k < dimensions; k++){
			betaML[i] = betaML[i] + QoI[k]/pow((k+1), decay)*cos(M_PI*(k+1)*yCoordinate[i]); 
		}
		betaML[i] = exp(betaML[i]);
	}
}

template<typename T>
void caseProp<T>::updateBeta1(double QoI[], int dimensions, int decay){
	for (int i = 0; i < m; i++){
		betaML[i] = 0; 
		for (int k = 0; k < dimensions; k++){
			betaML[i] = betaML[i] + QoI[k]/pow((k+1), decay)*sin(M_PI*(k+1)*yCoordinate[i]); 
		}
		betaML[i] = exp(betaML[i]);
	}
}

template <typename T>
void caseInitialize(caseProp<T>& turbProp, double reTau, int l){
	//initialize reTau number and update corresponding properties
	if (reTau == 180) {
		turbProp.reTau = reTau;
		turbProp.deltaTime = 1;
		turbProp.nu = 3.4e-4;
		turbProp.frictionVelocity = 6.37309e-2;
	}
	if (reTau == 550) {
		turbProp.reTau = reTau;
		turbProp.deltaTime = 1;
		turbProp.nu = 1e-4;
		turbProp.frictionVelocity = 5.43496e-2;
	}
	if (reTau == 1000) {
		turbProp.reTau = reTau;
		turbProp.deltaTime = 1;
		turbProp.nu = 5e-5;
		turbProp.frictionVelocity = 5.00256e-2;
	}
	if (reTau == 2000) {
		turbProp.reTau = reTau;
		turbProp.deltaTime = 1;
		turbProp.nu = 2.3e-5;
		turbProp.frictionVelocity = 4.58794e-2;
	}
	if (reTau == 5200) {
		turbProp.reTau = reTau;
		turbProp.deltaTime = 1;
		turbProp.nu = 8e-6;
		turbProp.frictionVelocity =4.14872e-2;
	}
	//update mesh dimensions according to reTau
	turbProp.n0 = 9;
	turbProp.l = l; //multi-level, start with l0
	turbProp.m = turbProp.n0*pow(2, turbProp.l+1)+1; //total grid points
	turbProp.yCoordinate = new double[turbProp.m];
	turbProp.dnsData = new double[turbProp.m];
	turbProp.initXVelocity = new double[turbProp.m];
	turbProp.nodeWeight = new double[turbProp.m];
	turbProp.pressure = new double[turbProp.m];
	turbProp.xVelocity = new T[turbProp.m];
	turbProp.xVelocityGradient = new T[turbProp.m];
	turbProp.k = new T[turbProp.m];
	turbProp.omega = new T[turbProp.m];
	turbProp.nut = new T[turbProp.m];
	turbProp.betaML = new T[turbProp.m];
	turbProp.R = new T[3*turbProp.m];
	turbProp.solution = new T[3*turbProp.m];


	for (int i = 0; i < turbProp.m; i++){
		turbProp.pressure[i] = pow(turbProp.frictionVelocity, 2);
		turbProp.xVelocity[i] = 0;
		turbProp.initXVelocity[i] = 0;
		turbProp.k[i] = 1e-8;
		turbProp.omega[i] = 1e5;
		turbProp.nut[i] = 1e-5;
		turbProp.betaML[i] = 1;
	}

	for (int i = 0; i < 3*turbProp.m; i++){
		turbProp.R[i] = 1;
		turbProp.solution[i] = 0;
	}
	//update mesh data on yCoordinate
	meshGen(turbProp.l, turbProp.n0, turbProp.yCoordinate);
	turbProp.nodeWeight[0] = (turbProp.yCoordinate[1]-turbProp.yCoordinate[0])/2;
	for (int i = 1; i < turbProp.m-1; i++){
		turbProp.nodeWeight[i] = (turbProp.yCoordinate[i+1] - turbProp.yCoordinate[i-1])/2;
	}
	turbProp.nodeWeight[turbProp.m-1] = (turbProp.yCoordinate[turbProp.m-1] - turbProp.yCoordinate[turbProp.m-2])/2;

	//update interpreted DNS data
	dnsDataInterpreter dnsDataTable(turbProp.yCoordinate, reTau, turbProp.m);
    memcpy(turbProp.dnsData, dnsDataTable.U, sizeof(double)*turbProp.m);
}

template<typename T>
void thomasSolver(T vectorA[], T vectorB[], T vectorC[], T vectorD[], T solution[], int vectorSize){
	T newVectorC[vectorSize];
	T newVectorD[vectorSize];

	for (int i = 0; i < vectorSize; i ++){
		newVectorC[i] = 0;
		newVectorD[i] = 0;
	}

	newVectorC[0] = vectorC[0] / vectorB[0];
	newVectorD[0] = vectorD[0] / vectorB[0];

	//#pragma acc kernels
	for (int i = 1; i < vectorSize - 1; i++) {
		newVectorC[i] = vectorC[i] / (vectorB[i] - vectorA[i] * newVectorC[i - 1]);
		newVectorD[i] = (vectorD[i] - vectorA[i] * newVectorD[i - 1]) / (vectorB[i] - vectorA[i] * newVectorC[i - 1]);
	}
	newVectorD[vectorSize - 1] = (vectorD[vectorSize - 1] - vectorA[vectorSize - 1] * newVectorD[vectorSize - 2]) / (vectorB[vectorSize - 1] - vectorA[vectorSize - 1] * newVectorC[vectorSize - 2]);

	solution[vectorSize - 1] = newVectorD[vectorSize - 1];
	for (int i = 0; i < vectorSize - 1; i++) {
		solution[vectorSize - 2 - i] = newVectorD[vectorSize - 2 - i] - newVectorC[vectorSize - 2 - i] * solution[vectorSize - 1 - i];
	}
}

template<typename T>
void linearDiscretization(caseProp<T>& turbProp, T vectorA[], T vectorB[], T vectorC[], T vectorD[], int stepCount){
	double scaleFactor = 1.01;
	
	for (int i = 0; i < turbProp.m; i++){
		turbProp.nut[i] = turbProp.k[i]/turbProp.omega[i] * turbProp.betaML[i];
	}
	//discretizatin of flow equation
	vectorB[0] = -1;
	vectorC[0] = 0;
	vectorA[turbProp.m - 1] = 0;
	vectorB[turbProp.m - 1] = -1;
	vectorD[0] = turbProp.boundaryVelocity[0]; //boundaryVelocity
	vectorD[turbProp.m - 1] = turbProp.boundaryVelocity[1]; //boundaryVelocity

	//#pragma acc parallel loop
	for (int i = 1; i < turbProp.m - 1; i++) {
		vectorA[i] = 2.0 / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1])*(turbProp.nu + turbProp.nut[i - 1] / 2.0 + turbProp.nut[i] / 2.0) / (turbProp.yCoordinate[i] - turbProp.yCoordinate[i - 1]);
		vectorB[i] = -2.0 / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1])*((turbProp.nu + turbProp.nut[i] / 2.0 + turbProp.nut[i + 1] / 2.0) / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i]) + (turbProp.nu + turbProp.nut[i - 1] / 2.0 + turbProp.nut[i] / 2.0) / (turbProp.yCoordinate[i] - turbProp.yCoordinate[i - 1])) - 1/(turbProp.deltaTime*pow(scaleFactor, stepCount));
		vectorC[i] = 2.0 / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1])*(turbProp.nu + turbProp.nut[i] / 2.0 + turbProp.nut[i + 1] / 2.0) / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i]);
		vectorD[i] = -turbProp.pressure[i] - turbProp.xVelocity[i]/(turbProp.deltaTime*pow(scaleFactor, stepCount));
	}

	//discretizatin of omega equation
	double sigma = 0.5;
	double alpha = 3.0 / 40.0;
	double gamma = 5.0 / 9.0;
	int boundaryPoints = 3;

	vectorB[turbProp.m] = -1;
	vectorC[turbProp.m] = 0;
	vectorD[turbProp.m] = -1e100;

	for (int i = 1; i < boundaryPoints; i++) {
		vectorA[i+turbProp.m] = 0;
		vectorB[i+turbProp.m] = -1;
		vectorC[i+turbProp.m] = 0;
		vectorD[i+turbProp.m] = -6.0 * turbProp.nu / (0.00708 * pow(turbProp.yCoordinate[i]+1, 2));
	}

	vectorA[2*turbProp.m-1] = 1;
	vectorB[2*turbProp.m-1] = -1;
	vectorD[2*turbProp.m-1] = -1e100;

	for (int i = turbProp.m-boundaryPoints; i < turbProp.m-1; i++) {
		vectorA[i+turbProp.m] = 0;
		vectorB[i+turbProp.m] = -1;
		vectorC[i+turbProp.m] = 0;
		vectorD[i+turbProp.m] = -6.0 * turbProp.nu / (0.00708 * pow(1-turbProp.yCoordinate[i], 2));
	}

	//#pragma acc parallel loop
	for (int i = boundaryPoints; i < turbProp.m-boundaryPoints; i++) {
		vectorA[i+turbProp.m] = 2.0 / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1])*(turbProp.nu + sigma * (turbProp.nut[i] / 2.0 + turbProp.nut[i - 1] / 2.0)) / (turbProp.yCoordinate[i] - turbProp.yCoordinate[i - 1]);
		vectorB[i+turbProp.m] = -alpha * turbProp.omega[i] - 2.0 / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1])*((turbProp.nu + sigma * (turbProp.nut[i] / 2.0 + turbProp.nut[i - 1] / 2.0)) / (turbProp.yCoordinate[i] - turbProp.yCoordinate[i - 1]) + (turbProp.nu + sigma * (turbProp.nut[i] / 2.0 + turbProp.nut[i + 1] / 2.0)) / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i])) - 1/(turbProp.deltaTime*pow(scaleFactor, stepCount));
		vectorC[i+turbProp.m] = 2.0 / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1])*(turbProp.nu + sigma * (turbProp.nut[i] / 2.0 + turbProp.nut[i + 1] / 2.0)) / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i]);
		vectorD[i+turbProp.m] = -gamma * pow(((turbProp.xVelocity[i + 1] - turbProp.xVelocity[i - 1]) / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1])), 2.0) - turbProp.omega[i]/(turbProp.deltaTime*pow(scaleFactor, stepCount)); // - max(0, sigmaD / omega[i] * ((k[i + 1] - k[i - 1]) / (yCoordinate[i + 1] - yCoordinate[i - 1]))*((omega[i + 1] - omega[i - 1]) / (yCoordinate[i + 1] - yCoordinate[i - 1]))))*deltaTime - omega[i];
	}


	//discretizatin of k equation
	double sigmaStar = 0.5;
	double alphaStar = 0.09;

	vectorB[2*turbProp.m] = -1.0;
	vectorC[2*turbProp.m] = 0.0;
	vectorA[3*turbProp.m - 1] = 0;
	vectorB[3*turbProp.m - 1] = -1.0;
	vectorD[2*turbProp.m] = 0;
	vectorD[3*turbProp.m - 1] = 0;

	//#pragma acc parallel loop
	for (int i = 1; i < turbProp.m - 1; i++){
		vectorA[i+2*turbProp.m] = 2.0 / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1])*(turbProp.nu + sigmaStar * (turbProp.nut[i] / 2 + turbProp.nut[i - 1] / 2)) / (turbProp.yCoordinate[i] - turbProp.yCoordinate[i - 1]);
		vectorB[i+2*turbProp.m] = -alphaStar * turbProp.omega[i] - 2 / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1])*((turbProp.nu + sigmaStar * (turbProp.nut[i] / 2 + turbProp.nut[i - 1] / 2)) / (turbProp.yCoordinate[i] - turbProp.yCoordinate[i - 1]) + (turbProp.nu + sigmaStar * (turbProp.nut[i] / 2 + turbProp.nut[i + 1] / 2)) / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i])) - 1/(turbProp.deltaTime*pow(scaleFactor, stepCount));
		vectorC[i+2*turbProp.m] = 2.0 / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1])*(turbProp.nu + sigmaStar * (turbProp.nut[i] / 2 + turbProp.nut[i + 1] / 2)) / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i]);
		vectorD[i+2*turbProp.m] = -turbProp.nut[i] * pow((turbProp.xVelocity[i + 1] - turbProp.xVelocity[i - 1]) / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1]), 2.0) - turbProp.k[i]/(turbProp.deltaTime*pow(scaleFactor, stepCount));
	}
}

template<typename T>
void flowSolver(caseProp<T>& turbProp, int stepCount) {
	//initiate linear system
	T vectorA[3*turbProp.m];
	T vectorB[3*turbProp.m];
	T vectorC[3*turbProp.m];
	T vectorD[3*turbProp.m];

	for (int i = 0; i < 3*turbProp.m; i ++){
		vectorA[i] = 0;
		vectorB[i] = 0;
		vectorC[i] = 0;
		vectorD[i] = 0;
	}
	linearDiscretization(turbProp, vectorA, vectorB, vectorC, vectorD, stepCount);
	thomasSolver(vectorA, vectorB, vectorC, vectorD, turbProp.solution, 3*turbProp.m);

	for (int i = 0; i < turbProp.m; i ++){
		turbProp.xVelocity[i] = turbProp.solution[i];
		turbProp.omega[i] = turbProp.solution[turbProp.m + i];
		turbProp.k[i] = turbProp.solution[2*turbProp.m + i];
	}
};

template<typename T>
void residualUpdate(caseProp<T>& turbProp){
	//initiate linear system
	T vectorA[3*turbProp.m];
	T vectorB[3*turbProp.m];
	T vectorC[3*turbProp.m];
	T vectorD[3*turbProp.m];

	for (int i = 0; i < 3*turbProp.m; i ++){
		vectorA[i] = 0;
		vectorB[i] = 0;
		vectorC[i] = 0;
		vectorD[i] = 0;
	}

	//linearization
	for (int i = 0; i < turbProp.m; i++){
		turbProp.nut[i] = turbProp.k[i]/turbProp.omega[i];
	}
	//discretizatin of flow equation
	vectorB[0] = -1;
	vectorC[0] = 0;
	vectorA[turbProp.m - 1] = 0;
	vectorB[turbProp.m - 1] = -1;
	vectorD[0] = turbProp.boundaryVelocity[0]; //boundaryVelocity
	vectorD[turbProp.m - 1] = turbProp.boundaryVelocity[1]; //boundaryVelocity

	//#pragma acc parallel loop
	for (int i = 1; i < turbProp.m - 1; i++) {
		vectorA[i] = 2.0 / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1])*(turbProp.nu + turbProp.nut[i - 1] / 2.0 + turbProp.nut[i] / 2.0) / (turbProp.yCoordinate[i] - turbProp.yCoordinate[i - 1]);
		vectorB[i] = -2.0 / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1])*((turbProp.nu + turbProp.nut[i] / 2.0 + turbProp.nut[i + 1] / 2.0) / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i]) + (turbProp.nu + turbProp.nut[i - 1] / 2.0 + turbProp.nut[i] / 2.0) / (turbProp.yCoordinate[i] - turbProp.yCoordinate[i - 1]));
		vectorC[i] = 2.0 / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1])*(turbProp.nu + turbProp.nut[i] / 2.0 + turbProp.nut[i + 1] / 2.0) / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i]);
		vectorD[i] = -turbProp.pressure[i];
	}

	//discretizatin of omega equation
	double sigma = 0.5;
	double alpha = 3.0 / 40.0;
	double gamma = 5.0 / 9.0;
	int boundaryPoints = 3;

	vectorB[turbProp.m] = -1;
	vectorC[turbProp.m] = 0;
	vectorD[turbProp.m] = -1e100;

	for (int i = 1; i < boundaryPoints; i++) {
		vectorA[i+turbProp.m] = 0;
		vectorB[i+turbProp.m] = -1;
		vectorC[i+turbProp.m] = 0;
		vectorD[i+turbProp.m] = -6.0 * turbProp.nu / (0.00708 * pow(turbProp.yCoordinate[i]+1, 2));
	}

	vectorA[2*turbProp.m-1] = 1;
	vectorB[2*turbProp.m-1] = -1;
	vectorD[2*turbProp.m-1] = -1e100;

	for (int i = turbProp.m-boundaryPoints; i < turbProp.m-1; i++) {
		vectorA[i+turbProp.m] = 0;
		vectorB[i+turbProp.m] = -1;
		vectorC[i+turbProp.m] = 0;
		vectorD[i+turbProp.m] = -6.0 * turbProp.nu / (0.00708 * pow(1-turbProp.yCoordinate[i], 2));
	}

	//#pragma acc parallel loop
	for (int i = boundaryPoints; i < turbProp.m-boundaryPoints; i++) {
		vectorA[i+turbProp.m] = 2.0 / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1])*(turbProp.nu + sigma * (turbProp.nut[i] / 2.0 + turbProp.nut[i - 1] / 2.0)) / (turbProp.yCoordinate[i] - turbProp.yCoordinate[i - 1]);
		vectorB[i+turbProp.m] = -alpha * turbProp.omega[i] - 2.0 / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1])*((turbProp.nu + sigma * (turbProp.nut[i] / 2.0 + turbProp.nut[i - 1] / 2.0)) / (turbProp.yCoordinate[i] - turbProp.yCoordinate[i - 1]) + (turbProp.nu + sigma * (turbProp.nut[i] / 2.0 + turbProp.nut[i + 1] / 2.0)) / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i]));
		vectorC[i+turbProp.m] = 2.0 / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1])*(turbProp.nu + sigma * (turbProp.nut[i] / 2.0 + turbProp.nut[i + 1] / 2.0)) / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i]);
		vectorD[i+turbProp.m] = -gamma * turbProp.betaML[i] * pow(((turbProp.xVelocity[i + 1] - turbProp.xVelocity[i - 1]) / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1])), 2.0); // - max(0, sigmaD / omega[i] * ((k[i + 1] - k[i - 1]) / (yCoordinate[i + 1] - yCoordinate[i - 1]))*((omega[i + 1] - omega[i - 1]) / (yCoordinate[i + 1] - yCoordinate[i - 1]))))*deltaTime - omega[i];
	}


	//discretizatin of k equation
	double sigmaStar = 0.5;
	double alphaStar = 0.09;

	vectorB[2*turbProp.m] = -1.0;
	vectorC[2*turbProp.m] = 0.0;
	vectorA[3*turbProp.m - 1] = 0;
	vectorB[3*turbProp.m - 1] = -1.0;
	vectorD[2*turbProp.m] = 0;
	vectorD[3*turbProp.m - 1] = 0;

	//#pragma acc parallel loop
	for (int i = 1; i < turbProp.m - 1; i++){
		vectorA[i+2*turbProp.m] = 2.0 / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1])*(turbProp.nu + sigmaStar * (turbProp.nut[i] / 2 + turbProp.nut[i - 1] / 2)) / (turbProp.yCoordinate[i] - turbProp.yCoordinate[i - 1]);
		vectorB[i+2*turbProp.m] = -alphaStar * turbProp.omega[i] - 2 / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1])*((turbProp.nu + sigmaStar * (turbProp.nut[i] / 2 + turbProp.nut[i - 1] / 2)) / (turbProp.yCoordinate[i] - turbProp.yCoordinate[i - 1]) + (turbProp.nu + sigmaStar * (turbProp.nut[i] / 2 + turbProp.nut[i + 1] / 2)) / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i]));
		vectorC[i+2*turbProp.m] = 2.0 / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1])*(turbProp.nu + sigmaStar * (turbProp.nut[i] / 2 + turbProp.nut[i + 1] / 2)) / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i]);
		vectorD[i+2*turbProp.m] = -turbProp.nut[i] * pow((turbProp.xVelocity[i + 1] - turbProp.xVelocity[i - 1]) / (turbProp.yCoordinate[i + 1] - turbProp.yCoordinate[i - 1]), 2.0);
	}
	//end of linearization

	turbProp.R[0] = 0;
	for (int i = 1; i < turbProp.m-1; i++){
		turbProp.R[i] = vectorA[i]*turbProp.xVelocity[i-1]+vectorB[i]*turbProp.xVelocity[i]+vectorC[i]*turbProp.xVelocity[i+1]-vectorD[i];
	}
	turbProp.R[turbProp.m-1] = 0;
	turbProp.R[turbProp.m] = 0;
	for (int i = 1; i < turbProp.m-1; i++){
		turbProp.R[i+turbProp.m] = vectorA[i+turbProp.m]*turbProp.omega[i-1]+vectorB[i+turbProp.m]*turbProp.omega[i]+vectorC[i+turbProp.m]*turbProp.omega[i+1]-vectorD[i+turbProp.m];
	}
	turbProp.R[2*turbProp.m-1] = 0;
	turbProp.R[2*turbProp.m] = 0;
	for (int i = 1; i < turbProp.m-1; i++){
		turbProp.R[i+2*turbProp.m] = vectorA[i+2*turbProp.m]*turbProp.k[i-1]+vectorB[i+2*turbProp.m]*turbProp.k[i]+vectorC[i+2*turbProp.m]*turbProp.k[i+1]-vectorD[i+2*turbProp.m];
	}
	turbProp.R[3*turbProp.m-1] = 0;
}


inline void iterativeSolver(caseProp<double>& turbProp){
    for (int i = 0; i < turbProp.m; i++){
        turbProp.xVelocity[i] = turbProp.initXVelocity[i];
    }
    for (int i = 0; i < 50000; i++) {
        flowSolver(turbProp, i);
        residualUpdate(turbProp);

        double resNorm = 0;
        for (int m = 0; m < 3*turbProp.m; m++){
        	resNorm = resNorm + pow(turbProp.R[i], 2);
        }
        resNorm = sqrt(resNorm)/3.0/turbProp.m;

        // double maxElem = *max_element(turbProp.R, turbProp.R+turbProp.m);
        // double minElem = *min_element(turbProp.R, turbProp.R+turbProp.m);
        // double res = max(abs(maxElem), abs(minElem));
        if ( resNorm < 1e-7 && i > 1000){
            break;
        }

        if (i==49999){
            std::cout << "did not converge" << resNorm << std::endl;
            turbProp.convergence = 0;
        }
    }
}

inline void iterativeSolver(caseProp<adouble>& turbProp){
    for (int i = 0; i < turbProp.m; i++){
        turbProp.xVelocity[i] = turbProp.initXVelocity[i];
    }
    for (int i = 0; i < 10000; i++) {
        flowSolver(turbProp, i);
        residualUpdate(turbProp);

        vector<double> rArray(3*turbProp.m, 1);
        for (int j = 0; j < 3*turbProp.m; j++){
            rArray[j] = turbProp.R[j].value();
        }

        double maxElem = *max_element(rArray.begin(), rArray.end());
        double minElem = *min_element(rArray.begin(), rArray.end());
        double res = max(abs(maxElem), abs(minElem));
        if ( res < 1e-5 && i > 1000){
            break;
        }
        if (i==9999){
            std::cout << "did not converge: " << res << std::endl;
            turbProp.convergence = 0;
        }
    }
}

inline void initialization(caseProp<double>& turbProp){
	iterativeSolver(turbProp);
	memcpy(turbProp.initXVelocity, turbProp.xVelocity, sizeof(double)*turbProp.m);
}

inline void initialization(caseProp<adouble>& turbProp){
	iterativeSolver(turbProp);
	for (int i = 0 ; i < turbProp.m; i++){
		turbProp.initXVelocity[i] = turbProp.xVelocity[i].value();
	}
}
