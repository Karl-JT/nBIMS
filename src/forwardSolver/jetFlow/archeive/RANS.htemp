// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.1.0.post0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              6
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __RANS_H
#define __RANS_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class rans_finite_element_0: public ufc::finite_element
{
public:

  rans_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~rans_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', triangle, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 3;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 3 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[3] = {};
    const std::size_t num_components[3] = { 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 3; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[3 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 3 * num_derivatives, 0.0);
    const std::size_t reference_offsets[3] = {};
    const std::size_t physical_offsets[3] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 3; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[3 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[3 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[3];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[3];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 3, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[6] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 6, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new rans_finite_element_0();
  }

};


class rans_finite_element_1: public ufc::finite_element
{
public:

  rans_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~rans_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 6;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 6 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 3 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 4 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 5 + 1] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives * 2, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t physical_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[12];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[12];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 6, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = coordinate_dofs[0];
    dof_coordinates[2 * 3 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 4] = coordinate_dofs[2];
    dof_coordinates[2 * 4 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 5] = coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new rans_finite_element_0();
    case 1:
        return new rans_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new rans_finite_element_1();
  }

};


class rans_finite_element_2: public ufc::finite_element
{
public:

  rans_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~rans_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', triangle, 2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 6;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    for (std::size_t k = 0; k < num_points * 6; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 5] += coefficients5[0][r] * basisvalues2[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
            { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
            { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    const std::size_t reference_offset[6] = {};
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives, 0.0);
    const std::size_t reference_offsets[6] = {};
    const std::size_t physical_offsets[6] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[6];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[6];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 6, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new rans_finite_element_2();
  }

};


class rans_finite_element_3: public ufc::finite_element
{
public:

  rans_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~rans_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    for (std::size_t k = 0; k < num_points * 12 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 6 + 1] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 7 + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 8 + 1] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 9 + 1] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 10 + 1] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 11 + 1] += coefficients5[0][r] * basisvalues2[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 12 * num_derivatives * 2, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
            { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
            { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    const std::size_t reference_offset[12] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    const std::size_t num_components[12] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 12; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[12 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 12 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[12] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    const std::size_t physical_offsets[12] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 12; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[12 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[12 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[24];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[24];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 12, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[8] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 9:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 10:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 11:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[3] = dof_values[7];
    vertex_values[5] = dof_values[8];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 6] = coordinate_dofs[0];
    dof_coordinates[2 * 6 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 7] = coordinate_dofs[2];
    dof_coordinates[2 * 7 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 8] = coordinate_dofs[4];
    dof_coordinates[2 * 8 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 9] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 9 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 10] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 10 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 11] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[24] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0 };
    std::copy_n(dof_X, 24, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new rans_finite_element_2();
    case 1:
        return new rans_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new rans_finite_element_3();
  }

};


class rans_finite_element_4: public ufc::finite_element
{
public:

  rans_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  ~rans_finite_element_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), FiniteElement('Lagrange', triangle, 1), FiniteElement('Lagrange', triangle, 1), FiniteElement('Lagrange', triangle, 1))";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 21;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 5 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 5;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 5 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 5;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Mixed";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    static const double coefficients12[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients13[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients14[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 21 * 5; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 6 + 1] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 7 + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 8 + 1] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 9 + 1] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 10 + 1] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[21 * 5 * ip + 5 * 11 + 1] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 12 + 2] += coefficients12[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 13 + 2] += coefficients13[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 14 + 2] += coefficients14[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 15 + 3] += coefficients12[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 16 + 3] += coefficients13[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 17 + 3] += coefficients14[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 18 + 4] += coefficients12[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 19 + 4] += coefficients13[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[21 * 5 * ip + 5 * 20 + 4] += coefficients14[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 21 * num_derivatives * 5, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
            { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
            { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    alignas(32) static const double dmats12[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    static const double coefficients12[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients13[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients14[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[21] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4 };
    const std::size_t num_components[21] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 21; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 15:
                // Compute reference derivatives for dof 15.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 16:
                // Compute reference derivatives for dof 16.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 17:
                // Compute reference derivatives for dof 17.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 18:
                // Compute reference derivatives for dof 18.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 19:
                // Compute reference derivatives for dof 19.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 20:
                // Compute reference derivatives for dof 20.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[21 * (num_derivatives * 5) * ip + num_derivatives * 5 * i + 5 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 21 * num_derivatives * 5, 0.0);
    const std::size_t reference_offsets[21] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4 };
    const std::size_t physical_offsets[21] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 21; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[21 * (num_derivatives * 5) * ip + num_derivatives * 5 * d + 5 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[21 * (num_derivatives * 5) * ip + num_derivatives * 5 * d + 5 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[105];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[105];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 5; ++k)
        values[k] = physical_values[5 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[5] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 21; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 5; ++s)
            values[r * 5 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 5 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 15:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[3 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 16:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[3 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 17:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[3 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 18:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[4 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 19:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[4 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 20:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[4 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 5 * num_derivatives * 21, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[20] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 21; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 5 * num_derivatives; ++s)
            values[5 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[5];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 9:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 10:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 11:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 12:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 13:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 14:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 15:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 16:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 17:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 18:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[4];
        }
        break;
    case 19:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[4];
        }
        break;
    case 20:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[4];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[5];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[12] = vals[2];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[13] = vals[2];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[15] = vals[3];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[16] = vals[3];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[17] = vals[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[18] = vals[4];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[19] = vals[4];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[20] = vals[4];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[5] = dof_values[1];
    vertex_values[10] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[6] = dof_values[7];
    vertex_values[11] = dof_values[8];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[12];
    vertex_values[7] = dof_values[13];
    vertex_values[12] = dof_values[14];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[15];
    vertex_values[8] = dof_values[16];
    vertex_values[13] = dof_values[17];
    // Evaluate function and change variables
    vertex_values[4] = dof_values[18];
    vertex_values[9] = dof_values[19];
    vertex_values[14] = dof_values[20];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 6] = coordinate_dofs[0];
    dof_coordinates[2 * 6 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 7] = coordinate_dofs[2];
    dof_coordinates[2 * 7 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 8] = coordinate_dofs[4];
    dof_coordinates[2 * 8 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 9] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 9 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 10] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 10 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 11] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 12] = coordinate_dofs[0];
    dof_coordinates[2 * 12 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 13] = coordinate_dofs[2];
    dof_coordinates[2 * 13 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 14] = coordinate_dofs[4];
    dof_coordinates[2 * 14 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 15] = coordinate_dofs[0];
    dof_coordinates[2 * 15 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 16] = coordinate_dofs[2];
    dof_coordinates[2 * 16 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 17] = coordinate_dofs[4];
    dof_coordinates[2 * 17 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 18] = coordinate_dofs[0];
    dof_coordinates[2 * 18 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 19] = coordinate_dofs[2];
    dof_coordinates[2 * 19 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 20] = coordinate_dofs[4];
    dof_coordinates[2 * 20 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[42] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 42, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 4;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new rans_finite_element_3();
    case 1:
        return new rans_finite_element_0();
    case 2:
        return new rans_finite_element_0();
    case 3:
        return new rans_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new rans_finite_element_4();
  }

};


class rans_finite_element_5: public ufc::finite_element
{
public:

  rans_finite_element_5() : ufc::finite_element()
  {
    // Do nothing
  }

  ~rans_finite_element_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', triangle, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[ip] += coefficients0[0][0] * basisvalues0[0];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * num_derivatives, 0.0);
    if (order > 0)
        return;
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    std::fill_n(values, num_points, 0.0);
    const std::size_t reference_offsets[1] = {};
    const std::size_t physical_offsets[1] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 1; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[ip + d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[ip + d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
    }
    // Evaluate basis on reference element
    double ref_values[1];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[1];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[2] = { 0.3333333333333333, 0.3333333333333333 };
    std::copy_n(dof_X, 2, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new rans_finite_element_5();
  }

};


class rans_dofmap_0: public ufc::dofmap
{
public:

  rans_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~rans_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 3;
  }

  std::size_t num_element_dofs() const final override
  {
    return 3;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 2;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 2, 3 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new rans_dofmap_0();
  }

};


class rans_dofmap_1: public ufc::dofmap
{
public:

  rans_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~rans_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 6;
  }

  std::size_t num_element_dofs() const final override
  {
    return 6;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 4;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 4, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[0][0];
    dofs[4] = offset + entity_indices[0][1];
    dofs[5] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 5;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 5;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new rans_dofmap_0();
    case 1:
        return new rans_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new rans_dofmap_1();
  }

};


class rans_dofmap_2: public ufc::dofmap
{
public:

  rans_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~rans_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0] + num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 6;
  }

  std::size_t num_element_dofs() const final override
  {
    return 6;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 1, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 3, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 5;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            break;
        case 1:
            dofs[0] = 4;
            break;
        case 2:
            dofs[0] = 5;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 5;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new rans_dofmap_2();
  }

};


class rans_dofmap_3: public ufc::dofmap
{
public:

  rans_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~rans_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2 * num_global_entities[0] + 2 * num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 12;
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 6;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 2, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 6, 12 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + entity_indices[0][0];
    dofs[7] = offset + entity_indices[0][1];
    dofs[8] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + entity_indices[1][0];
    dofs[10] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 9;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 7;
        dofs[5] = 11;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            dofs[1] = 9;
            break;
        case 1:
            dofs[0] = 4;
            dofs[1] = 10;
            break;
        case 2:
            dofs[0] = 5;
            dofs[1] = 11;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 9;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 7;
            dofs[5] = 11;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new rans_dofmap_2();
    case 1:
        return new rans_dofmap_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new rans_dofmap_3();
  }

};


class rans_dofmap_4: public ufc::dofmap
{
public:

  rans_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  ~rans_dofmap_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), FiniteElement('Lagrange', triangle, 1), FiniteElement('Lagrange', triangle, 1), FiniteElement('Lagrange', triangle, 1))";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 5 * num_global_entities[0] + 2 * num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 21;
  }

  std::size_t num_element_dofs() const final override
  {
    return 21;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 12;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 5, 2, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 5, 12, 21 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + entity_indices[0][0];
    dofs[7] = offset + entity_indices[0][1];
    dofs[8] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + entity_indices[1][0];
    dofs[10] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[12] = offset + entity_indices[0][0];
    dofs[13] = offset + entity_indices[0][1];
    dofs[14] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[15] = offset + entity_indices[0][0];
    dofs[16] = offset + entity_indices[0][1];
    dofs[17] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[18] = offset + entity_indices[0][0];
    dofs[19] = offset + entity_indices[0][1];
    dofs[20] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 9;
        dofs[6] = 13;
        dofs[7] = 14;
        dofs[8] = 16;
        dofs[9] = 17;
        dofs[10] = 19;
        dofs[11] = 20;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
        dofs[6] = 12;
        dofs[7] = 14;
        dofs[8] = 15;
        dofs[9] = 17;
        dofs[10] = 18;
        dofs[11] = 20;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 7;
        dofs[5] = 11;
        dofs[6] = 12;
        dofs[7] = 13;
        dofs[8] = 15;
        dofs[9] = 16;
        dofs[10] = 18;
        dofs[11] = 19;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            dofs[2] = 12;
            dofs[3] = 15;
            dofs[4] = 18;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            dofs[2] = 13;
            dofs[3] = 16;
            dofs[4] = 19;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            dofs[2] = 14;
            dofs[3] = 17;
            dofs[4] = 20;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            dofs[1] = 9;
            break;
        case 1:
            dofs[0] = 4;
            dofs[1] = 10;
            break;
        case 2:
            dofs[0] = 5;
            dofs[1] = 11;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            dofs[2] = 12;
            dofs[3] = 15;
            dofs[4] = 18;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            dofs[2] = 13;
            dofs[3] = 16;
            dofs[4] = 19;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            dofs[2] = 14;
            dofs[3] = 17;
            dofs[4] = 20;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 9;
            dofs[6] = 13;
            dofs[7] = 14;
            dofs[8] = 16;
            dofs[9] = 17;
            dofs[10] = 19;
            dofs[11] = 20;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            dofs[6] = 12;
            dofs[7] = 14;
            dofs[8] = 15;
            dofs[9] = 17;
            dofs[10] = 18;
            dofs[11] = 20;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 7;
            dofs[5] = 11;
            dofs[6] = 12;
            dofs[7] = 13;
            dofs[8] = 15;
            dofs[9] = 16;
            dofs[10] = 18;
            dofs[11] = 19;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            dofs[20] = 20;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 4;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new rans_dofmap_3();
    case 1:
        return new rans_dofmap_0();
    case 2:
        return new rans_dofmap_0();
    case 3:
        return new rans_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new rans_dofmap_4();
  }

};


class rans_dofmap_5: public ufc::dofmap
{
public:

  rans_dofmap_5() : ufc::dofmap()
  {
    // Do nothing
  }

  ~rans_dofmap_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', triangle, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = {};
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 1;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new rans_dofmap_5();
  }

};


class rans_coordinate_mapping_1: public ufc::coordinate_mapping
{
public:

  rans_coordinate_mapping_1() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~rans_coordinate_mapping_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new rans_coordinate_mapping_1();
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new rans_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new rans_dofmap_1();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    rans_finite_element_0 xelement;
    double phi[3];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[2 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t d = 0; d < 3; ++d)
                x[2 * ip + i] += coordinate_dofs[2 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double J[4];
    double detJ[1];
    double K[4];
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    rans_finite_element_0 xelement;
    double dphi[6];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[2 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t j = 0; j < 2; ++j)
                for (std::size_t d = 0; d < 3; ++d)
                    J[2 * 2 * ip + 2 * i + j] += coordinate_dofs[2 * d + i] * dphi[2 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[2 * 2 * ip] * J[2 * 2 * ip + 2 + 1] - J[2 * 2 * ip + 1] * J[2 * 2 * ip + 2];
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[2 * 2 * ip] = J[2 * 2 * ip + 2 + 1] / detJ[ip];
        K[2 * 2 * ip + 1] = -J[2 * 2 * ip + 1] / detJ[ip];
        K[2 * 2 * ip + 2] = -J[2 * 2 * ip + 2] / detJ[ip];
        K[2 * 2 * ip + 2 + 1] = J[2 * 2 * ip] / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[3] = { 0.33333333333333337, 0.33333333333333337, 0.3333333333333333 };
    const double dphi_Xm[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t d = 0; d < 3; ++d)
            x[i] += coordinate_dofs[2 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t d = 0; d < 3; ++d)
                J[2 * i + j] += coordinate_dofs[2 * d + i] * dphi_Xm[j][d];
  }

};


class rans_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  rans_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~rans_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 94
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    alignas(32) static const double FE70_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE70_C0_D02_Q12[1][1][3] = { { { 3.999999999999998, 4.000000000000004, -7.999999999999995 } } };
    alignas(32) static const double FE70_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE70_C0_D11_Q12[1][1][4] = { { { 4.0, 3.999999999999997, -3.999999999999997, -4.000000000000005 } } };
    alignas(32) static const double FE70_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803568, 0.2205142679699366 },
            { -0.05512856699248404, -0.05512856699248409, 0.6533077030470597, 0.2205142679699364, 0.2205142679699362, 0.01592089499803596 },
            { 0.6533077030470594, -0.05512856699248415, -0.05512856699248411, 0.01592089499803581, 0.2205142679699364, 0.2205142679699366 },
            { -0.1249989825350975, 0.001430579517788794, -0.1249989825350975, 0.4999959301403892, 0.2485755252716258, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788821, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880001, 0.173768363654174, -0.1177151633084292, 0.790160442765823, 0.06597478591860526, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880001, 0.1353078281686267, 0.06597478591860512, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860538 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880001, 0.06597478591860524, 0.1353078281686266, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860538 },
            { 0.1737683636541741, -0.04749625719880015, -0.1177151633084292, 0.06597478591860535, 0.7901604427658229, 0.1353078281686269 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q12[0][0][1];
    const double w2_d1_c3 = w[2][15] * FE3_C0_D01_Q12[0][0][0] + w[2][17] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c3 += w[2][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c4 = w[2][18] * FE3_C0_D01_Q12[0][0][0] + w[2][20] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c4 += w[2][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    const double w1_d11_c1 = w[1][6] * FE70_C0_D02_Q12[0][0][0] + w[1][8] * FE70_C0_D02_Q12[0][0][1] + w[1][10] * FE70_C0_D02_Q12[0][0][2];
    const double w1_d01_c1 = w[1][6] * FE70_C0_D11_Q12[0][0][0] + w[1][9] * FE70_C0_D11_Q12[0][0][1] + w[1][10] * FE70_C0_D11_Q12[0][0][2] + w[1][11] * FE70_C0_D11_Q12[0][0][3];
    const double w1_d00_c1 = w[1][6] * FE70_C0_D02_Q12[0][0][0] + w[1][7] * FE70_C0_D02_Q12[0][0][1] + w[1][11] * FE70_C0_D02_Q12[0][0][2];
    const double w1_d01_c0 = w[1][0] * FE70_C0_D11_Q12[0][0][0] + w[1][3] * FE70_C0_D11_Q12[0][0][1] + w[1][4] * FE70_C0_D11_Q12[0][0][2] + w[1][5] * FE70_C0_D11_Q12[0][0][3];
    const double w1_d11_c0 = w[1][0] * FE70_C0_D02_Q12[0][0][0] + w[1][2] * FE70_C0_D02_Q12[0][0][1] + w[1][4] * FE70_C0_D02_Q12[0][0][2];
    const double w1_d00_c0 = w[1][0] * FE70_C0_D02_Q12[0][0][0] + w[1][1] * FE70_C0_D02_Q12[0][0][1] + w[1][5] * FE70_C0_D02_Q12[0][0][2];
    const double w1_d1_c2 = w[1][12] * FE3_C0_D01_Q12[0][0][0] + w[1][14] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c2 += w[1][ic + 12] * FE3_C0_D01_Q12[0][0][ic];
    const double w1_d1_c3 = w[1][15] * FE3_C0_D01_Q12[0][0][0] + w[1][17] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c3 += w[1][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w1_d1_c4 = w[1][18] * FE3_C0_D01_Q12[0][0][0] + w[1][20] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c4 += w[1][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    alignas(32) double sp[137];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[8] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[9] = sp[7] + sp[8];
    sp[10] = std::sqrt(sp[9]);
    sp[11] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[12] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[13] = sp[11] + sp[12];
    sp[14] = std::sqrt(sp[13]);
    sp[15] = sp[10] * sp[14];
    sp[16] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[17] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[18] = sp[16] + sp[17];
    sp[19] = std::sqrt(sp[18]);
    sp[20] = sp[15] * sp[19];
    sp[21] = triangle_reference_cell_volume * sp[2];
    sp[22] = std::abs(sp[21]);
    sp[23] = sp[20] / (4.0 * sp[22]);
    sp[24] = 2.0 * sp[23] * (2.0 * sp[23]);
    sp[25] = w2_d1_c3 * sp[3];
    sp[26] = w2_d0_c3 * sp[4];
    sp[27] = sp[25] + sp[26];
    sp[28] = w2_d1_c4 * sp[3];
    sp[29] = w2_d0_c4 * sp[4];
    sp[30] = sp[28] + sp[29];
    sp[31] = sp[3] + sp[3];
    sp[32] = sp[4] + sp[4];
    sp[33] = sp[3] * sp[3];
    sp[34] = sp[3] * sp[4];
    sp[35] = sp[4] * sp[4];
    sp[36] = sp[34] + sp[34];
    sp[37] = sp[33] + sp[33];
    sp[38] = sp[36] + sp[36];
    sp[39] = sp[35] + sp[35];
    sp[40] = w2_d0_c3 * sp[5];
    sp[41] = w2_d1_c3 * sp[6];
    sp[42] = sp[40] + sp[41];
    sp[43] = w2_d0_c4 * sp[5];
    sp[44] = w2_d1_c4 * sp[6];
    sp[45] = sp[43] + sp[44];
    sp[46] = sp[3] * sp[5];
    sp[47] = sp[3] * sp[6];
    sp[48] = sp[4] * sp[6];
    sp[49] = sp[5] * sp[4];
    sp[50] = sp[46] + sp[48];
    sp[51] = sp[5] * sp[6];
    sp[52] = sp[5] * sp[5];
    sp[53] = sp[6] * sp[6];
    sp[54] = sp[51] + sp[51];
    sp[55] = w1_d11_c1 * sp[3];
    sp[56] = w1_d01_c1 * sp[4];
    sp[57] = sp[55] + sp[56];
    sp[58] = sp[57] * sp[3];
    sp[59] = w1_d01_c1 * sp[3];
    sp[60] = w1_d00_c1 * sp[4];
    sp[61] = sp[59] + sp[60];
    sp[62] = sp[61] * sp[4];
    sp[63] = sp[58] + sp[62];
    sp[64] = sp[63] + sp[63];
    sp[65] = w1_d01_c0 * sp[5];
    sp[66] = w1_d11_c0 * sp[6];
    sp[67] = sp[65] + sp[66];
    sp[68] = sp[67] * sp[3];
    sp[69] = w1_d00_c0 * sp[5];
    sp[70] = w1_d01_c0 * sp[6];
    sp[71] = sp[69] + sp[70];
    sp[72] = sp[71] * sp[4];
    sp[73] = sp[68] + sp[72];
    sp[74] = w1_d00_c1 * sp[5];
    sp[75] = w1_d01_c1 * sp[6];
    sp[76] = sp[74] + sp[75];
    sp[77] = sp[76] * sp[5];
    sp[78] = w1_d01_c1 * sp[5];
    sp[79] = w1_d11_c1 * sp[6];
    sp[80] = sp[78] + sp[79];
    sp[81] = sp[80] * sp[6];
    sp[82] = sp[77] + sp[81];
    sp[83] = sp[73] + sp[82];
    sp[84] = w1_d1_c2 * sp[3];
    sp[85] = w1_d0_c2 * sp[4];
    sp[86] = sp[84] + sp[85];
    sp[87] = sp[5] + sp[5];
    sp[88] = sp[6] + sp[6];
    sp[89] = sp[54] + sp[54];
    sp[90] = sp[53] + sp[53];
    sp[91] = sp[52] + sp[52];
    sp[92] = w1_d11_c0 * sp[3];
    sp[93] = w1_d01_c0 * sp[4];
    sp[94] = sp[92] + sp[93];
    sp[95] = sp[94] * sp[3];
    sp[96] = w1_d01_c0 * sp[3];
    sp[97] = w1_d00_c0 * sp[4];
    sp[98] = sp[96] + sp[97];
    sp[99] = sp[98] * sp[4];
    sp[100] = sp[95] + sp[99];
    sp[101] = sp[61] * sp[5];
    sp[102] = sp[57] * sp[6];
    sp[103] = sp[101] + sp[102];
    sp[104] = sp[100] + sp[103];
    sp[105] = sp[71] * sp[5];
    sp[106] = sp[67] * sp[6];
    sp[107] = sp[105] + sp[106];
    sp[108] = sp[107] + sp[107];
    sp[109] = w1_d0_c2 * sp[5];
    sp[110] = w1_d1_c2 * sp[6];
    sp[111] = sp[109] + sp[110];
    sp[112] = w1_d1_c3 * sp[3];
    sp[113] = w1_d0_c3 * sp[4];
    sp[114] = sp[112] + sp[113];
    sp[115] = w1_d0_c3 * sp[5];
    sp[116] = w1_d1_c3 * sp[6];
    sp[117] = sp[115] + sp[116];
    sp[118] = w1_d1_c4 * sp[3];
    sp[119] = w1_d0_c4 * sp[4];
    sp[120] = sp[118] + sp[119];
    sp[121] = w1_d0_c4 * sp[5];
    sp[122] = w1_d1_c4 * sp[6];
    sp[123] = sp[121] + sp[122];
    sp[124] = sp[114] * sp[3];
    sp[125] = sp[114] * sp[4];
    sp[126] = sp[117] * sp[6];
    sp[127] = sp[117] * sp[5];
    sp[128] = sp[124] + sp[126];
    sp[129] = sp[127] + sp[125];
    sp[130] = sp[120] * sp[3];
    sp[131] = sp[120] * sp[4];
    sp[132] = sp[123] * sp[6];
    sp[133] = sp[123] * sp[5];
    sp[134] = sp[130] + sp[132];
    sp[135] = sp[133] + sp[131];
    sp[136] = std::abs(sp[2]);
    alignas(32) double BF0[6] = {};
    alignas(32) double BF1[5] = {};
    alignas(32) double BF2[3] = {};
    alignas(32) double BF3[5] = {};
    alignas(32) double BF4[3] = {};
    alignas(32) double BF5[4] = {};
    alignas(32) double BF6[6] = {};
    alignas(32) double BF7[5] = {};
    alignas(32) double BF8[3] = {};
    alignas(32) double BF9[5] = {};
    alignas(32) double BF10[3] = {};
    alignas(32) double BF11[4] = {};
    alignas(32) double BF12[2] = {};
    alignas(32) double BF13[3] = {};
    alignas(32) double BF14[2] = {};
    alignas(32) double BF15[2] = {};
    alignas(32) double BF16[3] = {};
    alignas(32) double BF17[2] = {};
    alignas(32) double BF18[2] = {};
    alignas(32) double BF19[3] = {};
    alignas(32) double BF20[2] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c1 += w[1][ic + 6] * FE70_C0_Q12[0][iq][ic];
        const double w1_d1_c0 = w[1][0] * FE70_C0_D01_Q12[0][iq][0] + w[1][2] * FE70_C0_D01_Q12[0][iq][1] + w[1][3] * FE70_C0_D01_Q12[0][iq][2] + w[1][4] * FE70_C0_D01_Q12[0][iq][3] + w[1][5] * FE70_C0_D01_Q12[0][iq][4];
        const double w1_d0_c0 = w[1][0] * FE70_C0_D10_Q12[0][iq][0] + w[1][1] * FE70_C0_D10_Q12[0][iq][1] + w[1][3] * FE70_C0_D10_Q12[0][iq][2] + w[1][4] * FE70_C0_D10_Q12[0][iq][3] + w[1][5] * FE70_C0_D10_Q12[0][iq][4];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c0 += w[1][ic] * FE70_C0_Q12[0][iq][ic];
        const double w1_d1_c1 = w[1][6] * FE70_C0_D01_Q12[0][iq][0] + w[1][8] * FE70_C0_D01_Q12[0][iq][1] + w[1][9] * FE70_C0_D01_Q12[0][iq][2] + w[1][10] * FE70_C0_D01_Q12[0][iq][3] + w[1][11] * FE70_C0_D01_Q12[0][iq][4];
        const double w1_d0_c1 = w[1][6] * FE70_C0_D10_Q12[0][iq][0] + w[1][7] * FE70_C0_D10_Q12[0][iq][1] + w[1][9] * FE70_C0_D10_Q12[0][iq][2] + w[1][10] * FE70_C0_D10_Q12[0][iq][3] + w[1][11] * FE70_C0_D10_Q12[0][iq][4];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE70_C0_Q12[0][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE70_C0_Q12[0][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE3_C0_Q12[0][iq][ic];
        const double w2_d1_c1 = w[2][6] * FE70_C0_D01_Q12[0][iq][0] + w[2][8] * FE70_C0_D01_Q12[0][iq][1] + w[2][9] * FE70_C0_D01_Q12[0][iq][2] + w[2][10] * FE70_C0_D01_Q12[0][iq][3] + w[2][11] * FE70_C0_D01_Q12[0][iq][4];
        const double w2_d0_c1 = w[2][6] * FE70_C0_D10_Q12[0][iq][0] + w[2][7] * FE70_C0_D10_Q12[0][iq][1] + w[2][9] * FE70_C0_D10_Q12[0][iq][2] + w[2][10] * FE70_C0_D10_Q12[0][iq][3] + w[2][11] * FE70_C0_D10_Q12[0][iq][4];
        const double w2_d1_c0 = w[2][0] * FE70_C0_D01_Q12[0][iq][0] + w[2][2] * FE70_C0_D01_Q12[0][iq][1] + w[2][3] * FE70_C0_D01_Q12[0][iq][2] + w[2][4] * FE70_C0_D01_Q12[0][iq][3] + w[2][5] * FE70_C0_D01_Q12[0][iq][4];
        const double w2_d0_c0 = w[2][0] * FE70_C0_D10_Q12[0][iq][0] + w[2][1] * FE70_C0_D10_Q12[0][iq][1] + w[2][3] * FE70_C0_D10_Q12[0][iq][2] + w[2][4] * FE70_C0_D10_Q12[0][iq][3] + w[2][5] * FE70_C0_D10_Q12[0][iq][4];
        double w1_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c4 += w[1][ic + 18] * FE3_C0_Q12[0][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3 += w[3][ic] * FE3_C0_Q12[0][iq][ic];
        double w1_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c3 += w[1][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c2 += w[1][ic + 12] * FE3_C0_Q12[0][iq][ic];
        alignas(32) double sv12[368];
        sv12[0] = w1_d1_c0 * sp[3];
        sv12[1] = w1_d0_c0 * sp[4];
        sv12[2] = sv12[0] + sv12[1];
        sv12[3] = w1_c1 * sv12[2];
        sv12[4] = w1_d0_c0 * sp[5];
        sv12[5] = w1_d1_c0 * sp[6];
        sv12[6] = sv12[4] + sv12[5];
        sv12[7] = w1_c0 * sv12[6];
        sv12[8] = sv12[3] + sv12[7];
        sv12[9] = w1_d1_c1 * sp[3];
        sv12[10] = w1_d0_c1 * sp[4];
        sv12[11] = sv12[9] + sv12[10];
        sv12[12] = w1_c1 * sv12[11];
        sv12[13] = w1_d0_c1 * sp[5];
        sv12[14] = w1_d1_c1 * sp[6];
        sv12[15] = sv12[13] + sv12[14];
        sv12[16] = w1_c0 * sv12[15];
        sv12[17] = sv12[12] + sv12[16];
        sv12[18] = sv12[11] + sv12[6];
        sv12[19] = sv12[18] * sp[3];
        sv12[20] = sv12[18] * sp[4];
        sv12[21] = sv12[18] * sp[5];
        sv12[22] = sv12[18] * sp[6];
        sv12[23] = w2_c0 * w2_c0;
        sv12[24] = w2_c1 * w2_c1;
        sv12[25] = sv12[23] + sv12[24];
        sv12[26] = std::sqrt(1e-9 + sv12[25]);
        sv12[27] = sp[24] * sv12[26];
        sv12[28] = sv12[19] * sv12[27];
        sv12[29] = sv12[20] * sv12[27];
        sv12[30] = sv12[21] * sv12[27];
        sv12[31] = sv12[22] * sv12[27];
        sv12[32] = w2_c1 * sp[3];
        sv12[33] = w2_c1 * sp[4];
        sv12[34] = w2_c0 * sp[6];
        sv12[35] = w2_c0 * sp[5];
        sv12[36] = sv12[32] + sv12[34];
        sv12[37] = sv12[35] + sv12[33];
        sv12[38] = w2_c3 * sp[27];
        sv12[39] = sv12[38] + sv12[38];
        sv12[40] = w2_c4 * sp[30];
        sv12[41] = sv12[40] + sv12[40];
        sv12[42] = w2_c4 * w2_c4;
        sv12[43] = std::sqrt(1e-8 + sv12[42]);
        sv12[44] = sv12[41] / (2 * sv12[43]);
        sv12[45] = sp[30] + sv12[44];
        sv12[46] = w2_c3 * w2_c3;
        sv12[47] = w2_c4 + sv12[43];
        sv12[48] = sv12[46] / (0.5 * sv12[47]);
        sv12[49] = 0.5 * sv12[45] * sv12[48];
        sv12[50] = sv12[39] + -1 * sv12[49];
        sv12[51] = sv12[50] / (0.5 * sv12[47]);
        sv12[52] = 2.0 * sv12[51] * (sp[31] / 2);
        sv12[53] = 2.0 * sv12[51] * (sp[32] / 2);
        sv12[54] = 2.0 * (0.0001 + sv12[48]) * (sp[37] / 2);
        sv12[55] = 2.0 * (0.0001 + sv12[48]) * (sp[38] / 2);
        sv12[56] = 2.0 * (0.0001 + sv12[48]) * (sp[39] / 2);
        sv12[57] = w2_c3 * sp[42];
        sv12[58] = sv12[57] + sv12[57];
        sv12[59] = w2_c4 * sp[45];
        sv12[60] = sv12[59] + sv12[59];
        sv12[61] = sv12[60] / (2 * sv12[43]);
        sv12[62] = sp[45] + sv12[61];
        sv12[63] = 0.5 * sv12[62] * sv12[48];
        sv12[64] = sv12[58] + -1 * sv12[63];
        sv12[65] = sv12[64] / (0.5 * sv12[47]);
        sv12[66] = 2.0 * sv12[65] * (sp[6] / 2);
        sv12[67] = 2.0 * sv12[65] * (sp[5] / 2);
        sv12[68] = 2.0 * sv12[65] * (sp[4] / 2);
        sv12[69] = 2.0 * sv12[65] * (sp[3] / 2);
        sv12[70] = 2.0 * (0.0001 + sv12[48]) * (sp[53] / 2);
        sv12[71] = 2.0 * (0.0001 + sv12[48]) * (sp[54] / 2);
        sv12[72] = 2.0 * (0.0001 + sv12[48]) * (sp[52] / 2);
        sv12[73] = 2.0 * (0.0001 + sv12[48]) * (sp[50] / 2);
        sv12[74] = 2.0 * (0.0001 + sv12[48]) * (sp[47] / 2);
        sv12[75] = 2.0 * (0.0001 + sv12[48]) * (sp[49] / 2);
        sv12[76] = sv12[52] + sv12[66];
        sv12[77] = sv12[53] + sv12[67];
        sv12[78] = sv12[54] + sv12[70];
        sv12[79] = sv12[55] + sv12[71];
        sv12[80] = sv12[56] + sv12[72];
        sv12[81] = sv12[36] + -1 * sv12[76];
        sv12[82] = sv12[37] + -1 * sv12[77];
        sv12[83] = w2_c1 * sv12[11];
        sv12[84] = w2_c0 * sv12[15];
        sv12[85] = sv12[83] + sv12[84];
        sv12[86] = sv12[11] + sv12[11];
        sv12[87] = 2.0 * sv12[51] * (sv12[86] / 2);
        sv12[88] = 2.0 * (0.0001 + sv12[48]) * (sp[64] / 2);
        sv12[89] = sv12[87] + sv12[88];
        sv12[90] = sv12[2] + sv12[15];
        sv12[91] = 2.0 * sv12[65] * (sv12[90] / 2);
        sv12[92] = 2.0 * (0.0001 + sv12[48]) * (sp[83] / 2);
        sv12[93] = sv12[91] + sv12[92];
        sv12[94] = sv12[89] + sv12[93];
        sv12[95] = sv12[85] + -1 * sv12[94];
        sv12[96] = sv12[95] + sp[86];
        sv12[97] = sv12[96] * sv12[81];
        sv12[98] = sv12[96] * sv12[82];
        sv12[99] = sv12[96] * (-1 * sv12[68]);
        sv12[100] = sv12[96] * (-1 * sv12[69]);
        sv12[101] = sv12[96] * (-1 * sv12[78]);
        sv12[102] = sv12[96] * (-1 * sv12[79]);
        sv12[103] = sv12[96] * (-1 * sv12[80]);
        sv12[104] = sv12[96] * (-1 * sv12[73]);
        sv12[105] = sv12[96] * (-1 * sv12[74]);
        sv12[106] = sv12[96] * (-1 * sv12[75]);
        sv12[107] = sv12[96] * sp[3];
        sv12[108] = sv12[96] * sp[4];
        sv12[109] = 2.0 * sv12[51] * (sp[6] / 2);
        sv12[110] = 2.0 * sv12[51] * (sp[5] / 2);
        sv12[111] = 2.0 * sv12[51] * (sp[4] / 2);
        sv12[112] = 2.0 * sv12[51] * (sp[3] / 2);
        sv12[113] = 2.0 * (0.0001 + sv12[48]) * (sp[36] / 2);
        sv12[114] = 2.0 * (0.0001 + sv12[48]) * (sp[33] / 2);
        sv12[115] = 2.0 * (0.0001 + sv12[48]) * (sp[35] / 2);
        sv12[116] = 2.0 * sv12[65] * (sp[87] / 2);
        sv12[117] = 2.0 * sv12[65] * (sp[88] / 2);
        sv12[118] = 2.0 * (0.0001 + sv12[48]) * (sp[89] / 2);
        sv12[119] = 2.0 * (0.0001 + sv12[48]) * (sp[90] / 2);
        sv12[120] = 2.0 * (0.0001 + sv12[48]) * (sp[91] / 2);
        sv12[121] = sv12[116] + sv12[111];
        sv12[122] = sv12[117] + sv12[112];
        sv12[123] = sv12[118] + sv12[113];
        sv12[124] = sv12[119] + sv12[114];
        sv12[125] = sv12[120] + sv12[115];
        sv12[126] = sv12[37] + -1 * sv12[121];
        sv12[127] = sv12[36] + -1 * sv12[122];
        sv12[128] = w2_c1 * sv12[2];
        sv12[129] = w2_c0 * sv12[6];
        sv12[130] = sv12[128] + sv12[129];
        sv12[131] = 2.0 * sv12[51] * (sv12[90] / 2);
        sv12[132] = 2.0 * (0.0001 + sv12[48]) * (sp[104] / 2);
        sv12[133] = sv12[131] + sv12[132];
        sv12[134] = sv12[6] + sv12[6];
        sv12[135] = 2.0 * sv12[65] * (sv12[134] / 2);
        sv12[136] = 2.0 * (0.0001 + sv12[48]) * (sp[108] / 2);
        sv12[137] = sv12[135] + sv12[136];
        sv12[138] = sv12[133] + sv12[137];
        sv12[139] = sv12[130] + -1 * sv12[138];
        sv12[140] = sv12[139] + sp[111];
        sv12[141] = sv12[140] * (-1 * sv12[109]);
        sv12[142] = sv12[140] * (-1 * sv12[110]);
        sv12[143] = sv12[140] * sv12[126];
        sv12[144] = sv12[140] * sv12[127];
        sv12[145] = sv12[140] * (-1 * sv12[74]);
        sv12[146] = sv12[140] * (-1 * sv12[73]);
        sv12[147] = sv12[140] * (-1 * sv12[75]);
        sv12[148] = sv12[140] * (-1 * sv12[123]);
        sv12[149] = sv12[140] * (-1 * sv12[124]);
        sv12[150] = sv12[140] * (-1 * sv12[125]);
        sv12[151] = sv12[140] * sp[6];
        sv12[152] = sv12[140] * sp[5];
        sv12[153] = sv12[97] + sv12[141];
        sv12[154] = sv12[98] + sv12[142];
        sv12[155] = sv12[143] + sv12[99];
        sv12[156] = sv12[144] + sv12[100];
        sv12[157] = sv12[101] + sv12[145];
        sv12[158] = sv12[102] + sv12[146];
        sv12[159] = sv12[103] + sv12[147];
        sv12[160] = sv12[148] + sv12[104];
        sv12[161] = sv12[149] + sv12[105];
        sv12[162] = sv12[150] + sv12[106];
        sv12[163] = sv12[107] + sv12[151];
        sv12[164] = sv12[152] + sv12[108];
        sv12[165] = std::sqrt(sv12[25]);
        sv12[166] = 2.0 * sp[23] * sv12[165];
        sv12[167] = 0.5 * sv12[166] / (0.0001 + sv12[48]);
        sv12[168] = std::exp(-2.0 * sv12[167]);
        sv12[169] = (1.0 + sv12[168]) / (1.0 + -1 * sv12[168]);
        sv12[170] = -1 * (1.0 / sv12[167]) + sv12[169];
        sv12[171] = 2.0 * sp[23] / sv12[165];
        sv12[172] = sv12[170] * sv12[171];
        sv12[173] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[167]) * sp[24];
        sv12[174] = sv12[173] / (0.0001 + sv12[48]);
        sv12[175] = (sv12[167] >= 0.1 ? sv12[172] : sv12[174]);
        sv12[176] = sv12[153] * sv12[175];
        sv12[177] = sv12[154] * sv12[175];
        sv12[178] = sv12[155] * sv12[175];
        sv12[179] = sv12[156] * sv12[175];
        sv12[180] = sv12[157] * sv12[175];
        sv12[181] = sv12[158] * sv12[175];
        sv12[182] = sv12[159] * sv12[175];
        sv12[183] = sv12[160] * sv12[175];
        sv12[184] = sv12[161] * sv12[175];
        sv12[185] = sv12[162] * sv12[175];
        sv12[186] = sv12[163] * sv12[175];
        sv12[187] = sv12[164] * sv12[175];
        sv12[188] = sv12[28] + sv12[176];
        sv12[189] = sv12[29] + sv12[177];
        sv12[190] = sv12[30] + sv12[178];
        sv12[191] = sv12[31] + sv12[179];
        sv12[192] = sp[3] * sv12[51];
        sv12[193] = sp[4] * sv12[51];
        sv12[194] = sp[6] * sv12[65];
        sv12[195] = sp[5] * sv12[65];
        sv12[196] = sv12[192] + sv12[194];
        sv12[197] = sv12[193] + sv12[195];
        sv12[198] = sv12[36] + -1 * sv12[196];
        sv12[199] = sv12[37] + -1 * sv12[197];
        sv12[200] = w2_c1 * sp[114];
        sv12[201] = w2_c0 * sp[117];
        sv12[202] = sv12[200] + sv12[201];
        sv12[203] = sp[114] * sv12[51];
        sv12[204] = sp[117] * sv12[65];
        sv12[205] = sv12[203] + sv12[204];
        sv12[206] = sv12[202] + -1 * sv12[205];
        sv12[207] = w2_c4 + sv12[206];
        sv12[208] = w2_d1_c1 * sp[3];
        sv12[209] = w2_d0_c1 * sp[4];
        sv12[210] = sv12[208] + sv12[209];
        sv12[211] = sv12[210] + sv12[210];
        sv12[212] = sv12[211] / 2 * (sv12[211] / 2);
        sv12[213] = w2_d1_c0 * sp[3];
        sv12[214] = w2_d0_c0 * sp[4];
        sv12[215] = sv12[213] + sv12[214];
        sv12[216] = w2_d0_c1 * sp[5];
        sv12[217] = w2_d1_c1 * sp[6];
        sv12[218] = sv12[216] + sv12[217];
        sv12[219] = sv12[215] + sv12[218];
        sv12[220] = sv12[219] / 2 * (sv12[219] / 2);
        sv12[221] = sv12[212] + sv12[220];
        sv12[222] = w2_d0_c0 * sp[5];
        sv12[223] = w2_d1_c0 * sp[6];
        sv12[224] = sv12[222] + sv12[223];
        sv12[225] = sv12[224] + sv12[224];
        sv12[226] = sv12[225] / 2 * (sv12[225] / 2);
        sv12[227] = sv12[226] + sv12[220];
        sv12[228] = sv12[221] + sv12[227];
        sv12[229] = 2.0 * sv12[228] * sv12[48];
        sv12[230] = sv12[207] + -1 * sv12[229];
        sv12[231] = sv12[198] * sv12[230];
        sv12[232] = sv12[199] * sv12[230];
        sv12[233] = sv12[231] * sv12[175];
        sv12[234] = sv12[232] * sv12[175];
        sv12[235] = sv12[51] / 1.3 * sp[3];
        sv12[236] = sv12[51] / 1.3 * sp[4];
        sv12[237] = sv12[65] / 1.3 * sp[6];
        sv12[238] = sv12[65] / 1.3 * sp[5];
        sv12[239] = sv12[235] + sv12[237];
        sv12[240] = sv12[238] + sv12[236];
        sv12[241] = sv12[36] + -1 * sv12[239];
        sv12[242] = sv12[37] + -1 * sv12[240];
        sv12[243] = std::sqrt(1e-8 + sv12[46]);
        sv12[244] = w2_c3 + sv12[243];
        sv12[245] = 1.92 * w1_c4 * (1.0 / (0.5 * sv12[244]));
        sv12[246] = w1_c4 / (0.5 * sv12[244]);
        sv12[247] = sv12[245] + 1.92 * sv12[246];
        sv12[248] = w2_c1 * sp[120];
        sv12[249] = w2_c0 * sp[123];
        sv12[250] = sv12[248] + sv12[249];
        sv12[251] = sp[120] * (sv12[51] / 1.3);
        sv12[252] = sp[123] * (sv12[65] / 1.3);
        sv12[253] = sv12[251] + sv12[252];
        sv12[254] = sv12[250] + -1 * sv12[253];
        sv12[255] = 1.92 * w1_c4 * sv12[246];
        sv12[256] = sv12[254] + sv12[255];
        sv12[257] = std::exp(w3);
        sv12[258] = w2_c3 * (0.09 * (1.44 * sv12[257]));
        sv12[259] = 2.0 * sv12[228] * sv12[258];
        sv12[260] = sv12[256] + -1 * sv12[259];
        sv12[261] = sv12[241] * sv12[260];
        sv12[262] = sv12[242] * sv12[260];
        sv12[263] = sv12[260] * sv12[247];
        sv12[264] = 0.5 * sv12[166] / (0.0001 + sv12[48] / 1.3);
        sv12[265] = std::exp(-2.0 * sv12[264]);
        sv12[266] = (1.0 + sv12[265]) / (1.0 + -1 * sv12[265]);
        sv12[267] = -1 * (1.0 / sv12[264]) + sv12[266];
        sv12[268] = sv12[267] * sv12[171];
        sv12[269] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[264]) * sp[24];
        sv12[270] = sv12[269] / (0.0001 + sv12[48] / 1.3);
        sv12[271] = (sv12[264] >= 0.1 ? sv12[268] : sv12[270]);
        sv12[272] = sv12[261] * sv12[271];
        sv12[273] = sv12[262] * sv12[271];
        sv12[274] = sv12[263] * sv12[271];
        sv12[275] = w1_c0 + -1 * w2_c0;
        sv12[276] = w1_c1 + -1 * w2_c1;
        sv12[277] = w1_c3 + -1 * w2_c3;
        sv12[278] = w1_c4 + -1 * w2_c4;
        sv12[279] = sv12[275] * w[0][0];
        sv12[280] = sv12[276] * w[0][0];
        sv12[281] = sv12[278] * w[0][0];
        sv12[282] = sv12[277] * w[0][0];
        sv12[283] = sv12[274] + sv12[281];
        sv12[284] = w1_c4 + sv12[282];
        sv12[285] = sv12[283] + -1 * sv12[259];
        sv12[286] = sv12[284] + -1 * sv12[229];
        sv12[287] = w1_c3 * w1_c3;
        sv12[288] = std::sqrt(1e-8 + sv12[287]);
        sv12[289] = w1_c3 + sv12[288];
        sv12[290] = w1_c4 / (0.5 * sv12[289]);
        sv12[291] = 1.92 * w1_c4 * sv12[290];
        sv12[292] = sv12[285] + sv12[291];
        sv12[293] = w1_c2 * sp[3];
        sv12[294] = w1_c2 * sp[4];
        sv12[295] = w1_c2 * sp[5];
        sv12[296] = w1_c2 * sp[6];
        sv12[297] = sv12[188] + -1 * sv12[293];
        sv12[298] = sv12[189] + -1 * sv12[294];
        sv12[299] = sv12[190] + -1 * sv12[295];
        sv12[300] = sv12[191] + -1 * sv12[296];
        sv12[301] = w1_c4 * w1_c4;
        sv12[302] = std::sqrt(1e-8 + sv12[301]);
        sv12[303] = w1_c4 + sv12[302];
        sv12[304] = sv12[287] / (0.5 * sv12[303]);
        sv12[305] = sp[128] * (0.0001 + sv12[304]);
        sv12[306] = sp[129] * (0.0001 + sv12[304]);
        sv12[307] = sv12[305] + sv12[233];
        sv12[308] = sv12[306] + sv12[234];
        sv12[309] = sp[134] * (0.0001 + sv12[304] / 1.3);
        sv12[310] = sp[135] * (0.0001 + sv12[304] / 1.3);
        sv12[311] = sv12[309] + sv12[272];
        sv12[312] = sv12[310] + sv12[273];
        sv12[313] = w1_c1 * sp[114];
        sv12[314] = w1_c0 * sp[117];
        sv12[315] = sv12[313] + sv12[314];
        sv12[316] = sv12[315] + sv12[286];
        sv12[317] = w1_c1 * sp[120];
        sv12[318] = w1_c0 * sp[123];
        sv12[319] = sv12[317] + sv12[318];
        sv12[320] = sv12[319] + sv12[292];
        sv12[321] = sv12[86] / 2 * (sp[31] / 2);
        sv12[322] = sv12[86] / 2 * (sp[32] / 2);
        sv12[323] = sv12[90] / 2 * (sp[6] / 2);
        sv12[324] = sv12[90] / 2 * (sp[5] / 2);
        sv12[325] = sv12[90] / 2 * (sp[4] / 2);
        sv12[326] = sv12[90] / 2 * (sp[3] / 2);
        sv12[327] = sv12[321] + sv12[323];
        sv12[328] = sv12[322] + sv12[324];
        sv12[329] = sv12[134] / 2 * (sp[87] / 2);
        sv12[330] = sv12[134] / 2 * (sp[88] / 2);
        sv12[331] = sv12[329] + sv12[325];
        sv12[332] = sv12[330] + sv12[326];
        sv12[333] = sv12[327] + sv12[323];
        sv12[334] = sv12[328] + sv12[324];
        sv12[335] = sv12[331] + sv12[325];
        sv12[336] = sv12[332] + sv12[326];
        sv12[337] = sv12[333] * (2.0 * (0.0001 + sv12[304]));
        sv12[338] = sv12[334] * (2.0 * (0.0001 + sv12[304]));
        sv12[339] = sv12[335] * (2.0 * (0.0001 + sv12[304]));
        sv12[340] = sv12[336] * (2.0 * (0.0001 + sv12[304]));
        sv12[341] = sv12[297] + sv12[337];
        sv12[342] = sv12[298] + sv12[338];
        sv12[343] = sv12[299] + sv12[339];
        sv12[344] = sv12[300] + sv12[340];
        sv12[345] = sv12[8] + sv12[279];
        sv12[346] = sv12[17] + sv12[280];
        sv12[347] = sv12[345] * sp[136];
        sv12[348] = sv12[346] * sp[136];
        sv12[349] = sv12[341] * sp[136];
        sv12[350] = sv12[342] * sp[136];
        sv12[351] = sv12[343] * sp[136];
        sv12[352] = sv12[344] * sp[136];
        sv12[353] = sv12[180] * sp[136];
        sv12[354] = sv12[181] * sp[136];
        sv12[355] = sv12[182] * sp[136];
        sv12[356] = sv12[183] * sp[136];
        sv12[357] = sv12[184] * sp[136];
        sv12[358] = sv12[185] * sp[136];
        sv12[359] = sv12[186] * sp[136];
        sv12[360] = sv12[187] * sp[136];
        sv12[361] = sv12[307] * sp[136];
        sv12[362] = sv12[308] * sp[136];
        sv12[363] = sv12[311] * sp[136];
        sv12[364] = sv12[312] * sp[136];
        sv12[365] = sv12[320] * sp[136];
        sv12[366] = sv12[316] * sp[136];
        sv12[367] = sv12[18] * sp[136];
        const double fw0 = sv12[347] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            BF0[i] += fw0 * FE70_C0_Q12[0][iq][i];
        const double fw1 = sv12[351] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF1[i] += fw1 * FE70_C0_D10_Q12[0][iq][i];
        const double fw2 = sv12[358] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF2[i] += fw2 * FE70_C0_D02_Q12[0][0][i];
        const double fw3 = sv12[352] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF3[i] += fw3 * FE70_C0_D01_Q12[0][iq][i];
        const double fw4 = sv12[357] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF4[i] += fw4 * FE70_C0_D02_Q12[0][0][i];
        const double fw5 = sv12[356] * weights12[iq];
        for (int i = 0; i < 4; ++i)
            BF5[i] += fw5 * FE70_C0_D11_Q12[0][0][i];
        const double fw6 = sv12[348] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            BF6[i] += fw6 * FE70_C0_Q12[0][iq][i];
        const double fw7 = sv12[350] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF7[i] += fw7 * FE70_C0_D10_Q12[0][iq][i];
        const double fw8 = sv12[355] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF8[i] += fw8 * FE70_C0_D02_Q12[0][0][i];
        const double fw9 = sv12[349] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF9[i] += fw9 * FE70_C0_D01_Q12[0][iq][i];
        const double fw10 = sv12[353] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF10[i] += fw10 * FE70_C0_D02_Q12[0][0][i];
        const double fw11 = sv12[354] * weights12[iq];
        for (int i = 0; i < 4; ++i)
            BF11[i] += fw11 * FE70_C0_D11_Q12[0][0][i];
        const double fw12 = sv12[360] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF12[i] += fw12 * FE3_C0_D01_Q12[0][0][i];
        const double fw13 = sv12[367] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF13[i] += fw13 * FE3_C0_Q12[0][iq][i];
        const double fw14 = sv12[359] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF14[i] += fw14 * FE3_C0_D01_Q12[0][0][i];
        const double fw15 = sv12[362] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF15[i] += fw15 * FE3_C0_D01_Q12[0][0][i];
        const double fw16 = sv12[366] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF16[i] += fw16 * FE3_C0_Q12[0][iq][i];
        const double fw17 = sv12[361] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF17[i] += fw17 * FE3_C0_D01_Q12[0][0][i];
        const double fw18 = sv12[364] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF18[i] += fw18 * FE3_C0_D01_Q12[0][0][i];
        const double fw19 = sv12[365] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF19[i] += fw19 * FE3_C0_Q12[0][iq][i];
        const double fw20 = sv12[363] * weights12[iq];
        for (int i = 0; i < 2; ++i)
            BF20[i] += fw20 * FE3_C0_D01_Q12[0][0][i];
    }
    std::fill(A, A + 21, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[3] = { 0, 1, 5 };
    static const int DM2[5] = { 0, 2, 3, 4, 5 };
    static const int DM3[3] = { 0, 2, 4 };
    static const int DM4[4] = { 0, 3, 4, 5 };
    static const int DM5[5] = { 6, 7, 9, 10, 11 };
    static const int DM6[3] = { 6, 7, 11 };
    static const int DM7[5] = { 6, 8, 9, 10, 11 };
    static const int DM8[3] = { 6, 8, 10 };
    static const int DM9[4] = { 6, 9, 10, 11 };
    static const int DM10[2] = { 12, 14 };
    static const int DM11[2] = { 15, 17 };
    static const int DM12[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 5; ++i)
        A[DM0[i]] += BF1[i];
    for (int i = 0; i < 3; ++i)
        A[DM1[i]] += BF2[i];
    for (int i = 0; i < 5; ++i)
        A[DM2[i]] += BF3[i];
    for (int i = 0; i < 3; ++i)
        A[DM3[i]] += BF4[i];
    for (int i = 0; i < 4; ++i)
        A[DM4[i]] += BF5[i];
    for (int i = 0; i < 6; ++i)
        A[i + 6] += BF6[i];
    for (int i = 0; i < 5; ++i)
        A[DM5[i]] += BF7[i];
    for (int i = 0; i < 3; ++i)
        A[DM6[i]] += BF8[i];
    for (int i = 0; i < 5; ++i)
        A[DM7[i]] += BF9[i];
    for (int i = 0; i < 3; ++i)
        A[DM8[i]] += BF10[i];
    for (int i = 0; i < 4; ++i)
        A[DM9[i]] += BF11[i];
    for (int i = 0; i < 2; ++i)
        A[i + 12] += BF12[i];
    for (int i = 0; i < 3; ++i)
        A[i + 12] += BF13[i];
    for (int i = 0; i < 2; ++i)
        A[DM10[i]] += BF14[i];
    for (int i = 0; i < 2; ++i)
        A[i + 15] += BF15[i];
    for (int i = 0; i < 3; ++i)
        A[i + 15] += BF16[i];
    for (int i = 0; i < 2; ++i)
        A[DM11[i]] += BF17[i];
    for (int i = 0; i < 2; ++i)
        A[i + 18] += BF18[i];
    for (int i = 0; i < 3; ++i)
        A[i + 18] += BF19[i];
    for (int i = 0; i < 2; ++i)
        A[DM12[i]] += BF20[i];
  }

};


class rans_exterior_facet_integral_0_3: public ufc::exterior_facet_integral
{
public:

  rans_exterior_facet_integral_0_3() : ufc::exterior_facet_integral()
  {

  }

  ~rans_exterior_facet_integral_0_3() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({false, true, true, false});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 18
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.1739274225687268, 0.3260725774312731, 0.3260725774312731, 0.1739274225687268 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE30_C0_D01_F_Q4[3][4][5] =
        { { { 1.0, -0.7222726231881047, 3.722272623188091, -0.2777273768118826, -3.722272623188107 },
            { 1.0, 0.3200379128302891, 2.679962087169697, -1.320037912830275, -2.679962087169714 },
            { 1.0, 1.679962087169715, 1.320037912830271, -2.679962087169701, -1.320037912830287 },
            { 1.0, 2.722272623188108, 0.2777273768118786, -3.722272623188096, -0.2777273768118922 } },
          { { -2.72227262318811, -0.722272623188105, 0.0, 3.444545246376218, 0.0 },
            { -1.679962087169718, 0.3200379128302888, 0.0, 1.359924174339433, 0.0 },
            { -0.3200379128302928, 1.679962087169715, 0.0, -1.359924174339417, 0.0 },
            { 0.7222726231881, 2.722272623188108, 0.0, -3.444545246376202, 0.0 } },
          { { -2.72227262318811, -1.0, 0.2777273768118848, 3.722272623188112, -0.2777273768118925 },
            { -1.679962087169717, -1.0, 1.320037912830276, 2.679962087169721, -1.320037912830287 },
            { -0.3200379128302917, -1.0, 2.6799620871697, 1.320037912830298, -2.679962087169714 },
            { 0.7222726231880999, -1.0, 3.722272623188092, 0.2777273768119067, -3.722272623188106 } } };
    alignas(32) static const double FE30_C0_D10_F_Q4[3][4][5] =
        { { { 1.0, 2.722272623188104, 0.2777273768118936, -0.2777273768118936, -3.722272623188106 },
            { 1.0, 1.679962087169712, 1.320037912830285, -1.320037912830285, -2.679962087169713 },
            { 1.0, 0.3200379128302879, 2.679962087169708, -2.679962087169708, -1.320037912830288 },
            { 1.0, -0.7222726231881051, 3.722272623188099, -3.722272623188099, -0.2777273768118945 } },
          { { -2.722272623188107, -1.0, 0.277727376811893, -0.277727376811893, 3.72227262318811 },
            { -1.679962087169713, -1.0, 1.320037912830285, -1.320037912830285, 2.679962087169716 },
            { -0.3200379128302884, -1.0, 2.679962087169709, -2.679962087169709, 1.320037912830289 },
            { 0.7222726231881045, -1.0, 3.722272623188099, -3.722272623188099, 0.2777273768118963 } },
          { { -2.722272623188106, -0.7222726231881095, 0.0, 0.0, 3.444545246376216 },
            { -1.679962087169712, 0.3200379128302852, 0.0, 0.0, 1.359924174339427 },
            { -0.3200379128302857, 1.679962087169712, 0.0, 0.0, -1.359924174339426 },
            { 0.7222726231881069, 2.722272623188104, 0.0, 0.0, -3.444545246376211 } } };
    alignas(32) static const double FE30_C0_F_Q4[3][4][6] =
        { { { 0.0, 0.8013460293699309, -0.05979028222412166, 0.2584442528541909, 0.0, 0.0 },
            { 0.0, 0.2277840767909521, -0.1121969667939041, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.1121969667939041, 0.227784076790952, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.05979028222412169, 0.8013460293699309, 0.2584442528541908, 0.0, 0.0 } },
          { { 0.8013460293699309, 0.0, -0.05979028222412166, 0.0, 0.2584442528541908, 0.0 },
            { 0.2277840767909521, 0.0, -0.1121969667939041, 0.0, 0.8844128900029518, 0.0 },
            { -0.1121969667939041, 0.0, 0.2277840767909521, 0.0, 0.8844128900029519, 0.0 },
            { -0.05979028222412166, 0.0, 0.8013460293699309, 0.0, 0.2584442528541906, 0.0 } },
          { { 0.8013460293699309, -0.05979028222412169, 0.0, 0.0, 0.0, 0.2584442528541908 },
            { 0.2277840767909521, -0.1121969667939041, 0.0, 0.0, 0.0, 0.8844128900029519 },
            { -0.1121969667939041, 0.2277840767909522, 0.0, 0.0, 0.0, 0.884412890002952 },
            { -0.05979028222412169, 0.8013460293699308, 0.0, 0.0, 0.0, 0.2584442528541909 } } };
    alignas(32) static const double FE32_C2_D01_F_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE32_C2_F_Q4[3][4][3] =
        { { { 0.0, 0.9305681557970263, 0.06943184420297369 },
            { 0.0, 0.6699905217924281, 0.3300094782075718 },
            { 0.0, 0.3300094782075719, 0.6699905217924279 },
            { 0.0, 0.06943184420297382, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.0, 0.06943184420297369 },
            { 0.6699905217924281, 0.0, 0.3300094782075718 },
            { 0.3300094782075719, 0.0, 0.669990521792428 },
            { 0.06943184420297382, 0.0, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.06943184420297367, 0.0 },
            { 0.6699905217924281, 0.3300094782075718, 0.0 },
            { 0.3300094782075719, 0.6699905217924281, 0.0 },
            { 0.06943184420297374, 0.9305681557970263, 0.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE32_C2_D01_F_Q4[0][0][0] + coordinate_dofs[2] * FE32_C2_D01_F_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE32_C2_D01_F_Q4[0][0][0] + coordinate_dofs[5] * FE32_C2_D01_F_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE32_C2_D01_F_Q4[0][0][0] + coordinate_dofs[4] * FE32_C2_D01_F_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE32_C2_D01_F_Q4[0][0][0] + coordinate_dofs[3] * FE32_C2_D01_F_Q4[0][0][1];
    const double w1_d1_c3 = w[1][15] * FE32_C2_D01_F_Q4[0][0][0] + w[1][17] * FE32_C2_D01_F_Q4[0][0][1];
    double w1_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c3 += w[1][ic + 15] * FE32_C2_D01_F_Q4[0][0][ic];
    const double w1_d1_c4 = w[1][18] * FE32_C2_D01_F_Q4[0][0][0] + w[1][20] * FE32_C2_D01_F_Q4[0][0][1];
    double w1_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c4 += w[1][ic + 18] * FE32_C2_D01_F_Q4[0][0][ic];
    alignas(32) double sp[74];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = triangle_reference_facet_normals[facet][1] * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = triangle_reference_facet_normals[facet][0] * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet][0] * sp[9];
    sp[11] = -1 * J_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[20] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[21] = sp[19] + sp[20];
    sp[22] = std::sqrt(sp[21]);
    sp[23] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[24] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[25] = sp[23] + sp[24];
    sp[26] = std::sqrt(sp[25]);
    sp[27] = sp[22] * sp[26];
    sp[28] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[29] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[30] = sp[28] + sp[29];
    sp[31] = std::sqrt(sp[30]);
    sp[32] = sp[27] * sp[31];
    sp[33] = triangle_reference_cell_volume * sp[2];
    sp[34] = std::abs(sp[33]);
    sp[35] = sp[32] / (4.0 * sp[34]);
    sp[36] = sp[3] * sp[17];
    sp[37] = sp[5] * sp[17];
    sp[38] = sp[11] * sp[18];
    sp[39] = sp[9] * sp[18];
    sp[40] = sp[36] + sp[38];
    sp[41] = sp[37] + sp[39];
    sp[42] = w1_d1_c3 * sp[3];
    sp[43] = w1_d0_c3 * sp[5];
    sp[44] = sp[42] + sp[43];
    sp[45] = sp[44] * sp[17];
    sp[46] = w1_d0_c3 * sp[9];
    sp[47] = w1_d1_c3 * sp[11];
    sp[48] = sp[46] + sp[47];
    sp[49] = sp[48] * sp[18];
    sp[50] = sp[45] + sp[49];
    sp[51] = w1_d1_c4 * sp[3];
    sp[52] = w1_d0_c4 * sp[5];
    sp[53] = sp[51] + sp[52];
    sp[54] = sp[53] * sp[17];
    sp[55] = w1_d0_c4 * sp[9];
    sp[56] = w1_d1_c4 * sp[11];
    sp[57] = sp[55] + sp[56];
    sp[58] = sp[57] * sp[18];
    sp[59] = sp[54] + sp[58];
    sp[60] = sp[11] + sp[11];
    sp[61] = sp[9] + sp[9];
    sp[62] = sp[5] + sp[5];
    sp[63] = sp[3] + sp[3];
    sp[64] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[65] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[66] = sp[64] + sp[65];
    sp[67] = sp[66] * sp[66];
    sp[68] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[69] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[70] = sp[68] + sp[69];
    sp[71] = sp[70] * sp[70];
    sp[72] = sp[67] + sp[71];
    sp[73] = std::sqrt(sp[72]);
    alignas(32) double BF0[6] = {};
    alignas(32) double BF1[5] = {};
    alignas(32) double BF2[5] = {};
    alignas(32) double BF3[6] = {};
    alignas(32) double BF4[5] = {};
    alignas(32) double BF5[5] = {};
    alignas(32) double BF6[2] = {};
    alignas(32) double BF7[3] = {};
    alignas(32) double BF8[2] = {};
    alignas(32) double BF9[2] = {};
    alignas(32) double BF10[3] = {};
    alignas(32) double BF11[2] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w1_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c4 += w[1][ic + 18] * FE32_C2_F_Q4[facet][iq][ic];
        double w1_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c3 += w[1][ic + 15] * FE32_C2_F_Q4[facet][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE30_C0_F_Q4[facet][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE30_C0_F_Q4[facet][iq][ic];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c0 += w[1][ic] * FE30_C0_F_Q4[facet][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c1 += w[1][ic + 6] * FE30_C0_F_Q4[facet][iq][ic];
        const double w1_d1_c0 = w[1][0] * FE30_C0_D01_F_Q4[facet][iq][0] + w[1][2] * FE30_C0_D01_F_Q4[facet][iq][1] + w[1][3] * FE30_C0_D01_F_Q4[facet][iq][2] + w[1][4] * FE30_C0_D01_F_Q4[facet][iq][3] + w[1][5] * FE30_C0_D01_F_Q4[facet][iq][4];
        const double w1_d0_c0 = w[1][0] * FE30_C0_D10_F_Q4[facet][iq][0] + w[1][1] * FE30_C0_D10_F_Q4[facet][iq][1] + w[1][3] * FE30_C0_D10_F_Q4[facet][iq][2] + w[1][4] * FE30_C0_D10_F_Q4[facet][iq][3] + w[1][5] * FE30_C0_D10_F_Q4[facet][iq][4];
        const double w1_d0_c1 = w[1][6] * FE30_C0_D10_F_Q4[facet][iq][0] + w[1][7] * FE30_C0_D10_F_Q4[facet][iq][1] + w[1][9] * FE30_C0_D10_F_Q4[facet][iq][2] + w[1][10] * FE30_C0_D10_F_Q4[facet][iq][3] + w[1][11] * FE30_C0_D10_F_Q4[facet][iq][4];
        const double w1_d1_c1 = w[1][6] * FE30_C0_D01_F_Q4[facet][iq][0] + w[1][8] * FE30_C0_D01_F_Q4[facet][iq][1] + w[1][9] * FE30_C0_D01_F_Q4[facet][iq][2] + w[1][10] * FE30_C0_D01_F_Q4[facet][iq][3] + w[1][11] * FE30_C0_D01_F_Q4[facet][iq][4];
        alignas(32) double sv4[119];
        sv4[0] = w1_c3 * w1_c3;
        sv4[1] = w1_c4 * w1_c4;
        sv4[2] = std::sqrt(1e-8 + sv4[1]);
        sv4[3] = w1_c4 + sv4[2];
        sv4[4] = sv4[0] / (0.5 * sv4[3]);
        sv4[5] = w2_c1 * sp[17];
        sv4[6] = w2_c0 * sp[18];
        sv4[7] = sv4[5] + sv4[6];
        sv4[8] = std::tanh(100.0 * sv4[7]);
        sv4[9] = (0.0001 + sv4[4] / 1.3) * (100000.0 * (0.5 + -1 * (0.5 * sv4[8])));
        sv4[10] = sv4[9] * (1 / (2.0 * sp[35]));
        sv4[11] = w1_c4 * sv4[10];
        sv4[12] = (0.0001 + sv4[4]) * (100000.0 * (0.5 + -1 * (0.5 * sv4[8])));
        sv4[13] = sv4[12] * (1 / (2.0 * sp[35]));
        sv4[14] = w1_c3 * sv4[13];
        sv4[15] = (0.5 + -1 * (0.5 * sv4[8])) * (0.0001 + sv4[4]);
        sv4[16] = sp[40] * sv4[15];
        sv4[17] = sp[41] * sv4[15];
        sv4[18] = w1_c3 * sv4[16];
        sv4[19] = w1_c3 * sv4[17];
        sv4[20] = sp[50] * sv4[15];
        sv4[21] = -1 * sv4[20] + sv4[14];
        sv4[22] = (0.5 + -1 * (0.5 * sv4[8])) * (0.0001 + sv4[4] / 1.3);
        sv4[23] = sp[40] * sv4[22];
        sv4[24] = sp[41] * sv4[22];
        sv4[25] = w1_c4 * sv4[23];
        sv4[26] = w1_c4 * sv4[24];
        sv4[27] = sp[59] * sv4[22];
        sv4[28] = sv4[21] + -1 * sv4[27];
        sv4[29] = w1_c0 * (-1 * sp[17]);
        sv4[30] = w1_c1 * sp[18];
        sv4[31] = sv4[29] + sv4[30];
        sv4[32] = 2.0 * (0.0001 + sv4[4]) * (sp[3] / 2);
        sv4[33] = 2.0 * (0.0001 + sv4[4]) * (sp[5] / 2);
        sv4[34] = 2.0 * (0.0001 + sv4[4]) * (sp[9] / 2);
        sv4[35] = 2.0 * (0.0001 + sv4[4]) * (sp[11] / 2);
        sv4[36] = sv4[32] * sp[17];
        sv4[37] = sv4[33] * sp[17];
        sv4[38] = sv4[34] * sp[17];
        sv4[39] = sv4[35] * sp[17];
        sv4[40] = 2.0 * (0.0001 + sv4[4]) * (sp[60] / 2);
        sv4[41] = 2.0 * (0.0001 + sv4[4]) * (sp[61] / 2);
        sv4[42] = sv4[40] * sp[18];
        sv4[43] = sv4[41] * sp[18];
        sv4[44] = sv4[36] + sv4[42];
        sv4[45] = sv4[37] + sv4[43];
        sv4[46] = sv4[44] * (-1 * sp[17]);
        sv4[47] = sv4[45] * (-1 * sp[17]);
        sv4[48] = -1 * sp[17] * sv4[38];
        sv4[49] = -1 * sp[17] * sv4[39];
        sv4[50] = 2.0 * (0.0001 + sv4[4]) * (sp[62] / 2);
        sv4[51] = 2.0 * (0.0001 + sv4[4]) * (sp[63] / 2);
        sv4[52] = sv4[50] * sp[17];
        sv4[53] = sv4[51] * sp[17];
        sv4[54] = sv4[32] * sp[18];
        sv4[55] = sv4[33] * sp[18];
        sv4[56] = sv4[34] * sp[18];
        sv4[57] = sv4[35] * sp[18];
        sv4[58] = sv4[52] + sv4[56];
        sv4[59] = sv4[53] + sv4[57];
        sv4[60] = sv4[54] * sp[18];
        sv4[61] = sv4[55] * sp[18];
        sv4[62] = sv4[58] * sp[18];
        sv4[63] = sv4[59] * sp[18];
        sv4[64] = sv4[46] + sv4[60];
        sv4[65] = sv4[47] + sv4[61];
        sv4[66] = sv4[48] + sv4[62];
        sv4[67] = sv4[49] + sv4[63];
        sv4[68] = sv4[31] * sv4[64];
        sv4[69] = sv4[31] * sv4[65];
        sv4[70] = sv4[31] * sv4[66];
        sv4[71] = sv4[31] * sv4[67];
        sv4[72] = w1_d1_c0 * sp[3];
        sv4[73] = w1_d0_c0 * sp[5];
        sv4[74] = sv4[72] + sv4[73];
        sv4[75] = w1_d0_c1 * sp[9];
        sv4[76] = w1_d1_c1 * sp[11];
        sv4[77] = sv4[75] + sv4[76];
        sv4[78] = sv4[74] + sv4[77];
        sv4[79] = 2.0 * (0.0001 + sv4[4]) * (sv4[78] / 2);
        sv4[80] = sv4[79] * sp[17];
        sv4[81] = w1_d0_c0 * sp[9];
        sv4[82] = w1_d1_c0 * sp[11];
        sv4[83] = sv4[81] + sv4[82];
        sv4[84] = sv4[83] + sv4[83];
        sv4[85] = 2.0 * (0.0001 + sv4[4]) * (sv4[84] / 2);
        sv4[86] = sv4[85] * sp[18];
        sv4[87] = sv4[80] + sv4[86];
        sv4[88] = sv4[87] * (-1 * sp[17]);
        sv4[89] = w1_d1_c1 * sp[3];
        sv4[90] = w1_d0_c1 * sp[5];
        sv4[91] = sv4[89] + sv4[90];
        sv4[92] = sv4[91] + sv4[91];
        sv4[93] = 2.0 * (0.0001 + sv4[4]) * (sv4[92] / 2);
        sv4[94] = sv4[93] * sp[17];
        sv4[95] = sv4[79] * sp[18];
        sv4[96] = sv4[94] + sv4[95];
        sv4[97] = sv4[96] * sp[18];
        sv4[98] = sv4[88] + sv4[97];
        sv4[99] = sv4[98] * (-1 * sp[17]);
        sv4[100] = sv4[98] * sp[18];
        sv4[101] = 100000.0 * (0.0001 + sv4[4]) * (1 / (2.0 * sp[35]));
        sv4[102] = sv4[31] * sv4[101];
        sv4[103] = sv4[102] * (-1 * sp[17]);
        sv4[104] = sv4[102] * sp[18];
        sv4[105] = -1 * sv4[99] + sv4[103];
        sv4[106] = -1 * sv4[100] + sv4[104];
        sv4[107] = sv4[11] * sp[73];
        sv4[108] = sv4[28] * sp[73];
        sv4[109] = -1 * sv4[18] * sp[73];
        sv4[110] = -1 * sv4[19] * sp[73];
        sv4[111] = -1 * sv4[25] * sp[73];
        sv4[112] = -1 * sv4[26] * sp[73];
        sv4[113] = -1 * sv4[68] * sp[73];
        sv4[114] = -1 * sv4[69] * sp[73];
        sv4[115] = -1 * sv4[70] * sp[73];
        sv4[116] = -1 * sv4[71] * sp[73];
        sv4[117] = sv4[105] * sp[73];
        sv4[118] = sv4[106] * sp[73];
        const double fw0 = sv4[117] * weights4[iq];
        for (int i = 0; i < 6; ++i)
            BF0[i] += fw0 * FE30_C0_F_Q4[facet][iq][i];
        const double fw1 = sv4[114] * weights4[iq];
        for (int i = 0; i < 5; ++i)
            BF1[i] += fw1 * FE30_C0_D10_F_Q4[facet][iq][i];
        const double fw2 = sv4[113] * weights4[iq];
        for (int i = 0; i < 5; ++i)
            BF2[i] += fw2 * FE30_C0_D01_F_Q4[facet][iq][i];
        const double fw3 = sv4[118] * weights4[iq];
        for (int i = 0; i < 6; ++i)
            BF3[i] += fw3 * FE30_C0_F_Q4[facet][iq][i];
        const double fw4 = sv4[115] * weights4[iq];
        for (int i = 0; i < 5; ++i)
            BF4[i] += fw4 * FE30_C0_D10_F_Q4[facet][iq][i];
        const double fw5 = sv4[116] * weights4[iq];
        for (int i = 0; i < 5; ++i)
            BF5[i] += fw5 * FE30_C0_D01_F_Q4[facet][iq][i];
        const double fw6 = sv4[110] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF6[i] += fw6 * FE32_C2_D01_F_Q4[0][0][i];
        const double fw7 = sv4[108] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            BF7[i] += fw7 * FE32_C2_F_Q4[facet][iq][i];
        const double fw8 = sv4[109] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF8[i] += fw8 * FE32_C2_D01_F_Q4[0][0][i];
        const double fw9 = sv4[112] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF9[i] += fw9 * FE32_C2_D01_F_Q4[0][0][i];
        const double fw10 = sv4[107] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            BF10[i] += fw10 * FE32_C2_F_Q4[facet][iq][i];
        const double fw11 = sv4[111] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF11[i] += fw11 * FE32_C2_D01_F_Q4[0][0][i];
    }
    std::fill(A, A + 21, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    static const int DM4[2] = { 15, 17 };
    static const int DM5[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 5; ++i)
        A[DM0[i]] += BF1[i];
    for (int i = 0; i < 5; ++i)
        A[DM1[i]] += BF2[i];
    for (int i = 0; i < 6; ++i)
        A[i + 6] += BF3[i];
    for (int i = 0; i < 5; ++i)
        A[DM2[i]] += BF4[i];
    for (int i = 0; i < 5; ++i)
        A[DM3[i]] += BF5[i];
    for (int i = 0; i < 2; ++i)
        A[i + 15] += BF6[i];
    for (int i = 0; i < 3; ++i)
        A[i + 15] += BF7[i];
    for (int i = 0; i < 2; ++i)
        A[DM4[i]] += BF8[i];
    for (int i = 0; i < 2; ++i)
        A[i + 18] += BF9[i];
    for (int i = 0; i < 3; ++i)
        A[i + 18] += BF10[i];
    for (int i = 0; i < 2; ++i)
        A[DM5[i]] += BF11[i];
  }

};


class rans_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  rans_cell_integral_1_otherwise() : ufc::cell_integral()
  {

  }

  ~rans_cell_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 94
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    alignas(32) static const double FE85_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE85_C0_D02_Q12[1][1][3] = { { { 3.999999999999998, 4.000000000000004, -7.999999999999995 } } };
    alignas(32) static const double FE85_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE85_C0_D11_Q12[1][1][4] = { { { 4.0, 3.999999999999997, -3.999999999999997, -4.000000000000005 } } };
    alignas(32) static const double FE85_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803568, 0.2205142679699366 },
            { -0.05512856699248404, -0.05512856699248409, 0.6533077030470597, 0.2205142679699364, 0.2205142679699362, 0.01592089499803596 },
            { 0.6533077030470594, -0.05512856699248415, -0.05512856699248411, 0.01592089499803581, 0.2205142679699364, 0.2205142679699366 },
            { -0.1249989825350975, 0.001430579517788794, -0.1249989825350975, 0.4999959301403892, 0.2485755252716258, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788821, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880001, 0.173768363654174, -0.1177151633084292, 0.790160442765823, 0.06597478591860526, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880001, 0.1353078281686267, 0.06597478591860512, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860538 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880001, 0.06597478591860524, 0.1353078281686266, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860538 },
            { 0.1737683636541741, -0.04749625719880015, -0.1177151633084292, 0.06597478591860535, 0.7901604427658229, 0.1353078281686269 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q12[0][0][1];
    const double w1_d1_c4 = w[1][18] * FE3_C0_D01_Q12[0][0][0] + w[1][20] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c4 += w[1][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    const double w1_d1_c3 = w[1][15] * FE3_C0_D01_Q12[0][0][0] + w[1][17] * FE3_C0_D01_Q12[0][0][1];
    double w1_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c3 += w[1][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c3 = w[2][15] * FE3_C0_D01_Q12[0][0][0] + w[2][17] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c3 += w[2][ic + 15] * FE3_C0_D01_Q12[0][0][ic];
    const double w2_d1_c4 = w[2][18] * FE3_C0_D01_Q12[0][0][0] + w[2][20] * FE3_C0_D01_Q12[0][0][1];
    double w2_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c4 += w[2][ic + 18] * FE3_C0_D01_Q12[0][0][ic];
    alignas(32) double sp[133];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = sp[3] * sp[3];
    sp[8] = sp[3] * sp[4];
    sp[9] = sp[4] * sp[4];
    sp[10] = sp[6] * sp[6];
    sp[11] = sp[5] * sp[6];
    sp[12] = sp[5] * sp[5];
    sp[13] = sp[7] + sp[10];
    sp[14] = sp[8] + sp[11];
    sp[15] = sp[12] + sp[9];
    sp[16] = w1_d1_c4 * sp[3];
    sp[17] = w1_d0_c4 * sp[4];
    sp[18] = sp[16] + sp[17];
    sp[19] = sp[18] * sp[3];
    sp[20] = sp[18] * sp[4];
    sp[21] = w1_d0_c4 * sp[5];
    sp[22] = w1_d1_c4 * sp[6];
    sp[23] = sp[21] + sp[22];
    sp[24] = sp[23] * sp[6];
    sp[25] = sp[23] * sp[5];
    sp[26] = sp[19] + sp[24];
    sp[27] = sp[25] + sp[20];
    sp[28] = w1_d1_c3 * sp[3];
    sp[29] = w1_d0_c3 * sp[4];
    sp[30] = sp[28] + sp[29];
    sp[31] = sp[30] * sp[3];
    sp[32] = sp[30] * sp[4];
    sp[33] = w1_d0_c3 * sp[5];
    sp[34] = w1_d1_c3 * sp[6];
    sp[35] = sp[33] + sp[34];
    sp[36] = sp[35] * sp[6];
    sp[37] = sp[35] * sp[5];
    sp[38] = sp[31] + sp[36];
    sp[39] = sp[37] + sp[32];
    sp[40] = sp[3] + sp[3];
    sp[41] = sp[4] + sp[4];
    sp[42] = sp[40] / 2 * (sp[40] / 2);
    sp[43] = sp[40] / 2 * (sp[41] / 2);
    sp[44] = sp[41] / 2 * (sp[41] / 2);
    sp[45] = sp[3] / 2 * (sp[6] / 2);
    sp[46] = sp[4] / 2 * (sp[6] / 2);
    sp[47] = sp[6] / 2 * (sp[6] / 2);
    sp[48] = sp[5] / 2 * (sp[6] / 2);
    sp[49] = sp[3] / 2 * (sp[5] / 2);
    sp[50] = sp[5] / 2 * (sp[4] / 2);
    sp[51] = sp[5] / 2 * (sp[5] / 2);
    sp[52] = sp[3] / 2 * (sp[3] / 2);
    sp[53] = sp[3] / 2 * (sp[4] / 2);
    sp[54] = sp[4] / 2 * (sp[4] / 2);
    sp[55] = sp[42] + sp[47];
    sp[56] = sp[43] + sp[48];
    sp[57] = sp[44] + sp[51];
    sp[58] = sp[6] + sp[6];
    sp[59] = sp[5] + sp[5];
    sp[60] = sp[58] / 2 * (sp[58] / 2);
    sp[61] = sp[59] / 2 * (sp[58] / 2);
    sp[62] = sp[59] / 2 * (sp[59] / 2);
    sp[63] = sp[60] + sp[52];
    sp[64] = sp[61] + sp[53];
    sp[65] = sp[62] + sp[54];
    sp[66] = sp[45] + sp[45];
    sp[67] = sp[49] + sp[49];
    sp[68] = sp[63] + sp[52];
    sp[69] = sp[64] + sp[53];
    sp[70] = sp[46] + sp[46];
    sp[71] = sp[50] + sp[50];
    sp[72] = sp[65] + sp[54];
    sp[73] = sp[55] + sp[47];
    sp[74] = sp[56] + sp[48];
    sp[75] = sp[57] + sp[51];
    sp[76] = sp[3] * sp[6];
    sp[77] = sp[3] * sp[5];
    sp[78] = sp[4] * sp[6];
    sp[79] = sp[5] * sp[4];
    sp[80] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[81] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[82] = sp[80] + sp[81];
    sp[83] = std::sqrt(sp[82]);
    sp[84] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[85] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[86] = sp[84] + sp[85];
    sp[87] = std::sqrt(sp[86]);
    sp[88] = sp[83] * sp[87];
    sp[89] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[90] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[91] = sp[89] + sp[90];
    sp[92] = std::sqrt(sp[91]);
    sp[93] = sp[88] * sp[92];
    sp[94] = triangle_reference_cell_volume * sp[2];
    sp[95] = std::abs(sp[94]);
    sp[96] = sp[93] / (4.0 * sp[95]);
    sp[97] = 2.0 * sp[96] * (2.0 * sp[96]);
    sp[98] = w2_d1_c3 * sp[3];
    sp[99] = w2_d0_c3 * sp[4];
    sp[100] = sp[98] + sp[99];
    sp[101] = w2_d1_c4 * sp[3];
    sp[102] = w2_d0_c4 * sp[4];
    sp[103] = sp[101] + sp[102];
    sp[104] = sp[8] + sp[8];
    sp[105] = sp[7] + sp[7];
    sp[106] = sp[104] + sp[104];
    sp[107] = sp[9] + sp[9];
    sp[108] = w2_d0_c3 * sp[5];
    sp[109] = w2_d1_c3 * sp[6];
    sp[110] = sp[108] + sp[109];
    sp[111] = w2_d0_c4 * sp[5];
    sp[112] = w2_d1_c4 * sp[6];
    sp[113] = sp[111] + sp[112];
    sp[114] = sp[77] + sp[78];
    sp[115] = sp[11] + sp[11];
    sp[116] = sp[115] + sp[115];
    sp[117] = sp[10] + sp[10];
    sp[118] = sp[12] + sp[12];
    sp[119] = std::abs(sp[2]);
    sp[120] = sp[6] * sp[119];
    sp[121] = sp[5] * sp[119];
    sp[122] = sp[18] * sp[119];
    sp[123] = sp[30] * sp[119];
    sp[124] = sp[23] * sp[119];
    sp[125] = sp[35] * sp[119];
    sp[126] = sp[3] * sp[119];
    sp[127] = sp[4] * sp[119];
    sp[128] = sp[119] * w[0][0];
    sp[129] = -1 * sp[3] * sp[119];
    sp[130] = -1 * sp[4] * sp[119];
    sp[131] = -1 * sp[6] * sp[119];
    sp[132] = -1 * sp[5] * sp[119];
    alignas(32) double BF0[6][6] = {};
    alignas(32) double BF1[6][5] = {};
    alignas(32) double BF2[6][5] = {};
    alignas(32) double BF3[6][6] = {};
    alignas(32) double BF4[5][5] = {};
    alignas(32) double TP0[5] = {};
    alignas(32) double BF5[5][5] = {};
    alignas(32) double TP1[5] = {};
    alignas(32) double TP2[5] = {};
    alignas(32) double BF6[5][5] = {};
    alignas(32) double TP3[5] = {};
    alignas(32) double BF7[5][5] = {};
    alignas(32) double TP4[5] = {};
    alignas(32) double TP5[5] = {};
    alignas(32) double TP6[5] = {};
    alignas(32) double TP7[5] = {};
    alignas(32) double BF8[5][3] = {};
    alignas(32) double BF9[5][3] = {};
    alignas(32) double TP8[5] = {};
    alignas(32) double TP9[3] = {};
    alignas(32) double TP10[5] = {};
    alignas(32) double TP11[3] = {};
    alignas(32) double TP12[4] = {};
    alignas(32) double TP13[5] = {};
    alignas(32) double TP14[3] = {};
    alignas(32) double TP15[5] = {};
    alignas(32) double TP16[3] = {};
    alignas(32) double TP17[4] = {};
    alignas(32) double TP18[2] = {};
    alignas(32) double TP19[2] = {};
    alignas(32) double BF10[5][5] = {};
    alignas(32) double TP20[5] = {};
    alignas(32) double BF11[5][5] = {};
    alignas(32) double TP21[5] = {};
    alignas(32) double TP22[5] = {};
    alignas(32) double BF12[5][5] = {};
    alignas(32) double TP23[5] = {};
    alignas(32) double BF13[5][5] = {};
    alignas(32) double TP24[5] = {};
    alignas(32) double TP25[5] = {};
    alignas(32) double TP26[5] = {};
    alignas(32) double TP27[5] = {};
    alignas(32) double BF14[5][3] = {};
    alignas(32) double BF15[5][3] = {};
    alignas(32) double TP28[5] = {};
    alignas(32) double TP29[5] = {};
    alignas(32) double TP30[3] = {};
    alignas(32) double TP31[4] = {};
    alignas(32) double TP32[5] = {};
    alignas(32) double TP33[3] = {};
    alignas(32) double TP34[5] = {};
    alignas(32) double TP35[3] = {};
    alignas(32) double TP36[4] = {};
    alignas(32) double TP37[2] = {};
    alignas(32) double TP38[2] = {};
    alignas(32) double TP39[5] = {};
    alignas(32) double TP40[3] = {};
    alignas(32) double TP41[5] = {};
    alignas(32) double TP42[3] = {};
    alignas(32) double TP43[4] = {};
    alignas(32) double TP44[5] = {};
    alignas(32) double TP45[3] = {};
    alignas(32) double TP46[5] = {};
    alignas(32) double TP47[3] = {};
    alignas(32) double TP48[4] = {};
    alignas(32) double TP49[2] = {};
    alignas(32) double TP50[2] = {};
    alignas(32) double BF16[6][6] = {};
    alignas(32) double BF17[6][6] = {};
    alignas(32) double TP51[5] = {};
    alignas(32) double BF18[5][5] = {};
    alignas(32) double TP52[5] = {};
    alignas(32) double TP53[5] = {};
    alignas(32) double BF19[5][5] = {};
    alignas(32) double TP54[5] = {};
    alignas(32) double BF20[5][5] = {};
    alignas(32) double TP55[5] = {};
    alignas(32) double TP56[5] = {};
    alignas(32) double TP57[5] = {};
    alignas(32) double TP58[5] = {};
    alignas(32) double BF21[5][3] = {};
    alignas(32) double BF22[5][3] = {};
    alignas(32) double TP59[5] = {};
    alignas(32) double TP60[5] = {};
    alignas(32) double TP61[4] = {};
    alignas(32) double TP62[5] = {};
    alignas(32) double TP63[3] = {};
    alignas(32) double TP64[5] = {};
    alignas(32) double TP65[3] = {};
    alignas(32) double TP66[4] = {};
    alignas(32) double TP67[2] = {};
    alignas(32) double TP68[2] = {};
    alignas(32) double BF23[5][5] = {};
    alignas(32) double TP69[5] = {};
    alignas(32) double TP70[5] = {};
    alignas(32) double TP71[5] = {};
    alignas(32) double BF24[5][5] = {};
    alignas(32) double TP72[5] = {};
    alignas(32) double BF25[5][5] = {};
    alignas(32) double TP73[5] = {};
    alignas(32) double TP74[5] = {};
    alignas(32) double TP75[5] = {};
    alignas(32) double TP76[5] = {};
    alignas(32) double BF26[5][3] = {};
    alignas(32) double BF27[5][3] = {};
    alignas(32) double TP77[5] = {};
    alignas(32) double TP78[5] = {};
    alignas(32) double TP79[4] = {};
    alignas(32) double TP80[5] = {};
    alignas(32) double TP81[5] = {};
    alignas(32) double TP82[3] = {};
    alignas(32) double TP83[4] = {};
    alignas(32) double TP84[2] = {};
    alignas(32) double TP85[2] = {};
    alignas(32) double TP86[5] = {};
    alignas(32) double TP87[3] = {};
    alignas(32) double TP88[5] = {};
    alignas(32) double TP89[3] = {};
    alignas(32) double TP90[5] = {};
    alignas(32) double TP91[3] = {};
    alignas(32) double TP92[5] = {};
    alignas(32) double TP93[3] = {};
    alignas(32) double TP94[4] = {};
    alignas(32) double TP95[2] = {};
    alignas(32) double TP96[2] = {};
    alignas(32) double TP97[5] = {};
    alignas(32) double TP98[3] = {};
    alignas(32) double TP99[5] = {};
    alignas(32) double TP100[3] = {};
    alignas(32) double TP101[4] = {};
    alignas(32) double TP102[5] = {};
    alignas(32) double TP103[3] = {};
    alignas(32) double TP104[5] = {};
    alignas(32) double TP105[3] = {};
    alignas(32) double TP106[4] = {};
    alignas(32) double TP107[2] = {};
    alignas(32) double TP108[2] = {};
    alignas(32) double TP109[5] = {};
    alignas(32) double TP110[3] = {};
    alignas(32) double TP111[5] = {};
    alignas(32) double TP112[3] = {};
    alignas(32) double TP113[4] = {};
    alignas(32) double TP114[5] = {};
    alignas(32) double TP115[3] = {};
    alignas(32) double TP116[5] = {};
    alignas(32) double TP117[3] = {};
    alignas(32) double TP118[4] = {};
    alignas(32) double TP119[2] = {};
    alignas(32) double TP120[2] = {};
    alignas(32) double TP121[3] = {};
    alignas(32) double TP122[2] = {};
    alignas(32) double TP123[3] = {};
    alignas(32) double TP124[3] = {};
    alignas(32) double TP125[3] = {};
    alignas(32) double TP126[3] = {};
    alignas(32) double TP127[2] = {};
    alignas(32) double TP128[3] = {};
    alignas(32) double TP129[3] = {};
    alignas(32) double TP130[2] = {};
    alignas(32) double TP131[3] = {};
    alignas(32) double TP132[2] = {};
    alignas(32) double BF28[3][3] = {};
    alignas(32) double TP133[3] = {};
    alignas(32) double BF29[3][3] = {};
    alignas(32) double TP134[3] = {};
    alignas(32) double TP135[3] = {};
    alignas(32) double TP136[3] = {};
    alignas(32) double TP137[2] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c1 += w[1][ic + 6] * FE85_C0_Q12[0][iq][ic];
        const double w1_d1_c0 = w[1][0] * FE85_C0_D01_Q12[0][iq][0] + w[1][2] * FE85_C0_D01_Q12[0][iq][1] + w[1][3] * FE85_C0_D01_Q12[0][iq][2] + w[1][4] * FE85_C0_D01_Q12[0][iq][3] + w[1][5] * FE85_C0_D01_Q12[0][iq][4];
        const double w1_d0_c0 = w[1][0] * FE85_C0_D10_Q12[0][iq][0] + w[1][1] * FE85_C0_D10_Q12[0][iq][1] + w[1][3] * FE85_C0_D10_Q12[0][iq][2] + w[1][4] * FE85_C0_D10_Q12[0][iq][3] + w[1][5] * FE85_C0_D10_Q12[0][iq][4];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c0 += w[1][ic] * FE85_C0_Q12[0][iq][ic];
        const double w1_d1_c1 = w[1][6] * FE85_C0_D01_Q12[0][iq][0] + w[1][8] * FE85_C0_D01_Q12[0][iq][1] + w[1][9] * FE85_C0_D01_Q12[0][iq][2] + w[1][10] * FE85_C0_D01_Q12[0][iq][3] + w[1][11] * FE85_C0_D01_Q12[0][iq][4];
        const double w1_d0_c1 = w[1][6] * FE85_C0_D10_Q12[0][iq][0] + w[1][7] * FE85_C0_D10_Q12[0][iq][1] + w[1][9] * FE85_C0_D10_Q12[0][iq][2] + w[1][10] * FE85_C0_D10_Q12[0][iq][3] + w[1][11] * FE85_C0_D10_Q12[0][iq][4];
        double w1_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c3 += w[1][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w1_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c4 += w[1][ic + 18] * FE3_C0_Q12[0][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE85_C0_Q12[0][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE85_C0_Q12[0][iq][ic];
        double w2_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c3 += w[2][ic + 15] * FE3_C0_Q12[0][iq][ic];
        double w2_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c4 += w[2][ic + 18] * FE3_C0_Q12[0][iq][ic];
        const double w2_d1_c1 = w[2][6] * FE85_C0_D01_Q12[0][iq][0] + w[2][8] * FE85_C0_D01_Q12[0][iq][1] + w[2][9] * FE85_C0_D01_Q12[0][iq][2] + w[2][10] * FE85_C0_D01_Q12[0][iq][3] + w[2][11] * FE85_C0_D01_Q12[0][iq][4];
        const double w2_d0_c1 = w[2][6] * FE85_C0_D10_Q12[0][iq][0] + w[2][7] * FE85_C0_D10_Q12[0][iq][1] + w[2][9] * FE85_C0_D10_Q12[0][iq][2] + w[2][10] * FE85_C0_D10_Q12[0][iq][3] + w[2][11] * FE85_C0_D10_Q12[0][iq][4];
        const double w2_d1_c0 = w[2][0] * FE85_C0_D01_Q12[0][iq][0] + w[2][2] * FE85_C0_D01_Q12[0][iq][1] + w[2][3] * FE85_C0_D01_Q12[0][iq][2] + w[2][4] * FE85_C0_D01_Q12[0][iq][3] + w[2][5] * FE85_C0_D01_Q12[0][iq][4];
        const double w2_d0_c0 = w[2][0] * FE85_C0_D10_Q12[0][iq][0] + w[2][1] * FE85_C0_D10_Q12[0][iq][1] + w[2][3] * FE85_C0_D10_Q12[0][iq][2] + w[2][4] * FE85_C0_D10_Q12[0][iq][3] + w[2][5] * FE85_C0_D10_Q12[0][iq][4];
        double w3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3 += w[3][ic] * FE3_C0_Q12[0][iq][ic];
        alignas(32) double sv12[710];
        sv12[0] = w1_c1 * sp[3];
        sv12[1] = w1_c1 * sp[4];
        sv12[2] = w1_d1_c0 * sp[3];
        sv12[3] = w1_d0_c0 * sp[4];
        sv12[4] = sv12[2] + sv12[3];
        sv12[5] = w1_c0 * sp[6];
        sv12[6] = w1_c0 * sp[5];
        sv12[7] = w1_d0_c0 * sp[5];
        sv12[8] = w1_d1_c0 * sp[6];
        sv12[9] = sv12[7] + sv12[8];
        sv12[10] = sv12[0] + sv12[5];
        sv12[11] = sv12[6] + sv12[1];
        sv12[12] = w1_d1_c1 * sp[3];
        sv12[13] = w1_d0_c1 * sp[4];
        sv12[14] = sv12[12] + sv12[13];
        sv12[15] = w1_d0_c1 * sp[5];
        sv12[16] = w1_d1_c1 * sp[6];
        sv12[17] = sv12[15] + sv12[16];
        sv12[18] = w1_c3 * w1_c3;
        sv12[19] = w1_c4 * w1_c4;
        sv12[20] = std::sqrt(1e-8 + sv12[19]);
        sv12[21] = w1_c4 + sv12[20];
        sv12[22] = sv12[18] / (0.5 * sv12[21]);
        sv12[23] = sp[13] * (0.0001 + sv12[22] / 1.3);
        sv12[24] = sp[14] * (0.0001 + sv12[22] / 1.3);
        sv12[25] = sp[15] * (0.0001 + sv12[22] / 1.3);
        sv12[26] = w1_c3 + w1_c3;
        sv12[27] = w1_c4 + w1_c4;
        sv12[28] = sv12[27] / (2 * sv12[20]);
        sv12[29] = 0.5 * (1.0 + sv12[28]) * sv12[22];
        sv12[30] = sv12[26] / (0.5 * sv12[21]);
        sv12[31] = -1 * sv12[29] / (0.5 * sv12[21]);
        sv12[32] = sp[26] * (sv12[30] / 1.3);
        sv12[33] = sp[26] * (sv12[31] / 1.3);
        sv12[34] = sp[27] * (sv12[30] / 1.3);
        sv12[35] = sp[27] * (sv12[31] / 1.3);
        sv12[36] = sp[13] * (0.0001 + sv12[22]);
        sv12[37] = sp[14] * (0.0001 + sv12[22]);
        sv12[38] = sp[15] * (0.0001 + sv12[22]);
        sv12[39] = sp[38] * sv12[30];
        sv12[40] = sp[38] * sv12[31];
        sv12[41] = sp[39] * sv12[30];
        sv12[42] = sp[39] * sv12[31];
        sv12[43] = sp[66] * (2.0 * (0.0001 + sv12[22]));
        sv12[44] = sp[67] * (2.0 * (0.0001 + sv12[22]));
        sv12[45] = sp[68] * (2.0 * (0.0001 + sv12[22]));
        sv12[46] = sp[69] * (2.0 * (0.0001 + sv12[22]));
        sv12[47] = sp[70] * (2.0 * (0.0001 + sv12[22]));
        sv12[48] = sp[71] * (2.0 * (0.0001 + sv12[22]));
        sv12[49] = sp[72] * (2.0 * (0.0001 + sv12[22]));
        sv12[50] = sp[73] * (2.0 * (0.0001 + sv12[22]));
        sv12[51] = sp[74] * (2.0 * (0.0001 + sv12[22]));
        sv12[52] = sp[75] * (2.0 * (0.0001 + sv12[22]));
        sv12[53] = sv12[14] + sv12[14];
        sv12[54] = sv12[53] / 2 * (sp[40] / 2);
        sv12[55] = sv12[53] / 2 * (sp[41] / 2);
        sv12[56] = sv12[4] + sv12[17];
        sv12[57] = sv12[56] / 2 * (sp[6] / 2);
        sv12[58] = sv12[56] / 2 * (sp[5] / 2);
        sv12[59] = sv12[56] / 2 * (sp[3] / 2);
        sv12[60] = sv12[56] / 2 * (sp[4] / 2);
        sv12[61] = sv12[54] + sv12[57];
        sv12[62] = sv12[55] + sv12[58];
        sv12[63] = sv12[9] + sv12[9];
        sv12[64] = sv12[63] / 2 * (sp[58] / 2);
        sv12[65] = sv12[63] / 2 * (sp[59] / 2);
        sv12[66] = sv12[64] + sv12[59];
        sv12[67] = sv12[65] + sv12[60];
        sv12[68] = sv12[61] + sv12[57];
        sv12[69] = sv12[62] + sv12[58];
        sv12[70] = sv12[66] + sv12[59];
        sv12[71] = sv12[67] + sv12[60];
        sv12[72] = sv12[68] * (2.0 * sv12[30]);
        sv12[73] = sv12[68] * (2.0 * sv12[31]);
        sv12[74] = sv12[69] * (2.0 * sv12[30]);
        sv12[75] = sv12[69] * (2.0 * sv12[31]);
        sv12[76] = sv12[70] * (2.0 * sv12[30]);
        sv12[77] = sv12[70] * (2.0 * sv12[31]);
        sv12[78] = sv12[71] * (2.0 * sv12[30]);
        sv12[79] = sv12[71] * (2.0 * sv12[31]);
        sv12[80] = w2_c0 * w2_c0;
        sv12[81] = w2_c1 * w2_c1;
        sv12[82] = sv12[80] + sv12[81];
        sv12[83] = std::sqrt(1e-9 + sv12[82]);
        sv12[84] = sp[97] * sv12[83];
        sv12[85] = sp[76] * sv12[84];
        sv12[86] = sp[78] * sv12[84];
        sv12[87] = sp[10] * sv12[84];
        sv12[88] = sp[11] * sv12[84];
        sv12[89] = sp[77] * sv12[84];
        sv12[90] = sp[79] * sv12[84];
        sv12[91] = sp[12] * sv12[84];
        sv12[92] = sp[7] * sv12[84];
        sv12[93] = sp[8] * sv12[84];
        sv12[94] = sp[9] * sv12[84];
        sv12[95] = w2_c1 * sp[3];
        sv12[96] = w2_c1 * sp[4];
        sv12[97] = w2_c0 * sp[6];
        sv12[98] = w2_c0 * sp[5];
        sv12[99] = sv12[95] + sv12[97];
        sv12[100] = sv12[98] + sv12[96];
        sv12[101] = w2_c3 * sp[100];
        sv12[102] = sv12[101] + sv12[101];
        sv12[103] = w2_c4 * sp[103];
        sv12[104] = sv12[103] + sv12[103];
        sv12[105] = w2_c4 * w2_c4;
        sv12[106] = std::sqrt(1e-8 + sv12[105]);
        sv12[107] = sv12[104] / (2 * sv12[106]);
        sv12[108] = sp[103] + sv12[107];
        sv12[109] = w2_c3 * w2_c3;
        sv12[110] = w2_c4 + sv12[106];
        sv12[111] = sv12[109] / (0.5 * sv12[110]);
        sv12[112] = 0.5 * sv12[108] * sv12[111];
        sv12[113] = sv12[102] + -1 * sv12[112];
        sv12[114] = sv12[113] / (0.5 * sv12[110]);
        sv12[115] = 2.0 * sv12[114] * (sp[40] / 2);
        sv12[116] = 2.0 * sv12[114] * (sp[41] / 2);
        sv12[117] = 2.0 * (0.0001 + sv12[111]) * (sp[105] / 2);
        sv12[118] = 2.0 * (0.0001 + sv12[111]) * (sp[106] / 2);
        sv12[119] = 2.0 * (0.0001 + sv12[111]) * (sp[107] / 2);
        sv12[120] = w2_c3 * sp[110];
        sv12[121] = sv12[120] + sv12[120];
        sv12[122] = w2_c4 * sp[113];
        sv12[123] = sv12[122] + sv12[122];
        sv12[124] = sv12[123] / (2 * sv12[106]);
        sv12[125] = sp[113] + sv12[124];
        sv12[126] = 0.5 * sv12[125] * sv12[111];
        sv12[127] = sv12[121] + -1 * sv12[126];
        sv12[128] = sv12[127] / (0.5 * sv12[110]);
        sv12[129] = 2.0 * sv12[128] * (sp[6] / 2);
        sv12[130] = 2.0 * sv12[128] * (sp[5] / 2);
        sv12[131] = 2.0 * sv12[128] * (sp[3] / 2);
        sv12[132] = 2.0 * sv12[128] * (sp[4] / 2);
        sv12[133] = 2.0 * (0.0001 + sv12[111]) * (sp[10] / 2);
        sv12[134] = 2.0 * (0.0001 + sv12[111]) * (sp[115] / 2);
        sv12[135] = 2.0 * (0.0001 + sv12[111]) * (sp[12] / 2);
        sv12[136] = 2.0 * (0.0001 + sv12[111]) * (sp[114] / 2);
        sv12[137] = 2.0 * (0.0001 + sv12[111]) * (sp[76] / 2);
        sv12[138] = 2.0 * (0.0001 + sv12[111]) * (sp[79] / 2);
        sv12[139] = sv12[115] + sv12[129];
        sv12[140] = sv12[116] + sv12[130];
        sv12[141] = sv12[117] + sv12[133];
        sv12[142] = sv12[118] + sv12[134];
        sv12[143] = sv12[119] + sv12[135];
        sv12[144] = sv12[99] + -1 * sv12[139];
        sv12[145] = sv12[100] + -1 * sv12[140];
        sv12[146] = sv12[144] * (-1 * sv12[131]);
        sv12[147] = sv12[144] * (-1 * sv12[132]);
        sv12[148] = sv12[144] * sv12[144];
        sv12[149] = sv12[145] * sv12[144];
        sv12[150] = sv12[144] * (-1 * sv12[141]);
        sv12[151] = sv12[144] * (-1 * sv12[142]);
        sv12[152] = sv12[144] * (-1 * sv12[143]);
        sv12[153] = sv12[144] * (-1 * sv12[136]);
        sv12[154] = sv12[144] * (-1 * sv12[137]);
        sv12[155] = sv12[144] * (-1 * sv12[138]);
        sv12[156] = sv12[144] * sp[3];
        sv12[157] = sv12[144] * sp[4];
        sv12[158] = sv12[145] * (-1 * sv12[131]);
        sv12[159] = sv12[145] * (-1 * sv12[132]);
        sv12[160] = sv12[145] * sv12[145];
        sv12[161] = sv12[145] * (-1 * sv12[141]);
        sv12[162] = sv12[145] * (-1 * sv12[142]);
        sv12[163] = sv12[145] * (-1 * sv12[143]);
        sv12[164] = sv12[145] * (-1 * sv12[136]);
        sv12[165] = sv12[145] * (-1 * sv12[137]);
        sv12[166] = sv12[145] * (-1 * sv12[138]);
        sv12[167] = sv12[145] * sp[3];
        sv12[168] = sv12[145] * sp[4];
        sv12[169] = -1 * sv12[131] * (-1 * sv12[131]);
        sv12[170] = -1 * sv12[131] * (-1 * sv12[132]);
        sv12[171] = -1 * sv12[141] * (-1 * sv12[131]);
        sv12[172] = -1 * sv12[142] * (-1 * sv12[131]);
        sv12[173] = -1 * sv12[143] * (-1 * sv12[131]);
        sv12[174] = -1 * sv12[136] * (-1 * sv12[131]);
        sv12[175] = -1 * sv12[137] * (-1 * sv12[131]);
        sv12[176] = -1 * sv12[138] * (-1 * sv12[131]);
        sv12[177] = -1 * sv12[131] * sp[3];
        sv12[178] = -1 * sv12[131] * sp[4];
        sv12[179] = -1 * sv12[132] * (-1 * sv12[132]);
        sv12[180] = -1 * sv12[141] * (-1 * sv12[132]);
        sv12[181] = -1 * sv12[142] * (-1 * sv12[132]);
        sv12[182] = -1 * sv12[143] * (-1 * sv12[132]);
        sv12[183] = -1 * sv12[136] * (-1 * sv12[132]);
        sv12[184] = -1 * sv12[137] * (-1 * sv12[132]);
        sv12[185] = -1 * sv12[138] * (-1 * sv12[132]);
        sv12[186] = -1 * sv12[132] * sp[3];
        sv12[187] = -1 * sv12[132] * sp[4];
        sv12[188] = -1 * sv12[141] * (-1 * sv12[141]);
        sv12[189] = -1 * sv12[142] * (-1 * sv12[141]);
        sv12[190] = -1 * sv12[143] * (-1 * sv12[141]);
        sv12[191] = -1 * sv12[141] * (-1 * sv12[136]);
        sv12[192] = -1 * sv12[141] * (-1 * sv12[137]);
        sv12[193] = -1 * sv12[141] * (-1 * sv12[138]);
        sv12[194] = -1 * sv12[141] * sp[3];
        sv12[195] = -1 * sv12[141] * sp[4];
        sv12[196] = -1 * sv12[142] * (-1 * sv12[142]);
        sv12[197] = -1 * sv12[142] * (-1 * sv12[143]);
        sv12[198] = -1 * sv12[142] * (-1 * sv12[136]);
        sv12[199] = -1 * sv12[142] * (-1 * sv12[137]);
        sv12[200] = -1 * sv12[142] * (-1 * sv12[138]);
        sv12[201] = -1 * sv12[142] * sp[3];
        sv12[202] = -1 * sv12[142] * sp[4];
        sv12[203] = -1 * sv12[143] * (-1 * sv12[143]);
        sv12[204] = -1 * sv12[143] * (-1 * sv12[136]);
        sv12[205] = -1 * sv12[143] * (-1 * sv12[137]);
        sv12[206] = -1 * sv12[143] * (-1 * sv12[138]);
        sv12[207] = -1 * sv12[143] * sp[3];
        sv12[208] = -1 * sv12[143] * sp[4];
        sv12[209] = -1 * sv12[136] * (-1 * sv12[136]);
        sv12[210] = -1 * sv12[136] * (-1 * sv12[137]);
        sv12[211] = -1 * sv12[136] * (-1 * sv12[138]);
        sv12[212] = -1 * sv12[136] * sp[3];
        sv12[213] = -1 * sv12[136] * sp[4];
        sv12[214] = -1 * sv12[137] * (-1 * sv12[137]);
        sv12[215] = -1 * sv12[138] * (-1 * sv12[137]);
        sv12[216] = -1 * sv12[137] * sp[3];
        sv12[217] = -1 * sv12[137] * sp[4];
        sv12[218] = -1 * sv12[138] * (-1 * sv12[138]);
        sv12[219] = -1 * sv12[138] * sp[3];
        sv12[220] = -1 * sv12[138] * sp[4];
        sv12[221] = 2.0 * sv12[114] * (sp[6] / 2);
        sv12[222] = 2.0 * sv12[114] * (sp[5] / 2);
        sv12[223] = 2.0 * sv12[114] * (sp[3] / 2);
        sv12[224] = 2.0 * sv12[114] * (sp[4] / 2);
        sv12[225] = 2.0 * (0.0001 + sv12[111]) * (sp[104] / 2);
        sv12[226] = 2.0 * (0.0001 + sv12[111]) * (sp[7] / 2);
        sv12[227] = 2.0 * (0.0001 + sv12[111]) * (sp[9] / 2);
        sv12[228] = 2.0 * sv12[128] * (sp[58] / 2);
        sv12[229] = 2.0 * sv12[128] * (sp[59] / 2);
        sv12[230] = 2.0 * (0.0001 + sv12[111]) * (sp[116] / 2);
        sv12[231] = 2.0 * (0.0001 + sv12[111]) * (sp[117] / 2);
        sv12[232] = 2.0 * (0.0001 + sv12[111]) * (sp[118] / 2);
        sv12[233] = sv12[228] + sv12[223];
        sv12[234] = sv12[229] + sv12[224];
        sv12[235] = sv12[230] + sv12[225];
        sv12[236] = sv12[231] + sv12[226];
        sv12[237] = sv12[232] + sv12[227];
        sv12[238] = sv12[99] + -1 * sv12[233];
        sv12[239] = sv12[100] + -1 * sv12[234];
        sv12[240] = sv12[238] * (-1 * sv12[221]);
        sv12[241] = sv12[239] * (-1 * sv12[221]);
        sv12[242] = -1 * sv12[221] * (-1 * sv12[221]);
        sv12[243] = -1 * sv12[222] * (-1 * sv12[221]);
        sv12[244] = -1 * sv12[137] * (-1 * sv12[221]);
        sv12[245] = -1 * sv12[136] * (-1 * sv12[221]);
        sv12[246] = -1 * sv12[138] * (-1 * sv12[221]);
        sv12[247] = -1 * sv12[235] * (-1 * sv12[221]);
        sv12[248] = -1 * sv12[236] * (-1 * sv12[221]);
        sv12[249] = -1 * sv12[237] * (-1 * sv12[221]);
        sv12[250] = -1 * sv12[221] * sp[6];
        sv12[251] = -1 * sv12[221] * sp[5];
        sv12[252] = sv12[238] * (-1 * sv12[222]);
        sv12[253] = sv12[239] * (-1 * sv12[222]);
        sv12[254] = -1 * sv12[222] * (-1 * sv12[222]);
        sv12[255] = -1 * sv12[137] * (-1 * sv12[222]);
        sv12[256] = -1 * sv12[136] * (-1 * sv12[222]);
        sv12[257] = -1 * sv12[138] * (-1 * sv12[222]);
        sv12[258] = -1 * sv12[235] * (-1 * sv12[222]);
        sv12[259] = -1 * sv12[236] * (-1 * sv12[222]);
        sv12[260] = -1 * sv12[237] * (-1 * sv12[222]);
        sv12[261] = -1 * sv12[222] * sp[6];
        sv12[262] = -1 * sv12[222] * sp[5];
        sv12[263] = sv12[238] * sv12[238];
        sv12[264] = sv12[238] * sv12[239];
        sv12[265] = sv12[238] * (-1 * sv12[137]);
        sv12[266] = sv12[238] * (-1 * sv12[136]);
        sv12[267] = sv12[238] * (-1 * sv12[138]);
        sv12[268] = sv12[238] * (-1 * sv12[235]);
        sv12[269] = sv12[238] * (-1 * sv12[236]);
        sv12[270] = sv12[238] * (-1 * sv12[237]);
        sv12[271] = sv12[238] * sp[6];
        sv12[272] = sv12[238] * sp[5];
        sv12[273] = sv12[239] * sv12[239];
        sv12[274] = sv12[239] * (-1 * sv12[137]);
        sv12[275] = sv12[239] * (-1 * sv12[136]);
        sv12[276] = sv12[239] * (-1 * sv12[138]);
        sv12[277] = sv12[239] * (-1 * sv12[235]);
        sv12[278] = sv12[239] * (-1 * sv12[236]);
        sv12[279] = sv12[239] * (-1 * sv12[237]);
        sv12[280] = sv12[239] * sp[6];
        sv12[281] = sv12[239] * sp[5];
        sv12[282] = -1 * sv12[235] * (-1 * sv12[137]);
        sv12[283] = -1 * sv12[236] * (-1 * sv12[137]);
        sv12[284] = -1 * sv12[237] * (-1 * sv12[137]);
        sv12[285] = -1 * sv12[137] * sp[6];
        sv12[286] = -1 * sv12[137] * sp[5];
        sv12[287] = -1 * sv12[235] * (-1 * sv12[136]);
        sv12[288] = -1 * sv12[236] * (-1 * sv12[136]);
        sv12[289] = -1 * sv12[237] * (-1 * sv12[136]);
        sv12[290] = -1 * sv12[136] * sp[6];
        sv12[291] = -1 * sv12[136] * sp[5];
        sv12[292] = -1 * sv12[235] * (-1 * sv12[138]);
        sv12[293] = -1 * sv12[236] * (-1 * sv12[138]);
        sv12[294] = -1 * sv12[237] * (-1 * sv12[138]);
        sv12[295] = -1 * sv12[138] * sp[6];
        sv12[296] = -1 * sv12[138] * sp[5];
        sv12[297] = -1 * sv12[235] * (-1 * sv12[235]);
        sv12[298] = -1 * sv12[235] * (-1 * sv12[236]);
        sv12[299] = -1 * sv12[235] * (-1 * sv12[237]);
        sv12[300] = -1 * sv12[235] * sp[6];
        sv12[301] = -1 * sv12[235] * sp[5];
        sv12[302] = -1 * sv12[236] * (-1 * sv12[236]);
        sv12[303] = -1 * sv12[236] * (-1 * sv12[237]);
        sv12[304] = -1 * sv12[236] * sp[6];
        sv12[305] = -1 * sv12[236] * sp[5];
        sv12[306] = -1 * sv12[237] * (-1 * sv12[237]);
        sv12[307] = -1 * sv12[237] * sp[6];
        sv12[308] = -1 * sv12[237] * sp[5];
        sv12[309] = sv12[146] + sv12[240];
        sv12[310] = sv12[158] + sv12[252];
        sv12[311] = sv12[263] + sv12[169];
        sv12[312] = sv12[264] + sv12[170];
        sv12[313] = sv12[265] + sv12[171];
        sv12[314] = sv12[266] + sv12[172];
        sv12[315] = sv12[267] + sv12[173];
        sv12[316] = sv12[268] + sv12[174];
        sv12[317] = sv12[269] + sv12[175];
        sv12[318] = sv12[270] + sv12[176];
        sv12[319] = sv12[177] + sv12[271];
        sv12[320] = sv12[272] + sv12[178];
        sv12[321] = sv12[147] + sv12[241];
        sv12[322] = sv12[253] + sv12[159];
        sv12[323] = sv12[273] + sv12[179];
        sv12[324] = sv12[274] + sv12[180];
        sv12[325] = sv12[275] + sv12[181];
        sv12[326] = sv12[276] + sv12[182];
        sv12[327] = sv12[277] + sv12[183];
        sv12[328] = sv12[278] + sv12[184];
        sv12[329] = sv12[279] + sv12[185];
        sv12[330] = sv12[186] + sv12[280];
        sv12[331] = sv12[281] + sv12[187];
        sv12[332] = sv12[148] + sv12[242];
        sv12[333] = sv12[149] + sv12[243];
        sv12[334] = sv12[150] + sv12[244];
        sv12[335] = sv12[151] + sv12[245];
        sv12[336] = sv12[152] + sv12[246];
        sv12[337] = sv12[153] + sv12[247];
        sv12[338] = sv12[154] + sv12[248];
        sv12[339] = sv12[155] + sv12[249];
        sv12[340] = sv12[156] + sv12[250];
        sv12[341] = sv12[251] + sv12[157];
        sv12[342] = sv12[160] + sv12[254];
        sv12[343] = sv12[161] + sv12[255];
        sv12[344] = sv12[162] + sv12[256];
        sv12[345] = sv12[163] + sv12[257];
        sv12[346] = sv12[164] + sv12[258];
        sv12[347] = sv12[165] + sv12[259];
        sv12[348] = sv12[166] + sv12[260];
        sv12[349] = sv12[167] + sv12[261];
        sv12[350] = sv12[262] + sv12[168];
        sv12[351] = sv12[188] + sv12[214];
        sv12[352] = sv12[189] + sv12[210];
        sv12[353] = sv12[190] + sv12[215];
        sv12[354] = sv12[191] + sv12[282];
        sv12[355] = sv12[283] + sv12[192];
        sv12[356] = sv12[193] + sv12[284];
        sv12[357] = sv12[194] + sv12[285];
        sv12[358] = sv12[286] + sv12[195];
        sv12[359] = sv12[196] + sv12[209];
        sv12[360] = sv12[197] + sv12[211];
        sv12[361] = sv12[287] + sv12[198];
        sv12[362] = sv12[288] + sv12[199];
        sv12[363] = sv12[289] + sv12[200];
        sv12[364] = sv12[201] + sv12[290];
        sv12[365] = sv12[291] + sv12[202];
        sv12[366] = sv12[203] + sv12[218];
        sv12[367] = sv12[204] + sv12[292];
        sv12[368] = sv12[293] + sv12[205];
        sv12[369] = sv12[206] + sv12[294];
        sv12[370] = sv12[207] + sv12[295];
        sv12[371] = sv12[296] + sv12[208];
        sv12[372] = sv12[297] + sv12[209];
        sv12[373] = sv12[298] + sv12[210];
        sv12[374] = sv12[299] + sv12[211];
        sv12[375] = sv12[212] + sv12[300];
        sv12[376] = sv12[301] + sv12[213];
        sv12[377] = sv12[302] + sv12[214];
        sv12[378] = sv12[303] + sv12[215];
        sv12[379] = sv12[216] + sv12[304];
        sv12[380] = sv12[305] + sv12[217];
        sv12[381] = sv12[306] + sv12[218];
        sv12[382] = sv12[219] + sv12[307];
        sv12[383] = sv12[308] + sv12[220];
        sv12[384] = std::sqrt(sv12[82]);
        sv12[385] = 2.0 * sp[96] * sv12[384];
        sv12[386] = 0.5 * sv12[385] / (0.0001 + sv12[111]);
        sv12[387] = std::exp(-2.0 * sv12[386]);
        sv12[388] = (1.0 + sv12[387]) / (1.0 + -1 * sv12[387]);
        sv12[389] = -1 * (1.0 / sv12[386]) + sv12[388];
        sv12[390] = 2.0 * sp[96] / sv12[384];
        sv12[391] = sv12[389] * sv12[390];
        sv12[392] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[386]) * sp[97];
        sv12[393] = sv12[392] / (0.0001 + sv12[111]);
        sv12[394] = (sv12[386] >= 0.1 ? sv12[391] : sv12[393]);
        sv12[395] = sv12[309] * sv12[394];
        sv12[396] = sv12[310] * sv12[394];
        sv12[397] = sv12[311] * sv12[394];
        sv12[398] = sv12[312] * sv12[394];
        sv12[399] = sv12[313] * sv12[394];
        sv12[400] = sv12[314] * sv12[394];
        sv12[401] = sv12[315] * sv12[394];
        sv12[402] = sv12[316] * sv12[394];
        sv12[403] = sv12[317] * sv12[394];
        sv12[404] = sv12[318] * sv12[394];
        sv12[405] = sv12[319] * sv12[394];
        sv12[406] = sv12[320] * sv12[394];
        sv12[407] = sv12[321] * sv12[394];
        sv12[408] = sv12[322] * sv12[394];
        sv12[409] = sv12[323] * sv12[394];
        sv12[410] = sv12[324] * sv12[394];
        sv12[411] = sv12[325] * sv12[394];
        sv12[412] = sv12[326] * sv12[394];
        sv12[413] = sv12[327] * sv12[394];
        sv12[414] = sv12[328] * sv12[394];
        sv12[415] = sv12[329] * sv12[394];
        sv12[416] = sv12[330] * sv12[394];
        sv12[417] = sv12[331] * sv12[394];
        sv12[418] = sv12[332] * sv12[394];
        sv12[419] = sv12[333] * sv12[394];
        sv12[420] = sv12[334] * sv12[394];
        sv12[421] = sv12[335] * sv12[394];
        sv12[422] = sv12[336] * sv12[394];
        sv12[423] = sv12[337] * sv12[394];
        sv12[424] = sv12[338] * sv12[394];
        sv12[425] = sv12[339] * sv12[394];
        sv12[426] = sv12[340] * sv12[394];
        sv12[427] = sv12[341] * sv12[394];
        sv12[428] = sv12[342] * sv12[394];
        sv12[429] = sv12[343] * sv12[394];
        sv12[430] = sv12[344] * sv12[394];
        sv12[431] = sv12[345] * sv12[394];
        sv12[432] = sv12[346] * sv12[394];
        sv12[433] = sv12[347] * sv12[394];
        sv12[434] = sv12[348] * sv12[394];
        sv12[435] = sv12[349] * sv12[394];
        sv12[436] = sv12[350] * sv12[394];
        sv12[437] = sv12[351] * sv12[394];
        sv12[438] = sv12[352] * sv12[394];
        sv12[439] = sv12[353] * sv12[394];
        sv12[440] = sv12[354] * sv12[394];
        sv12[441] = sv12[355] * sv12[394];
        sv12[442] = sv12[356] * sv12[394];
        sv12[443] = sv12[357] * sv12[394];
        sv12[444] = sv12[358] * sv12[394];
        sv12[445] = sv12[359] * sv12[394];
        sv12[446] = sv12[360] * sv12[394];
        sv12[447] = sv12[361] * sv12[394];
        sv12[448] = sv12[362] * sv12[394];
        sv12[449] = sv12[363] * sv12[394];
        sv12[450] = sv12[364] * sv12[394];
        sv12[451] = sv12[365] * sv12[394];
        sv12[452] = sv12[366] * sv12[394];
        sv12[453] = sv12[367] * sv12[394];
        sv12[454] = sv12[368] * sv12[394];
        sv12[455] = sv12[369] * sv12[394];
        sv12[456] = sv12[370] * sv12[394];
        sv12[457] = sv12[371] * sv12[394];
        sv12[458] = sv12[372] * sv12[394];
        sv12[459] = sv12[373] * sv12[394];
        sv12[460] = sv12[374] * sv12[394];
        sv12[461] = sv12[375] * sv12[394];
        sv12[462] = sv12[376] * sv12[394];
        sv12[463] = sv12[377] * sv12[394];
        sv12[464] = sv12[378] * sv12[394];
        sv12[465] = sv12[379] * sv12[394];
        sv12[466] = sv12[380] * sv12[394];
        sv12[467] = sv12[381] * sv12[394];
        sv12[468] = sv12[382] * sv12[394];
        sv12[469] = sv12[383] * sv12[394];
        sv12[470] = sp[13] * sv12[394];
        sv12[471] = sp[14] * sv12[394];
        sv12[472] = sp[15] * sv12[394];
        sv12[473] = sv12[85] + sv12[395];
        sv12[474] = sv12[86] + sv12[396];
        sv12[475] = sv12[87] + sv12[397];
        sv12[476] = sv12[88] + sv12[398];
        sv12[477] = sv12[89] + sv12[407];
        sv12[478] = sv12[90] + sv12[408];
        sv12[479] = sv12[91] + sv12[409];
        sv12[480] = sv12[92] + sv12[418];
        sv12[481] = sv12[93] + sv12[419];
        sv12[482] = sv12[94] + sv12[428];
        sv12[483] = sp[3] * sv12[114];
        sv12[484] = sp[4] * sv12[114];
        sv12[485] = sp[6] * sv12[128];
        sv12[486] = sp[5] * sv12[128];
        sv12[487] = sv12[483] + sv12[485];
        sv12[488] = sv12[484] + sv12[486];
        sv12[489] = sv12[99] + -1 * sv12[487];
        sv12[490] = sv12[100] + -1 * sv12[488];
        sv12[491] = sv12[489] * sv12[489];
        sv12[492] = sv12[490] * sv12[489];
        sv12[493] = sv12[490] * sv12[490];
        sv12[494] = sv12[491] * sv12[394];
        sv12[495] = sv12[492] * sv12[394];
        sv12[496] = sv12[493] * sv12[394];
        sv12[497] = sv12[114] / 1.3 * sp[3];
        sv12[498] = sv12[114] / 1.3 * sp[4];
        sv12[499] = sv12[128] / 1.3 * sp[6];
        sv12[500] = sv12[128] / 1.3 * sp[5];
        sv12[501] = sv12[497] + sv12[499];
        sv12[502] = sv12[500] + sv12[498];
        sv12[503] = sv12[99] + -1 * sv12[501];
        sv12[504] = sv12[100] + -1 * sv12[502];
        sv12[505] = std::sqrt(1e-8 + sv12[109]);
        sv12[506] = w2_c3 + sv12[505];
        sv12[507] = 1.92 * w1_c4 * (1.0 / (0.5 * sv12[506]));
        sv12[508] = w1_c4 / (0.5 * sv12[506]);
        sv12[509] = sv12[507] + 1.92 * sv12[508];
        sv12[510] = sv12[503] * sv12[503];
        sv12[511] = sv12[504] * sv12[503];
        sv12[512] = sv12[503] * sv12[509];
        sv12[513] = sv12[504] * sv12[504];
        sv12[514] = sv12[504] * sv12[509];
        sv12[515] = sv12[509] * sv12[509];
        sv12[516] = w2_c1 * sp[18];
        sv12[517] = w2_c0 * sp[23];
        sv12[518] = sv12[516] + sv12[517];
        sv12[519] = sp[18] * (sv12[114] / 1.3);
        sv12[520] = sp[23] * (sv12[128] / 1.3);
        sv12[521] = sv12[519] + sv12[520];
        sv12[522] = sv12[518] + -1 * sv12[521];
        sv12[523] = 1.92 * w1_c4 * sv12[508];
        sv12[524] = sv12[522] + sv12[523];
        sv12[525] = w2_d1_c1 * sp[3];
        sv12[526] = w2_d0_c1 * sp[4];
        sv12[527] = sv12[525] + sv12[526];
        sv12[528] = sv12[527] + sv12[527];
        sv12[529] = sv12[528] / 2 * (sv12[528] / 2);
        sv12[530] = w2_d1_c0 * sp[3];
        sv12[531] = w2_d0_c0 * sp[4];
        sv12[532] = sv12[530] + sv12[531];
        sv12[533] = w2_d0_c1 * sp[5];
        sv12[534] = w2_d1_c1 * sp[6];
        sv12[535] = sv12[533] + sv12[534];
        sv12[536] = sv12[532] + sv12[535];
        sv12[537] = sv12[536] / 2 * (sv12[536] / 2);
        sv12[538] = sv12[529] + sv12[537];
        sv12[539] = w2_d0_c0 * sp[5];
        sv12[540] = w2_d1_c0 * sp[6];
        sv12[541] = sv12[539] + sv12[540];
        sv12[542] = sv12[541] + sv12[541];
        sv12[543] = sv12[542] / 2 * (sv12[542] / 2);
        sv12[544] = sv12[543] + sv12[537];
        sv12[545] = sv12[538] + sv12[544];
        sv12[546] = std::exp(w3);
        sv12[547] = w2_c3 * (0.09 * (1.44 * sv12[546]));
        sv12[548] = 2.0 * sv12[545] * sv12[547];
        sv12[549] = sv12[524] + -1 * sv12[548];
        sv12[550] = 1.92 * (1.0 / (0.5 * sv12[506])) + 1.92 * (1.0 / (0.5 * sv12[506]));
        sv12[551] = sv12[549] * sv12[550];
        sv12[552] = sv12[551] + sv12[515];
        sv12[553] = 0.5 * sv12[385] / (0.0001 + sv12[111] / 1.3);
        sv12[554] = std::exp(-2.0 * sv12[553]);
        sv12[555] = (1.0 + sv12[554]) / (1.0 + -1 * sv12[554]);
        sv12[556] = -1 * (1.0 / sv12[553]) + sv12[555];
        sv12[557] = sv12[556] * sv12[390];
        sv12[558] = 0.5 * (0.33355492169165 + -0.004435991517475 * sv12[553]) * sp[97];
        sv12[559] = sv12[558] / (0.0001 + sv12[111] / 1.3);
        sv12[560] = (sv12[553] >= 0.1 ? sv12[557] : sv12[559]);
        sv12[561] = sv12[510] * sv12[560];
        sv12[562] = sv12[511] * sv12[560];
        sv12[563] = sv12[512] * sv12[560];
        sv12[564] = sv12[513] * sv12[560];
        sv12[565] = sv12[514] * sv12[560];
        sv12[566] = sv12[552] * sv12[560];
        sv12[567] = sv12[473] + sv12[43];
        sv12[568] = sv12[474] + sv12[44];
        sv12[569] = sv12[475] + sv12[45];
        sv12[570] = sv12[476] + sv12[46];
        sv12[571] = sv12[477] + sv12[47];
        sv12[572] = sv12[478] + sv12[48];
        sv12[573] = sv12[479] + sv12[49];
        sv12[574] = sv12[480] + sv12[50];
        sv12[575] = sv12[481] + sv12[51];
        sv12[576] = sv12[482] + sv12[52];
        sv12[577] = sv12[23] + sv12[561];
        sv12[578] = sv12[24] + sv12[562];
        sv12[579] = sv12[33] + sv12[563];
        sv12[580] = sv12[25] + sv12[564];
        sv12[581] = sv12[35] + sv12[565];
        sv12[582] = sv12[36] + sv12[494];
        sv12[583] = sv12[37] + sv12[495];
        sv12[584] = sv12[38] + sv12[496];
        sv12[585] = sv12[566] + w[0][0];
        sv12[586] = std::sqrt(1e-8 + sv12[18]);
        sv12[587] = w1_c3 + sv12[586];
        sv12[588] = w1_c4 / (0.5 * sv12[587]);
        sv12[589] = sv12[26] / (2 * sv12[586]);
        sv12[590] = 0.5 * (1.0 + sv12[589]) * sv12[588];
        sv12[591] = -1 * sv12[590] / (0.5 * sv12[587]);
        sv12[592] = 1.92 * w1_c4 * sv12[591];
        sv12[593] = 1.92 * w1_c4 * (1.0 / (0.5 * sv12[587]));
        sv12[594] = sv12[593] + 1.92 * sv12[588];
        sv12[595] = sv12[594] + sv12[585];
        sv12[596] = sv12[10] + sv12[563];
        sv12[597] = sv12[11] + sv12[565];
        sv12[598] = sv12[9] + w[0][0];
        sv12[599] = sv12[14] + w[0][0];
        sv12[600] = sv12[10] * sp[119];
        sv12[601] = sv12[11] * sp[119];
        sv12[602] = sv12[4] * sp[119];
        sv12[603] = sv12[598] * sp[119];
        sv12[604] = sv12[567] * sp[119];
        sv12[605] = sv12[568] * sp[119];
        sv12[606] = sv12[569] * sp[119];
        sv12[607] = sv12[570] * sp[119];
        sv12[608] = sv12[399] * sp[119];
        sv12[609] = sv12[400] * sp[119];
        sv12[610] = sv12[401] * sp[119];
        sv12[611] = sv12[402] * sp[119];
        sv12[612] = sv12[403] * sp[119];
        sv12[613] = sv12[404] * sp[119];
        sv12[614] = sv12[405] * sp[119];
        sv12[615] = sv12[406] * sp[119];
        sv12[616] = sv12[571] * sp[119];
        sv12[617] = sv12[572] * sp[119];
        sv12[618] = sv12[573] * sp[119];
        sv12[619] = sv12[410] * sp[119];
        sv12[620] = sv12[411] * sp[119];
        sv12[621] = sv12[412] * sp[119];
        sv12[622] = sv12[413] * sp[119];
        sv12[623] = sv12[414] * sp[119];
        sv12[624] = sv12[415] * sp[119];
        sv12[625] = sv12[416] * sp[119];
        sv12[626] = sv12[417] * sp[119];
        sv12[627] = sv12[599] * sp[119];
        sv12[628] = sv12[17] * sp[119];
        sv12[629] = sv12[574] * sp[119];
        sv12[630] = sv12[575] * sp[119];
        sv12[631] = sv12[420] * sp[119];
        sv12[632] = sv12[421] * sp[119];
        sv12[633] = sv12[422] * sp[119];
        sv12[634] = sv12[423] * sp[119];
        sv12[635] = sv12[424] * sp[119];
        sv12[636] = sv12[425] * sp[119];
        sv12[637] = sv12[426] * sp[119];
        sv12[638] = sv12[427] * sp[119];
        sv12[639] = sv12[576] * sp[119];
        sv12[640] = sv12[429] * sp[119];
        sv12[641] = sv12[430] * sp[119];
        sv12[642] = sv12[431] * sp[119];
        sv12[643] = sv12[432] * sp[119];
        sv12[644] = sv12[433] * sp[119];
        sv12[645] = sv12[434] * sp[119];
        sv12[646] = sv12[435] * sp[119];
        sv12[647] = sv12[436] * sp[119];
        sv12[648] = sv12[577] * sp[119];
        sv12[649] = sv12[578] * sp[119];
        sv12[650] = sv12[32] * sp[119];
        sv12[651] = sv12[579] * sp[119];
        sv12[652] = sv12[580] * sp[119];
        sv12[653] = sv12[34] * sp[119];
        sv12[654] = sv12[581] * sp[119];
        sv12[655] = sv12[596] * sp[119];
        sv12[656] = sv12[597] * sp[119];
        sv12[657] = sv12[39] * sp[119];
        sv12[658] = sv12[41] * sp[119];
        sv12[659] = sv12[72] * sp[119];
        sv12[660] = sv12[74] * sp[119];
        sv12[661] = sv12[76] * sp[119];
        sv12[662] = sv12[78] * sp[119];
        sv12[663] = sv12[592] * sp[119];
        sv12[664] = sv12[40] * sp[119];
        sv12[665] = sv12[42] * sp[119];
        sv12[666] = sv12[73] * sp[119];
        sv12[667] = sv12[75] * sp[119];
        sv12[668] = sv12[77] * sp[119];
        sv12[669] = sv12[79] * sp[119];
        sv12[670] = sv12[595] * sp[119];
        sv12[671] = sv12[582] * sp[119];
        sv12[672] = sv12[583] * sp[119];
        sv12[673] = sv12[584] * sp[119];
        sv12[674] = sv12[437] * sp[119];
        sv12[675] = sv12[438] * sp[119];
        sv12[676] = sv12[439] * sp[119];
        sv12[677] = sv12[440] * sp[119];
        sv12[678] = sv12[441] * sp[119];
        sv12[679] = sv12[442] * sp[119];
        sv12[680] = sv12[443] * sp[119];
        sv12[681] = sv12[444] * sp[119];
        sv12[682] = sv12[445] * sp[119];
        sv12[683] = sv12[446] * sp[119];
        sv12[684] = sv12[447] * sp[119];
        sv12[685] = sv12[448] * sp[119];
        sv12[686] = sv12[449] * sp[119];
        sv12[687] = sv12[450] * sp[119];
        sv12[688] = sv12[451] * sp[119];
        sv12[689] = sv12[452] * sp[119];
        sv12[690] = sv12[453] * sp[119];
        sv12[691] = sv12[454] * sp[119];
        sv12[692] = sv12[455] * sp[119];
        sv12[693] = sv12[456] * sp[119];
        sv12[694] = sv12[457] * sp[119];
        sv12[695] = sv12[458] * sp[119];
        sv12[696] = sv12[459] * sp[119];
        sv12[697] = sv12[460] * sp[119];
        sv12[698] = sv12[461] * sp[119];
        sv12[699] = sv12[462] * sp[119];
        sv12[700] = sv12[463] * sp[119];
        sv12[701] = sv12[464] * sp[119];
        sv12[702] = sv12[465] * sp[119];
        sv12[703] = sv12[466] * sp[119];
        sv12[704] = sv12[467] * sp[119];
        sv12[705] = sv12[468] * sp[119];
        sv12[706] = sv12[469] * sp[119];
        sv12[707] = sv12[470] * sp[119];
        sv12[708] = sv12[471] * sp[119];
        sv12[709] = sv12[472] * sp[119];
        const double fw0 = sv12[603] * weights12[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE85_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF0[i][j] += TF0[i] * FE85_C0_Q12[0][iq][j];
        const double fw1 = sv12[601] * weights12[iq];
        alignas(32) double TF1[6];
        for (int i = 0; i < 6; ++i)
            TF1[i] = fw1 * FE85_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF1[i][j] += TF1[i] * FE85_C0_D10_Q12[0][iq][j];
        const double fw2 = sv12[600] * weights12[iq];
        alignas(32) double TF2[6];
        for (int i = 0; i < 6; ++i)
            TF2[i] = fw2 * FE85_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF2[i][j] += TF2[i] * FE85_C0_D01_Q12[0][iq][j];
        const double fw3 = sv12[602] * weights12[iq];
        alignas(32) double TF3[6];
        for (int i = 0; i < 6; ++i)
            TF3[i] = fw3 * FE85_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF3[i][j] += TF3[i] * FE85_C0_Q12[0][iq][j];
        const double fw4 = sv12[618] * weights12[iq];
        alignas(32) double TF4[5];
        for (int i = 0; i < 5; ++i)
            TF4[i] = fw4 * FE85_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF4[i][j] += TF4[i] * FE85_C0_D10_Q12[0][iq][j];
        const double fw5 = sv12[624] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP0[i] += fw5 * FE85_C0_D10_Q12[0][iq][i];
        const double fw6 = sv12[607] * weights12[iq];
        alignas(32) double TF5[5];
        for (int i = 0; i < 5; ++i)
            TF5[i] = fw6 * FE85_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF5[i][j] += TF5[i] * FE85_C0_D01_Q12[0][iq][j];
        const double fw7 = sv12[623] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP1[i] += fw7 * FE85_C0_D10_Q12[0][iq][i];
        const double fw8 = sv12[622] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP2[i] += fw8 * FE85_C0_D10_Q12[0][iq][i];
        const double fw9 = sv12[617] * weights12[iq];
        alignas(32) double TF6[5];
        for (int i = 0; i < 5; ++i)
            TF6[i] = fw9 * FE85_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF6[i][j] += TF6[i] * FE85_C0_D10_Q12[0][iq][j];
        const double fw10 = sv12[621] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP3[i] += fw10 * FE85_C0_D10_Q12[0][iq][i];
        const double fw11 = sv12[616] * weights12[iq];
        alignas(32) double TF7[5];
        for (int i = 0; i < 5; ++i)
            TF7[i] = fw11 * FE85_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF7[i][j] += TF7[i] * FE85_C0_D01_Q12[0][iq][j];
        const double fw12 = sv12[619] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP4[i] += fw12 * FE85_C0_D10_Q12[0][iq][i];
        const double fw13 = sv12[620] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP5[i] += fw13 * FE85_C0_D10_Q12[0][iq][i];
        const double fw14 = sv12[626] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP6[i] += fw14 * FE85_C0_D10_Q12[0][iq][i];
        const double fw15 = sv12[625] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP7[i] += fw15 * FE85_C0_D10_Q12[0][iq][i];
        const double fw16 = sv12[662] * weights12[iq];
        alignas(32) double TF8[5];
        for (int i = 0; i < 5; ++i)
            TF8[i] = fw16 * FE85_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF8[i][j] += TF8[i] * FE3_C0_Q12[0][iq][j];
        const double fw17 = sv12[669] * weights12[iq];
        alignas(32) double TF9[5];
        for (int i = 0; i < 5; ++i)
            TF9[i] = fw17 * FE85_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF9[i][j] += TF9[i] * FE3_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP8[j] += fw5 * FE85_C0_D10_Q12[0][iq][j];
        const double fw18 = sv12[704] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP9[j] += fw18 * FE85_C0_D02_Q12[0][0][j];
        const double fw19 = sv12[613] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP10[j] += fw19 * FE85_C0_D01_Q12[0][iq][j];
        const double fw20 = sv12[701] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP11[j] += fw20 * FE85_C0_D02_Q12[0][0][j];
        const double fw21 = sv12[697] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP12[j] += fw21 * FE85_C0_D11_Q12[0][0][j];
        const double fw22 = sv12[645] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP13[j] += fw22 * FE85_C0_D10_Q12[0][iq][j];
        const double fw23 = sv12[692] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP14[j] += fw23 * FE85_C0_D02_Q12[0][0][j];
        const double fw24 = sv12[636] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP15[j] += fw24 * FE85_C0_D01_Q12[0][iq][j];
        const double fw25 = sv12[679] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP16[j] += fw25 * FE85_C0_D02_Q12[0][0][j];
        const double fw26 = sv12[686] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP17[j] += fw26 * FE85_C0_D11_Q12[0][0][j];
        const double fw27 = sv12[706] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP18[j] += fw27 * FE3_C0_D01_Q12[0][0][j];
        const double fw28 = sv12[705] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP19[j] += fw28 * FE3_C0_D01_Q12[0][0][j];
        alignas(32) double TF10[5];
        for (int i = 0; i < 5; ++i)
            TF10[i] = fw6 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF10[i][j] += TF10[i] * FE85_C0_D10_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP20[i] += fw19 * FE85_C0_D01_Q12[0][iq][i];
        const double fw29 = sv12[606] * weights12[iq];
        alignas(32) double TF11[5];
        for (int i = 0; i < 5; ++i)
            TF11[i] = fw29 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF11[i][j] += TF11[i] * FE85_C0_D01_Q12[0][iq][j];
        const double fw30 = sv12[612] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP21[i] += fw30 * FE85_C0_D01_Q12[0][iq][i];
        const double fw31 = sv12[611] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP22[i] += fw31 * FE85_C0_D01_Q12[0][iq][i];
        const double fw32 = sv12[605] * weights12[iq];
        alignas(32) double TF12[5];
        for (int i = 0; i < 5; ++i)
            TF12[i] = fw32 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF12[i][j] += TF12[i] * FE85_C0_D10_Q12[0][iq][j];
        const double fw33 = sv12[610] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP23[i] += fw33 * FE85_C0_D01_Q12[0][iq][i];
        const double fw34 = sv12[604] * weights12[iq];
        alignas(32) double TF13[5];
        for (int i = 0; i < 5; ++i)
            TF13[i] = fw34 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF13[i][j] += TF13[i] * FE85_C0_D01_Q12[0][iq][j];
        const double fw35 = sv12[608] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP24[i] += fw35 * FE85_C0_D01_Q12[0][iq][i];
        const double fw36 = sv12[609] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP25[i] += fw36 * FE85_C0_D01_Q12[0][iq][i];
        const double fw37 = sv12[615] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP26[i] += fw37 * FE85_C0_D01_Q12[0][iq][i];
        const double fw38 = sv12[614] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP27[i] += fw38 * FE85_C0_D01_Q12[0][iq][i];
        const double fw39 = sv12[661] * weights12[iq];
        alignas(32) double TF14[5];
        for (int i = 0; i < 5; ++i)
            TF14[i] = fw39 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF14[i][j] += TF14[i] * FE3_C0_Q12[0][iq][j];
        const double fw40 = sv12[668] * weights12[iq];
        alignas(32) double TF15[5];
        for (int i = 0; i < 5; ++i)
            TF15[i] = fw40 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF15[i][j] += TF15[i] * FE3_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP28[j] += fw7 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP29[j] += fw30 * FE85_C0_D01_Q12[0][iq][j];
        const double fw41 = sv12[700] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP30[j] += fw41 * FE85_C0_D02_Q12[0][0][j];
        const double fw42 = sv12[696] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP31[j] += fw42 * FE85_C0_D11_Q12[0][0][j];
        const double fw43 = sv12[644] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP32[j] += fw43 * FE85_C0_D10_Q12[0][iq][j];
        const double fw44 = sv12[691] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP33[j] += fw44 * FE85_C0_D02_Q12[0][0][j];
        const double fw45 = sv12[635] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP34[j] += fw45 * FE85_C0_D01_Q12[0][iq][j];
        const double fw46 = sv12[678] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP35[j] += fw46 * FE85_C0_D02_Q12[0][0][j];
        const double fw47 = sv12[685] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP36[j] += fw47 * FE85_C0_D11_Q12[0][0][j];
        const double fw48 = sv12[703] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP37[j] += fw48 * FE3_C0_D01_Q12[0][0][j];
        const double fw49 = sv12[702] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP38[j] += fw49 * FE3_C0_D01_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP39[j] += fw8 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP40[j] += fw21 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP41[j] += fw31 * FE85_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP42[j] += fw42 * FE85_C0_D02_Q12[0][0][j];
        const double fw50 = sv12[695] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP43[j] += fw50 * FE85_C0_D11_Q12[0][0][j];
        const double fw51 = sv12[643] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP44[j] += fw51 * FE85_C0_D10_Q12[0][iq][j];
        const double fw52 = sv12[690] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP45[j] += fw52 * FE85_C0_D02_Q12[0][0][j];
        const double fw53 = sv12[634] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP46[j] += fw53 * FE85_C0_D01_Q12[0][iq][j];
        const double fw54 = sv12[677] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP47[j] += fw54 * FE85_C0_D02_Q12[0][0][j];
        const double fw55 = sv12[684] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP48[j] += fw55 * FE85_C0_D11_Q12[0][0][j];
        const double fw56 = sv12[699] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP49[j] += fw56 * FE3_C0_D01_Q12[0][0][j];
        const double fw57 = sv12[698] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP50[j] += fw57 * FE3_C0_D01_Q12[0][0][j];
        const double fw58 = sv12[628] * weights12[iq];
        alignas(32) double TF16[6];
        for (int i = 0; i < 6; ++i)
            TF16[i] = fw58 * FE85_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF16[i][j] += TF16[i] * FE85_C0_Q12[0][iq][j];
        const double fw59 = sv12[627] * weights12[iq];
        alignas(32) double TF17[6];
        for (int i = 0; i < 6; ++i)
            TF17[i] = fw59 * FE85_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF17[i][j] += TF17[i] * FE85_C0_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP51[i] += fw22 * FE85_C0_D10_Q12[0][iq][i];
        alignas(32) double TF18[5];
        for (int i = 0; i < 5; ++i)
            TF18[i] = fw32 * FE85_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF18[i][j] += TF18[i] * FE85_C0_D01_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP52[i] += fw43 * FE85_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            TP53[i] += fw51 * FE85_C0_D10_Q12[0][iq][i];
        const double fw60 = sv12[639] * weights12[iq];
        alignas(32) double TF19[5];
        for (int i = 0; i < 5; ++i)
            TF19[i] = fw60 * FE85_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF19[i][j] += TF19[i] * FE85_C0_D10_Q12[0][iq][j];
        const double fw61 = sv12[642] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP54[i] += fw61 * FE85_C0_D10_Q12[0][iq][i];
        const double fw62 = sv12[630] * weights12[iq];
        alignas(32) double TF20[5];
        for (int i = 0; i < 5; ++i)
            TF20[i] = fw62 * FE85_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF20[i][j] += TF20[i] * FE85_C0_D01_Q12[0][iq][j];
        const double fw63 = sv12[640] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP55[i] += fw63 * FE85_C0_D10_Q12[0][iq][i];
        const double fw64 = sv12[641] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP56[i] += fw64 * FE85_C0_D10_Q12[0][iq][i];
        const double fw65 = sv12[647] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP57[i] += fw65 * FE85_C0_D10_Q12[0][iq][i];
        const double fw66 = sv12[646] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP58[i] += fw66 * FE85_C0_D10_Q12[0][iq][i];
        const double fw67 = sv12[660] * weights12[iq];
        alignas(32) double TF21[5];
        for (int i = 0; i < 5; ++i)
            TF21[i] = fw67 * FE85_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF21[i][j] += TF21[i] * FE3_C0_Q12[0][iq][j];
        const double fw68 = sv12[667] * weights12[iq];
        alignas(32) double TF22[5];
        for (int i = 0; i < 5; ++i)
            TF22[i] = fw68 * FE85_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF22[i][j] += TF22[i] * FE3_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP59[j] += fw10 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP60[j] += fw33 * FE85_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 4; ++j)
            TP61[j] += fw52 * FE85_C0_D11_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP62[j] += fw61 * FE85_C0_D10_Q12[0][iq][j];
        const double fw69 = sv12[689] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP63[j] += fw69 * FE85_C0_D02_Q12[0][0][j];
        const double fw70 = sv12[633] * weights12[iq];
        for (int j = 0; j < 5; ++j)
            TP64[j] += fw70 * FE85_C0_D01_Q12[0][iq][j];
        const double fw71 = sv12[676] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP65[j] += fw71 * FE85_C0_D02_Q12[0][0][j];
        const double fw72 = sv12[683] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP66[j] += fw72 * FE85_C0_D11_Q12[0][0][j];
        const double fw73 = sv12[694] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP67[j] += fw73 * FE3_C0_D01_Q12[0][0][j];
        const double fw74 = sv12[693] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP68[j] += fw74 * FE3_C0_D01_Q12[0][0][j];
        alignas(32) double TF23[5];
        for (int i = 0; i < 5; ++i)
            TF23[i] = fw11 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF23[i][j] += TF23[i] * FE85_C0_D10_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP69[i] += fw24 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            TP70[i] += fw45 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            TP71[i] += fw53 * FE85_C0_D01_Q12[0][iq][i];
        alignas(32) double TF24[5];
        for (int i = 0; i < 5; ++i)
            TF24[i] = fw62 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF24[i][j] += TF24[i] * FE85_C0_D10_Q12[0][iq][j];
        for (int i = 0; i < 5; ++i)
            TP72[i] += fw70 * FE85_C0_D01_Q12[0][iq][i];
        const double fw75 = sv12[629] * weights12[iq];
        alignas(32) double TF25[5];
        for (int i = 0; i < 5; ++i)
            TF25[i] = fw75 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF25[i][j] += TF25[i] * FE85_C0_D01_Q12[0][iq][j];
        const double fw76 = sv12[631] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP73[i] += fw76 * FE85_C0_D01_Q12[0][iq][i];
        const double fw77 = sv12[632] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP74[i] += fw77 * FE85_C0_D01_Q12[0][iq][i];
        const double fw78 = sv12[638] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP75[i] += fw78 * FE85_C0_D01_Q12[0][iq][i];
        const double fw79 = sv12[637] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            TP76[i] += fw79 * FE85_C0_D01_Q12[0][iq][i];
        const double fw80 = sv12[659] * weights12[iq];
        alignas(32) double TF26[5];
        for (int i = 0; i < 5; ++i)
            TF26[i] = fw80 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF26[i][j] += TF26[i] * FE3_C0_Q12[0][iq][j];
        const double fw81 = sv12[666] * weights12[iq];
        alignas(32) double TF27[5];
        for (int i = 0; i < 5; ++i)
            TF27[i] = fw81 * FE85_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF27[i][j] += TF27[i] * FE3_C0_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP77[j] += fw12 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP78[j] += fw35 * FE85_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 4; ++j)
            TP79[j] += fw54 * FE85_C0_D11_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP80[j] += fw63 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 5; ++j)
            TP81[j] += fw76 * FE85_C0_D01_Q12[0][iq][j];
        const double fw82 = sv12[674] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP82[j] += fw82 * FE85_C0_D02_Q12[0][0][j];
        const double fw83 = sv12[675] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP83[j] += fw83 * FE85_C0_D11_Q12[0][0][j];
        const double fw84 = sv12[681] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP84[j] += fw84 * FE3_C0_D01_Q12[0][0][j];
        const double fw85 = sv12[680] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP85[j] += fw85 * FE3_C0_D01_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP86[j] += fw13 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP87[j] += fw26 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP88[j] += fw36 * FE85_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP89[j] += fw47 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP90[j] += fw64 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP91[j] += fw72 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP92[j] += fw77 * FE85_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP93[j] += fw83 * FE85_C0_D02_Q12[0][0][j];
        const double fw86 = sv12[682] * weights12[iq];
        for (int j = 0; j < 4; ++j)
            TP94[j] += fw86 * FE85_C0_D11_Q12[0][0][j];
        const double fw87 = sv12[688] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP95[j] += fw87 * FE3_C0_D01_Q12[0][0][j];
        const double fw88 = sv12[687] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP96[j] += fw88 * FE3_C0_D01_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP97[j] += fw14 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP98[j] += fw27 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP99[j] += fw37 * FE85_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP100[j] += fw48 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP101[j] += fw56 * FE85_C0_D11_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP102[j] += fw65 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP103[j] += fw73 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP104[j] += fw78 * FE85_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP105[j] += fw84 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP106[j] += fw87 * FE85_C0_D11_Q12[0][0][j];
        const double fw89 = sv12[709] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP107[j] += fw89 * FE3_C0_D01_Q12[0][0][j];
        const double fw90 = sv12[708] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP108[j] += fw90 * FE3_C0_D01_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP109[j] += fw15 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP110[j] += fw28 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP111[j] += fw38 * FE85_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP112[j] += fw49 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP113[j] += fw57 * FE85_C0_D11_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP114[j] += fw66 * FE85_C0_D10_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP115[j] += fw74 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 5; ++j)
            TP116[j] += fw79 * FE85_C0_D01_Q12[0][iq][j];
        for (int j = 0; j < 3; ++j)
            TP117[j] += fw85 * FE85_C0_D02_Q12[0][0][j];
        for (int j = 0; j < 4; ++j)
            TP118[j] += fw88 * FE85_C0_D11_Q12[0][0][j];
        const double fw91 = sv12[707] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP119[j] += fw91 * FE3_C0_D01_Q12[0][0][j];
        const double fw92 = sv12[673] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP120[j] += fw92 * FE3_C0_D01_Q12[0][0][j];
        const double fw93 = sv12[658] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP121[j] += fw93 * FE3_C0_Q12[0][iq][j];
        const double fw94 = sv12[672] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP122[j] += fw94 * FE3_C0_D01_Q12[0][0][j];
        const double fw95 = sv12[665] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP123[j] += fw95 * FE3_C0_Q12[0][iq][j];
        for (int i = 0; i < 3; ++i)
            TP124[i] += fw1 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            TP125[i] += fw2 * FE3_C0_Q12[0][iq][i];
        const double fw96 = sv12[657] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP126[j] += fw96 * FE3_C0_Q12[0][iq][j];
        const double fw97 = sv12[671] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP127[j] += fw97 * FE3_C0_D01_Q12[0][0][j];
        const double fw98 = sv12[664] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP128[j] += fw98 * FE3_C0_Q12[0][iq][j];
        const double fw99 = sv12[653] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP129[j] += fw99 * FE3_C0_Q12[0][iq][j];
        const double fw100 = sv12[652] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP130[j] += fw100 * FE3_C0_D01_Q12[0][0][j];
        const double fw101 = sv12[654] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP131[j] += fw101 * FE3_C0_Q12[0][iq][j];
        const double fw102 = sv12[649] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP132[j] += fw102 * FE3_C0_D01_Q12[0][0][j];
        const double fw103 = sv12[663] * weights12[iq];
        alignas(32) double TF28[3];
        for (int i = 0; i < 3; ++i)
            TF28[i] = fw103 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF28[i][j] += TF28[i] * FE3_C0_Q12[0][iq][j];
        const double fw104 = sv12[656] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP133[i] += fw104 * FE3_C0_Q12[0][iq][i];
        const double fw105 = sv12[670] * weights12[iq];
        alignas(32) double TF29[3];
        for (int i = 0; i < 3; ++i)
            TF29[i] = fw105 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF29[i][j] += TF29[i] * FE3_C0_Q12[0][iq][j];
        const double fw106 = sv12[655] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            TP134[i] += fw106 * FE3_C0_Q12[0][iq][i];
        const double fw107 = sv12[650] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP135[j] += fw107 * FE3_C0_Q12[0][iq][j];
        const double fw108 = sv12[651] * weights12[iq];
        for (int j = 0; j < 3; ++j)
            TP136[j] += fw108 * FE3_C0_Q12[0][iq][j];
        const double fw109 = sv12[648] * weights12[iq];
        for (int j = 0; j < 2; ++j)
            TP137[j] += fw109 * FE3_C0_D01_Q12[0][0][j];
    }
    std::fill(A, A + 12, 0.0);
    A[12] = -0.1666666666666677 * sp[132] + -0.1666666666666685 * sp[131];
    std::fill(A + 13, A + 34, 0.0);
    A[34] = 0.1666666666666674 * sp[132];
    std::fill(A + 35, A + 56, 0.0);
    A[56] = 0.1666666666666677 * sp[131];
    std::fill(A + 57, A + 75, 0.0);
    A[75] = 0.1666666666666665 * sp[132] + 0.1666666666666648 * sp[131];
    A[76] = 0.1666666666666663 * sp[132] + 0.3333333333333322 * sp[131];
    A[77] = 0.3333333333333338 * sp[132] + 0.1666666666666643 * sp[131];
    std::fill(A + 78, A + 96, 0.0);
    A[96] = -0.1666666666666665 * sp[132] + 0.1666666666666693 * sp[131];
    A[97] = -0.1666666666666663 * sp[132];
    A[98] = -0.3333333333333338 * sp[132] + -0.1666666666666662 * sp[131];
    std::fill(A + 99, A + 117, 0.0);
    A[117] = 0.1666666666666682 * sp[132] + -0.1666666666666668 * sp[131];
    A[118] = -0.1666666666666677 * sp[132] + -0.3333333333333345 * sp[131];
    A[119] = -0.1666666666666665 * sp[131];
    std::fill(A + 120, A + 138, 0.0);
    A[138] = -0.1666666666666677 * sp[130] + -0.1666666666666685 * sp[129];
    std::fill(A + 139, A + 160, 0.0);
    A[160] = 0.1666666666666674 * sp[130];
    std::fill(A + 161, A + 182, 0.0);
    A[182] = 0.1666666666666677 * sp[129];
    std::fill(A + 183, A + 201, 0.0);
    A[201] = 0.1666666666666665 * sp[130] + 0.1666666666666648 * sp[129];
    A[202] = 0.1666666666666663 * sp[130] + 0.3333333333333322 * sp[129];
    A[203] = 0.3333333333333338 * sp[130] + 0.1666666666666643 * sp[129];
    std::fill(A + 204, A + 222, 0.0);
    A[222] = -0.1666666666666665 * sp[130] + 0.1666666666666693 * sp[129];
    A[223] = -0.1666666666666663 * sp[130];
    A[224] = -0.3333333333333338 * sp[130] + -0.1666666666666662 * sp[129];
    std::fill(A + 225, A + 243, 0.0);
    A[243] = 0.1666666666666682 * sp[130] + -0.1666666666666668 * sp[129];
    A[244] = -0.1666666666666677 * sp[130] + -0.3333333333333345 * sp[129];
    A[245] = -0.1666666666666665 * sp[129];
    std::fill(A + 246, A + 252, 0.0);
    A[252] = -0.1666666666666677 * sp[121] + -0.1666666666666685 * sp[120];
    std::fill(A + 253, A + 255, 0.0);
    A[255] = 0.1666666666666665 * sp[121] + 0.1666666666666648 * sp[120];
    A[256] = -0.1666666666666665 * sp[121] + 0.1666666666666693 * sp[120];
    A[257] = 0.1666666666666682 * sp[121] + -0.1666666666666668 * sp[120];
    A[258] = -0.1666666666666677 * sp[127] + -0.1666666666666685 * sp[126];
    std::fill(A + 259, A + 261, 0.0);
    A[261] = 0.1666666666666665 * sp[127] + 0.1666666666666648 * sp[126];
    A[262] = -0.1666666666666665 * sp[127] + 0.1666666666666693 * sp[126];
    A[263] = 0.1666666666666682 * sp[127] + -0.1666666666666668 * sp[126];
    std::fill(A + 264, A + 274, 0.0);
    A[274] = 0.1666666666666674 * sp[121];
    A[275] = 0.0;
    A[276] = 0.1666666666666663 * sp[121] + 0.3333333333333322 * sp[120];
    A[277] = -0.1666666666666663 * sp[121];
    A[278] = -0.1666666666666677 * sp[121] + -0.3333333333333345 * sp[120];
    A[279] = 0.0;
    A[280] = 0.1666666666666674 * sp[127];
    A[281] = 0.0;
    A[282] = 0.1666666666666663 * sp[127] + 0.3333333333333322 * sp[126];
    A[283] = -0.1666666666666663 * sp[127];
    A[284] = -0.1666666666666677 * sp[127] + -0.3333333333333345 * sp[126];
    std::fill(A + 285, A + 296, 0.0);
    A[296] = 0.1666666666666677 * sp[120];
    A[297] = 0.3333333333333338 * sp[121] + 0.1666666666666643 * sp[120];
    A[298] = -0.3333333333333338 * sp[121] + -0.1666666666666662 * sp[120];
    A[299] = -0.1666666666666665 * sp[120];
    std::fill(A + 300, A + 302, 0.0);
    A[302] = 0.1666666666666677 * sp[126];
    A[303] = 0.3333333333333338 * sp[127] + 0.1666666666666643 * sp[126];
    A[304] = -0.3333333333333338 * sp[127] + -0.1666666666666662 * sp[126];
    A[305] = -0.1666666666666665 * sp[126];
    std::fill(A + 306, A + 315, 0.0);
    A[315] = 0.01666666666666685 * sp[125];
    A[316] = -0.008333333333333307 * sp[125];
    A[317] = -0.008333333333333295 * sp[125];
    A[318] = 0.03333333333333315 * sp[125];
    A[319] = 0.06666666666666685 * sp[125];
    A[320] = 0.06666666666666687 * sp[125];
    A[321] = 0.01666666666666685 * sp[123];
    A[322] = -0.008333333333333307 * sp[123];
    A[323] = -0.008333333333333295 * sp[123];
    A[324] = 0.03333333333333315 * sp[123];
    A[325] = 0.06666666666666685 * sp[123];
    A[326] = 0.06666666666666687 * sp[123];
    std::fill(A + 327, A + 330, 0.0);
    A[330] = 0.08333333333333373 * sp[128];
    A[331] = 0.04166666666666671 * sp[128];
    A[332] = 0.04166666666666671 * sp[128];
    A[333] = 0.08333333333333373 * sp[119];
    A[334] = 0.04166666666666671 * sp[119];
    A[335] = 0.04166666666666671 * sp[119];
    A[336] = -0.008333333333333266 * sp[125];
    A[337] = 0.01666666666666684 * sp[125];
    A[338] = -0.008333333333333283 * sp[125];
    A[339] = 0.06666666666666669 * sp[125];
    A[340] = 0.03333333333333313 * sp[125];
    A[341] = 0.06666666666666683 * sp[125];
    A[342] = -0.008333333333333266 * sp[123];
    A[343] = 0.01666666666666684 * sp[123];
    A[344] = -0.008333333333333283 * sp[123];
    A[345] = 0.06666666666666669 * sp[123];
    A[346] = 0.03333333333333313 * sp[123];
    A[347] = 0.06666666666666683 * sp[123];
    std::fill(A + 348, A + 351, 0.0);
    A[351] = 0.04166666666666671 * sp[128];
    A[352] = 0.08333333333333361 * sp[128];
    A[353] = 0.04166666666666665 * sp[128];
    A[354] = 0.04166666666666671 * sp[119];
    A[355] = 0.08333333333333361 * sp[119];
    A[356] = 0.04166666666666665 * sp[119];
    A[357] = -0.008333333333333262 * sp[125];
    A[358] = -0.008333333333333292 * sp[125];
    A[359] = 0.01666666666666684 * sp[125];
    A[360] = 0.06666666666666671 * sp[125];
    A[361] = 0.06666666666666678 * sp[125];
    A[362] = 0.03333333333333316 * sp[125];
    A[363] = -0.008333333333333262 * sp[123];
    A[364] = -0.008333333333333292 * sp[123];
    A[365] = 0.01666666666666684 * sp[123];
    A[366] = 0.06666666666666671 * sp[123];
    A[367] = 0.06666666666666678 * sp[123];
    A[368] = 0.03333333333333316 * sp[123];
    std::fill(A + 369, A + 372, 0.0);
    A[372] = 0.04166666666666671 * sp[128];
    A[373] = 0.04166666666666665 * sp[128];
    A[374] = 0.08333333333333359 * sp[128];
    A[375] = 0.04166666666666671 * sp[119];
    A[376] = 0.04166666666666665 * sp[119];
    A[377] = 0.08333333333333359 * sp[119];
    A[378] = 0.01666666666666685 * sp[124];
    A[379] = -0.008333333333333307 * sp[124];
    A[380] = -0.008333333333333295 * sp[124];
    A[381] = 0.03333333333333315 * sp[124];
    A[382] = 0.06666666666666685 * sp[124];
    A[383] = 0.06666666666666687 * sp[124];
    A[384] = 0.01666666666666685 * sp[122];
    A[385] = -0.008333333333333307 * sp[122];
    A[386] = -0.008333333333333295 * sp[122];
    A[387] = 0.03333333333333315 * sp[122];
    A[388] = 0.06666666666666685 * sp[122];
    A[389] = 0.06666666666666687 * sp[122];
    std::fill(A + 390, A + 399, 0.0);
    A[399] = -0.008333333333333266 * sp[124];
    A[400] = 0.01666666666666684 * sp[124];
    A[401] = -0.008333333333333283 * sp[124];
    A[402] = 0.06666666666666669 * sp[124];
    A[403] = 0.03333333333333313 * sp[124];
    A[404] = 0.06666666666666683 * sp[124];
    A[405] = -0.008333333333333266 * sp[122];
    A[406] = 0.01666666666666684 * sp[122];
    A[407] = -0.008333333333333283 * sp[122];
    A[408] = 0.06666666666666669 * sp[122];
    A[409] = 0.03333333333333313 * sp[122];
    A[410] = 0.06666666666666683 * sp[122];
    std::fill(A + 411, A + 420, 0.0);
    A[420] = -0.008333333333333262 * sp[124];
    A[421] = -0.008333333333333292 * sp[124];
    A[422] = 0.01666666666666684 * sp[124];
    A[423] = 0.06666666666666671 * sp[124];
    A[424] = 0.06666666666666678 * sp[124];
    A[425] = 0.03333333333333316 * sp[124];
    A[426] = -0.008333333333333262 * sp[122];
    A[427] = -0.008333333333333292 * sp[122];
    A[428] = 0.01666666666666684 * sp[122];
    A[429] = 0.06666666666666671 * sp[122];
    A[430] = 0.06666666666666678 * sp[122];
    A[431] = 0.03333333333333316 * sp[122];
    std::fill(A + 432, A + 441, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[3] = { 0, 1, 5 };
    static const int DM3[3] = { 0, 2, 4 };
    static const int DM4[4] = { 0, 3, 4, 5 };
    static const int DM5[5] = { 6, 7, 9, 10, 11 };
    static const int DM6[3] = { 6, 7, 11 };
    static const int DM7[5] = { 6, 8, 9, 10, 11 };
    static const int DM8[3] = { 6, 8, 10 };
    static const int DM9[4] = { 6, 9, 10, 11 };
    static const int DM10[2] = { 12, 14 };
    static const int DM11[2] = { 15, 17 };
    static const int DM12[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + j] += BF0[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM0[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM1[j]] += BF2[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + (j + 6)] += BF3[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM0[j]] += BF4[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + DM2[j]] += FE85_C0_D02_Q12[0][0][j] * TP0[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM1[j]] += BF5[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + DM3[j]] += FE85_C0_D02_Q12[0][0][j] * TP1[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM0[i] + DM4[j]] += FE85_C0_D11_Q12[0][0][j] * TP2[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM5[j]] += BF6[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + DM6[j]] += FE85_C0_D02_Q12[0][0][j] * TP3[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM0[i] + DM7[j]] += BF7[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + DM8[j]] += FE85_C0_D02_Q12[0][0][j] * TP4[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM0[i] + DM9[j]] += FE85_C0_D11_Q12[0][0][j] * TP5[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP6[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM0[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP7[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + (j + 15)] += BF8[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + (j + 18)] += BF9[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM0[j]] += FE85_C0_D02_Q12[0][0][i] * TP8[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + DM2[j]] += FE85_C0_D02_Q12[0][0][i] * TP9[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM1[j]] += FE85_C0_D02_Q12[0][0][i] * TP10[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + DM3[j]] += FE85_C0_D02_Q12[0][0][i] * TP11[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM2[i] + DM4[j]] += FE85_C0_D02_Q12[0][0][i] * TP12[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM5[j]] += FE85_C0_D02_Q12[0][0][i] * TP13[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + DM6[j]] += FE85_C0_D02_Q12[0][0][i] * TP14[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM2[i] + DM7[j]] += FE85_C0_D02_Q12[0][0][i] * TP15[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + DM8[j]] += FE85_C0_D02_Q12[0][0][i] * TP16[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM2[i] + DM9[j]] += FE85_C0_D02_Q12[0][0][i] * TP17[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + (j + 12)] += FE85_C0_D02_Q12[0][0][i] * TP18[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM2[i] + DM10[j]] += FE85_C0_D02_Q12[0][0][i] * TP19[j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM1[i] + DM0[j]] += BF10[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + DM2[j]] += FE85_C0_D02_Q12[0][0][j] * TP20[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM1[i] + DM1[j]] += BF11[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + DM3[j]] += FE85_C0_D02_Q12[0][0][j] * TP21[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM1[i] + DM4[j]] += FE85_C0_D11_Q12[0][0][j] * TP22[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM1[i] + DM5[j]] += BF12[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + DM6[j]] += FE85_C0_D02_Q12[0][0][j] * TP23[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM1[i] + DM7[j]] += BF13[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + DM8[j]] += FE85_C0_D02_Q12[0][0][j] * TP24[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM1[i] + DM9[j]] += FE85_C0_D11_Q12[0][0][j] * TP25[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP26[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM1[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP27[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + (j + 15)] += BF14[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + (j + 18)] += BF15[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM3[i] + DM0[j]] += FE85_C0_D02_Q12[0][0][i] * TP28[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + DM2[j]] += FE85_C0_D02_Q12[0][0][i] * TP11[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM3[i] + DM1[j]] += FE85_C0_D02_Q12[0][0][i] * TP29[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + DM3[j]] += FE85_C0_D02_Q12[0][0][i] * TP30[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM3[i] + DM4[j]] += FE85_C0_D02_Q12[0][0][i] * TP31[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM3[i] + DM5[j]] += FE85_C0_D02_Q12[0][0][i] * TP32[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + DM6[j]] += FE85_C0_D02_Q12[0][0][i] * TP33[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM3[i] + DM7[j]] += FE85_C0_D02_Q12[0][0][i] * TP34[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + DM8[j]] += FE85_C0_D02_Q12[0][0][i] * TP35[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM3[i] + DM9[j]] += FE85_C0_D02_Q12[0][0][i] * TP36[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + (j + 12)] += FE85_C0_D02_Q12[0][0][i] * TP37[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM3[i] + DM10[j]] += FE85_C0_D02_Q12[0][0][i] * TP38[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM4[i] + DM0[j]] += FE85_C0_D11_Q12[0][0][i] * TP39[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + DM2[j]] += FE85_C0_D11_Q12[0][0][i] * TP40[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM4[i] + DM1[j]] += FE85_C0_D11_Q12[0][0][i] * TP41[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + DM3[j]] += FE85_C0_D11_Q12[0][0][i] * TP42[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM4[i] + DM4[j]] += FE85_C0_D11_Q12[0][0][i] * TP43[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM4[i] + DM5[j]] += FE85_C0_D11_Q12[0][0][i] * TP44[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + DM6[j]] += FE85_C0_D11_Q12[0][0][i] * TP45[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM4[i] + DM7[j]] += FE85_C0_D11_Q12[0][0][i] * TP46[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + DM8[j]] += FE85_C0_D11_Q12[0][0][i] * TP47[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM4[i] + DM9[j]] += FE85_C0_D11_Q12[0][0][i] * TP48[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + (j + 12)] += FE85_C0_D11_Q12[0][0][i] * TP49[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM4[i] + DM10[j]] += FE85_C0_D11_Q12[0][0][i] * TP50[j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + j] += BF16[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + (j + 6)] += BF17[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM5[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM7[j]] += BF2[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM0[j]] += BF6[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + DM2[j]] += FE85_C0_D02_Q12[0][0][j] * TP51[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM1[j]] += BF18[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + DM3[j]] += FE85_C0_D02_Q12[0][0][j] * TP52[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM5[i] + DM4[j]] += FE85_C0_D11_Q12[0][0][j] * TP53[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM5[j]] += BF19[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + DM6[j]] += FE85_C0_D02_Q12[0][0][j] * TP54[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM5[i] + DM7[j]] += BF20[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + DM8[j]] += FE85_C0_D02_Q12[0][0][j] * TP55[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM5[i] + DM9[j]] += FE85_C0_D11_Q12[0][0][j] * TP56[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP57[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM5[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP58[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 15)] += BF21[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 18)] += BF22[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM6[i] + DM0[j]] += FE85_C0_D02_Q12[0][0][i] * TP59[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + DM2[j]] += FE85_C0_D02_Q12[0][0][i] * TP14[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM6[i] + DM1[j]] += FE85_C0_D02_Q12[0][0][i] * TP60[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + DM3[j]] += FE85_C0_D02_Q12[0][0][i] * TP33[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM6[i] + DM4[j]] += FE85_C0_D02_Q12[0][0][i] * TP61[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM6[i] + DM5[j]] += FE85_C0_D02_Q12[0][0][i] * TP62[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + DM6[j]] += FE85_C0_D02_Q12[0][0][i] * TP63[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM6[i] + DM7[j]] += FE85_C0_D02_Q12[0][0][i] * TP64[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM6[i] + DM8[j]] += FE85_C0_D02_Q12[0][0][i] * TP65[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM6[i] + DM9[j]] += FE85_C0_D02_Q12[0][0][i] * TP66[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + (j + 12)] += FE85_C0_D02_Q12[0][0][i] * TP67[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM6[i] + DM10[j]] += FE85_C0_D02_Q12[0][0][i] * TP68[j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM0[j]] += BF23[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + DM2[j]] += FE85_C0_D02_Q12[0][0][j] * TP69[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM1[j]] += BF13[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + DM3[j]] += FE85_C0_D02_Q12[0][0][j] * TP70[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM7[i] + DM4[j]] += FE85_C0_D11_Q12[0][0][j] * TP71[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM5[j]] += BF24[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + DM6[j]] += FE85_C0_D02_Q12[0][0][j] * TP72[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM7[i] + DM7[j]] += BF25[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + DM8[j]] += FE85_C0_D02_Q12[0][0][j] * TP73[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM7[i] + DM9[j]] += FE85_C0_D11_Q12[0][0][j] * TP74[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][j] * TP75[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM7[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][j] * TP76[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + (j + 15)] += BF26[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM7[i] + (j + 18)] += BF27[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM8[i] + DM0[j]] += FE85_C0_D02_Q12[0][0][i] * TP77[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + DM2[j]] += FE85_C0_D02_Q12[0][0][i] * TP16[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM8[i] + DM1[j]] += FE85_C0_D02_Q12[0][0][i] * TP78[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + DM3[j]] += FE85_C0_D02_Q12[0][0][i] * TP35[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM8[i] + DM4[j]] += FE85_C0_D02_Q12[0][0][i] * TP79[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM8[i] + DM5[j]] += FE85_C0_D02_Q12[0][0][i] * TP80[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + DM6[j]] += FE85_C0_D02_Q12[0][0][i] * TP65[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM8[i] + DM7[j]] += FE85_C0_D02_Q12[0][0][i] * TP81[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM8[i] + DM8[j]] += FE85_C0_D02_Q12[0][0][i] * TP82[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM8[i] + DM9[j]] += FE85_C0_D02_Q12[0][0][i] * TP83[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + (j + 12)] += FE85_C0_D02_Q12[0][0][i] * TP84[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM8[i] + DM10[j]] += FE85_C0_D02_Q12[0][0][i] * TP85[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM9[i] + DM0[j]] += FE85_C0_D11_Q12[0][0][i] * TP86[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + DM2[j]] += FE85_C0_D11_Q12[0][0][i] * TP87[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM9[i] + DM1[j]] += FE85_C0_D11_Q12[0][0][i] * TP88[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + DM3[j]] += FE85_C0_D11_Q12[0][0][i] * TP89[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM9[i] + DM4[j]] += FE85_C0_D11_Q12[0][0][i] * TP48[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM9[i] + DM5[j]] += FE85_C0_D11_Q12[0][0][i] * TP90[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + DM6[j]] += FE85_C0_D11_Q12[0][0][i] * TP91[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM9[i] + DM7[j]] += FE85_C0_D11_Q12[0][0][i] * TP92[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM9[i] + DM8[j]] += FE85_C0_D11_Q12[0][0][i] * TP93[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM9[i] + DM9[j]] += FE85_C0_D11_Q12[0][0][i] * TP94[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + (j + 12)] += FE85_C0_D11_Q12[0][0][i] * TP95[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM9[i] + DM10[j]] += FE85_C0_D11_Q12[0][0][i] * TP96[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 12) + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP97[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + DM2[j]] += FE3_C0_D01_Q12[0][0][i] * TP98[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 12) + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP99[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + DM3[j]] += FE3_C0_D01_Q12[0][0][i] * TP100[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 12) + DM4[j]] += FE3_C0_D01_Q12[0][0][i] * TP101[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 12) + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP102[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + DM6[j]] += FE3_C0_D01_Q12[0][0][i] * TP103[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 12) + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP104[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 12) + DM8[j]] += FE3_C0_D01_Q12[0][0][i] * TP105[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * (i + 12) + DM9[j]] += FE3_C0_D01_Q12[0][0][i] * TP106[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + (j + 12)] += FE3_C0_D01_Q12[0][0][i] * TP107[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 12) + DM10[j]] += FE3_C0_D01_Q12[0][0][i] * TP108[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM10[i] + DM0[j]] += FE3_C0_D01_Q12[0][0][i] * TP109[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + DM2[j]] += FE3_C0_D01_Q12[0][0][i] * TP110[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM10[i] + DM1[j]] += FE3_C0_D01_Q12[0][0][i] * TP111[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + DM3[j]] += FE3_C0_D01_Q12[0][0][i] * TP112[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM10[i] + DM4[j]] += FE3_C0_D01_Q12[0][0][i] * TP113[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM10[i] + DM5[j]] += FE3_C0_D01_Q12[0][0][i] * TP114[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + DM6[j]] += FE3_C0_D01_Q12[0][0][i] * TP115[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * DM10[i] + DM7[j]] += FE3_C0_D01_Q12[0][0][i] * TP116[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM10[i] + DM8[j]] += FE3_C0_D01_Q12[0][0][i] * TP117[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[21 * DM10[i] + DM9[j]] += FE3_C0_D01_Q12[0][0][i] * TP118[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + (j + 12)] += FE3_C0_D01_Q12[0][0][i] * TP108[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM10[i] + DM10[j]] += FE3_C0_D01_Q12[0][0][i] * TP119[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP120[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP121[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM11[j]] += FE3_C0_D01_Q12[0][0][i] * TP122[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP123[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 15)] += FE3_C0_D01_Q12[0][0][j] * TP124[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM11[j]] += FE3_C0_D01_Q12[0][0][j] * TP125[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP122[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM11[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP126[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM11[i] + DM11[j]] += FE3_C0_D01_Q12[0][0][i] * TP127[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM11[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP128[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP129[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP130[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP131[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM12[j]] += FE3_C0_D01_Q12[0][0][i] * TP132[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += BF28[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + (j + 18)] += FE3_C0_D01_Q12[0][0][j] * TP133[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += BF29[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 18) + DM12[j]] += FE3_C0_D01_Q12[0][0][j] * TP134[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM12[i] + (j + 15)] += FE3_C0_D01_Q12[0][0][i] * TP135[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP132[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM12[i] + (j + 18)] += FE3_C0_D01_Q12[0][0][i] * TP136[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * DM12[i] + DM12[j]] += FE3_C0_D01_Q12[0][0][i] * TP137[j];
  }

};


class rans_exterior_facet_integral_1_3: public ufc::exterior_facet_integral
{
public:

  rans_exterior_facet_integral_1_3() : ufc::exterior_facet_integral()
  {

  }

  ~rans_exterior_facet_integral_1_3() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({false, true, true, false});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 34
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.1739274225687268, 0.3260725774312731, 0.3260725774312731, 0.1739274225687268 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_F_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_F_Q4[3][4][3] =
        { { { 0.0, 0.9305681557970263, 0.06943184420297369 },
            { 0.0, 0.6699905217924281, 0.3300094782075718 },
            { 0.0, 0.3300094782075719, 0.6699905217924279 },
            { 0.0, 0.06943184420297382, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.0, 0.06943184420297369 },
            { 0.6699905217924281, 0.0, 0.3300094782075718 },
            { 0.3300094782075719, 0.0, 0.669990521792428 },
            { 0.06943184420297382, 0.0, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.06943184420297367, 0.0 },
            { 0.6699905217924281, 0.3300094782075718, 0.0 },
            { 0.3300094782075719, 0.6699905217924281, 0.0 },
            { 0.06943184420297374, 0.9305681557970263, 0.0 } } };
    alignas(32) static const double FE42_C0_D01_F_Q4[3][4][5] =
        { { { 1.0, -0.7222726231881047, 3.722272623188091, -0.2777273768118826, -3.722272623188107 },
            { 1.0, 0.3200379128302891, 2.679962087169697, -1.320037912830275, -2.679962087169714 },
            { 1.0, 1.679962087169715, 1.320037912830271, -2.679962087169701, -1.320037912830287 },
            { 1.0, 2.722272623188108, 0.2777273768118786, -3.722272623188096, -0.2777273768118922 } },
          { { -2.72227262318811, -0.722272623188105, 0.0, 3.444545246376218, 0.0 },
            { -1.679962087169718, 0.3200379128302888, 0.0, 1.359924174339433, 0.0 },
            { -0.3200379128302928, 1.679962087169715, 0.0, -1.359924174339417, 0.0 },
            { 0.7222726231881, 2.722272623188108, 0.0, -3.444545246376202, 0.0 } },
          { { -2.72227262318811, -1.0, 0.2777273768118848, 3.722272623188112, -0.2777273768118925 },
            { -1.679962087169717, -1.0, 1.320037912830276, 2.679962087169721, -1.320037912830287 },
            { -0.3200379128302917, -1.0, 2.6799620871697, 1.320037912830298, -2.679962087169714 },
            { 0.7222726231880999, -1.0, 3.722272623188092, 0.2777273768119067, -3.722272623188106 } } };
    alignas(32) static const double FE42_C0_D10_F_Q4[3][4][5] =
        { { { 1.0, 2.722272623188104, 0.2777273768118936, -0.2777273768118936, -3.722272623188106 },
            { 1.0, 1.679962087169712, 1.320037912830285, -1.320037912830285, -2.679962087169713 },
            { 1.0, 0.3200379128302879, 2.679962087169708, -2.679962087169708, -1.320037912830288 },
            { 1.0, -0.7222726231881051, 3.722272623188099, -3.722272623188099, -0.2777273768118945 } },
          { { -2.722272623188107, -1.0, 0.277727376811893, -0.277727376811893, 3.72227262318811 },
            { -1.679962087169713, -1.0, 1.320037912830285, -1.320037912830285, 2.679962087169716 },
            { -0.3200379128302884, -1.0, 2.679962087169709, -2.679962087169709, 1.320037912830289 },
            { 0.7222726231881045, -1.0, 3.722272623188099, -3.722272623188099, 0.2777273768118963 } },
          { { -2.722272623188106, -0.7222726231881095, 0.0, 0.0, 3.444545246376216 },
            { -1.679962087169712, 0.3200379128302852, 0.0, 0.0, 1.359924174339427 },
            { -0.3200379128302857, 1.679962087169712, 0.0, 0.0, -1.359924174339426 },
            { 0.7222726231881069, 2.722272623188104, 0.0, 0.0, -3.444545246376211 } } };
    alignas(32) static const double FE42_C0_F_Q4[3][4][6] =
        { { { 0.0, 0.8013460293699309, -0.05979028222412166, 0.2584442528541909, 0.0, 0.0 },
            { 0.0, 0.2277840767909521, -0.1121969667939041, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.1121969667939041, 0.227784076790952, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.05979028222412169, 0.8013460293699309, 0.2584442528541908, 0.0, 0.0 } },
          { { 0.8013460293699309, 0.0, -0.05979028222412166, 0.0, 0.2584442528541908, 0.0 },
            { 0.2277840767909521, 0.0, -0.1121969667939041, 0.0, 0.8844128900029518, 0.0 },
            { -0.1121969667939041, 0.0, 0.2277840767909521, 0.0, 0.8844128900029519, 0.0 },
            { -0.05979028222412166, 0.0, 0.8013460293699309, 0.0, 0.2584442528541906, 0.0 } },
          { { 0.8013460293699309, -0.05979028222412169, 0.0, 0.0, 0.0, 0.2584442528541908 },
            { 0.2277840767909521, -0.1121969667939041, 0.0, 0.0, 0.0, 0.8844128900029519 },
            { -0.1121969667939041, 0.2277840767909522, 0.0, 0.0, 0.0, 0.884412890002952 },
            { -0.05979028222412169, 0.8013460293699308, 0.0, 0.0, 0.0, 0.2584442528541909 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_F_Q4[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_F_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_F_Q4[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_F_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_F_Q4[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_F_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_F_Q4[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_F_Q4[0][0][1];
    const double w1_d1_c3 = w[1][15] * FE3_C0_D01_F_Q4[0][0][0] + w[1][17] * FE3_C0_D01_F_Q4[0][0][1];
    double w1_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c3 += w[1][ic + 15] * FE3_C0_D01_F_Q4[0][0][ic];
    const double w1_d1_c4 = w[1][18] * FE3_C0_D01_F_Q4[0][0][0] + w[1][20] * FE3_C0_D01_F_Q4[0][0][1];
    double w1_d0_c4 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c4 += w[1][ic + 18] * FE3_C0_D01_F_Q4[0][0][ic];
    alignas(32) double sp[74];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = triangle_reference_facet_normals[facet][1] * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = triangle_reference_facet_normals[facet][0] * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet][0] * sp[9];
    sp[11] = -1 * J_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[20] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[21] = sp[19] + sp[20];
    sp[22] = std::sqrt(sp[21]);
    sp[23] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[24] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[25] = sp[23] + sp[24];
    sp[26] = std::sqrt(sp[25]);
    sp[27] = sp[22] * sp[26];
    sp[28] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[29] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[30] = sp[28] + sp[29];
    sp[31] = std::sqrt(sp[30]);
    sp[32] = sp[27] * sp[31];
    sp[33] = triangle_reference_cell_volume * sp[2];
    sp[34] = std::abs(sp[33]);
    sp[35] = sp[32] / (4.0 * sp[34]);
    sp[36] = sp[3] * sp[17];
    sp[37] = sp[5] * sp[17];
    sp[38] = sp[11] * sp[18];
    sp[39] = sp[9] * sp[18];
    sp[40] = sp[36] + sp[38];
    sp[41] = sp[37] + sp[39];
    sp[42] = sp[11] + sp[11];
    sp[43] = sp[9] + sp[9];
    sp[44] = sp[5] + sp[5];
    sp[45] = sp[3] + sp[3];
    sp[46] = w1_d1_c3 * sp[3];
    sp[47] = w1_d0_c3 * sp[5];
    sp[48] = sp[46] + sp[47];
    sp[49] = sp[48] * sp[17];
    sp[50] = w1_d0_c3 * sp[9];
    sp[51] = w1_d1_c3 * sp[11];
    sp[52] = sp[50] + sp[51];
    sp[53] = sp[52] * sp[18];
    sp[54] = sp[49] + sp[53];
    sp[55] = w1_d1_c4 * sp[3];
    sp[56] = w1_d0_c4 * sp[5];
    sp[57] = sp[55] + sp[56];
    sp[58] = sp[57] * sp[17];
    sp[59] = w1_d0_c4 * sp[9];
    sp[60] = w1_d1_c4 * sp[11];
    sp[61] = sp[59] + sp[60];
    sp[62] = sp[61] * sp[18];
    sp[63] = sp[58] + sp[62];
    sp[64] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[65] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[66] = sp[64] + sp[65];
    sp[67] = sp[66] * sp[66];
    sp[68] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[69] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[70] = sp[68] + sp[69];
    sp[71] = sp[70] * sp[70];
    sp[72] = sp[67] + sp[71];
    sp[73] = std::sqrt(sp[72]);
    alignas(32) double BF0[6][6] = {};
    alignas(32) double BF1[6][5] = {};
    alignas(32) double BF2[6][5] = {};
    alignas(32) double BF3[6][6] = {};
    alignas(32) double BF4[6][5] = {};
    alignas(32) double BF5[6][5] = {};
    alignas(32) double BF6[6][3] = {};
    alignas(32) double BF7[6][3] = {};
    alignas(32) double BF8[5][6] = {};
    alignas(32) double BF9[5][6] = {};
    alignas(32) double BF10[5][3] = {};
    alignas(32) double BF11[5][3] = {};
    alignas(32) double BF12[5][6] = {};
    alignas(32) double BF13[5][6] = {};
    alignas(32) double BF14[5][3] = {};
    alignas(32) double BF15[5][3] = {};
    alignas(32) double BF16[6][6] = {};
    alignas(32) double BF17[6][5] = {};
    alignas(32) double BF18[6][5] = {};
    alignas(32) double BF19[6][6] = {};
    alignas(32) double BF20[6][5] = {};
    alignas(32) double BF21[6][5] = {};
    alignas(32) double BF22[6][3] = {};
    alignas(32) double BF23[6][3] = {};
    alignas(32) double BF24[5][6] = {};
    alignas(32) double BF25[5][6] = {};
    alignas(32) double BF26[5][3] = {};
    alignas(32) double BF27[5][3] = {};
    alignas(32) double BF28[5][6] = {};
    alignas(32) double BF29[5][6] = {};
    alignas(32) double BF30[5][3] = {};
    alignas(32) double BF31[5][3] = {};
    alignas(32) double TP0[3] = {};
    alignas(32) double TP1[3] = {};
    alignas(32) double TP2[3] = {};
    alignas(32) double BF32[3][3] = {};
    alignas(32) double TP3[3] = {};
    alignas(32) double TP4[3] = {};
    alignas(32) double BF33[3][3] = {};
    alignas(32) double TP5[3] = {};
    alignas(32) double TP6[3] = {};
    alignas(32) double TP7[3] = {};
    alignas(32) double TP8[3] = {};
    alignas(32) double TP9[3] = {};
    alignas(32) double BF34[3][3] = {};
    alignas(32) double BF35[3][3] = {};
    alignas(32) double TP10[3] = {};
    alignas(32) double TP11[3] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w1_c3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c3 += w[1][ic + 15] * FE3_C0_F_Q4[facet][iq][ic];
        double w1_c4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c4 += w[1][ic + 18] * FE3_C0_F_Q4[facet][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE42_C0_F_Q4[facet][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE42_C0_F_Q4[facet][iq][ic];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c0 += w[1][ic] * FE42_C0_F_Q4[facet][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c1 += w[1][ic + 6] * FE42_C0_F_Q4[facet][iq][ic];
        const double w1_d1_c0 = w[1][0] * FE42_C0_D01_F_Q4[facet][iq][0] + w[1][2] * FE42_C0_D01_F_Q4[facet][iq][1] + w[1][3] * FE42_C0_D01_F_Q4[facet][iq][2] + w[1][4] * FE42_C0_D01_F_Q4[facet][iq][3] + w[1][5] * FE42_C0_D01_F_Q4[facet][iq][4];
        const double w1_d0_c0 = w[1][0] * FE42_C0_D10_F_Q4[facet][iq][0] + w[1][1] * FE42_C0_D10_F_Q4[facet][iq][1] + w[1][3] * FE42_C0_D10_F_Q4[facet][iq][2] + w[1][4] * FE42_C0_D10_F_Q4[facet][iq][3] + w[1][5] * FE42_C0_D10_F_Q4[facet][iq][4];
        const double w1_d0_c1 = w[1][6] * FE42_C0_D10_F_Q4[facet][iq][0] + w[1][7] * FE42_C0_D10_F_Q4[facet][iq][1] + w[1][9] * FE42_C0_D10_F_Q4[facet][iq][2] + w[1][10] * FE42_C0_D10_F_Q4[facet][iq][3] + w[1][11] * FE42_C0_D10_F_Q4[facet][iq][4];
        const double w1_d1_c1 = w[1][6] * FE42_C0_D01_F_Q4[facet][iq][0] + w[1][8] * FE42_C0_D01_F_Q4[facet][iq][1] + w[1][9] * FE42_C0_D01_F_Q4[facet][iq][2] + w[1][10] * FE42_C0_D01_F_Q4[facet][iq][3] + w[1][11] * FE42_C0_D01_F_Q4[facet][iq][4];
        alignas(32) double sv4[300];
        sv4[0] = w1_c3 * w1_c3;
        sv4[1] = w1_c4 * w1_c4;
        sv4[2] = std::sqrt(1e-8 + sv4[1]);
        sv4[3] = w1_c4 + sv4[2];
        sv4[4] = sv4[0] / (0.5 * sv4[3]);
        sv4[5] = w2_c1 * sp[17];
        sv4[6] = w2_c0 * sp[18];
        sv4[7] = sv4[5] + sv4[6];
        sv4[8] = std::tanh(100.0 * sv4[7]);
        sv4[9] = (0.0001 + sv4[4] / 1.3) * (100000.0 * (0.5 + -1 * (0.5 * sv4[8])));
        sv4[10] = sv4[9] * (1 / (2.0 * sp[35]));
        sv4[11] = w1_c3 + w1_c3;
        sv4[12] = w1_c4 + w1_c4;
        sv4[13] = sv4[12] / (2 * sv4[2]);
        sv4[14] = 0.5 * (1.0 + sv4[13]) * sv4[4];
        sv4[15] = -1 * sv4[14] / (0.5 * sv4[3]);
        sv4[16] = sv4[11] / (0.5 * sv4[3]);
        sv4[17] = 100000.0 * (0.5 + -1 * (0.5 * sv4[8])) * (sv4[15] / 1.3);
        sv4[18] = 100000.0 * (0.5 + -1 * (0.5 * sv4[8])) * (sv4[16] / 1.3);
        sv4[19] = sv4[17] * (1 / (2.0 * sp[35]));
        sv4[20] = sv4[18] * (1 / (2.0 * sp[35]));
        sv4[21] = w1_c4 * sv4[19];
        sv4[22] = w1_c4 * sv4[20];
        sv4[23] = sv4[21] + sv4[10];
        sv4[24] = (0.0001 + sv4[4]) * (100000.0 * (0.5 + -1 * (0.5 * sv4[8])));
        sv4[25] = sv4[24] * (1 / (2.0 * sp[35]));
        sv4[26] = 100000.0 * (0.5 + -1 * (0.5 * sv4[8])) * sv4[15];
        sv4[27] = 100000.0 * (0.5 + -1 * (0.5 * sv4[8])) * sv4[16];
        sv4[28] = sv4[26] * (1 / (2.0 * sp[35]));
        sv4[29] = sv4[27] * (1 / (2.0 * sp[35]));
        sv4[30] = w1_c3 * sv4[28];
        sv4[31] = w1_c3 * sv4[29];
        sv4[32] = sv4[31] + sv4[25];
        sv4[33] = (0.5 + -1 * (0.5 * sv4[8])) * (0.0001 + sv4[4]);
        sv4[34] = sp[40] * sv4[33];
        sv4[35] = sp[41] * sv4[33];
        sv4[36] = (0.5 + -1 * (0.5 * sv4[8])) * sv4[15];
        sv4[37] = (0.5 + -1 * (0.5 * sv4[8])) * sv4[16];
        sv4[38] = sp[40] * sv4[36];
        sv4[39] = sp[40] * sv4[37];
        sv4[40] = sp[41] * sv4[36];
        sv4[41] = sp[41] * sv4[37];
        sv4[42] = w1_c3 * sv4[38];
        sv4[43] = w1_c3 * sv4[40];
        sv4[44] = w1_c3 * sv4[39];
        sv4[45] = w1_c3 * sv4[41];
        sv4[46] = sv4[34] + sv4[44];
        sv4[47] = sv4[35] + sv4[45];
        sv4[48] = (0.5 + -1 * (0.5 * sv4[8])) * (0.0001 + sv4[4] / 1.3);
        sv4[49] = sp[40] * sv4[48];
        sv4[50] = sp[41] * sv4[48];
        sv4[51] = (0.5 + -1 * (0.5 * sv4[8])) * (sv4[15] / 1.3);
        sv4[52] = (0.5 + -1 * (0.5 * sv4[8])) * (sv4[16] / 1.3);
        sv4[53] = sp[40] * sv4[51];
        sv4[54] = sp[40] * sv4[52];
        sv4[55] = sp[41] * sv4[51];
        sv4[56] = sp[41] * sv4[52];
        sv4[57] = w1_c4 * sv4[53];
        sv4[58] = w1_c4 * sv4[55];
        sv4[59] = w1_c4 * sv4[54];
        sv4[60] = w1_c4 * sv4[56];
        sv4[61] = sv4[49] + sv4[57];
        sv4[62] = sv4[50] + sv4[58];
        sv4[63] = 2.0 * (0.0001 + sv4[4]) * (sp[3] / 2);
        sv4[64] = 2.0 * (0.0001 + sv4[4]) * (sp[5] / 2);
        sv4[65] = 2.0 * (0.0001 + sv4[4]) * (sp[9] / 2);
        sv4[66] = 2.0 * (0.0001 + sv4[4]) * (sp[11] / 2);
        sv4[67] = sv4[63] * sp[17];
        sv4[68] = sv4[64] * sp[17];
        sv4[69] = sv4[65] * sp[17];
        sv4[70] = sv4[66] * sp[17];
        sv4[71] = 2.0 * (0.0001 + sv4[4]) * (sp[42] / 2);
        sv4[72] = 2.0 * (0.0001 + sv4[4]) * (sp[43] / 2);
        sv4[73] = sv4[71] * sp[18];
        sv4[74] = sv4[72] * sp[18];
        sv4[75] = sv4[67] + sv4[73];
        sv4[76] = sv4[68] + sv4[74];
        sv4[77] = sv4[75] * (-1 * sp[17]);
        sv4[78] = sv4[76] * (-1 * sp[17]);
        sv4[79] = -1 * sp[17] * sv4[69];
        sv4[80] = -1 * sp[17] * sv4[70];
        sv4[81] = 2.0 * (0.0001 + sv4[4]) * (sp[44] / 2);
        sv4[82] = 2.0 * (0.0001 + sv4[4]) * (sp[45] / 2);
        sv4[83] = sv4[81] * sp[17];
        sv4[84] = sv4[82] * sp[17];
        sv4[85] = sv4[63] * sp[18];
        sv4[86] = sv4[64] * sp[18];
        sv4[87] = sv4[65] * sp[18];
        sv4[88] = sv4[66] * sp[18];
        sv4[89] = sv4[83] + sv4[87];
        sv4[90] = sv4[84] + sv4[88];
        sv4[91] = sv4[85] * sp[18];
        sv4[92] = sv4[86] * sp[18];
        sv4[93] = sv4[89] * sp[18];
        sv4[94] = sv4[90] * sp[18];
        sv4[95] = sv4[77] + sv4[91];
        sv4[96] = sv4[78] + sv4[92];
        sv4[97] = sv4[79] + sv4[93];
        sv4[98] = sv4[80] + sv4[94];
        sv4[99] = sv4[95] * (-1 * sp[17]);
        sv4[100] = sv4[96] * (-1 * sp[17]);
        sv4[101] = sv4[97] * (-1 * sp[17]);
        sv4[102] = sv4[98] * (-1 * sp[17]);
        sv4[103] = sv4[95] * sp[18];
        sv4[104] = sv4[96] * sp[18];
        sv4[105] = sv4[97] * sp[18];
        sv4[106] = sv4[98] * sp[18];
        sv4[107] = w1_c0 * (-1 * sp[17]);
        sv4[108] = w1_c1 * sp[18];
        sv4[109] = sv4[107] + sv4[108];
        sv4[110] = 2.0 * sv4[15] * (sp[3] / 2);
        sv4[111] = 2.0 * sv4[15] * (sp[5] / 2);
        sv4[112] = 2.0 * sv4[15] * (sp[9] / 2);
        sv4[113] = 2.0 * sv4[15] * (sp[11] / 2);
        sv4[114] = 2.0 * sv4[16] * (sp[3] / 2);
        sv4[115] = 2.0 * sv4[16] * (sp[5] / 2);
        sv4[116] = 2.0 * sv4[16] * (sp[9] / 2);
        sv4[117] = 2.0 * sv4[16] * (sp[11] / 2);
        sv4[118] = sv4[110] * sp[17];
        sv4[119] = sv4[111] * sp[17];
        sv4[120] = sv4[112] * sp[17];
        sv4[121] = sv4[113] * sp[17];
        sv4[122] = sv4[114] * sp[17];
        sv4[123] = sv4[115] * sp[17];
        sv4[124] = sv4[116] * sp[17];
        sv4[125] = sv4[117] * sp[17];
        sv4[126] = 2.0 * sv4[15] * (sp[42] / 2);
        sv4[127] = 2.0 * sv4[15] * (sp[43] / 2);
        sv4[128] = 2.0 * sv4[16] * (sp[42] / 2);
        sv4[129] = 2.0 * sv4[16] * (sp[43] / 2);
        sv4[130] = sv4[126] * sp[18];
        sv4[131] = sv4[127] * sp[18];
        sv4[132] = sv4[128] * sp[18];
        sv4[133] = sv4[129] * sp[18];
        sv4[134] = sv4[118] + sv4[130];
        sv4[135] = sv4[119] + sv4[131];
        sv4[136] = sv4[122] + sv4[132];
        sv4[137] = sv4[123] + sv4[133];
        sv4[138] = sv4[134] * (-1 * sp[17]);
        sv4[139] = sv4[135] * (-1 * sp[17]);
        sv4[140] = -1 * sp[17] * sv4[120];
        sv4[141] = -1 * sp[17] * sv4[121];
        sv4[142] = sv4[136] * (-1 * sp[17]);
        sv4[143] = sv4[137] * (-1 * sp[17]);
        sv4[144] = -1 * sp[17] * sv4[124];
        sv4[145] = -1 * sp[17] * sv4[125];
        sv4[146] = 2.0 * sv4[15] * (sp[44] / 2);
        sv4[147] = 2.0 * sv4[15] * (sp[45] / 2);
        sv4[148] = 2.0 * sv4[16] * (sp[44] / 2);
        sv4[149] = 2.0 * sv4[16] * (sp[45] / 2);
        sv4[150] = sv4[146] * sp[17];
        sv4[151] = sv4[147] * sp[17];
        sv4[152] = sv4[148] * sp[17];
        sv4[153] = sv4[149] * sp[17];
        sv4[154] = sv4[110] * sp[18];
        sv4[155] = sv4[111] * sp[18];
        sv4[156] = sv4[112] * sp[18];
        sv4[157] = sv4[113] * sp[18];
        sv4[158] = sv4[114] * sp[18];
        sv4[159] = sv4[115] * sp[18];
        sv4[160] = sv4[116] * sp[18];
        sv4[161] = sv4[117] * sp[18];
        sv4[162] = sv4[150] + sv4[156];
        sv4[163] = sv4[151] + sv4[157];
        sv4[164] = sv4[152] + sv4[160];
        sv4[165] = sv4[153] + sv4[161];
        sv4[166] = sv4[154] * sp[18];
        sv4[167] = sv4[155] * sp[18];
        sv4[168] = sv4[162] * sp[18];
        sv4[169] = sv4[163] * sp[18];
        sv4[170] = sv4[158] * sp[18];
        sv4[171] = sv4[159] * sp[18];
        sv4[172] = sv4[164] * sp[18];
        sv4[173] = sv4[165] * sp[18];
        sv4[174] = sv4[138] + sv4[166];
        sv4[175] = sv4[139] + sv4[167];
        sv4[176] = sv4[140] + sv4[168];
        sv4[177] = sv4[141] + sv4[169];
        sv4[178] = sv4[142] + sv4[170];
        sv4[179] = sv4[143] + sv4[171];
        sv4[180] = sv4[144] + sv4[172];
        sv4[181] = sv4[145] + sv4[173];
        sv4[182] = sv4[109] * sv4[174];
        sv4[183] = sv4[109] * sv4[175];
        sv4[184] = sv4[109] * sv4[176];
        sv4[185] = sv4[109] * sv4[177];
        sv4[186] = sv4[109] * sv4[178];
        sv4[187] = sv4[109] * sv4[179];
        sv4[188] = sv4[109] * sv4[180];
        sv4[189] = sv4[109] * sv4[181];
        sv4[190] = sp[54] * sv4[36];
        sv4[191] = sp[54] * sv4[37];
        sv4[192] = -1 * sv4[190] + sv4[30];
        sv4[193] = sv4[32] + -1 * sv4[191];
        sv4[194] = sp[63] * sv4[51];
        sv4[195] = sp[63] * sv4[52];
        sv4[196] = sv4[192] + -1 * sv4[194];
        sv4[197] = sv4[193] + -1 * sv4[195];
        sv4[198] = w1_d1_c0 * sp[3];
        sv4[199] = w1_d0_c0 * sp[5];
        sv4[200] = sv4[198] + sv4[199];
        sv4[201] = w1_d0_c1 * sp[9];
        sv4[202] = w1_d1_c1 * sp[11];
        sv4[203] = sv4[201] + sv4[202];
        sv4[204] = sv4[200] + sv4[203];
        sv4[205] = 2.0 * sv4[15] * (sv4[204] / 2);
        sv4[206] = 2.0 * sv4[16] * (sv4[204] / 2);
        sv4[207] = sv4[205] * sp[17];
        sv4[208] = sv4[206] * sp[17];
        sv4[209] = w1_d0_c0 * sp[9];
        sv4[210] = w1_d1_c0 * sp[11];
        sv4[211] = sv4[209] + sv4[210];
        sv4[212] = sv4[211] + sv4[211];
        sv4[213] = 2.0 * sv4[15] * (sv4[212] / 2);
        sv4[214] = 2.0 * sv4[16] * (sv4[212] / 2);
        sv4[215] = sv4[213] * sp[18];
        sv4[216] = sv4[214] * sp[18];
        sv4[217] = sv4[207] + sv4[215];
        sv4[218] = sv4[208] + sv4[216];
        sv4[219] = sv4[217] * (-1 * sp[17]);
        sv4[220] = sv4[218] * (-1 * sp[17]);
        sv4[221] = w1_d1_c1 * sp[3];
        sv4[222] = w1_d0_c1 * sp[5];
        sv4[223] = sv4[221] + sv4[222];
        sv4[224] = sv4[223] + sv4[223];
        sv4[225] = 2.0 * sv4[15] * (sv4[224] / 2);
        sv4[226] = 2.0 * sv4[16] * (sv4[224] / 2);
        sv4[227] = sv4[225] * sp[17];
        sv4[228] = sv4[226] * sp[17];
        sv4[229] = sv4[205] * sp[18];
        sv4[230] = sv4[206] * sp[18];
        sv4[231] = sv4[227] + sv4[229];
        sv4[232] = sv4[228] + sv4[230];
        sv4[233] = sv4[231] * sp[18];
        sv4[234] = sv4[232] * sp[18];
        sv4[235] = sv4[219] + sv4[233];
        sv4[236] = sv4[220] + sv4[234];
        sv4[237] = sv4[235] * (-1 * sp[17]);
        sv4[238] = sv4[236] * (-1 * sp[17]);
        sv4[239] = sv4[235] * sp[18];
        sv4[240] = sv4[236] * sp[18];
        sv4[241] = 100000.0 * (0.0001 + sv4[4]) * (1 / (2.0 * sp[35]));
        sv4[242] = sv4[241] * (-1 * sp[17]);
        sv4[243] = sv4[241] * sp[18];
        sv4[244] = 100000.0 * sv4[15] * (1 / (2.0 * sp[35]));
        sv4[245] = 100000.0 * sv4[16] * (1 / (2.0 * sp[35]));
        sv4[246] = sv4[109] * sv4[244];
        sv4[247] = sv4[109] * sv4[245];
        sv4[248] = sv4[246] * (-1 * sp[17]);
        sv4[249] = sv4[246] * sp[18];
        sv4[250] = sv4[247] * (-1 * sp[17]);
        sv4[251] = sv4[247] * sp[18];
        sv4[252] = sv4[242] * (-1 * sp[17]);
        sv4[253] = sv4[242] * sp[18];
        sv4[254] = -1 * sp[17] * sv4[243];
        sv4[255] = sv4[243] * sp[18];
        sv4[256] = -1 * sv4[237] + sv4[248];
        sv4[257] = -1 * sv4[239] + sv4[249];
        sv4[258] = -1 * sv4[238] + sv4[250];
        sv4[259] = -1 * sv4[240] + sv4[251];
        sv4[260] = sv4[23] * sp[73];
        sv4[261] = sv4[22] * sp[73];
        sv4[262] = sv4[196] * sp[73];
        sv4[263] = -1 * sv4[42] * sp[73];
        sv4[264] = -1 * sv4[43] * sp[73];
        sv4[265] = -1 * sv4[61] * sp[73];
        sv4[266] = -1 * sv4[62] * sp[73];
        sv4[267] = -1 * sv4[182] * sp[73];
        sv4[268] = -1 * sv4[183] * sp[73];
        sv4[269] = -1 * sv4[184] * sp[73];
        sv4[270] = -1 * sv4[185] * sp[73];
        sv4[271] = sv4[256] * sp[73];
        sv4[272] = sv4[257] * sp[73];
        sv4[273] = sv4[197] * sp[73];
        sv4[274] = -1 * sv4[46] * sp[73];
        sv4[275] = -1 * sv4[47] * sp[73];
        sv4[276] = -1 * sv4[59] * sp[73];
        sv4[277] = -1 * sv4[60] * sp[73];
        sv4[278] = -1 * sv4[186] * sp[73];
        sv4[279] = -1 * sv4[187] * sp[73];
        sv4[280] = -1 * sv4[188] * sp[73];
        sv4[281] = -1 * sv4[189] * sp[73];
        sv4[282] = sv4[258] * sp[73];
        sv4[283] = sv4[259] * sp[73];
        sv4[284] = -1 * sv4[34] * sp[73];
        sv4[285] = -1 * sv4[35] * sp[73];
        sv4[286] = -1 * sv4[49] * sp[73];
        sv4[287] = -1 * sv4[50] * sp[73];
        sv4[288] = -1 * sv4[99] * sp[73];
        sv4[289] = -1 * sv4[100] * sp[73];
        sv4[290] = -1 * sv4[101] * sp[73];
        sv4[291] = -1 * sv4[102] * sp[73];
        sv4[292] = sv4[252] * sp[73];
        sv4[293] = sv4[253] * sp[73];
        sv4[294] = -1 * sv4[103] * sp[73];
        sv4[295] = -1 * sv4[104] * sp[73];
        sv4[296] = -1 * sv4[105] * sp[73];
        sv4[297] = -1 * sv4[106] * sp[73];
        sv4[298] = sv4[254] * sp[73];
        sv4[299] = sv4[255] * sp[73];
        const double fw0 = sv4[292] * weights4[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE42_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF0[i][j] += TF0[i] * FE42_C0_F_Q4[facet][iq][j];
        const double fw1 = sv4[289] * weights4[iq];
        alignas(32) double TF1[6];
        for (int i = 0; i < 6; ++i)
            TF1[i] = fw1 * FE42_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF1[i][j] += TF1[i] * FE42_C0_D10_F_Q4[facet][iq][j];
        const double fw2 = sv4[288] * weights4[iq];
        alignas(32) double TF2[6];
        for (int i = 0; i < 6; ++i)
            TF2[i] = fw2 * FE42_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF2[i][j] += TF2[i] * FE42_C0_D01_F_Q4[facet][iq][j];
        const double fw3 = sv4[298] * weights4[iq];
        alignas(32) double TF3[6];
        for (int i = 0; i < 6; ++i)
            TF3[i] = fw3 * FE42_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF3[i][j] += TF3[i] * FE42_C0_F_Q4[facet][iq][j];
        const double fw4 = sv4[290] * weights4[iq];
        alignas(32) double TF4[6];
        for (int i = 0; i < 6; ++i)
            TF4[i] = fw4 * FE42_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF4[i][j] += TF4[i] * FE42_C0_D10_F_Q4[facet][iq][j];
        const double fw5 = sv4[291] * weights4[iq];
        alignas(32) double TF5[6];
        for (int i = 0; i < 6; ++i)
            TF5[i] = fw5 * FE42_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF5[i][j] += TF5[i] * FE42_C0_D01_F_Q4[facet][iq][j];
        const double fw6 = sv4[282] * weights4[iq];
        alignas(32) double TF6[6];
        for (int i = 0; i < 6; ++i)
            TF6[i] = fw6 * FE42_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF6[i][j] += TF6[i] * FE3_C0_F_Q4[facet][iq][j];
        const double fw7 = sv4[271] * weights4[iq];
        alignas(32) double TF7[6];
        for (int i = 0; i < 6; ++i)
            TF7[i] = fw7 * FE42_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF7[i][j] += TF7[i] * FE3_C0_F_Q4[facet][iq][j];
        alignas(32) double TF8[5];
        for (int i = 0; i < 5; ++i)
            TF8[i] = fw1 * FE42_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF8[i][j] += TF8[i] * FE42_C0_F_Q4[facet][iq][j];
        const double fw8 = sv4[295] * weights4[iq];
        alignas(32) double TF9[5];
        for (int i = 0; i < 5; ++i)
            TF9[i] = fw8 * FE42_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF9[i][j] += TF9[i] * FE42_C0_F_Q4[facet][iq][j];
        const double fw9 = sv4[279] * weights4[iq];
        alignas(32) double TF10[5];
        for (int i = 0; i < 5; ++i)
            TF10[i] = fw9 * FE42_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF10[i][j] += TF10[i] * FE3_C0_F_Q4[facet][iq][j];
        const double fw10 = sv4[268] * weights4[iq];
        alignas(32) double TF11[5];
        for (int i = 0; i < 5; ++i)
            TF11[i] = fw10 * FE42_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF11[i][j] += TF11[i] * FE3_C0_F_Q4[facet][iq][j];
        alignas(32) double TF12[5];
        for (int i = 0; i < 5; ++i)
            TF12[i] = fw2 * FE42_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF12[i][j] += TF12[i] * FE42_C0_F_Q4[facet][iq][j];
        const double fw11 = sv4[294] * weights4[iq];
        alignas(32) double TF13[5];
        for (int i = 0; i < 5; ++i)
            TF13[i] = fw11 * FE42_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF13[i][j] += TF13[i] * FE42_C0_F_Q4[facet][iq][j];
        const double fw12 = sv4[278] * weights4[iq];
        alignas(32) double TF14[5];
        for (int i = 0; i < 5; ++i)
            TF14[i] = fw12 * FE42_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF14[i][j] += TF14[i] * FE3_C0_F_Q4[facet][iq][j];
        const double fw13 = sv4[267] * weights4[iq];
        alignas(32) double TF15[5];
        for (int i = 0; i < 5; ++i)
            TF15[i] = fw13 * FE42_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF15[i][j] += TF15[i] * FE3_C0_F_Q4[facet][iq][j];
        const double fw14 = sv4[293] * weights4[iq];
        alignas(32) double TF16[6];
        for (int i = 0; i < 6; ++i)
            TF16[i] = fw14 * FE42_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF16[i][j] += TF16[i] * FE42_C0_F_Q4[facet][iq][j];
        alignas(32) double TF17[6];
        for (int i = 0; i < 6; ++i)
            TF17[i] = fw8 * FE42_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF17[i][j] += TF17[i] * FE42_C0_D10_F_Q4[facet][iq][j];
        alignas(32) double TF18[6];
        for (int i = 0; i < 6; ++i)
            TF18[i] = fw11 * FE42_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF18[i][j] += TF18[i] * FE42_C0_D01_F_Q4[facet][iq][j];
        const double fw15 = sv4[299] * weights4[iq];
        alignas(32) double TF19[6];
        for (int i = 0; i < 6; ++i)
            TF19[i] = fw15 * FE42_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF19[i][j] += TF19[i] * FE42_C0_F_Q4[facet][iq][j];
        const double fw16 = sv4[296] * weights4[iq];
        alignas(32) double TF20[6];
        for (int i = 0; i < 6; ++i)
            TF20[i] = fw16 * FE42_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF20[i][j] += TF20[i] * FE42_C0_D10_F_Q4[facet][iq][j];
        const double fw17 = sv4[297] * weights4[iq];
        alignas(32) double TF21[6];
        for (int i = 0; i < 6; ++i)
            TF21[i] = fw17 * FE42_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF21[i][j] += TF21[i] * FE42_C0_D01_F_Q4[facet][iq][j];
        const double fw18 = sv4[283] * weights4[iq];
        alignas(32) double TF22[6];
        for (int i = 0; i < 6; ++i)
            TF22[i] = fw18 * FE42_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF22[i][j] += TF22[i] * FE3_C0_F_Q4[facet][iq][j];
        const double fw19 = sv4[272] * weights4[iq];
        alignas(32) double TF23[6];
        for (int i = 0; i < 6; ++i)
            TF23[i] = fw19 * FE42_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 3; ++j)
                BF23[i][j] += TF23[i] * FE3_C0_F_Q4[facet][iq][j];
        alignas(32) double TF24[5];
        for (int i = 0; i < 5; ++i)
            TF24[i] = fw4 * FE42_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF24[i][j] += TF24[i] * FE42_C0_F_Q4[facet][iq][j];
        alignas(32) double TF25[5];
        for (int i = 0; i < 5; ++i)
            TF25[i] = fw16 * FE42_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF25[i][j] += TF25[i] * FE42_C0_F_Q4[facet][iq][j];
        const double fw20 = sv4[280] * weights4[iq];
        alignas(32) double TF26[5];
        for (int i = 0; i < 5; ++i)
            TF26[i] = fw20 * FE42_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF26[i][j] += TF26[i] * FE3_C0_F_Q4[facet][iq][j];
        const double fw21 = sv4[269] * weights4[iq];
        alignas(32) double TF27[5];
        for (int i = 0; i < 5; ++i)
            TF27[i] = fw21 * FE42_C0_D10_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF27[i][j] += TF27[i] * FE3_C0_F_Q4[facet][iq][j];
        alignas(32) double TF28[5];
        for (int i = 0; i < 5; ++i)
            TF28[i] = fw5 * FE42_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF28[i][j] += TF28[i] * FE42_C0_F_Q4[facet][iq][j];
        alignas(32) double TF29[5];
        for (int i = 0; i < 5; ++i)
            TF29[i] = fw17 * FE42_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF29[i][j] += TF29[i] * FE42_C0_F_Q4[facet][iq][j];
        const double fw22 = sv4[281] * weights4[iq];
        alignas(32) double TF30[5];
        for (int i = 0; i < 5; ++i)
            TF30[i] = fw22 * FE42_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF30[i][j] += TF30[i] * FE3_C0_F_Q4[facet][iq][j];
        const double fw23 = sv4[270] * weights4[iq];
        alignas(32) double TF31[5];
        for (int i = 0; i < 5; ++i)
            TF31[i] = fw23 * FE42_C0_D01_F_Q4[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF31[i][j] += TF31[i] * FE3_C0_F_Q4[facet][iq][j];
        const double fw24 = sv4[275] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP0[j] += fw24 * FE3_C0_F_Q4[facet][iq][j];
        const double fw25 = sv4[264] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP1[j] += fw25 * FE3_C0_F_Q4[facet][iq][j];
        const double fw26 = sv4[285] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP2[i] += fw26 * FE3_C0_F_Q4[facet][iq][i];
        const double fw27 = sv4[273] * weights4[iq];
        alignas(32) double TF32[3];
        for (int i = 0; i < 3; ++i)
            TF32[i] = fw27 * FE3_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF32[i][j] += TF32[i] * FE3_C0_F_Q4[facet][iq][j];
        const double fw28 = sv4[284] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP3[i] += fw28 * FE3_C0_F_Q4[facet][iq][i];
        const double fw29 = sv4[287] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP4[i] += fw29 * FE3_C0_F_Q4[facet][iq][i];
        const double fw30 = sv4[262] * weights4[iq];
        alignas(32) double TF33[3];
        for (int i = 0; i < 3; ++i)
            TF33[i] = fw30 * FE3_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF33[i][j] += TF33[i] * FE3_C0_F_Q4[facet][iq][j];
        const double fw31 = sv4[286] * weights4[iq];
        for (int i = 0; i < 3; ++i)
            TP5[i] += fw31 * FE3_C0_F_Q4[facet][iq][i];
        const double fw32 = sv4[274] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP6[j] += fw32 * FE3_C0_F_Q4[facet][iq][j];
        const double fw33 = sv4[263] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP7[j] += fw33 * FE3_C0_F_Q4[facet][iq][j];
        const double fw34 = sv4[277] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP8[j] += fw34 * FE3_C0_F_Q4[facet][iq][j];
        const double fw35 = sv4[266] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP9[j] += fw35 * FE3_C0_F_Q4[facet][iq][j];
        const double fw36 = sv4[261] * weights4[iq];
        alignas(32) double TF34[3];
        for (int i = 0; i < 3; ++i)
            TF34[i] = fw36 * FE3_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF34[i][j] += TF34[i] * FE3_C0_F_Q4[facet][iq][j];
        const double fw37 = sv4[260] * weights4[iq];
        alignas(32) double TF35[3];
        for (int i = 0; i < 3; ++i)
            TF35[i] = fw37 * FE3_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF35[i][j] += TF35[i] * FE3_C0_F_Q4[facet][iq][j];
        const double fw38 = sv4[276] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP10[j] += fw38 * FE3_C0_F_Q4[facet][iq][j];
        const double fw39 = sv4[265] * weights4[iq];
        for (int j = 0; j < 3; ++j)
            TP11[j] += fw39 * FE3_C0_F_Q4[facet][iq][j];
    }
    std::fill(A, A + 441, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    static const int DM4[2] = { 15, 17 };
    static const int DM5[2] = { 18, 20 };
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + j] += BF0[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM0[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM1[j]] += BF2[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * i + (j + 6)] += BF3[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM2[j]] += BF4[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * i + DM3[j]] += BF5[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + (j + 15)] += BF6[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * i + (j + 18)] += BF7[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM0[i] + j] += BF8[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM0[i] + (j + 6)] += BF9[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + (j + 15)] += BF10[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM0[i] + (j + 18)] += BF11[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM1[i] + j] += BF12[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM1[i] + (j + 6)] += BF13[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + (j + 15)] += BF14[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM1[i] + (j + 18)] += BF15[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + j] += BF16[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM0[j]] += BF17[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM1[j]] += BF18[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * (i + 6) + (j + 6)] += BF19[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM2[j]] += BF20[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[21 * (i + 6) + DM3[j]] += BF21[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + (j + 15)] += BF22[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 6) + (j + 18)] += BF23[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM2[i] + j] += BF24[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM2[i] + (j + 6)] += BF25[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + (j + 15)] += BF26[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM2[i] + (j + 18)] += BF27[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM3[i] + j] += BF28[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[21 * DM3[i] + (j + 6)] += BF29[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + (j + 15)] += BF30[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM3[i] + (j + 18)] += BF31[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += FE3_C0_D01_F_Q4[0][0][i] * TP0[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += FE3_C0_D01_F_Q4[0][0][i] * TP1[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 15)] += FE3_C0_D01_F_Q4[0][0][j] * TP2[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 15)] += BF32[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM4[j]] += FE3_C0_D01_F_Q4[0][0][j] * TP3[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + (j + 18)] += FE3_C0_D01_F_Q4[0][0][j] * TP4[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 15) + (j + 18)] += BF33[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 2; ++j)
            A[21 * (i + 15) + DM5[j]] += FE3_C0_D01_F_Q4[0][0][j] * TP5[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + (j + 15)] += FE3_C0_D01_F_Q4[0][0][i] * TP6[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM4[i] + (j + 18)] += FE3_C0_D01_F_Q4[0][0][i] * TP7[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += FE3_C0_D01_F_Q4[0][0][i] * TP8[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += FE3_C0_D01_F_Q4[0][0][i] * TP9[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 15)] += BF34[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * (i + 18) + (j + 18)] += BF35[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 15)] += FE3_C0_D01_F_Q4[0][0][i] * TP10[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 3; ++j)
            A[21 * DM5[i] + (j + 18)] += FE3_C0_D01_F_Q4[0][0][i] * TP11[j];
  }

};


class rans_form_0: public ufc::form
{
public:

  rans_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~rans_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "95190258f0b16d5f8aafeb22851d9d31a3530e19c1a7161299f6f63050e689e136ef9204ecc092729f98c1024ef0f5f8b86e1b52f46aa807c0062dbea0e60f94";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 4;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 4)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new rans_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new rans_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new rans_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new rans_finite_element_4();
    case 1:
        return new rans_finite_element_5();
    case 2:
        return new rans_finite_element_4();
    case 3:
        return new rans_finite_element_4();
    case 4:
        return new rans_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new rans_dofmap_4();
    case 1:
        return new rans_dofmap_5();
    case 2:
        return new rans_dofmap_4();
    case 3:
        return new rans_dofmap_4();
    case 4:
        return new rans_dofmap_0();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 4;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 3:
        return new rans_exterior_facet_integral_0_3();
    default:
        return nullptr;
    }
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new rans_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class rans_form_1: public ufc::form
{
public:

  rans_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~rans_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "d0cd745c9018c9c07df7a34ad529d47a25ce042218ca7eb4233d5f3476c9659c8990ec6aa6ee8b1ad04103bfccd858d98aff89a31e99c251552a4a7afd5e628b";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 4;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 4)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new rans_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new rans_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new rans_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new rans_finite_element_4();
    case 1:
        return new rans_finite_element_4();
    case 2:
        return new rans_finite_element_5();
    case 3:
        return new rans_finite_element_4();
    case 4:
        return new rans_finite_element_4();
    case 5:
        return new rans_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new rans_dofmap_4();
    case 1:
        return new rans_dofmap_4();
    case 2:
        return new rans_dofmap_5();
    case 3:
        return new rans_dofmap_4();
    case 4:
        return new rans_dofmap_4();
    case 5:
        return new rans_dofmap_0();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 4;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 3:
        return new rans_exterior_facet_integral_1_3();
    default:
        return nullptr;
    }
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new rans_cell_integral_1_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace RANS
{

class CoefficientSpace_m: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_m(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<rans_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<rans_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_m(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<rans_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<rans_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_sigma: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_sigma(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<rans_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<rans_dofmap_5>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_sigma(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<rans_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<rans_dofmap_5>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_x: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_x(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<rans_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<rans_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_x(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<rans_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<rans_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_xl: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_xl(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<rans_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<rans_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_xl(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<rans_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<rans_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<rans_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<rans_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<rans_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<rans_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_F_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_F_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_sigma Form_F_FunctionSpace_1;

typedef CoefficientSpace_x Form_F_FunctionSpace_2;

typedef CoefficientSpace_xl Form_F_FunctionSpace_3;

typedef CoefficientSpace_m Form_F_FunctionSpace_4;

class Form_F: public dolfin::Form
{
public:

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 4), sigma(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const rans_form_0>();
  }

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(1, 4), sigma(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    _function_spaces[0] = V0;

    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->m = m;

    _ufc_form = std::make_shared<const rans_form_0>();
  }

  // Destructor
  ~Form_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "sigma")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "m")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "sigma";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_sigma;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_x;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_xl;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner sigma;
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner xl;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_F: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), sigma(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V0), sigma(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "sigma")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "m")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "sigma";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_sigma;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_x;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_xl;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner sigma;
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner xl;
  dolfin::MultiMeshCoefficientAssigner m;
};

class Form_J_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<rans_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<rans_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<rans_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<rans_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<rans_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<rans_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<rans_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<rans_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_J_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_sigma Form_J_FunctionSpace_2;

typedef CoefficientSpace_x Form_J_FunctionSpace_3;

typedef CoefficientSpace_xl Form_J_FunctionSpace_4;

typedef CoefficientSpace_m Form_J_FunctionSpace_5;

class Form_J: public dolfin::Form
{
public:

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 4), sigma(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const rans_form_1>();
  }

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(2, 4), sigma(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->m = m;

    _ufc_form = std::make_shared<const rans_form_1>();
  }

  // Destructor
  ~Form_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "sigma")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "m")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "sigma";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_sigma;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_xl;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner sigma;
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner xl;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_J: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), sigma(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V1, V0), sigma(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "sigma")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "m")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "sigma";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_sigma;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_xl;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner sigma;
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner xl;
  dolfin::MultiMeshCoefficientAssigner m;
};

// Class typedefs
typedef Form_J BilinearForm;
typedef MultiMeshForm_J MultiMeshBilinearForm;
typedef Form_J JacobianForm;
typedef MultiMeshForm_J MultiMeshJacobianForm;
typedef Form_F LinearForm;
typedef MultiMeshForm_F MultiMeshLinearForm;
typedef Form_F ResidualForm;
typedef MultiMeshForm_F MultiMeshResidualForm;
typedef Form_F::TestSpace FunctionSpace;
typedef Form_F::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
