// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.1.0.post0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              6
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __CAVITYFLOW_H
#define __CAVITYFLOW_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class cavityflow_finite_element_0: public ufc::finite_element
{
public:

  cavityflow_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~cavityflow_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', triangle, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 3;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 3 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[3] = {};
    const std::size_t num_components[3] = { 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 3; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[3 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 3 * num_derivatives, 0.0);
    const std::size_t reference_offsets[3] = {};
    const std::size_t physical_offsets[3] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 3; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[3 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[3 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[3];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[3];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 3, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[6] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 6, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new cavityflow_finite_element_0();
  }

};


class cavityflow_finite_element_1: public ufc::finite_element
{
public:

  cavityflow_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~cavityflow_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 6;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 6 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 3 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 4 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 5 + 1] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives * 2, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t physical_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[12];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[12];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 6, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = coordinate_dofs[0];
    dof_coordinates[2 * 3 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 4] = coordinate_dofs[2];
    dof_coordinates[2 * 4 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 5] = coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_finite_element_0();
    case 1:
        return new cavityflow_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new cavityflow_finite_element_1();
  }

};


class cavityflow_finite_element_2: public ufc::finite_element
{
public:

  cavityflow_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~cavityflow_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', triangle, 2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 6;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    for (std::size_t k = 0; k < num_points * 6; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 5] += coefficients5[0][r] * basisvalues2[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
            { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
            { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    const std::size_t reference_offset[6] = {};
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives, 0.0);
    const std::size_t reference_offsets[6] = {};
    const std::size_t physical_offsets[6] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[6];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[6];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 6, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new cavityflow_finite_element_2();
  }

};


class cavityflow_finite_element_3: public ufc::finite_element
{
public:

  cavityflow_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~cavityflow_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    for (std::size_t k = 0; k < num_points * 12 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 6 + 1] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 7 + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 8 + 1] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 9 + 1] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 10 + 1] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 11 + 1] += coefficients5[0][r] * basisvalues2[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 12 * num_derivatives * 2, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
            { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
            { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    const std::size_t reference_offset[12] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    const std::size_t num_components[12] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 12; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[12 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 12 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[12] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    const std::size_t physical_offsets[12] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 12; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[12 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[12 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[24];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[24];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 12, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[8] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 9:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 10:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 11:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[3] = dof_values[7];
    vertex_values[5] = dof_values[8];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 6] = coordinate_dofs[0];
    dof_coordinates[2 * 6 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 7] = coordinate_dofs[2];
    dof_coordinates[2 * 7 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 8] = coordinate_dofs[4];
    dof_coordinates[2 * 8 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 9] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 9 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 10] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 10 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 11] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[24] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0 };
    std::copy_n(dof_X, 24, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_finite_element_2();
    case 1:
        return new cavityflow_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new cavityflow_finite_element_3();
  }

};


class cavityflow_finite_element_4: public ufc::finite_element
{
public:

  cavityflow_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  ~cavityflow_finite_element_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), FiniteElement('Lagrange', triangle, 1))";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 15;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Mixed";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    static const double coefficients12[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients13[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients14[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 15 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 6 + 1] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 7 + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 8 + 1] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 9 + 1] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 10 + 1] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 11 + 1] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[15 * 3 * ip + 3 * 12 + 2] += coefficients12[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[15 * 3 * ip + 3 * 13 + 2] += coefficients13[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[15 * 3 * ip + 3 * 14 + 2] += coefficients14[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 15 * num_derivatives * 3, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
            { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
            { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    alignas(32) static const double dmats12[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    static const double coefficients12[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients13[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients14[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[15] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2 };
    const std::size_t num_components[15] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 15; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[15 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 15 * num_derivatives * 3, 0.0);
    const std::size_t reference_offsets[15] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2 };
    const std::size_t physical_offsets[15] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 15; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[15 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[15 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[45];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[45];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 3; ++k)
        values[k] = physical_values[3 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 15; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3; ++s)
            values[r * 3 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 3 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566348, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584896, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 3 * num_derivatives * 15, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[12] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 15; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3 * num_derivatives; ++s)
            values[3 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 9:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 10:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 11:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 12:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 13:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 14:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[12] = vals[2];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[13] = vals[2];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[4] = dof_values[7];
    vertex_values[7] = dof_values[8];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[12];
    vertex_values[5] = dof_values[13];
    vertex_values[8] = dof_values[14];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 6] = coordinate_dofs[0];
    dof_coordinates[2 * 6 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 7] = coordinate_dofs[2];
    dof_coordinates[2 * 7 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 8] = coordinate_dofs[4];
    dof_coordinates[2 * 8 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 9] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 9 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 10] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 10 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 11] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 12] = coordinate_dofs[0];
    dof_coordinates[2 * 12 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 13] = coordinate_dofs[2];
    dof_coordinates[2 * 13 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 14] = coordinate_dofs[4];
    dof_coordinates[2 * 14 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[30] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 30, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_finite_element_3();
    case 1:
        return new cavityflow_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new cavityflow_finite_element_4();
  }

};


class cavityflow_finite_element_5: public ufc::finite_element
{
public:

  cavityflow_finite_element_5() : ufc::finite_element()
  {
    // Do nothing
  }

  ~cavityflow_finite_element_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', triangle, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[ip] += coefficients0[0][0] * basisvalues0[0];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * num_derivatives, 0.0);
    if (order > 0)
        return;
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    std::fill_n(values, num_points, 0.0);
    const std::size_t reference_offsets[1] = {};
    const std::size_t physical_offsets[1] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 1; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[ip + d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[ip + d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
    }
    // Evaluate basis on reference element
    double ref_values[1];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[1];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[2] = { 0.3333333333333333, 0.3333333333333333 };
    std::copy_n(dof_X, 2, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new cavityflow_finite_element_5();
  }

};


class cavityflow_dofmap_0: public ufc::dofmap
{
public:

  cavityflow_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~cavityflow_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 3;
  }

  std::size_t num_element_dofs() const final override
  {
    return 3;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 2;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 2, 3 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new cavityflow_dofmap_0();
  }

};


class cavityflow_dofmap_1: public ufc::dofmap
{
public:

  cavityflow_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~cavityflow_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 6;
  }

  std::size_t num_element_dofs() const final override
  {
    return 6;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 4;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 4, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[0][0];
    dofs[4] = offset + entity_indices[0][1];
    dofs[5] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 5;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 5;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_dofmap_0();
    case 1:
        return new cavityflow_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new cavityflow_dofmap_1();
  }

};


class cavityflow_dofmap_2: public ufc::dofmap
{
public:

  cavityflow_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~cavityflow_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0] + num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 6;
  }

  std::size_t num_element_dofs() const final override
  {
    return 6;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 1, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 3, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 5;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            break;
        case 1:
            dofs[0] = 4;
            break;
        case 2:
            dofs[0] = 5;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 5;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new cavityflow_dofmap_2();
  }

};


class cavityflow_dofmap_3: public ufc::dofmap
{
public:

  cavityflow_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~cavityflow_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2 * num_global_entities[0] + 2 * num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 12;
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 6;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 2, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 6, 12 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + entity_indices[0][0];
    dofs[7] = offset + entity_indices[0][1];
    dofs[8] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + entity_indices[1][0];
    dofs[10] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 9;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 7;
        dofs[5] = 11;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            dofs[1] = 9;
            break;
        case 1:
            dofs[0] = 4;
            dofs[1] = 10;
            break;
        case 2:
            dofs[0] = 5;
            dofs[1] = 11;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 9;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 7;
            dofs[5] = 11;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_dofmap_2();
    case 1:
        return new cavityflow_dofmap_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new cavityflow_dofmap_3();
  }

};


class cavityflow_dofmap_4: public ufc::dofmap
{
public:

  cavityflow_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  ~cavityflow_dofmap_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), FiniteElement('Lagrange', triangle, 1))";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[0] + 2 * num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 15;
  }

  std::size_t num_element_dofs() const final override
  {
    return 15;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 8;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 3, 2, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 3, 8, 15 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + entity_indices[0][0];
    dofs[7] = offset + entity_indices[0][1];
    dofs[8] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + entity_indices[1][0];
    dofs[10] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[12] = offset + entity_indices[0][0];
    dofs[13] = offset + entity_indices[0][1];
    dofs[14] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 9;
        dofs[6] = 13;
        dofs[7] = 14;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
        dofs[6] = 12;
        dofs[7] = 14;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 7;
        dofs[5] = 11;
        dofs[6] = 12;
        dofs[7] = 13;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            dofs[2] = 12;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            dofs[2] = 13;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            dofs[2] = 14;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            dofs[1] = 9;
            break;
        case 1:
            dofs[0] = 4;
            dofs[1] = 10;
            break;
        case 2:
            dofs[0] = 5;
            dofs[1] = 11;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            dofs[2] = 12;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            dofs[2] = 13;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            dofs[2] = 14;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 9;
            dofs[6] = 13;
            dofs[7] = 14;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            dofs[6] = 12;
            dofs[7] = 14;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 7;
            dofs[5] = 11;
            dofs[6] = 12;
            dofs[7] = 13;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_dofmap_3();
    case 1:
        return new cavityflow_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new cavityflow_dofmap_4();
  }

};


class cavityflow_dofmap_5: public ufc::dofmap
{
public:

  cavityflow_dofmap_5() : ufc::dofmap()
  {
    // Do nothing
  }

  ~cavityflow_dofmap_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', triangle, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = {};
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 1;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new cavityflow_dofmap_5();
  }

};


class cavityflow_coordinate_mapping_1: public ufc::coordinate_mapping
{
public:

  cavityflow_coordinate_mapping_1() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~cavityflow_coordinate_mapping_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new cavityflow_coordinate_mapping_1();
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new cavityflow_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new cavityflow_dofmap_1();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    cavityflow_finite_element_0 xelement;
    double phi[3];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[2 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t d = 0; d < 3; ++d)
                x[2 * ip + i] += coordinate_dofs[2 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double J[4];
    double detJ[1];
    double K[4];
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    cavityflow_finite_element_0 xelement;
    double dphi[6];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[2 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t j = 0; j < 2; ++j)
                for (std::size_t d = 0; d < 3; ++d)
                    J[2 * 2 * ip + 2 * i + j] += coordinate_dofs[2 * d + i] * dphi[2 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[2 * 2 * ip] * J[2 * 2 * ip + 2 + 1] - J[2 * 2 * ip + 1] * J[2 * 2 * ip + 2];
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[2 * 2 * ip] = J[2 * 2 * ip + 2 + 1] / detJ[ip];
        K[2 * 2 * ip + 1] = -J[2 * 2 * ip + 1] / detJ[ip];
        K[2 * 2 * ip + 2] = -J[2 * 2 * ip + 2] / detJ[ip];
        K[2 * 2 * ip + 2 + 1] = J[2 * 2 * ip] / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[3] = { 0.33333333333333337, 0.33333333333333337, 0.3333333333333333 };
    const double dphi_Xm[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t d = 0; d < 3; ++d)
            x[i] += coordinate_dofs[2 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t d = 0; d < 3; ++d)
                J[2 * i + j] += coordinate_dofs[2 * d + i] * dphi_Xm[j][d];
  }

};


class cavityflow_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  cavityflow_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~cavityflow_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 5
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE20_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE20_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE20_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803568, 0.2205142679699366 },
            { -0.05512856699248404, -0.05512856699248409, 0.6533077030470597, 0.2205142679699364, 0.2205142679699362, 0.01592089499803596 },
            { 0.6533077030470594, -0.05512856699248415, -0.05512856699248411, 0.01592089499803581, 0.2205142679699364, 0.2205142679699366 },
            { -0.1249989825350975, 0.001430579517788794, -0.1249989825350975, 0.4999959301403892, 0.2485755252716258, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788821, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880001, 0.173768363654174, -0.1177151633084292, 0.790160442765823, 0.06597478591860526, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880001, 0.1353078281686267, 0.06597478591860512, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860538 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880001, 0.06597478591860524, 0.1353078281686266, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860538 },
            { 0.1737683636541741, -0.04749625719880015, -0.1177151633084292, 0.06597478591860535, 0.7901604427658229, 0.1353078281686269 } } };
    alignas(32) static const double FE22_C2_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE22_C2_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE22_C2_D01_Q12[0][0][0] + coordinate_dofs[2] * FE22_C2_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE22_C2_D01_Q12[0][0][0] + coordinate_dofs[5] * FE22_C2_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE22_C2_D01_Q12[0][0][0] + coordinate_dofs[4] * FE22_C2_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE22_C2_D01_Q12[0][0][0] + coordinate_dofs[3] * FE22_C2_D01_Q12[0][0][1];
    alignas(32) double sp[8];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = std::abs(sp[2]);
    alignas(32) double BF0[6] = {};
    alignas(32) double BF1[5] = {};
    alignas(32) double BF2[5] = {};
    alignas(32) double BF3[6] = {};
    alignas(32) double BF4[5] = {};
    alignas(32) double BF5[5] = {};
    alignas(32) double BF6[3] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c1 += w[1][ic + 6] * FE20_C0_Q12[0][iq][ic];
        const double w1_d1_c0 = w[1][0] * FE20_C0_D01_Q12[0][iq][0] + w[1][2] * FE20_C0_D01_Q12[0][iq][1] + w[1][3] * FE20_C0_D01_Q12[0][iq][2] + w[1][4] * FE20_C0_D01_Q12[0][iq][3] + w[1][5] * FE20_C0_D01_Q12[0][iq][4];
        const double w1_d0_c0 = w[1][0] * FE20_C0_D10_Q12[0][iq][0] + w[1][1] * FE20_C0_D10_Q12[0][iq][1] + w[1][3] * FE20_C0_D10_Q12[0][iq][2] + w[1][4] * FE20_C0_D10_Q12[0][iq][3] + w[1][5] * FE20_C0_D10_Q12[0][iq][4];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c0 += w[1][ic] * FE20_C0_Q12[0][iq][ic];
        const double w1_d1_c1 = w[1][6] * FE20_C0_D01_Q12[0][iq][0] + w[1][8] * FE20_C0_D01_Q12[0][iq][1] + w[1][9] * FE20_C0_D01_Q12[0][iq][2] + w[1][10] * FE20_C0_D01_Q12[0][iq][3] + w[1][11] * FE20_C0_D01_Q12[0][iq][4];
        const double w1_d0_c1 = w[1][6] * FE20_C0_D10_Q12[0][iq][0] + w[1][7] * FE20_C0_D10_Q12[0][iq][1] + w[1][9] * FE20_C0_D10_Q12[0][iq][2] + w[1][10] * FE20_C0_D10_Q12[0][iq][3] + w[1][11] * FE20_C0_D10_Q12[0][iq][4];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c2 += w[1][ic + 12] * FE22_C2_Q12[0][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE20_C0_Q12[0][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE20_C0_Q12[0][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3 += w[3][ic] * FE22_C2_Q12[0][iq][ic];
        alignas(32) double sv12[57];
        sv12[0] = w1_d1_c0 * sp[3];
        sv12[1] = w1_d0_c0 * sp[4];
        sv12[2] = sv12[0] + sv12[1];
        sv12[3] = w1_c1 * sv12[2];
        sv12[4] = w1_d0_c0 * sp[5];
        sv12[5] = w1_d1_c0 * sp[6];
        sv12[6] = sv12[4] + sv12[5];
        sv12[7] = w1_c0 * sv12[6];
        sv12[8] = sv12[3] + sv12[7];
        sv12[9] = w1_d1_c1 * sp[3];
        sv12[10] = w1_d0_c1 * sp[4];
        sv12[11] = sv12[9] + sv12[10];
        sv12[12] = w1_c1 * sv12[11];
        sv12[13] = w1_d0_c1 * sp[5];
        sv12[14] = w1_d1_c1 * sp[6];
        sv12[15] = sv12[13] + sv12[14];
        sv12[16] = w1_c0 * sv12[15];
        sv12[17] = sv12[12] + sv12[16];
        sv12[18] = w1_c2 * sp[3];
        sv12[19] = w1_c2 * sp[4];
        sv12[20] = w1_c2 * sp[5];
        sv12[21] = w1_c2 * sp[6];
        sv12[22] = sv12[11] + sv12[6];
        sv12[23] = w1_c0 + -1 * w2_c0;
        sv12[24] = w1_c1 + -1 * w2_c1;
        sv12[25] = sv12[23] * w[0][0];
        sv12[26] = sv12[24] * w[0][0];
        sv12[27] = sv12[2] * sp[4];
        sv12[28] = sv12[2] * sp[3];
        sv12[29] = sv12[11] * sp[3];
        sv12[30] = sv12[11] * sp[4];
        sv12[31] = sv12[6] * sp[5];
        sv12[32] = sv12[6] * sp[6];
        sv12[33] = sv12[15] * sp[6];
        sv12[34] = sv12[15] * sp[5];
        sv12[35] = sv12[29] + sv12[33];
        sv12[36] = sv12[34] + sv12[30];
        sv12[37] = sv12[31] + sv12[27];
        sv12[38] = sv12[28] + sv12[32];
        sv12[39] = std::exp(w3);
        sv12[40] = sv12[35] * sv12[39];
        sv12[41] = sv12[36] * sv12[39];
        sv12[42] = sv12[37] * sv12[39];
        sv12[43] = sv12[38] * sv12[39];
        sv12[44] = -1 * sv12[18] + sv12[40];
        sv12[45] = -1 * sv12[19] + sv12[41];
        sv12[46] = -1 * sv12[20] + sv12[42];
        sv12[47] = -1 * sv12[21] + sv12[43];
        sv12[48] = sv12[8] + sv12[25];
        sv12[49] = sv12[17] + sv12[26];
        sv12[50] = sv12[48] * sp[7];
        sv12[51] = sv12[49] * sp[7];
        sv12[52] = sv12[44] * sp[7];
        sv12[53] = sv12[45] * sp[7];
        sv12[54] = sv12[46] * sp[7];
        sv12[55] = sv12[47] * sp[7];
        sv12[56] = -1 * sv12[22] * sp[7];
        const double fw0 = sv12[50] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            BF0[i] += fw0 * FE20_C0_Q12[0][iq][i];
        const double fw1 = sv12[54] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF1[i] += fw1 * FE20_C0_D10_Q12[0][iq][i];
        const double fw2 = sv12[55] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF2[i] += fw2 * FE20_C0_D01_Q12[0][iq][i];
        const double fw3 = sv12[51] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            BF3[i] += fw3 * FE20_C0_Q12[0][iq][i];
        const double fw4 = sv12[53] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF4[i] += fw4 * FE20_C0_D10_Q12[0][iq][i];
        const double fw5 = sv12[52] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF5[i] += fw5 * FE20_C0_D01_Q12[0][iq][i];
        const double fw6 = sv12[56] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF6[i] += fw6 * FE22_C2_Q12[0][iq][i];
    }
    std::fill(A, A + 15, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    for (int i = 0; i < 6; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 5; ++i)
        A[DM0[i]] += BF1[i];
    for (int i = 0; i < 5; ++i)
        A[DM1[i]] += BF2[i];
    for (int i = 0; i < 6; ++i)
        A[i + 6] += BF3[i];
    for (int i = 0; i < 5; ++i)
        A[DM2[i]] += BF4[i];
    for (int i = 0; i < 5; ++i)
        A[DM3[i]] += BF5[i];
    for (int i = 0; i < 3; ++i)
        A[i + 12] += BF6[i];
  }

};


class cavityflow_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  cavityflow_cell_integral_1_otherwise() : ufc::cell_integral()
  {

  }

  ~cavityflow_cell_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 5
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE20_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE20_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE20_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803568, 0.2205142679699366 },
            { -0.05512856699248404, -0.05512856699248409, 0.6533077030470597, 0.2205142679699364, 0.2205142679699362, 0.01592089499803596 },
            { 0.6533077030470594, -0.05512856699248415, -0.05512856699248411, 0.01592089499803581, 0.2205142679699364, 0.2205142679699366 },
            { -0.1249989825350975, 0.001430579517788794, -0.1249989825350975, 0.4999959301403892, 0.2485755252716258, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788821, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880001, 0.173768363654174, -0.1177151633084292, 0.790160442765823, 0.06597478591860526, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880001, 0.1353078281686267, 0.06597478591860512, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860538 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880001, 0.06597478591860524, 0.1353078281686266, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860538 },
            { 0.1737683636541741, -0.04749625719880015, -0.1177151633084292, 0.06597478591860535, 0.7901604427658229, 0.1353078281686269 } } };
    alignas(32) static const double FE22_C2_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE22_C2_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE22_C2_D01_Q12[0][0][0] + coordinate_dofs[2] * FE22_C2_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE22_C2_D01_Q12[0][0][0] + coordinate_dofs[5] * FE22_C2_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE22_C2_D01_Q12[0][0][0] + coordinate_dofs[4] * FE22_C2_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE22_C2_D01_Q12[0][0][0] + coordinate_dofs[3] * FE22_C2_D01_Q12[0][0][1];
    alignas(32) double sp[8];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = std::abs(sp[2]);
    alignas(32) double BF0 = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c0 += w[3][ic] * FE20_C0_Q12[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c1 += w[1][ic + 6] * FE20_C0_Q12[0][iq][ic];
        const double w1_d1_c0 = w[1][0] * FE20_C0_D01_Q12[0][iq][0] + w[1][2] * FE20_C0_D01_Q12[0][iq][1] + w[1][3] * FE20_C0_D01_Q12[0][iq][2] + w[1][4] * FE20_C0_D01_Q12[0][iq][3] + w[1][5] * FE20_C0_D01_Q12[0][iq][4];
        const double w1_d0_c0 = w[1][0] * FE20_C0_D10_Q12[0][iq][0] + w[1][1] * FE20_C0_D10_Q12[0][iq][1] + w[1][3] * FE20_C0_D10_Q12[0][iq][2] + w[1][4] * FE20_C0_D10_Q12[0][iq][3] + w[1][5] * FE20_C0_D10_Q12[0][iq][4];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c0 += w[1][ic] * FE20_C0_Q12[0][iq][ic];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c1 += w[3][ic + 6] * FE20_C0_Q12[0][iq][ic];
        const double w1_d1_c1 = w[1][6] * FE20_C0_D01_Q12[0][iq][0] + w[1][8] * FE20_C0_D01_Q12[0][iq][1] + w[1][9] * FE20_C0_D01_Q12[0][iq][2] + w[1][10] * FE20_C0_D01_Q12[0][iq][3] + w[1][11] * FE20_C0_D01_Q12[0][iq][4];
        const double w1_d0_c1 = w[1][6] * FE20_C0_D10_Q12[0][iq][0] + w[1][7] * FE20_C0_D10_Q12[0][iq][1] + w[1][9] * FE20_C0_D10_Q12[0][iq][2] + w[1][10] * FE20_C0_D10_Q12[0][iq][3] + w[1][11] * FE20_C0_D10_Q12[0][iq][4];
        double w3_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c2 += w[3][ic + 12] * FE22_C2_Q12[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c2 += w[1][ic + 12] * FE22_C2_Q12[0][iq][ic];
        const double w3_d1_c1 = w[3][6] * FE20_C0_D01_Q12[0][iq][0] + w[3][8] * FE20_C0_D01_Q12[0][iq][1] + w[3][9] * FE20_C0_D01_Q12[0][iq][2] + w[3][10] * FE20_C0_D01_Q12[0][iq][3] + w[3][11] * FE20_C0_D01_Q12[0][iq][4];
        const double w3_d0_c1 = w[3][6] * FE20_C0_D10_Q12[0][iq][0] + w[3][7] * FE20_C0_D10_Q12[0][iq][1] + w[3][9] * FE20_C0_D10_Q12[0][iq][2] + w[3][10] * FE20_C0_D10_Q12[0][iq][3] + w[3][11] * FE20_C0_D10_Q12[0][iq][4];
        const double w3_d0_c0 = w[3][0] * FE20_C0_D10_Q12[0][iq][0] + w[3][1] * FE20_C0_D10_Q12[0][iq][1] + w[3][3] * FE20_C0_D10_Q12[0][iq][2] + w[3][4] * FE20_C0_D10_Q12[0][iq][3] + w[3][5] * FE20_C0_D10_Q12[0][iq][4];
        const double w3_d1_c0 = w[3][0] * FE20_C0_D01_Q12[0][iq][0] + w[3][2] * FE20_C0_D01_Q12[0][iq][1] + w[3][3] * FE20_C0_D01_Q12[0][iq][2] + w[3][4] * FE20_C0_D01_Q12[0][iq][3] + w[3][5] * FE20_C0_D01_Q12[0][iq][4];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE20_C0_Q12[0][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE20_C0_Q12[0][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4 += w[4][ic] * FE22_C2_Q12[0][iq][ic];
        alignas(32) double sv12[57];
        sv12[0] = w1_d1_c0 * sp[3];
        sv12[1] = w1_d0_c0 * sp[4];
        sv12[2] = sv12[0] + sv12[1];
        sv12[3] = w1_c1 * sv12[2];
        sv12[4] = w1_d0_c0 * sp[5];
        sv12[5] = w1_d1_c0 * sp[6];
        sv12[6] = sv12[4] + sv12[5];
        sv12[7] = w1_c0 * sv12[6];
        sv12[8] = sv12[3] + sv12[7];
        sv12[9] = w3_c0 * sv12[8];
        sv12[10] = w1_d1_c1 * sp[3];
        sv12[11] = w1_d0_c1 * sp[4];
        sv12[12] = sv12[10] + sv12[11];
        sv12[13] = w1_c1 * sv12[12];
        sv12[14] = w1_d0_c1 * sp[5];
        sv12[15] = w1_d1_c1 * sp[6];
        sv12[16] = sv12[14] + sv12[15];
        sv12[17] = w1_c0 * sv12[16];
        sv12[18] = sv12[13] + sv12[17];
        sv12[19] = w3_c1 * sv12[18];
        sv12[20] = sv12[9] + sv12[19];
        sv12[21] = sv12[12] + sv12[6];
        sv12[22] = w3_c2 * sv12[21];
        sv12[23] = w3_d1_c1 * sp[3];
        sv12[24] = w3_d0_c1 * sp[4];
        sv12[25] = sv12[23] + sv12[24];
        sv12[26] = w3_d0_c0 * sp[5];
        sv12[27] = w3_d1_c0 * sp[6];
        sv12[28] = sv12[26] + sv12[27];
        sv12[29] = sv12[25] + sv12[28];
        sv12[30] = w1_c2 * sv12[29];
        sv12[31] = -1 * sv12[22] + -1 * sv12[30];
        sv12[32] = w1_c0 + -1 * w2_c0;
        sv12[33] = w3_c0 * sv12[32];
        sv12[34] = w1_c1 + -1 * w2_c1;
        sv12[35] = w3_c1 * sv12[34];
        sv12[36] = sv12[33] + sv12[35];
        sv12[37] = sv12[36] * w[0][0];
        sv12[38] = sv12[31] + sv12[37];
        sv12[39] = w3_d1_c0 * sp[3];
        sv12[40] = w3_d0_c0 * sp[4];
        sv12[41] = sv12[39] + sv12[40];
        sv12[42] = sv12[2] * sv12[41];
        sv12[43] = sv12[12] * sv12[25];
        sv12[44] = sv12[42] + sv12[43];
        sv12[45] = sv12[6] * sv12[28];
        sv12[46] = w3_d0_c1 * sp[5];
        sv12[47] = w3_d1_c1 * sp[6];
        sv12[48] = sv12[46] + sv12[47];
        sv12[49] = sv12[16] * sv12[48];
        sv12[50] = sv12[45] + sv12[49];
        sv12[51] = sv12[44] + sv12[50];
        sv12[52] = std::exp(w4);
        sv12[53] = sv12[51] * sv12[52];
        sv12[54] = sv12[38] + sv12[53];
        sv12[55] = sv12[20] + sv12[54];
        sv12[56] = sv12[55] * sp[7];
        const double fw0 = sv12[56] * weights12[iq];
        BF0 += fw0;
    }
    A[0] = 0.0;
    A[0] += BF0;
  }

};


class cavityflow_cell_integral_2_otherwise: public ufc::cell_integral
{
public:

  cavityflow_cell_integral_2_otherwise() : ufc::cell_integral()
  {

  }

  ~cavityflow_cell_integral_2_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 5
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE24_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE24_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE24_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803568, 0.2205142679699366 },
            { -0.05512856699248404, -0.05512856699248409, 0.6533077030470597, 0.2205142679699364, 0.2205142679699362, 0.01592089499803596 },
            { 0.6533077030470594, -0.05512856699248415, -0.05512856699248411, 0.01592089499803581, 0.2205142679699364, 0.2205142679699366 },
            { -0.1249989825350975, 0.001430579517788794, -0.1249989825350975, 0.4999959301403892, 0.2485755252716258, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788821, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880001, 0.173768363654174, -0.1177151633084292, 0.790160442765823, 0.06597478591860526, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880001, 0.1353078281686267, 0.06597478591860512, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860538 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880001, 0.06597478591860524, 0.1353078281686266, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860538 },
            { 0.1737683636541741, -0.04749625719880015, -0.1177151633084292, 0.06597478591860535, 0.7901604427658229, 0.1353078281686269 } } };
    alignas(32) static const double FE26_C2_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE26_C2_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE26_C2_D01_Q12[0][0][0] + coordinate_dofs[2] * FE26_C2_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE26_C2_D01_Q12[0][0][0] + coordinate_dofs[5] * FE26_C2_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE26_C2_D01_Q12[0][0][0] + coordinate_dofs[4] * FE26_C2_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE26_C2_D01_Q12[0][0][0] + coordinate_dofs[3] * FE26_C2_D01_Q12[0][0][1];
    alignas(32) double sp[21];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = sp[3] * sp[4];
    sp[8] = sp[4] * sp[4];
    sp[9] = sp[3] * sp[3];
    sp[10] = sp[5] * sp[6];
    sp[11] = sp[5] * sp[5];
    sp[12] = sp[6] * sp[6];
    sp[13] = sp[7] + sp[10];
    sp[14] = sp[9] + sp[12];
    sp[15] = sp[11] + sp[8];
    sp[16] = std::abs(sp[2]);
    sp[17] = -1 * sp[6] * sp[16];
    sp[18] = -1 * sp[5] * sp[16];
    sp[19] = -1 * sp[3] * sp[16];
    sp[20] = -1 * sp[4] * sp[16];
    alignas(32) double BF0[6][6] = {};
    alignas(32) double BF1[6][5] = {};
    alignas(32) double BF2[6][5] = {};
    alignas(32) double BF3[6][6] = {};
    alignas(32) double BF4[5][5] = {};
    alignas(32) double BF5[5][5] = {};
    alignas(32) double BF6[5][5] = {};
    alignas(32) double BF7[5][5] = {};
    alignas(32) double BF8[6][6] = {};
    alignas(32) double BF9[6][6] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c1 += w[1][ic + 6] * FE24_C0_Q12[0][iq][ic];
        const double w1_d1_c0 = w[1][0] * FE24_C0_D01_Q12[0][iq][0] + w[1][2] * FE24_C0_D01_Q12[0][iq][1] + w[1][3] * FE24_C0_D01_Q12[0][iq][2] + w[1][4] * FE24_C0_D01_Q12[0][iq][3] + w[1][5] * FE24_C0_D01_Q12[0][iq][4];
        const double w1_d0_c0 = w[1][0] * FE24_C0_D10_Q12[0][iq][0] + w[1][1] * FE24_C0_D10_Q12[0][iq][1] + w[1][3] * FE24_C0_D10_Q12[0][iq][2] + w[1][4] * FE24_C0_D10_Q12[0][iq][3] + w[1][5] * FE24_C0_D10_Q12[0][iq][4];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c0 += w[1][ic] * FE24_C0_Q12[0][iq][ic];
        const double w1_d1_c1 = w[1][6] * FE24_C0_D01_Q12[0][iq][0] + w[1][8] * FE24_C0_D01_Q12[0][iq][1] + w[1][9] * FE24_C0_D01_Q12[0][iq][2] + w[1][10] * FE24_C0_D01_Q12[0][iq][3] + w[1][11] * FE24_C0_D01_Q12[0][iq][4];
        const double w1_d0_c1 = w[1][6] * FE24_C0_D10_Q12[0][iq][0] + w[1][7] * FE24_C0_D10_Q12[0][iq][1] + w[1][9] * FE24_C0_D10_Q12[0][iq][2] + w[1][10] * FE24_C0_D10_Q12[0][iq][3] + w[1][11] * FE24_C0_D10_Q12[0][iq][4];
        double w2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2 += w[2][ic] * FE26_C2_Q12[0][iq][ic];
        alignas(32) double sv12[33];
        sv12[0] = w1_c1 * sp[3];
        sv12[1] = w1_c1 * sp[4];
        sv12[2] = w1_d1_c0 * sp[3];
        sv12[3] = w1_d0_c0 * sp[4];
        sv12[4] = sv12[2] + sv12[3];
        sv12[5] = w1_c0 * sp[6];
        sv12[6] = w1_c0 * sp[5];
        sv12[7] = w1_d0_c0 * sp[5];
        sv12[8] = w1_d1_c0 * sp[6];
        sv12[9] = sv12[7] + sv12[8];
        sv12[10] = sv12[0] + sv12[5];
        sv12[11] = sv12[6] + sv12[1];
        sv12[12] = w1_d1_c1 * sp[3];
        sv12[13] = w1_d0_c1 * sp[4];
        sv12[14] = sv12[12] + sv12[13];
        sv12[15] = w1_d0_c1 * sp[5];
        sv12[16] = w1_d1_c1 * sp[6];
        sv12[17] = sv12[15] + sv12[16];
        sv12[18] = std::exp(w2);
        sv12[19] = sp[13] * sv12[18];
        sv12[20] = sp[14] * sv12[18];
        sv12[21] = sp[15] * sv12[18];
        sv12[22] = sv12[9] + w[0][0];
        sv12[23] = sv12[14] + w[0][0];
        sv12[24] = sv12[10] * sp[16];
        sv12[25] = sv12[11] * sp[16];
        sv12[26] = sv12[4] * sp[16];
        sv12[27] = sv12[22] * sp[16];
        sv12[28] = sv12[19] * sp[16];
        sv12[29] = sv12[20] * sp[16];
        sv12[30] = sv12[21] * sp[16];
        sv12[31] = sv12[23] * sp[16];
        sv12[32] = sv12[17] * sp[16];
        const double fw0 = sv12[27] * weights12[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE24_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF0[i][j] += TF0[i] * FE24_C0_Q12[0][iq][j];
        const double fw1 = sv12[25] * weights12[iq];
        alignas(32) double TF1[6];
        for (int i = 0; i < 6; ++i)
            TF1[i] = fw1 * FE24_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF1[i][j] += TF1[i] * FE24_C0_D10_Q12[0][iq][j];
        const double fw2 = sv12[24] * weights12[iq];
        alignas(32) double TF2[6];
        for (int i = 0; i < 6; ++i)
            TF2[i] = fw2 * FE24_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF2[i][j] += TF2[i] * FE24_C0_D01_Q12[0][iq][j];
        const double fw3 = sv12[26] * weights12[iq];
        alignas(32) double TF3[6];
        for (int i = 0; i < 6; ++i)
            TF3[i] = fw3 * FE24_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF3[i][j] += TF3[i] * FE24_C0_Q12[0][iq][j];
        const double fw4 = sv12[30] * weights12[iq];
        alignas(32) double TF4[5];
        for (int i = 0; i < 5; ++i)
            TF4[i] = fw4 * FE24_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF4[i][j] += TF4[i] * FE24_C0_D10_Q12[0][iq][j];
        const double fw5 = sv12[28] * weights12[iq];
        alignas(32) double TF5[5];
        for (int i = 0; i < 5; ++i)
            TF5[i] = fw5 * FE24_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF5[i][j] += TF5[i] * FE24_C0_D01_Q12[0][iq][j];
        alignas(32) double TF6[5];
        for (int i = 0; i < 5; ++i)
            TF6[i] = fw5 * FE24_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF6[i][j] += TF6[i] * FE24_C0_D10_Q12[0][iq][j];
        const double fw6 = sv12[29] * weights12[iq];
        alignas(32) double TF7[5];
        for (int i = 0; i < 5; ++i)
            TF7[i] = fw6 * FE24_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF7[i][j] += TF7[i] * FE24_C0_D01_Q12[0][iq][j];
        const double fw7 = sv12[32] * weights12[iq];
        alignas(32) double TF8[6];
        for (int i = 0; i < 6; ++i)
            TF8[i] = fw7 * FE24_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF8[i][j] += TF8[i] * FE24_C0_Q12[0][iq][j];
        const double fw8 = sv12[31] * weights12[iq];
        alignas(32) double TF9[6];
        for (int i = 0; i < 6; ++i)
            TF9[i] = fw8 * FE24_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF9[i][j] += TF9[i] * FE24_C0_Q12[0][iq][j];
    }
    std::fill(A, A + 12, 0.0);
    A[12] = -0.1666666666666677 * sp[18] + -0.1666666666666685 * sp[17];
    std::fill(A + 13, A + 28, 0.0);
    A[28] = 0.1666666666666674 * sp[18];
    std::fill(A + 29, A + 44, 0.0);
    A[44] = 0.1666666666666677 * sp[17];
    std::fill(A + 45, A + 57, 0.0);
    A[57] = 0.1666666666666665 * sp[18] + 0.1666666666666648 * sp[17];
    A[58] = 0.1666666666666663 * sp[18] + 0.3333333333333322 * sp[17];
    A[59] = 0.3333333333333338 * sp[18] + 0.1666666666666643 * sp[17];
    std::fill(A + 60, A + 72, 0.0);
    A[72] = -0.1666666666666665 * sp[18] + 0.1666666666666693 * sp[17];
    A[73] = -0.1666666666666663 * sp[18];
    A[74] = -0.3333333333333338 * sp[18] + -0.1666666666666662 * sp[17];
    std::fill(A + 75, A + 87, 0.0);
    A[87] = 0.1666666666666682 * sp[18] + -0.1666666666666668 * sp[17];
    A[88] = -0.1666666666666677 * sp[18] + -0.3333333333333345 * sp[17];
    A[89] = -0.1666666666666665 * sp[17];
    std::fill(A + 90, A + 102, 0.0);
    A[102] = -0.1666666666666677 * sp[20] + -0.1666666666666685 * sp[19];
    std::fill(A + 103, A + 118, 0.0);
    A[118] = 0.1666666666666674 * sp[20];
    std::fill(A + 119, A + 134, 0.0);
    A[134] = 0.1666666666666677 * sp[19];
    std::fill(A + 135, A + 147, 0.0);
    A[147] = 0.1666666666666665 * sp[20] + 0.1666666666666648 * sp[19];
    A[148] = 0.1666666666666663 * sp[20] + 0.3333333333333322 * sp[19];
    A[149] = 0.3333333333333338 * sp[20] + 0.1666666666666643 * sp[19];
    std::fill(A + 150, A + 162, 0.0);
    A[162] = -0.1666666666666665 * sp[20] + 0.1666666666666693 * sp[19];
    A[163] = -0.1666666666666663 * sp[20];
    A[164] = -0.3333333333333338 * sp[20] + -0.1666666666666662 * sp[19];
    std::fill(A + 165, A + 177, 0.0);
    A[177] = 0.1666666666666682 * sp[20] + -0.1666666666666668 * sp[19];
    A[178] = -0.1666666666666677 * sp[20] + -0.3333333333333345 * sp[19];
    A[179] = -0.1666666666666665 * sp[19];
    A[180] = -0.1666666666666677 * sp[18] + -0.1666666666666685 * sp[17];
    std::fill(A + 181, A + 183, 0.0);
    A[183] = 0.1666666666666665 * sp[18] + 0.1666666666666648 * sp[17];
    A[184] = -0.1666666666666665 * sp[18] + 0.1666666666666693 * sp[17];
    A[185] = 0.1666666666666682 * sp[18] + -0.1666666666666668 * sp[17];
    A[186] = -0.1666666666666677 * sp[20] + -0.1666666666666685 * sp[19];
    std::fill(A + 187, A + 189, 0.0);
    A[189] = 0.1666666666666665 * sp[20] + 0.1666666666666648 * sp[19];
    A[190] = -0.1666666666666665 * sp[20] + 0.1666666666666693 * sp[19];
    A[191] = 0.1666666666666682 * sp[20] + -0.1666666666666668 * sp[19];
    std::fill(A + 192, A + 196, 0.0);
    A[196] = 0.1666666666666674 * sp[18];
    A[197] = 0.0;
    A[198] = 0.1666666666666663 * sp[18] + 0.3333333333333322 * sp[17];
    A[199] = -0.1666666666666663 * sp[18];
    A[200] = -0.1666666666666677 * sp[18] + -0.3333333333333345 * sp[17];
    A[201] = 0.0;
    A[202] = 0.1666666666666674 * sp[20];
    A[203] = 0.0;
    A[204] = 0.1666666666666663 * sp[20] + 0.3333333333333322 * sp[19];
    A[205] = -0.1666666666666663 * sp[20];
    A[206] = -0.1666666666666677 * sp[20] + -0.3333333333333345 * sp[19];
    std::fill(A + 207, A + 212, 0.0);
    A[212] = 0.1666666666666677 * sp[17];
    A[213] = 0.3333333333333338 * sp[18] + 0.1666666666666643 * sp[17];
    A[214] = -0.3333333333333338 * sp[18] + -0.1666666666666662 * sp[17];
    A[215] = -0.1666666666666665 * sp[17];
    std::fill(A + 216, A + 218, 0.0);
    A[218] = 0.1666666666666677 * sp[19];
    A[219] = 0.3333333333333338 * sp[20] + 0.1666666666666643 * sp[19];
    A[220] = -0.3333333333333338 * sp[20] + -0.1666666666666662 * sp[19];
    A[221] = -0.1666666666666665 * sp[19];
    std::fill(A + 222, A + 225, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * i + j] += BF0[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * i + DM0[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * i + DM1[j]] += BF2[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * i + (j + 6)] += BF3[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * DM0[i] + DM0[j]] += BF4[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * DM0[i] + DM1[j]] += BF5[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * DM1[i] + DM0[j]] += BF6[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * DM1[i] + DM1[j]] += BF7[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * (i + 6) + j] += BF8[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * (i + 6) + (j + 6)] += BF9[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * (i + 6) + DM2[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * (i + 6) + DM3[j]] += BF2[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * DM2[i] + DM2[j]] += BF4[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * DM2[i] + DM3[j]] += BF5[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * DM3[i] + DM2[j]] += BF6[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * DM3[i] + DM3[j]] += BF7[i][j];
  }

};


class cavityflow_cell_integral_3_otherwise: public ufc::cell_integral
{
public:

  cavityflow_cell_integral_3_otherwise() : ufc::cell_integral()
  {

  }

  ~cavityflow_cell_integral_3_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 6
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE12_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE12_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE14_C2_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE14_C2_D01_Q12[0][0][0] + coordinate_dofs[2] * FE14_C2_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE14_C2_D01_Q12[0][0][0] + coordinate_dofs[5] * FE14_C2_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE14_C2_D01_Q12[0][0][0] + coordinate_dofs[4] * FE14_C2_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE14_C2_D01_Q12[0][0][0] + coordinate_dofs[3] * FE14_C2_D01_Q12[0][0][1];
    alignas(32) double sp[8];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = std::abs(sp[2]);
    alignas(32) double BF0[3] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        const double w0_d1_c0 = w[0][0] * FE12_C0_D01_Q12[0][iq][0] + w[0][2] * FE12_C0_D01_Q12[0][iq][1] + w[0][3] * FE12_C0_D01_Q12[0][iq][2] + w[0][4] * FE12_C0_D01_Q12[0][iq][3] + w[0][5] * FE12_C0_D01_Q12[0][iq][4];
        const double w0_d0_c0 = w[0][0] * FE12_C0_D10_Q12[0][iq][0] + w[0][1] * FE12_C0_D10_Q12[0][iq][1] + w[0][3] * FE12_C0_D10_Q12[0][iq][2] + w[0][4] * FE12_C0_D10_Q12[0][iq][3] + w[0][5] * FE12_C0_D10_Q12[0][iq][4];
        const double w1_d1_c0 = w[1][0] * FE12_C0_D01_Q12[0][iq][0] + w[1][2] * FE12_C0_D01_Q12[0][iq][1] + w[1][3] * FE12_C0_D01_Q12[0][iq][2] + w[1][4] * FE12_C0_D01_Q12[0][iq][3] + w[1][5] * FE12_C0_D01_Q12[0][iq][4];
        const double w1_d0_c0 = w[1][0] * FE12_C0_D10_Q12[0][iq][0] + w[1][1] * FE12_C0_D10_Q12[0][iq][1] + w[1][3] * FE12_C0_D10_Q12[0][iq][2] + w[1][4] * FE12_C0_D10_Q12[0][iq][3] + w[1][5] * FE12_C0_D10_Q12[0][iq][4];
        const double w0_d1_c1 = w[0][6] * FE12_C0_D01_Q12[0][iq][0] + w[0][8] * FE12_C0_D01_Q12[0][iq][1] + w[0][9] * FE12_C0_D01_Q12[0][iq][2] + w[0][10] * FE12_C0_D01_Q12[0][iq][3] + w[0][11] * FE12_C0_D01_Q12[0][iq][4];
        const double w0_d0_c1 = w[0][6] * FE12_C0_D10_Q12[0][iq][0] + w[0][7] * FE12_C0_D10_Q12[0][iq][1] + w[0][9] * FE12_C0_D10_Q12[0][iq][2] + w[0][10] * FE12_C0_D10_Q12[0][iq][3] + w[0][11] * FE12_C0_D10_Q12[0][iq][4];
        const double w1_d1_c1 = w[1][6] * FE12_C0_D01_Q12[0][iq][0] + w[1][8] * FE12_C0_D01_Q12[0][iq][1] + w[1][9] * FE12_C0_D01_Q12[0][iq][2] + w[1][10] * FE12_C0_D01_Q12[0][iq][3] + w[1][11] * FE12_C0_D01_Q12[0][iq][4];
        const double w1_d0_c1 = w[1][6] * FE12_C0_D10_Q12[0][iq][0] + w[1][7] * FE12_C0_D10_Q12[0][iq][1] + w[1][9] * FE12_C0_D10_Q12[0][iq][2] + w[1][10] * FE12_C0_D10_Q12[0][iq][3] + w[1][11] * FE12_C0_D10_Q12[0][iq][4];
        double w2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2 += w[2][ic] * FE3_C0_Q12[0][iq][ic];
        alignas(32) double sv12[34];
        sv12[0] = w0_d1_c0 * sp[3];
        sv12[1] = w0_d0_c0 * sp[4];
        sv12[2] = sv12[0] + sv12[1];
        sv12[3] = w1_d1_c0 * sp[3];
        sv12[4] = w1_d0_c0 * sp[4];
        sv12[5] = sv12[3] + sv12[4];
        sv12[6] = sv12[2] * sv12[5];
        sv12[7] = w0_d1_c1 * sp[3];
        sv12[8] = w0_d0_c1 * sp[4];
        sv12[9] = sv12[7] + sv12[8];
        sv12[10] = w1_d1_c1 * sp[3];
        sv12[11] = w1_d0_c1 * sp[4];
        sv12[12] = sv12[10] + sv12[11];
        sv12[13] = sv12[9] * sv12[12];
        sv12[14] = sv12[6] + sv12[13];
        sv12[15] = w0_d0_c0 * sp[5];
        sv12[16] = w0_d1_c0 * sp[6];
        sv12[17] = sv12[15] + sv12[16];
        sv12[18] = w1_d0_c0 * sp[5];
        sv12[19] = w1_d1_c0 * sp[6];
        sv12[20] = sv12[18] + sv12[19];
        sv12[21] = sv12[17] * sv12[20];
        sv12[22] = w0_d0_c1 * sp[5];
        sv12[23] = w0_d1_c1 * sp[6];
        sv12[24] = sv12[22] + sv12[23];
        sv12[25] = w1_d0_c1 * sp[5];
        sv12[26] = w1_d1_c1 * sp[6];
        sv12[27] = sv12[25] + sv12[26];
        sv12[28] = sv12[24] * sv12[27];
        sv12[29] = sv12[21] + sv12[28];
        sv12[30] = sv12[14] + sv12[29];
        sv12[31] = std::exp(w2);
        sv12[32] = sv12[30] * sv12[31];
        sv12[33] = sv12[32] * sp[7];
        const double fw0 = sv12[33] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF0[i] += fw0 * FE3_C0_Q12[0][iq][i];
    }
    std::fill(A, A + 3, 0.0);
    for (int i = 0; i < 3; ++i)
        A[i] += BF0[i];
  }

};


class cavityflow_cell_integral_4_otherwise: public ufc::cell_integral
{
public:

  cavityflow_cell_integral_4_otherwise() : ufc::cell_integral()
  {

  }

  ~cavityflow_cell_integral_4_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 5
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE24_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE24_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE24_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803568, 0.2205142679699366 },
            { -0.05512856699248404, -0.05512856699248409, 0.6533077030470597, 0.2205142679699364, 0.2205142679699362, 0.01592089499803596 },
            { 0.6533077030470594, -0.05512856699248415, -0.05512856699248411, 0.01592089499803581, 0.2205142679699364, 0.2205142679699366 },
            { -0.1249989825350975, 0.001430579517788794, -0.1249989825350975, 0.4999959301403892, 0.2485755252716258, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788821, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880001, 0.173768363654174, -0.1177151633084292, 0.790160442765823, 0.06597478591860526, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880001, 0.1353078281686267, 0.06597478591860512, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860538 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880001, 0.06597478591860524, 0.1353078281686266, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860538 },
            { 0.1737683636541741, -0.04749625719880015, -0.1177151633084292, 0.06597478591860535, 0.7901604427658229, 0.1353078281686269 } } };
    alignas(32) static const double FE26_C2_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE26_C2_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE26_C2_D01_Q12[0][0][0] + coordinate_dofs[2] * FE26_C2_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE26_C2_D01_Q12[0][0][0] + coordinate_dofs[5] * FE26_C2_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE26_C2_D01_Q12[0][0][0] + coordinate_dofs[4] * FE26_C2_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE26_C2_D01_Q12[0][0][0] + coordinate_dofs[3] * FE26_C2_D01_Q12[0][0][1];
    alignas(32) double sp[8];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = std::abs(sp[2]);
    alignas(32) double BF0[6] = {};
    alignas(32) double BF1[5] = {};
    alignas(32) double BF2[5] = {};
    alignas(32) double BF3[6] = {};
    alignas(32) double BF4[5] = {};
    alignas(32) double BF5[5] = {};
    alignas(32) double BF6[3] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE24_C0_Q12[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c1 += w[1][ic + 6] * FE24_C0_Q12[0][iq][ic];
        const double w1_d1_c0 = w[1][0] * FE24_C0_D01_Q12[0][iq][0] + w[1][2] * FE24_C0_D01_Q12[0][iq][1] + w[1][3] * FE24_C0_D01_Q12[0][iq][2] + w[1][4] * FE24_C0_D01_Q12[0][iq][3] + w[1][5] * FE24_C0_D01_Q12[0][iq][4];
        const double w1_d0_c0 = w[1][0] * FE24_C0_D10_Q12[0][iq][0] + w[1][1] * FE24_C0_D10_Q12[0][iq][1] + w[1][3] * FE24_C0_D10_Q12[0][iq][2] + w[1][4] * FE24_C0_D10_Q12[0][iq][3] + w[1][5] * FE24_C0_D10_Q12[0][iq][4];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c0 += w[1][ic] * FE24_C0_Q12[0][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE24_C0_Q12[0][iq][ic];
        const double w1_d1_c1 = w[1][6] * FE24_C0_D01_Q12[0][iq][0] + w[1][8] * FE24_C0_D01_Q12[0][iq][1] + w[1][9] * FE24_C0_D01_Q12[0][iq][2] + w[1][10] * FE24_C0_D01_Q12[0][iq][3] + w[1][11] * FE24_C0_D01_Q12[0][iq][4];
        const double w1_d0_c1 = w[1][6] * FE24_C0_D10_Q12[0][iq][0] + w[1][7] * FE24_C0_D10_Q12[0][iq][1] + w[1][9] * FE24_C0_D10_Q12[0][iq][2] + w[1][10] * FE24_C0_D10_Q12[0][iq][3] + w[1][11] * FE24_C0_D10_Q12[0][iq][4];
        double w2_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c2 += w[2][ic + 12] * FE26_C2_Q12[0][iq][ic];
        const double w2_d1_c1 = w[2][6] * FE24_C0_D01_Q12[0][iq][0] + w[2][8] * FE24_C0_D01_Q12[0][iq][1] + w[2][9] * FE24_C0_D01_Q12[0][iq][2] + w[2][10] * FE24_C0_D01_Q12[0][iq][3] + w[2][11] * FE24_C0_D01_Q12[0][iq][4];
        const double w2_d0_c1 = w[2][6] * FE24_C0_D10_Q12[0][iq][0] + w[2][7] * FE24_C0_D10_Q12[0][iq][1] + w[2][9] * FE24_C0_D10_Q12[0][iq][2] + w[2][10] * FE24_C0_D10_Q12[0][iq][3] + w[2][11] * FE24_C0_D10_Q12[0][iq][4];
        const double w2_d0_c0 = w[2][0] * FE24_C0_D10_Q12[0][iq][0] + w[2][1] * FE24_C0_D10_Q12[0][iq][1] + w[2][3] * FE24_C0_D10_Q12[0][iq][2] + w[2][4] * FE24_C0_D10_Q12[0][iq][3] + w[2][5] * FE24_C0_D10_Q12[0][iq][4];
        const double w2_d1_c0 = w[2][0] * FE24_C0_D01_Q12[0][iq][0] + w[2][2] * FE24_C0_D01_Q12[0][iq][1] + w[2][3] * FE24_C0_D01_Q12[0][iq][2] + w[2][4] * FE24_C0_D01_Q12[0][iq][3] + w[2][5] * FE24_C0_D01_Q12[0][iq][4];
        double w3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3 += w[3][ic] * FE26_C2_Q12[0][iq][ic];
        alignas(32) double sv12[81];
        sv12[0] = w1_c1 * sp[3];
        sv12[1] = w1_c1 * sp[4];
        sv12[2] = w1_d1_c0 * sp[3];
        sv12[3] = w1_d0_c0 * sp[4];
        sv12[4] = sv12[2] + sv12[3];
        sv12[5] = w1_c0 * sp[6];
        sv12[6] = w1_c0 * sp[5];
        sv12[7] = w1_d0_c0 * sp[5];
        sv12[8] = w1_d1_c0 * sp[6];
        sv12[9] = sv12[7] + sv12[8];
        sv12[10] = sv12[0] + sv12[5];
        sv12[11] = sv12[6] + sv12[1];
        sv12[12] = w2_c0 * sv12[10];
        sv12[13] = w2_c0 * sv12[11];
        sv12[14] = w2_c0 * sv12[4];
        sv12[15] = w2_c0 * sv12[9];
        sv12[16] = w1_d1_c1 * sp[3];
        sv12[17] = w1_d0_c1 * sp[4];
        sv12[18] = sv12[16] + sv12[17];
        sv12[19] = w1_d0_c1 * sp[5];
        sv12[20] = w1_d1_c1 * sp[6];
        sv12[21] = sv12[19] + sv12[20];
        sv12[22] = w2_c1 * sv12[18];
        sv12[23] = w2_c1 * sv12[21];
        sv12[24] = w2_c1 * sv12[10];
        sv12[25] = w2_c1 * sv12[11];
        sv12[26] = sv12[14] + sv12[22];
        sv12[27] = sv12[15] + sv12[23];
        sv12[28] = w2_c2 * sp[6];
        sv12[29] = w2_c2 * sp[5];
        sv12[30] = w2_c2 * sp[3];
        sv12[31] = w2_c2 * sp[4];
        sv12[32] = w2_d1_c1 * sp[3];
        sv12[33] = w2_d0_c1 * sp[4];
        sv12[34] = sv12[32] + sv12[33];
        sv12[35] = w2_d0_c0 * sp[5];
        sv12[36] = w2_d1_c0 * sp[6];
        sv12[37] = sv12[35] + sv12[36];
        sv12[38] = sv12[34] + sv12[37];
        sv12[39] = w2_c1 * w[0][0];
        sv12[40] = w2_c0 * w[0][0];
        sv12[41] = w2_d1_c0 * sp[3];
        sv12[42] = w2_d0_c0 * sp[4];
        sv12[43] = sv12[41] + sv12[42];
        sv12[44] = sv12[43] * sp[3];
        sv12[45] = sv12[43] * sp[4];
        sv12[46] = sv12[34] * sp[3];
        sv12[47] = sv12[34] * sp[4];
        sv12[48] = sv12[37] * sp[6];
        sv12[49] = sv12[37] * sp[5];
        sv12[50] = w2_d0_c1 * sp[5];
        sv12[51] = w2_d1_c1 * sp[6];
        sv12[52] = sv12[50] + sv12[51];
        sv12[53] = sv12[52] * sp[6];
        sv12[54] = sv12[52] * sp[5];
        sv12[55] = sv12[44] + sv12[48];
        sv12[56] = sv12[49] + sv12[45];
        sv12[57] = sv12[46] + sv12[53];
        sv12[58] = sv12[54] + sv12[47];
        sv12[59] = std::exp(w3);
        sv12[60] = sv12[55] * sv12[59];
        sv12[61] = sv12[56] * sv12[59];
        sv12[62] = sv12[57] * sv12[59];
        sv12[63] = sv12[58] * sv12[59];
        sv12[64] = -1 * sv12[28] + sv12[60];
        sv12[65] = -1 * sv12[29] + sv12[61];
        sv12[66] = -1 * sv12[30] + sv12[62];
        sv12[67] = -1 * sv12[31] + sv12[63];
        sv12[68] = sv12[64] + sv12[12];
        sv12[69] = sv12[65] + sv12[13];
        sv12[70] = sv12[26] + sv12[39];
        sv12[71] = sv12[27] + sv12[40];
        sv12[72] = sv12[66] + sv12[24];
        sv12[73] = sv12[67] + sv12[25];
        sv12[74] = sv12[68] * sp[7];
        sv12[75] = sv12[69] * sp[7];
        sv12[76] = sv12[70] * sp[7];
        sv12[77] = sv12[71] * sp[7];
        sv12[78] = sv12[72] * sp[7];
        sv12[79] = sv12[73] * sp[7];
        sv12[80] = -1 * sv12[38] * sp[7];
        const double fw0 = sv12[77] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            BF0[i] += fw0 * FE24_C0_Q12[0][iq][i];
        const double fw1 = sv12[75] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF1[i] += fw1 * FE24_C0_D10_Q12[0][iq][i];
        const double fw2 = sv12[74] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF2[i] += fw2 * FE24_C0_D01_Q12[0][iq][i];
        const double fw3 = sv12[76] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            BF3[i] += fw3 * FE24_C0_Q12[0][iq][i];
        const double fw4 = sv12[79] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF4[i] += fw4 * FE24_C0_D10_Q12[0][iq][i];
        const double fw5 = sv12[78] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF5[i] += fw5 * FE24_C0_D01_Q12[0][iq][i];
        const double fw6 = sv12[80] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF6[i] += fw6 * FE26_C2_Q12[0][iq][i];
    }
    std::fill(A, A + 15, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    for (int i = 0; i < 6; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 5; ++i)
        A[DM0[i]] += BF1[i];
    for (int i = 0; i < 5; ++i)
        A[DM1[i]] += BF2[i];
    for (int i = 0; i < 6; ++i)
        A[i + 6] += BF3[i];
    for (int i = 0; i < 5; ++i)
        A[DM2[i]] += BF4[i];
    for (int i = 0; i < 5; ++i)
        A[DM3[i]] += BF5[i];
    for (int i = 0; i < 3; ++i)
        A[i + 12] += BF6[i];
  }

};


class cavityflow_cell_integral_5_otherwise: public ufc::cell_integral
{
public:

  cavityflow_cell_integral_5_otherwise() : ufc::cell_integral()
  {

  }

  ~cavityflow_cell_integral_5_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 5
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE20_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE20_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE20_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803568, 0.2205142679699366 },
            { -0.05512856699248404, -0.05512856699248409, 0.6533077030470597, 0.2205142679699364, 0.2205142679699362, 0.01592089499803596 },
            { 0.6533077030470594, -0.05512856699248415, -0.05512856699248411, 0.01592089499803581, 0.2205142679699364, 0.2205142679699366 },
            { -0.1249989825350975, 0.001430579517788794, -0.1249989825350975, 0.4999959301403892, 0.2485755252716258, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788821, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880001, 0.173768363654174, -0.1177151633084292, 0.790160442765823, 0.06597478591860526, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880001, 0.1353078281686267, 0.06597478591860512, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860538 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880001, 0.06597478591860524, 0.1353078281686266, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860538 },
            { 0.1737683636541741, -0.04749625719880015, -0.1177151633084292, 0.06597478591860535, 0.7901604427658229, 0.1353078281686269 } } };
    alignas(32) static const double FE22_C2_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE22_C2_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE22_C2_D01_Q12[0][0][0] + coordinate_dofs[2] * FE22_C2_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE22_C2_D01_Q12[0][0][0] + coordinate_dofs[5] * FE22_C2_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE22_C2_D01_Q12[0][0][0] + coordinate_dofs[4] * FE22_C2_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE22_C2_D01_Q12[0][0][0] + coordinate_dofs[3] * FE22_C2_D01_Q12[0][0][1];
    alignas(32) double sp[8];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = std::abs(sp[2]);
    alignas(32) double BF0[6] = {};
    alignas(32) double BF1[5] = {};
    alignas(32) double BF2[5] = {};
    alignas(32) double BF3[6] = {};
    alignas(32) double BF4[5] = {};
    alignas(32) double BF5[5] = {};
    alignas(32) double BF6[3] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c1 += w[1][ic + 6] * FE20_C0_Q12[0][iq][ic];
        const double w1_d1_c0 = w[1][0] * FE20_C0_D01_Q12[0][iq][0] + w[1][2] * FE20_C0_D01_Q12[0][iq][1] + w[1][3] * FE20_C0_D01_Q12[0][iq][2] + w[1][4] * FE20_C0_D01_Q12[0][iq][3] + w[1][5] * FE20_C0_D01_Q12[0][iq][4];
        const double w1_d0_c0 = w[1][0] * FE20_C0_D10_Q12[0][iq][0] + w[1][1] * FE20_C0_D10_Q12[0][iq][1] + w[1][3] * FE20_C0_D10_Q12[0][iq][2] + w[1][4] * FE20_C0_D10_Q12[0][iq][3] + w[1][5] * FE20_C0_D10_Q12[0][iq][4];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c0 += w[1][ic] * FE20_C0_Q12[0][iq][ic];
        const double w1_d1_c1 = w[1][6] * FE20_C0_D01_Q12[0][iq][0] + w[1][8] * FE20_C0_D01_Q12[0][iq][1] + w[1][9] * FE20_C0_D01_Q12[0][iq][2] + w[1][10] * FE20_C0_D01_Q12[0][iq][3] + w[1][11] * FE20_C0_D01_Q12[0][iq][4];
        const double w1_d0_c1 = w[1][6] * FE20_C0_D10_Q12[0][iq][0] + w[1][7] * FE20_C0_D10_Q12[0][iq][1] + w[1][9] * FE20_C0_D10_Q12[0][iq][2] + w[1][10] * FE20_C0_D10_Q12[0][iq][3] + w[1][11] * FE20_C0_D10_Q12[0][iq][4];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c2 += w[1][ic + 12] * FE22_C2_Q12[0][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE20_C0_Q12[0][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE20_C0_Q12[0][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3 += w[3][ic] * FE22_C2_Q12[0][iq][ic];
        alignas(32) double sv12[57];
        sv12[0] = w1_d1_c0 * sp[3];
        sv12[1] = w1_d0_c0 * sp[4];
        sv12[2] = sv12[0] + sv12[1];
        sv12[3] = w1_c1 * sv12[2];
        sv12[4] = w1_d0_c0 * sp[5];
        sv12[5] = w1_d1_c0 * sp[6];
        sv12[6] = sv12[4] + sv12[5];
        sv12[7] = w1_c0 * sv12[6];
        sv12[8] = sv12[3] + sv12[7];
        sv12[9] = w1_d1_c1 * sp[3];
        sv12[10] = w1_d0_c1 * sp[4];
        sv12[11] = sv12[9] + sv12[10];
        sv12[12] = w1_c1 * sv12[11];
        sv12[13] = w1_d0_c1 * sp[5];
        sv12[14] = w1_d1_c1 * sp[6];
        sv12[15] = sv12[13] + sv12[14];
        sv12[16] = w1_c0 * sv12[15];
        sv12[17] = sv12[12] + sv12[16];
        sv12[18] = w1_c2 * sp[3];
        sv12[19] = w1_c2 * sp[4];
        sv12[20] = w1_c2 * sp[5];
        sv12[21] = w1_c2 * sp[6];
        sv12[22] = sv12[11] + sv12[6];
        sv12[23] = w1_c0 + -1 * w2_c0;
        sv12[24] = w1_c1 + -1 * w2_c1;
        sv12[25] = sv12[23] * w[0][0];
        sv12[26] = sv12[24] * w[0][0];
        sv12[27] = sv12[2] * sp[4];
        sv12[28] = sv12[2] * sp[3];
        sv12[29] = sv12[11] * sp[3];
        sv12[30] = sv12[11] * sp[4];
        sv12[31] = sv12[6] * sp[5];
        sv12[32] = sv12[6] * sp[6];
        sv12[33] = sv12[15] * sp[6];
        sv12[34] = sv12[15] * sp[5];
        sv12[35] = sv12[29] + sv12[33];
        sv12[36] = sv12[34] + sv12[30];
        sv12[37] = sv12[31] + sv12[27];
        sv12[38] = sv12[28] + sv12[32];
        sv12[39] = std::exp(w3);
        sv12[40] = sv12[35] * sv12[39];
        sv12[41] = sv12[36] * sv12[39];
        sv12[42] = sv12[37] * sv12[39];
        sv12[43] = sv12[38] * sv12[39];
        sv12[44] = -1 * sv12[18] + sv12[40];
        sv12[45] = -1 * sv12[19] + sv12[41];
        sv12[46] = -1 * sv12[20] + sv12[42];
        sv12[47] = -1 * sv12[21] + sv12[43];
        sv12[48] = sv12[8] + sv12[25];
        sv12[49] = sv12[17] + sv12[26];
        sv12[50] = sv12[48] * sp[7];
        sv12[51] = sv12[49] * sp[7];
        sv12[52] = sv12[44] * sp[7];
        sv12[53] = sv12[45] * sp[7];
        sv12[54] = sv12[46] * sp[7];
        sv12[55] = sv12[47] * sp[7];
        sv12[56] = -1 * sv12[22] * sp[7];
        const double fw0 = sv12[50] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            BF0[i] += fw0 * FE20_C0_Q12[0][iq][i];
        const double fw1 = sv12[54] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF1[i] += fw1 * FE20_C0_D10_Q12[0][iq][i];
        const double fw2 = sv12[55] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF2[i] += fw2 * FE20_C0_D01_Q12[0][iq][i];
        const double fw3 = sv12[51] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            BF3[i] += fw3 * FE20_C0_Q12[0][iq][i];
        const double fw4 = sv12[53] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF4[i] += fw4 * FE20_C0_D10_Q12[0][iq][i];
        const double fw5 = sv12[52] * weights12[iq];
        for (int i = 0; i < 5; ++i)
            BF5[i] += fw5 * FE20_C0_D01_Q12[0][iq][i];
        const double fw6 = sv12[56] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF6[i] += fw6 * FE22_C2_Q12[0][iq][i];
    }
    std::fill(A, A + 15, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    for (int i = 0; i < 6; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 5; ++i)
        A[DM0[i]] += BF1[i];
    for (int i = 0; i < 5; ++i)
        A[DM1[i]] += BF2[i];
    for (int i = 0; i < 6; ++i)
        A[i + 6] += BF3[i];
    for (int i = 0; i < 5; ++i)
        A[DM2[i]] += BF4[i];
    for (int i = 0; i < 5; ++i)
        A[DM3[i]] += BF5[i];
    for (int i = 0; i < 3; ++i)
        A[i + 12] += BF6[i];
  }

};


class cavityflow_cell_integral_6_otherwise: public ufc::cell_integral
{
public:

  cavityflow_cell_integral_6_otherwise() : ufc::cell_integral()
  {

  }

  ~cavityflow_cell_integral_6_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 7
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE12_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE12_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE14_C2_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE14_C2_D01_Q12[0][0][0] + coordinate_dofs[2] * FE14_C2_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE14_C2_D01_Q12[0][0][0] + coordinate_dofs[5] * FE14_C2_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE14_C2_D01_Q12[0][0][0] + coordinate_dofs[4] * FE14_C2_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE14_C2_D01_Q12[0][0][0] + coordinate_dofs[3] * FE14_C2_D01_Q12[0][0][1];
    alignas(32) double sp[8];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = std::abs(sp[2]);
    alignas(32) double BF0[3][3] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        const double w0_d1_c0 = w[0][0] * FE12_C0_D01_Q12[0][iq][0] + w[0][2] * FE12_C0_D01_Q12[0][iq][1] + w[0][3] * FE12_C0_D01_Q12[0][iq][2] + w[0][4] * FE12_C0_D01_Q12[0][iq][3] + w[0][5] * FE12_C0_D01_Q12[0][iq][4];
        const double w0_d0_c0 = w[0][0] * FE12_C0_D10_Q12[0][iq][0] + w[0][1] * FE12_C0_D10_Q12[0][iq][1] + w[0][3] * FE12_C0_D10_Q12[0][iq][2] + w[0][4] * FE12_C0_D10_Q12[0][iq][3] + w[0][5] * FE12_C0_D10_Q12[0][iq][4];
        const double w1_d1_c0 = w[1][0] * FE12_C0_D01_Q12[0][iq][0] + w[1][2] * FE12_C0_D01_Q12[0][iq][1] + w[1][3] * FE12_C0_D01_Q12[0][iq][2] + w[1][4] * FE12_C0_D01_Q12[0][iq][3] + w[1][5] * FE12_C0_D01_Q12[0][iq][4];
        const double w1_d0_c0 = w[1][0] * FE12_C0_D10_Q12[0][iq][0] + w[1][1] * FE12_C0_D10_Q12[0][iq][1] + w[1][3] * FE12_C0_D10_Q12[0][iq][2] + w[1][4] * FE12_C0_D10_Q12[0][iq][3] + w[1][5] * FE12_C0_D10_Q12[0][iq][4];
        const double w0_d1_c1 = w[0][6] * FE12_C0_D01_Q12[0][iq][0] + w[0][8] * FE12_C0_D01_Q12[0][iq][1] + w[0][9] * FE12_C0_D01_Q12[0][iq][2] + w[0][10] * FE12_C0_D01_Q12[0][iq][3] + w[0][11] * FE12_C0_D01_Q12[0][iq][4];
        const double w0_d0_c1 = w[0][6] * FE12_C0_D10_Q12[0][iq][0] + w[0][7] * FE12_C0_D10_Q12[0][iq][1] + w[0][9] * FE12_C0_D10_Q12[0][iq][2] + w[0][10] * FE12_C0_D10_Q12[0][iq][3] + w[0][11] * FE12_C0_D10_Q12[0][iq][4];
        const double w1_d1_c1 = w[1][6] * FE12_C0_D01_Q12[0][iq][0] + w[1][8] * FE12_C0_D01_Q12[0][iq][1] + w[1][9] * FE12_C0_D01_Q12[0][iq][2] + w[1][10] * FE12_C0_D01_Q12[0][iq][3] + w[1][11] * FE12_C0_D01_Q12[0][iq][4];
        const double w1_d0_c1 = w[1][6] * FE12_C0_D10_Q12[0][iq][0] + w[1][7] * FE12_C0_D10_Q12[0][iq][1] + w[1][9] * FE12_C0_D10_Q12[0][iq][2] + w[1][10] * FE12_C0_D10_Q12[0][iq][3] + w[1][11] * FE12_C0_D10_Q12[0][iq][4];
        double w2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2 += w[2][ic] * FE3_C0_Q12[0][iq][ic];
        alignas(32) double sv12[34];
        sv12[0] = w0_d1_c0 * sp[3];
        sv12[1] = w0_d0_c0 * sp[4];
        sv12[2] = sv12[0] + sv12[1];
        sv12[3] = w1_d1_c0 * sp[3];
        sv12[4] = w1_d0_c0 * sp[4];
        sv12[5] = sv12[3] + sv12[4];
        sv12[6] = sv12[2] * sv12[5];
        sv12[7] = w0_d1_c1 * sp[3];
        sv12[8] = w0_d0_c1 * sp[4];
        sv12[9] = sv12[7] + sv12[8];
        sv12[10] = w1_d1_c1 * sp[3];
        sv12[11] = w1_d0_c1 * sp[4];
        sv12[12] = sv12[10] + sv12[11];
        sv12[13] = sv12[9] * sv12[12];
        sv12[14] = sv12[6] + sv12[13];
        sv12[15] = w0_d0_c0 * sp[5];
        sv12[16] = w0_d1_c0 * sp[6];
        sv12[17] = sv12[15] + sv12[16];
        sv12[18] = w1_d0_c0 * sp[5];
        sv12[19] = w1_d1_c0 * sp[6];
        sv12[20] = sv12[18] + sv12[19];
        sv12[21] = sv12[17] * sv12[20];
        sv12[22] = w0_d0_c1 * sp[5];
        sv12[23] = w0_d1_c1 * sp[6];
        sv12[24] = sv12[22] + sv12[23];
        sv12[25] = w1_d0_c1 * sp[5];
        sv12[26] = w1_d1_c1 * sp[6];
        sv12[27] = sv12[25] + sv12[26];
        sv12[28] = sv12[24] * sv12[27];
        sv12[29] = sv12[21] + sv12[28];
        sv12[30] = sv12[14] + sv12[29];
        sv12[31] = std::exp(w2);
        sv12[32] = sv12[30] * sv12[31];
        sv12[33] = sv12[32] * sp[7];
        const double fw0 = sv12[33] * weights12[iq];
        alignas(32) double TF0[3];
        for (int i = 0; i < 3; ++i)
            TF0[i] = fw0 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF0[i][j] += TF0[i] * FE3_C0_Q12[0][iq][j];
    }
    std::fill(A, A + 9, 0.0);
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * i + j] += BF0[i][j];
  }

};


class cavityflow_cell_integral_7_otherwise: public ufc::cell_integral
{
public:

  cavityflow_cell_integral_7_otherwise() : ufc::cell_integral()
  {

  }

  ~cavityflow_cell_integral_7_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 5
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE24_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE24_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE24_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803568, 0.2205142679699366 },
            { -0.05512856699248404, -0.05512856699248409, 0.6533077030470597, 0.2205142679699364, 0.2205142679699362, 0.01592089499803596 },
            { 0.6533077030470594, -0.05512856699248415, -0.05512856699248411, 0.01592089499803581, 0.2205142679699364, 0.2205142679699366 },
            { -0.1249989825350975, 0.001430579517788794, -0.1249989825350975, 0.4999959301403892, 0.2485755252716258, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788821, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880001, 0.173768363654174, -0.1177151633084292, 0.790160442765823, 0.06597478591860526, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880001, 0.1353078281686267, 0.06597478591860512, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860538 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880001, 0.06597478591860524, 0.1353078281686266, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860538 },
            { 0.1737683636541741, -0.04749625719880015, -0.1177151633084292, 0.06597478591860535, 0.7901604427658229, 0.1353078281686269 } } };
    alignas(32) static const double FE26_C2_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE26_C2_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE26_C2_D01_Q12[0][0][0] + coordinate_dofs[2] * FE26_C2_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE26_C2_D01_Q12[0][0][0] + coordinate_dofs[5] * FE26_C2_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE26_C2_D01_Q12[0][0][0] + coordinate_dofs[4] * FE26_C2_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE26_C2_D01_Q12[0][0][0] + coordinate_dofs[3] * FE26_C2_D01_Q12[0][0][1];
    alignas(32) double sp[21];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = sp[3] * sp[4];
    sp[8] = sp[4] * sp[4];
    sp[9] = sp[3] * sp[3];
    sp[10] = sp[5] * sp[6];
    sp[11] = sp[5] * sp[5];
    sp[12] = sp[6] * sp[6];
    sp[13] = sp[7] + sp[10];
    sp[14] = sp[9] + sp[12];
    sp[15] = sp[11] + sp[8];
    sp[16] = std::abs(sp[2]);
    sp[17] = -1 * sp[6] * sp[16];
    sp[18] = -1 * sp[5] * sp[16];
    sp[19] = -1 * sp[3] * sp[16];
    sp[20] = -1 * sp[4] * sp[16];
    alignas(32) double BF0[6][6] = {};
    alignas(32) double BF1[6][5] = {};
    alignas(32) double BF2[6][5] = {};
    alignas(32) double BF3[6][6] = {};
    alignas(32) double BF4[5][5] = {};
    alignas(32) double BF5[5][5] = {};
    alignas(32) double BF6[5][5] = {};
    alignas(32) double BF7[5][5] = {};
    alignas(32) double BF8[6][6] = {};
    alignas(32) double BF9[6][6] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c1 += w[1][ic + 6] * FE24_C0_Q12[0][iq][ic];
        const double w1_d1_c0 = w[1][0] * FE24_C0_D01_Q12[0][iq][0] + w[1][2] * FE24_C0_D01_Q12[0][iq][1] + w[1][3] * FE24_C0_D01_Q12[0][iq][2] + w[1][4] * FE24_C0_D01_Q12[0][iq][3] + w[1][5] * FE24_C0_D01_Q12[0][iq][4];
        const double w1_d0_c0 = w[1][0] * FE24_C0_D10_Q12[0][iq][0] + w[1][1] * FE24_C0_D10_Q12[0][iq][1] + w[1][3] * FE24_C0_D10_Q12[0][iq][2] + w[1][4] * FE24_C0_D10_Q12[0][iq][3] + w[1][5] * FE24_C0_D10_Q12[0][iq][4];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c0 += w[1][ic] * FE24_C0_Q12[0][iq][ic];
        const double w1_d1_c1 = w[1][6] * FE24_C0_D01_Q12[0][iq][0] + w[1][8] * FE24_C0_D01_Q12[0][iq][1] + w[1][9] * FE24_C0_D01_Q12[0][iq][2] + w[1][10] * FE24_C0_D01_Q12[0][iq][3] + w[1][11] * FE24_C0_D01_Q12[0][iq][4];
        const double w1_d0_c1 = w[1][6] * FE24_C0_D10_Q12[0][iq][0] + w[1][7] * FE24_C0_D10_Q12[0][iq][1] + w[1][9] * FE24_C0_D10_Q12[0][iq][2] + w[1][10] * FE24_C0_D10_Q12[0][iq][3] + w[1][11] * FE24_C0_D10_Q12[0][iq][4];
        double w2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2 += w[2][ic] * FE26_C2_Q12[0][iq][ic];
        alignas(32) double sv12[33];
        sv12[0] = w1_c1 * sp[3];
        sv12[1] = w1_c1 * sp[4];
        sv12[2] = w1_d1_c0 * sp[3];
        sv12[3] = w1_d0_c0 * sp[4];
        sv12[4] = sv12[2] + sv12[3];
        sv12[5] = w1_c0 * sp[6];
        sv12[6] = w1_c0 * sp[5];
        sv12[7] = w1_d0_c0 * sp[5];
        sv12[8] = w1_d1_c0 * sp[6];
        sv12[9] = sv12[7] + sv12[8];
        sv12[10] = sv12[0] + sv12[5];
        sv12[11] = sv12[6] + sv12[1];
        sv12[12] = w1_d1_c1 * sp[3];
        sv12[13] = w1_d0_c1 * sp[4];
        sv12[14] = sv12[12] + sv12[13];
        sv12[15] = w1_d0_c1 * sp[5];
        sv12[16] = w1_d1_c1 * sp[6];
        sv12[17] = sv12[15] + sv12[16];
        sv12[18] = std::exp(w2);
        sv12[19] = sp[13] * sv12[18];
        sv12[20] = sp[14] * sv12[18];
        sv12[21] = sp[15] * sv12[18];
        sv12[22] = sv12[9] + w[0][0];
        sv12[23] = sv12[14] + w[0][0];
        sv12[24] = sv12[10] * sp[16];
        sv12[25] = sv12[11] * sp[16];
        sv12[26] = sv12[4] * sp[16];
        sv12[27] = sv12[22] * sp[16];
        sv12[28] = sv12[19] * sp[16];
        sv12[29] = sv12[20] * sp[16];
        sv12[30] = sv12[21] * sp[16];
        sv12[31] = sv12[23] * sp[16];
        sv12[32] = sv12[17] * sp[16];
        const double fw0 = sv12[27] * weights12[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE24_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF0[i][j] += TF0[i] * FE24_C0_Q12[0][iq][j];
        const double fw1 = sv12[25] * weights12[iq];
        alignas(32) double TF1[6];
        for (int i = 0; i < 6; ++i)
            TF1[i] = fw1 * FE24_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF1[i][j] += TF1[i] * FE24_C0_D10_Q12[0][iq][j];
        const double fw2 = sv12[24] * weights12[iq];
        alignas(32) double TF2[6];
        for (int i = 0; i < 6; ++i)
            TF2[i] = fw2 * FE24_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF2[i][j] += TF2[i] * FE24_C0_D01_Q12[0][iq][j];
        const double fw3 = sv12[26] * weights12[iq];
        alignas(32) double TF3[6];
        for (int i = 0; i < 6; ++i)
            TF3[i] = fw3 * FE24_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF3[i][j] += TF3[i] * FE24_C0_Q12[0][iq][j];
        const double fw4 = sv12[30] * weights12[iq];
        alignas(32) double TF4[5];
        for (int i = 0; i < 5; ++i)
            TF4[i] = fw4 * FE24_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF4[i][j] += TF4[i] * FE24_C0_D10_Q12[0][iq][j];
        const double fw5 = sv12[28] * weights12[iq];
        alignas(32) double TF5[5];
        for (int i = 0; i < 5; ++i)
            TF5[i] = fw5 * FE24_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF5[i][j] += TF5[i] * FE24_C0_D01_Q12[0][iq][j];
        alignas(32) double TF6[5];
        for (int i = 0; i < 5; ++i)
            TF6[i] = fw5 * FE24_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF6[i][j] += TF6[i] * FE24_C0_D10_Q12[0][iq][j];
        const double fw6 = sv12[29] * weights12[iq];
        alignas(32) double TF7[5];
        for (int i = 0; i < 5; ++i)
            TF7[i] = fw6 * FE24_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF7[i][j] += TF7[i] * FE24_C0_D01_Q12[0][iq][j];
        const double fw7 = sv12[32] * weights12[iq];
        alignas(32) double TF8[6];
        for (int i = 0; i < 6; ++i)
            TF8[i] = fw7 * FE24_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF8[i][j] += TF8[i] * FE24_C0_Q12[0][iq][j];
        const double fw8 = sv12[31] * weights12[iq];
        alignas(32) double TF9[6];
        for (int i = 0; i < 6; ++i)
            TF9[i] = fw8 * FE24_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF9[i][j] += TF9[i] * FE24_C0_Q12[0][iq][j];
    }
    std::fill(A, A + 12, 0.0);
    A[12] = -0.1666666666666677 * sp[18] + -0.1666666666666685 * sp[17];
    std::fill(A + 13, A + 28, 0.0);
    A[28] = 0.1666666666666674 * sp[18];
    std::fill(A + 29, A + 44, 0.0);
    A[44] = 0.1666666666666677 * sp[17];
    std::fill(A + 45, A + 57, 0.0);
    A[57] = 0.1666666666666665 * sp[18] + 0.1666666666666648 * sp[17];
    A[58] = 0.1666666666666663 * sp[18] + 0.3333333333333322 * sp[17];
    A[59] = 0.3333333333333338 * sp[18] + 0.1666666666666643 * sp[17];
    std::fill(A + 60, A + 72, 0.0);
    A[72] = -0.1666666666666665 * sp[18] + 0.1666666666666693 * sp[17];
    A[73] = -0.1666666666666663 * sp[18];
    A[74] = -0.3333333333333338 * sp[18] + -0.1666666666666662 * sp[17];
    std::fill(A + 75, A + 87, 0.0);
    A[87] = 0.1666666666666682 * sp[18] + -0.1666666666666668 * sp[17];
    A[88] = -0.1666666666666677 * sp[18] + -0.3333333333333345 * sp[17];
    A[89] = -0.1666666666666665 * sp[17];
    std::fill(A + 90, A + 102, 0.0);
    A[102] = -0.1666666666666677 * sp[20] + -0.1666666666666685 * sp[19];
    std::fill(A + 103, A + 118, 0.0);
    A[118] = 0.1666666666666674 * sp[20];
    std::fill(A + 119, A + 134, 0.0);
    A[134] = 0.1666666666666677 * sp[19];
    std::fill(A + 135, A + 147, 0.0);
    A[147] = 0.1666666666666665 * sp[20] + 0.1666666666666648 * sp[19];
    A[148] = 0.1666666666666663 * sp[20] + 0.3333333333333322 * sp[19];
    A[149] = 0.3333333333333338 * sp[20] + 0.1666666666666643 * sp[19];
    std::fill(A + 150, A + 162, 0.0);
    A[162] = -0.1666666666666665 * sp[20] + 0.1666666666666693 * sp[19];
    A[163] = -0.1666666666666663 * sp[20];
    A[164] = -0.3333333333333338 * sp[20] + -0.1666666666666662 * sp[19];
    std::fill(A + 165, A + 177, 0.0);
    A[177] = 0.1666666666666682 * sp[20] + -0.1666666666666668 * sp[19];
    A[178] = -0.1666666666666677 * sp[20] + -0.3333333333333345 * sp[19];
    A[179] = -0.1666666666666665 * sp[19];
    A[180] = -0.1666666666666677 * sp[18] + -0.1666666666666685 * sp[17];
    std::fill(A + 181, A + 183, 0.0);
    A[183] = 0.1666666666666665 * sp[18] + 0.1666666666666648 * sp[17];
    A[184] = -0.1666666666666665 * sp[18] + 0.1666666666666693 * sp[17];
    A[185] = 0.1666666666666682 * sp[18] + -0.1666666666666668 * sp[17];
    A[186] = -0.1666666666666677 * sp[20] + -0.1666666666666685 * sp[19];
    std::fill(A + 187, A + 189, 0.0);
    A[189] = 0.1666666666666665 * sp[20] + 0.1666666666666648 * sp[19];
    A[190] = -0.1666666666666665 * sp[20] + 0.1666666666666693 * sp[19];
    A[191] = 0.1666666666666682 * sp[20] + -0.1666666666666668 * sp[19];
    std::fill(A + 192, A + 196, 0.0);
    A[196] = 0.1666666666666674 * sp[18];
    A[197] = 0.0;
    A[198] = 0.1666666666666663 * sp[18] + 0.3333333333333322 * sp[17];
    A[199] = -0.1666666666666663 * sp[18];
    A[200] = -0.1666666666666677 * sp[18] + -0.3333333333333345 * sp[17];
    A[201] = 0.0;
    A[202] = 0.1666666666666674 * sp[20];
    A[203] = 0.0;
    A[204] = 0.1666666666666663 * sp[20] + 0.3333333333333322 * sp[19];
    A[205] = -0.1666666666666663 * sp[20];
    A[206] = -0.1666666666666677 * sp[20] + -0.3333333333333345 * sp[19];
    std::fill(A + 207, A + 212, 0.0);
    A[212] = 0.1666666666666677 * sp[17];
    A[213] = 0.3333333333333338 * sp[18] + 0.1666666666666643 * sp[17];
    A[214] = -0.3333333333333338 * sp[18] + -0.1666666666666662 * sp[17];
    A[215] = -0.1666666666666665 * sp[17];
    std::fill(A + 216, A + 218, 0.0);
    A[218] = 0.1666666666666677 * sp[19];
    A[219] = 0.3333333333333338 * sp[20] + 0.1666666666666643 * sp[19];
    A[220] = -0.3333333333333338 * sp[20] + -0.1666666666666662 * sp[19];
    A[221] = -0.1666666666666665 * sp[19];
    std::fill(A + 222, A + 225, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * i + j] += BF0[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * i + DM0[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * i + DM1[j]] += BF2[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * i + (j + 6)] += BF3[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * DM0[i] + DM0[j]] += BF4[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * DM0[i] + DM1[j]] += BF5[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * DM1[i] + DM0[j]] += BF6[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * DM1[i] + DM1[j]] += BF7[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * (i + 6) + j] += BF8[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * (i + 6) + (j + 6)] += BF9[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * (i + 6) + DM2[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * (i + 6) + DM3[j]] += BF2[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * DM2[i] + DM2[j]] += BF4[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * DM2[i] + DM3[j]] += BF5[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * DM3[i] + DM2[j]] += BF6[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * DM3[i] + DM3[j]] += BF7[i][j];
  }

};


class cavityflow_cell_integral_8_otherwise: public ufc::cell_integral
{
public:

  cavityflow_cell_integral_8_otherwise() : ufc::cell_integral()
  {

  }

  ~cavityflow_cell_integral_8_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 6
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE12_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE12_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE14_C2_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE14_C2_D01_Q12[0][0][0] + coordinate_dofs[2] * FE14_C2_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE14_C2_D01_Q12[0][0][0] + coordinate_dofs[5] * FE14_C2_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE14_C2_D01_Q12[0][0][0] + coordinate_dofs[4] * FE14_C2_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE14_C2_D01_Q12[0][0][0] + coordinate_dofs[3] * FE14_C2_D01_Q12[0][0][1];
    alignas(32) double sp[8];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = std::abs(sp[2]);
    alignas(32) double BF0[5][3] = {};
    alignas(32) double BF1[5][3] = {};
    alignas(32) double BF2[5][3] = {};
    alignas(32) double BF3[5][3] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        const double w0_d1_c0 = w[0][0] * FE12_C0_D01_Q12[0][iq][0] + w[0][2] * FE12_C0_D01_Q12[0][iq][1] + w[0][3] * FE12_C0_D01_Q12[0][iq][2] + w[0][4] * FE12_C0_D01_Q12[0][iq][3] + w[0][5] * FE12_C0_D01_Q12[0][iq][4];
        const double w0_d0_c0 = w[0][0] * FE12_C0_D10_Q12[0][iq][0] + w[0][1] * FE12_C0_D10_Q12[0][iq][1] + w[0][3] * FE12_C0_D10_Q12[0][iq][2] + w[0][4] * FE12_C0_D10_Q12[0][iq][3] + w[0][5] * FE12_C0_D10_Q12[0][iq][4];
        const double w0_d1_c1 = w[0][6] * FE12_C0_D01_Q12[0][iq][0] + w[0][8] * FE12_C0_D01_Q12[0][iq][1] + w[0][9] * FE12_C0_D01_Q12[0][iq][2] + w[0][10] * FE12_C0_D01_Q12[0][iq][3] + w[0][11] * FE12_C0_D01_Q12[0][iq][4];
        const double w0_d0_c1 = w[0][6] * FE12_C0_D10_Q12[0][iq][0] + w[0][7] * FE12_C0_D10_Q12[0][iq][1] + w[0][9] * FE12_C0_D10_Q12[0][iq][2] + w[0][10] * FE12_C0_D10_Q12[0][iq][3] + w[0][11] * FE12_C0_D10_Q12[0][iq][4];
        double w1 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1 += w[1][ic] * FE3_C0_Q12[0][iq][ic];
        alignas(32) double sv12[33];
        sv12[0] = w0_d1_c0 * sp[3];
        sv12[1] = w0_d0_c0 * sp[4];
        sv12[2] = sv12[0] + sv12[1];
        sv12[3] = sv12[2] * sp[3];
        sv12[4] = sv12[2] * sp[4];
        sv12[5] = w0_d1_c1 * sp[3];
        sv12[6] = w0_d0_c1 * sp[4];
        sv12[7] = sv12[5] + sv12[6];
        sv12[8] = sv12[7] * sp[3];
        sv12[9] = sv12[7] * sp[4];
        sv12[10] = w0_d0_c0 * sp[5];
        sv12[11] = w0_d1_c0 * sp[6];
        sv12[12] = sv12[10] + sv12[11];
        sv12[13] = sv12[12] * sp[6];
        sv12[14] = sv12[12] * sp[5];
        sv12[15] = w0_d0_c1 * sp[5];
        sv12[16] = w0_d1_c1 * sp[6];
        sv12[17] = sv12[15] + sv12[16];
        sv12[18] = sv12[17] * sp[6];
        sv12[19] = sv12[17] * sp[5];
        sv12[20] = sv12[3] + sv12[13];
        sv12[21] = sv12[14] + sv12[4];
        sv12[22] = sv12[8] + sv12[18];
        sv12[23] = sv12[19] + sv12[9];
        sv12[24] = std::exp(w1);
        sv12[25] = sv12[20] * sv12[24];
        sv12[26] = sv12[21] * sv12[24];
        sv12[27] = sv12[22] * sv12[24];
        sv12[28] = sv12[23] * sv12[24];
        sv12[29] = sv12[25] * sp[7];
        sv12[30] = sv12[26] * sp[7];
        sv12[31] = sv12[27] * sp[7];
        sv12[32] = sv12[28] * sp[7];
        const double fw0 = sv12[30] * weights12[iq];
        alignas(32) double TF0[5];
        for (int i = 0; i < 5; ++i)
            TF0[i] = fw0 * FE12_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF0[i][j] += TF0[i] * FE3_C0_Q12[0][iq][j];
        const double fw1 = sv12[29] * weights12[iq];
        alignas(32) double TF1[5];
        for (int i = 0; i < 5; ++i)
            TF1[i] = fw1 * FE12_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF1[i][j] += TF1[i] * FE3_C0_Q12[0][iq][j];
        const double fw2 = sv12[32] * weights12[iq];
        alignas(32) double TF2[5];
        for (int i = 0; i < 5; ++i)
            TF2[i] = fw2 * FE12_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF2[i][j] += TF2[i] * FE3_C0_Q12[0][iq][j];
        const double fw3 = sv12[31] * weights12[iq];
        alignas(32) double TF3[5];
        for (int i = 0; i < 5; ++i)
            TF3[i] = fw3 * FE12_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF3[i][j] += TF3[i] * FE3_C0_Q12[0][iq][j];
    }
    std::fill(A, A + 45, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM0[i] + j] += BF0[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM1[i] + j] += BF1[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM2[i] + j] += BF2[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM3[i] + j] += BF3[i][j];
  }

};


class cavityflow_cell_integral_9_otherwise: public ufc::cell_integral
{
public:

  cavityflow_cell_integral_9_otherwise() : ufc::cell_integral()
  {

  }

  ~cavityflow_cell_integral_9_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 5
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE18_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE18_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE18_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803568, 0.2205142679699366 },
            { -0.05512856699248404, -0.05512856699248409, 0.6533077030470597, 0.2205142679699364, 0.2205142679699362, 0.01592089499803596 },
            { 0.6533077030470594, -0.05512856699248415, -0.05512856699248411, 0.01592089499803581, 0.2205142679699364, 0.2205142679699366 },
            { -0.1249989825350975, 0.001430579517788794, -0.1249989825350975, 0.4999959301403892, 0.2485755252716258, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788821, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880001, 0.173768363654174, -0.1177151633084292, 0.790160442765823, 0.06597478591860526, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880001, 0.1353078281686267, 0.06597478591860512, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860538 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880001, 0.06597478591860524, 0.1353078281686266, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860538 },
            { 0.1737683636541741, -0.04749625719880015, -0.1177151633084292, 0.06597478591860535, 0.7901604427658229, 0.1353078281686269 } } };
    alignas(32) static const double FE20_C2_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE20_C2_D01_Q12[0][0][0] + coordinate_dofs[2] * FE20_C2_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE20_C2_D01_Q12[0][0][0] + coordinate_dofs[5] * FE20_C2_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE20_C2_D01_Q12[0][0][0] + coordinate_dofs[4] * FE20_C2_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE20_C2_D01_Q12[0][0][0] + coordinate_dofs[3] * FE20_C2_D01_Q12[0][0][1];
    alignas(32) double sp[8];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = std::abs(sp[2]);
    alignas(32) double BF0[6][5] = {};
    alignas(32) double BF1[6][5] = {};
    alignas(32) double BF2[6][5] = {};
    alignas(32) double BF3[6][5] = {};
    alignas(32) double BF4[5][6] = {};
    alignas(32) double BF5[5][6] = {};
    alignas(32) double BF6[5][6] = {};
    alignas(32) double BF7[5][6] = {};
    alignas(32) double BF8[6][5] = {};
    alignas(32) double BF9[6][5] = {};
    alignas(32) double BF10[6][5] = {};
    alignas(32) double BF11[6][5] = {};
    alignas(32) double BF12[5][6] = {};
    alignas(32) double BF13[5][6] = {};
    alignas(32) double BF14[5][6] = {};
    alignas(32) double BF15[5][6] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0_c0 += w[0][ic] * FE18_C0_Q12[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0_c1 += w[0][ic + 6] * FE18_C0_Q12[0][iq][ic];
        alignas(32) double sv12[16];
        sv12[0] = w0_c0 * sp[3];
        sv12[1] = w0_c0 * sp[4];
        sv12[2] = w0_c0 * sp[6];
        sv12[3] = w0_c0 * sp[5];
        sv12[4] = w0_c1 * sp[3];
        sv12[5] = w0_c1 * sp[4];
        sv12[6] = w0_c1 * sp[6];
        sv12[7] = w0_c1 * sp[5];
        sv12[8] = sv12[0] * sp[7];
        sv12[9] = sv12[1] * sp[7];
        sv12[10] = sv12[4] * sp[7];
        sv12[11] = sv12[5] * sp[7];
        sv12[12] = sv12[2] * sp[7];
        sv12[13] = sv12[3] * sp[7];
        sv12[14] = sv12[6] * sp[7];
        sv12[15] = sv12[7] * sp[7];
        const double fw0 = sv12[13] * weights12[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE18_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF0[i][j] += TF0[i] * FE18_C0_D10_Q12[0][iq][j];
        const double fw1 = sv12[12] * weights12[iq];
        alignas(32) double TF1[6];
        for (int i = 0; i < 6; ++i)
            TF1[i] = fw1 * FE18_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF1[i][j] += TF1[i] * FE18_C0_D01_Q12[0][iq][j];
        const double fw2 = sv12[15] * weights12[iq];
        alignas(32) double TF2[6];
        for (int i = 0; i < 6; ++i)
            TF2[i] = fw2 * FE18_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF2[i][j] += TF2[i] * FE18_C0_D10_Q12[0][iq][j];
        const double fw3 = sv12[14] * weights12[iq];
        alignas(32) double TF3[6];
        for (int i = 0; i < 6; ++i)
            TF3[i] = fw3 * FE18_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF3[i][j] += TF3[i] * FE18_C0_D01_Q12[0][iq][j];
        alignas(32) double TF4[5];
        for (int i = 0; i < 5; ++i)
            TF4[i] = fw0 * FE18_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF4[i][j] += TF4[i] * FE18_C0_Q12[0][iq][j];
        const double fw4 = sv12[9] * weights12[iq];
        alignas(32) double TF5[5];
        for (int i = 0; i < 5; ++i)
            TF5[i] = fw4 * FE18_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF5[i][j] += TF5[i] * FE18_C0_Q12[0][iq][j];
        alignas(32) double TF6[5];
        for (int i = 0; i < 5; ++i)
            TF6[i] = fw1 * FE18_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF6[i][j] += TF6[i] * FE18_C0_Q12[0][iq][j];
        const double fw5 = sv12[8] * weights12[iq];
        alignas(32) double TF7[5];
        for (int i = 0; i < 5; ++i)
            TF7[i] = fw5 * FE18_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF7[i][j] += TF7[i] * FE18_C0_Q12[0][iq][j];
        alignas(32) double TF8[6];
        for (int i = 0; i < 6; ++i)
            TF8[i] = fw4 * FE18_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF8[i][j] += TF8[i] * FE18_C0_D10_Q12[0][iq][j];
        alignas(32) double TF9[6];
        for (int i = 0; i < 6; ++i)
            TF9[i] = fw5 * FE18_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF9[i][j] += TF9[i] * FE18_C0_D01_Q12[0][iq][j];
        const double fw6 = sv12[11] * weights12[iq];
        alignas(32) double TF10[6];
        for (int i = 0; i < 6; ++i)
            TF10[i] = fw6 * FE18_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF10[i][j] += TF10[i] * FE18_C0_D10_Q12[0][iq][j];
        const double fw7 = sv12[10] * weights12[iq];
        alignas(32) double TF11[6];
        for (int i = 0; i < 6; ++i)
            TF11[i] = fw7 * FE18_C0_Q12[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF11[i][j] += TF11[i] * FE18_C0_D01_Q12[0][iq][j];
        alignas(32) double TF12[5];
        for (int i = 0; i < 5; ++i)
            TF12[i] = fw2 * FE18_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF12[i][j] += TF12[i] * FE18_C0_Q12[0][iq][j];
        alignas(32) double TF13[5];
        for (int i = 0; i < 5; ++i)
            TF13[i] = fw6 * FE18_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF13[i][j] += TF13[i] * FE18_C0_Q12[0][iq][j];
        alignas(32) double TF14[5];
        for (int i = 0; i < 5; ++i)
            TF14[i] = fw3 * FE18_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF14[i][j] += TF14[i] * FE18_C0_Q12[0][iq][j];
        alignas(32) double TF15[5];
        for (int i = 0; i < 5; ++i)
            TF15[i] = fw7 * FE18_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF15[i][j] += TF15[i] * FE18_C0_Q12[0][iq][j];
    }
    std::fill(A, A + 225, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * i + DM0[j]] += BF0[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * i + DM1[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * i + DM2[j]] += BF2[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * i + DM3[j]] += BF3[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * DM0[i] + j] += BF4[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * DM0[i] + (j + 6)] += BF5[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * DM1[i] + j] += BF6[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * DM1[i] + (j + 6)] += BF7[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * (i + 6) + DM0[j]] += BF8[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * (i + 6) + DM1[j]] += BF9[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * (i + 6) + DM2[j]] += BF10[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * (i + 6) + DM3[j]] += BF11[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * DM2[i] + j] += BF12[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * DM2[i] + (j + 6)] += BF13[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * DM3[i] + j] += BF14[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * DM3[i] + (j + 6)] += BF15[i][j];
  }

};


class cavityflow_cell_integral_10_otherwise: public ufc::cell_integral
{
public:

  cavityflow_cell_integral_10_otherwise() : ufc::cell_integral()
  {

  }

  ~cavityflow_cell_integral_10_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 4
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q12[0][0][1];
    alignas(32) double sp[4];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = std::abs(sp[2]);
    A[0] = 0.01666666666666676 * sp[3];
    A[1] = -0.002777777777777804 * sp[3];
    A[2] = -0.002777777777777802 * sp[3];
    A[3] = -0.01111111111111101 * sp[3];
    std::fill(A + 4, A + 15, 0.0);
    A[15] = -0.002777777777777804 * sp[3];
    A[16] = 0.01666666666666677 * sp[3];
    A[17] = -0.002777777777777795 * sp[3];
    A[18] = 0.0;
    A[19] = -0.01111111111111106 * sp[3];
    std::fill(A + 20, A + 30, 0.0);
    A[30] = -0.002777777777777802 * sp[3];
    A[31] = -0.002777777777777795 * sp[3];
    A[32] = 0.01666666666666676 * sp[3];
    std::fill(A + 33, A + 35, 0.0);
    A[35] = -0.01111111111111106 * sp[3];
    std::fill(A + 36, A + 45, 0.0);
    A[45] = -0.01111111111111101 * sp[3];
    std::fill(A + 46, A + 48, 0.0);
    A[48] = 0.08888888888888909 * sp[3];
    A[49] = 0.04444444444444415 * sp[3];
    A[50] = 0.04444444444444419 * sp[3];
    std::fill(A + 51, A + 61, 0.0);
    A[61] = -0.01111111111111106 * sp[3];
    A[62] = 0.0;
    A[63] = 0.04444444444444415 * sp[3];
    A[64] = 0.08888888888888925 * sp[3];
    A[65] = 0.04444444444444423 * sp[3];
    std::fill(A + 66, A + 77, 0.0);
    A[77] = -0.01111111111111106 * sp[3];
    A[78] = 0.04444444444444419 * sp[3];
    A[79] = 0.04444444444444423 * sp[3];
    A[80] = 0.08888888888888934 * sp[3];
    std::fill(A + 81, A + 96, 0.0);
    A[96] = 0.01666666666666676 * sp[3];
    A[97] = -0.002777777777777804 * sp[3];
    A[98] = -0.002777777777777802 * sp[3];
    A[99] = -0.01111111111111101 * sp[3];
    std::fill(A + 100, A + 111, 0.0);
    A[111] = -0.002777777777777804 * sp[3];
    A[112] = 0.01666666666666677 * sp[3];
    A[113] = -0.002777777777777795 * sp[3];
    A[114] = 0.0;
    A[115] = -0.01111111111111106 * sp[3];
    std::fill(A + 116, A + 126, 0.0);
    A[126] = -0.002777777777777802 * sp[3];
    A[127] = -0.002777777777777795 * sp[3];
    A[128] = 0.01666666666666676 * sp[3];
    std::fill(A + 129, A + 131, 0.0);
    A[131] = -0.01111111111111106 * sp[3];
    std::fill(A + 132, A + 141, 0.0);
    A[141] = -0.01111111111111101 * sp[3];
    std::fill(A + 142, A + 144, 0.0);
    A[144] = 0.08888888888888909 * sp[3];
    A[145] = 0.04444444444444415 * sp[3];
    A[146] = 0.04444444444444419 * sp[3];
    std::fill(A + 147, A + 157, 0.0);
    A[157] = -0.01111111111111106 * sp[3];
    A[158] = 0.0;
    A[159] = 0.04444444444444415 * sp[3];
    A[160] = 0.08888888888888925 * sp[3];
    A[161] = 0.04444444444444423 * sp[3];
    std::fill(A + 162, A + 173, 0.0);
    A[173] = -0.01111111111111106 * sp[3];
    A[174] = 0.04444444444444419 * sp[3];
    A[175] = 0.04444444444444423 * sp[3];
    A[176] = 0.08888888888888934 * sp[3];
    std::fill(A + 177, A + 225, 0.0);
  }

};


class cavityflow_cell_integral_12_otherwise: public ufc::cell_integral
{
public:

  cavityflow_cell_integral_12_otherwise() : ufc::cell_integral()
  {

  }

  ~cavityflow_cell_integral_12_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 6
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE12_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE12_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE14_C2_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE14_C2_D01_Q12[0][0][0] + coordinate_dofs[2] * FE14_C2_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE14_C2_D01_Q12[0][0][0] + coordinate_dofs[5] * FE14_C2_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE14_C2_D01_Q12[0][0][0] + coordinate_dofs[4] * FE14_C2_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE14_C2_D01_Q12[0][0][0] + coordinate_dofs[3] * FE14_C2_D01_Q12[0][0][1];
    alignas(32) double sp[8];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = std::abs(sp[2]);
    alignas(32) double BF0[3][5] = {};
    alignas(32) double BF1[3][5] = {};
    alignas(32) double BF2[3][5] = {};
    alignas(32) double BF3[3][5] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        const double w0_d1_c0 = w[0][0] * FE12_C0_D01_Q12[0][iq][0] + w[0][2] * FE12_C0_D01_Q12[0][iq][1] + w[0][3] * FE12_C0_D01_Q12[0][iq][2] + w[0][4] * FE12_C0_D01_Q12[0][iq][3] + w[0][5] * FE12_C0_D01_Q12[0][iq][4];
        const double w0_d0_c0 = w[0][0] * FE12_C0_D10_Q12[0][iq][0] + w[0][1] * FE12_C0_D10_Q12[0][iq][1] + w[0][3] * FE12_C0_D10_Q12[0][iq][2] + w[0][4] * FE12_C0_D10_Q12[0][iq][3] + w[0][5] * FE12_C0_D10_Q12[0][iq][4];
        const double w0_d1_c1 = w[0][6] * FE12_C0_D01_Q12[0][iq][0] + w[0][8] * FE12_C0_D01_Q12[0][iq][1] + w[0][9] * FE12_C0_D01_Q12[0][iq][2] + w[0][10] * FE12_C0_D01_Q12[0][iq][3] + w[0][11] * FE12_C0_D01_Q12[0][iq][4];
        const double w0_d0_c1 = w[0][6] * FE12_C0_D10_Q12[0][iq][0] + w[0][7] * FE12_C0_D10_Q12[0][iq][1] + w[0][9] * FE12_C0_D10_Q12[0][iq][2] + w[0][10] * FE12_C0_D10_Q12[0][iq][3] + w[0][11] * FE12_C0_D10_Q12[0][iq][4];
        double w1 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1 += w[1][ic] * FE3_C0_Q12[0][iq][ic];
        alignas(32) double sv12[33];
        sv12[0] = w0_d1_c0 * sp[3];
        sv12[1] = w0_d0_c0 * sp[4];
        sv12[2] = sv12[0] + sv12[1];
        sv12[3] = sv12[2] * sp[3];
        sv12[4] = sv12[2] * sp[4];
        sv12[5] = w0_d1_c1 * sp[3];
        sv12[6] = w0_d0_c1 * sp[4];
        sv12[7] = sv12[5] + sv12[6];
        sv12[8] = sv12[7] * sp[3];
        sv12[9] = sv12[7] * sp[4];
        sv12[10] = w0_d0_c0 * sp[5];
        sv12[11] = w0_d1_c0 * sp[6];
        sv12[12] = sv12[10] + sv12[11];
        sv12[13] = sv12[12] * sp[6];
        sv12[14] = sv12[12] * sp[5];
        sv12[15] = w0_d0_c1 * sp[5];
        sv12[16] = w0_d1_c1 * sp[6];
        sv12[17] = sv12[15] + sv12[16];
        sv12[18] = sv12[17] * sp[6];
        sv12[19] = sv12[17] * sp[5];
        sv12[20] = sv12[3] + sv12[13];
        sv12[21] = sv12[14] + sv12[4];
        sv12[22] = sv12[8] + sv12[18];
        sv12[23] = sv12[19] + sv12[9];
        sv12[24] = std::exp(w1);
        sv12[25] = sv12[20] * sv12[24];
        sv12[26] = sv12[21] * sv12[24];
        sv12[27] = sv12[22] * sv12[24];
        sv12[28] = sv12[23] * sv12[24];
        sv12[29] = sv12[25] * sp[7];
        sv12[30] = sv12[26] * sp[7];
        sv12[31] = sv12[27] * sp[7];
        sv12[32] = sv12[28] * sp[7];
        const double fw0 = sv12[30] * weights12[iq];
        alignas(32) double TF0[3];
        for (int i = 0; i < 3; ++i)
            TF0[i] = fw0 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF0[i][j] += TF0[i] * FE12_C0_D10_Q12[0][iq][j];
        const double fw1 = sv12[29] * weights12[iq];
        alignas(32) double TF1[3];
        for (int i = 0; i < 3; ++i)
            TF1[i] = fw1 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF1[i][j] += TF1[i] * FE12_C0_D01_Q12[0][iq][j];
        const double fw2 = sv12[32] * weights12[iq];
        alignas(32) double TF2[3];
        for (int i = 0; i < 3; ++i)
            TF2[i] = fw2 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF2[i][j] += TF2[i] * FE12_C0_D10_Q12[0][iq][j];
        const double fw3 = sv12[31] * weights12[iq];
        alignas(32) double TF3[3];
        for (int i = 0; i < 3; ++i)
            TF3[i] = fw3 * FE3_C0_Q12[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 5; ++j)
                BF3[i][j] += TF3[i] * FE12_C0_D01_Q12[0][iq][j];
    }
    std::fill(A, A + 45, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * i + DM0[j]] += BF0[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * i + DM1[j]] += BF1[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * i + DM2[j]] += BF2[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * i + DM3[j]] += BF3[i][j];
  }

};


class cavityflow_cell_integral_13_otherwise: public ufc::cell_integral
{
public:

  cavityflow_cell_integral_13_otherwise() : ufc::cell_integral()
  {

  }

  ~cavityflow_cell_integral_13_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 6
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE12_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339914, 3.495287884067971, 0.0, -3.495287884067986 },
            { 0.7476439420339868, 2.495287884067986, 0.2523560579659921, -3.242931826101967, -0.2523560579660057 },
            { -2.495287884067988, -0.7476439420339918, 0.2523560579659977, 3.242931826101984, -0.2523560579660064 },
            { 0.002853019316351337, -0.002853019316358805, 2.005706038632703, 0.0, -2.005706038632717 },
            { 0.002853019316351022, 1.005706038632718, 0.9971469806836263, -1.008559057949063, -0.99714698068364 },
            { -1.005706038632725, -0.002853019316358878, 0.9971469806836281, 1.008559057949089, -0.9971469806836403 },
            { 0.7874198006207309, 0.2414098041351416, 2.546009996485581, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207308, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792511, -1.304600192350448, -0.2125801993792631 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792533, 1.304600192350464, -0.2125801993792635 } } };
    alignas(32) static const double FE12_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339936, 2.495287884067984, 0.2523560579660069, -0.2523560579660069, -3.242931826101977 },
            { 0.7476439420339914, -0.747643942033992, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339958, 0.2523560579660062, -0.2523560579660062, 3.242931826101981 },
            { 0.002853019316357265, 1.005706038632716, 0.9971469806836384, -0.9971469806836384, -1.008559057949073 },
            { 0.002853019316356508, -0.002853019316360195, 2.005706038632713, -2.005706038632713, 0.0 },
            { -1.00570603863272, -0.002853019316361247, 0.9971469806836384, -0.9971469806836384, 1.008559057949081 },
            { 0.7874198006207375, 1.546009996485596, 1.241409804135138, -1.241409804135138, -2.333429797106333 },
            { -0.2414098041351383, 1.546009996485596, 0.2125801993792626, -0.2125801993792626, -1.304600192350457 },
            { 0.7874198006207367, 0.24140980413514, 2.546009996485592, -2.546009996485592, -1.028829604755876 },
            { -1.546009996485595, 0.2414098041351382, 0.2125801993792624, -0.2125801993792624, 1.304600192350457 },
            { -0.2414098041351406, -0.7874198006207365, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.787419800620738, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE14_C2_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_Q12[1][12][3] =
        { { { 0.06308901449150202, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150207, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.053145049844816, 0.636502499121399, 0.310352451033785 },
            { 0.310352451033785, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481604, 0.3103524510337851, 0.636502499121399 },
            { 0.6365024991213991, 0.310352451033785, 0.05314504984481597 },
            { 0.3103524510337851, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE14_C2_D01_Q12[0][0][0] + coordinate_dofs[2] * FE14_C2_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE14_C2_D01_Q12[0][0][0] + coordinate_dofs[5] * FE14_C2_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE14_C2_D01_Q12[0][0][0] + coordinate_dofs[4] * FE14_C2_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE14_C2_D01_Q12[0][0][0] + coordinate_dofs[3] * FE14_C2_D01_Q12[0][0][1];
    alignas(32) double sp[8];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = std::abs(sp[2]);
    alignas(32) double BF0[5][3] = {};
    alignas(32) double BF1[5][3] = {};
    alignas(32) double BF2[5][3] = {};
    alignas(32) double BF3[5][3] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        const double w0_d1_c0 = w[0][0] * FE12_C0_D01_Q12[0][iq][0] + w[0][2] * FE12_C0_D01_Q12[0][iq][1] + w[0][3] * FE12_C0_D01_Q12[0][iq][2] + w[0][4] * FE12_C0_D01_Q12[0][iq][3] + w[0][5] * FE12_C0_D01_Q12[0][iq][4];
        const double w0_d0_c0 = w[0][0] * FE12_C0_D10_Q12[0][iq][0] + w[0][1] * FE12_C0_D10_Q12[0][iq][1] + w[0][3] * FE12_C0_D10_Q12[0][iq][2] + w[0][4] * FE12_C0_D10_Q12[0][iq][3] + w[0][5] * FE12_C0_D10_Q12[0][iq][4];
        const double w0_d1_c1 = w[0][6] * FE12_C0_D01_Q12[0][iq][0] + w[0][8] * FE12_C0_D01_Q12[0][iq][1] + w[0][9] * FE12_C0_D01_Q12[0][iq][2] + w[0][10] * FE12_C0_D01_Q12[0][iq][3] + w[0][11] * FE12_C0_D01_Q12[0][iq][4];
        const double w0_d0_c1 = w[0][6] * FE12_C0_D10_Q12[0][iq][0] + w[0][7] * FE12_C0_D10_Q12[0][iq][1] + w[0][9] * FE12_C0_D10_Q12[0][iq][2] + w[0][10] * FE12_C0_D10_Q12[0][iq][3] + w[0][11] * FE12_C0_D10_Q12[0][iq][4];
        double w1 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1 += w[1][ic] * FE3_C0_Q12[0][iq][ic];
        alignas(32) double sv12[33];
        sv12[0] = w0_d1_c0 * sp[3];
        sv12[1] = w0_d0_c0 * sp[4];
        sv12[2] = sv12[0] + sv12[1];
        sv12[3] = sv12[2] * sp[3];
        sv12[4] = sv12[2] * sp[4];
        sv12[5] = w0_d1_c1 * sp[3];
        sv12[6] = w0_d0_c1 * sp[4];
        sv12[7] = sv12[5] + sv12[6];
        sv12[8] = sv12[7] * sp[3];
        sv12[9] = sv12[7] * sp[4];
        sv12[10] = w0_d0_c0 * sp[5];
        sv12[11] = w0_d1_c0 * sp[6];
        sv12[12] = sv12[10] + sv12[11];
        sv12[13] = sv12[12] * sp[6];
        sv12[14] = sv12[12] * sp[5];
        sv12[15] = w0_d0_c1 * sp[5];
        sv12[16] = w0_d1_c1 * sp[6];
        sv12[17] = sv12[15] + sv12[16];
        sv12[18] = sv12[17] * sp[6];
        sv12[19] = sv12[17] * sp[5];
        sv12[20] = sv12[3] + sv12[13];
        sv12[21] = sv12[14] + sv12[4];
        sv12[22] = sv12[8] + sv12[18];
        sv12[23] = sv12[19] + sv12[9];
        sv12[24] = std::exp(w1);
        sv12[25] = sv12[20] * sv12[24];
        sv12[26] = sv12[21] * sv12[24];
        sv12[27] = sv12[22] * sv12[24];
        sv12[28] = sv12[23] * sv12[24];
        sv12[29] = sv12[25] * sp[7];
        sv12[30] = sv12[26] * sp[7];
        sv12[31] = sv12[27] * sp[7];
        sv12[32] = sv12[28] * sp[7];
        const double fw0 = sv12[30] * weights12[iq];
        alignas(32) double TF0[5];
        for (int i = 0; i < 5; ++i)
            TF0[i] = fw0 * FE12_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF0[i][j] += TF0[i] * FE3_C0_Q12[0][iq][j];
        const double fw1 = sv12[29] * weights12[iq];
        alignas(32) double TF1[5];
        for (int i = 0; i < 5; ++i)
            TF1[i] = fw1 * FE12_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF1[i][j] += TF1[i] * FE3_C0_Q12[0][iq][j];
        const double fw2 = sv12[32] * weights12[iq];
        alignas(32) double TF2[5];
        for (int i = 0; i < 5; ++i)
            TF2[i] = fw2 * FE12_C0_D10_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF2[i][j] += TF2[i] * FE3_C0_Q12[0][iq][j];
        const double fw3 = sv12[31] * weights12[iq];
        alignas(32) double TF3[5];
        for (int i = 0; i < 5; ++i)
            TF3[i] = fw3 * FE12_C0_D01_Q12[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j)
                BF3[i][j] += TF3[i] * FE3_C0_Q12[0][iq][j];
    }
    std::fill(A, A + 45, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM0[i] + j] += BF0[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM1[i] + j] += BF1[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM2[i] + j] += BF2[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[3 * DM3[i] + j] += BF3[i][j];
  }

};


class cavityflow_form_0: public ufc::form
{
public:

  cavityflow_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~cavityflow_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "019f641e47128c6fafa80fa00a8ef54e0b4a60f79094afc4b73ef92d6544b07245ae085d24bd09307ece194bfef1251ca86cfe89b8969fe8a94d4ca92caf36f0";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 4;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 4)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new cavityflow_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new cavityflow_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new cavityflow_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_finite_element_4();
    case 1:
        return new cavityflow_finite_element_5();
    case 2:
        return new cavityflow_finite_element_4();
    case 3:
        return new cavityflow_finite_element_4();
    case 4:
        return new cavityflow_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_dofmap_4();
    case 1:
        return new cavityflow_dofmap_5();
    case 2:
        return new cavityflow_dofmap_4();
    case 3:
        return new cavityflow_dofmap_4();
    case 4:
        return new cavityflow_dofmap_0();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new cavityflow_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class cavityflow_form_1: public ufc::form
{
public:

  cavityflow_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~cavityflow_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "74a491e5091b5835ff0cb270a994a0fc68a90ef79fa6965d55f79df930e1f8d0eb8ca318ebc053f382d1ad17a2310ee2d6ea96b59bba0e5017d012b4a068ae49";
  }

  std::size_t rank() const final override
  {
    return 0;
  }

  std::size_t num_coefficients() const final override
  {
    return 5;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 5)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3, 4};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new cavityflow_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new cavityflow_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new cavityflow_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_finite_element_5();
    case 1:
        return new cavityflow_finite_element_4();
    case 2:
        return new cavityflow_finite_element_4();
    case 3:
        return new cavityflow_finite_element_4();
    case 4:
        return new cavityflow_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_dofmap_5();
    case 1:
        return new cavityflow_dofmap_4();
    case 2:
        return new cavityflow_dofmap_4();
    case 3:
        return new cavityflow_dofmap_4();
    case 4:
        return new cavityflow_dofmap_0();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new cavityflow_cell_integral_1_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class cavityflow_form_2: public ufc::form
{
public:

  cavityflow_form_2() : ufc::form()
  {
    // Do nothing
  }

  ~cavityflow_form_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "14e05164192e9e23cfcbe19311130a5a8d8f4fc94663f0dfc49b32c840285acc621f703ef8e274d53132458d41611e46915a7024d64775afd7fbae86925718dc";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 3;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 3)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 3};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new cavityflow_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new cavityflow_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new cavityflow_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_finite_element_4();
    case 1:
        return new cavityflow_finite_element_4();
    case 2:
        return new cavityflow_finite_element_5();
    case 3:
        return new cavityflow_finite_element_4();
    case 4:
        return new cavityflow_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_dofmap_4();
    case 1:
        return new cavityflow_dofmap_4();
    case 2:
        return new cavityflow_dofmap_5();
    case 3:
        return new cavityflow_dofmap_4();
    case 4:
        return new cavityflow_dofmap_0();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new cavityflow_cell_integral_2_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class cavityflow_form_3: public ufc::form
{
public:

  cavityflow_form_3() : ufc::form()
  {
    // Do nothing
  }

  ~cavityflow_form_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "99c9c490126875e670f8c778eca6246b436558ed9b1c99df0765e6ce95f93ebc3f8c7edac2e13b14ba019b2614266b2044203afb4b071a4776b3d60da3625bb0";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 3;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 3)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {1, 3, 4};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new cavityflow_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new cavityflow_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new cavityflow_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_finite_element_0();
    case 1:
        return new cavityflow_finite_element_4();
    case 2:
        return new cavityflow_finite_element_4();
    case 3:
        return new cavityflow_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_dofmap_0();
    case 1:
        return new cavityflow_dofmap_4();
    case 2:
        return new cavityflow_dofmap_4();
    case 3:
        return new cavityflow_dofmap_0();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new cavityflow_cell_integral_3_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class cavityflow_form_4: public ufc::form
{
public:

  cavityflow_form_4() : ufc::form()
  {
    // Do nothing
  }

  ~cavityflow_form_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "d72d27ed732d834b70bf46cfba50b9eb675fed70f0824fa760d8f9510d08bfc09a89f05e4e808573c12852bfb50504bc4c052e9417992fb92d86eae92991701d";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 4;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 4)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 3, 4};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new cavityflow_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new cavityflow_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new cavityflow_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_finite_element_4();
    case 1:
        return new cavityflow_finite_element_5();
    case 2:
        return new cavityflow_finite_element_4();
    case 3:
        return new cavityflow_finite_element_4();
    case 4:
        return new cavityflow_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_dofmap_4();
    case 1:
        return new cavityflow_dofmap_5();
    case 2:
        return new cavityflow_dofmap_4();
    case 3:
        return new cavityflow_dofmap_4();
    case 4:
        return new cavityflow_dofmap_0();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new cavityflow_cell_integral_4_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class cavityflow_form_5: public ufc::form
{
public:

  cavityflow_form_5() : ufc::form()
  {
    // Do nothing
  }

  ~cavityflow_form_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "8b311b9cc29adf70568c8b310bc67048dd747cedd9142fac94548b0a9f90b7c2e64f00a1aa87ec066a4a7ee1e4f034ba6799a7719c42f290256d765dee7f3d28";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 4;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 4)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 4};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new cavityflow_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new cavityflow_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new cavityflow_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_finite_element_4();
    case 1:
        return new cavityflow_finite_element_5();
    case 2:
        return new cavityflow_finite_element_4();
    case 3:
        return new cavityflow_finite_element_4();
    case 4:
        return new cavityflow_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_dofmap_4();
    case 1:
        return new cavityflow_dofmap_5();
    case 2:
        return new cavityflow_dofmap_4();
    case 3:
        return new cavityflow_dofmap_4();
    case 4:
        return new cavityflow_dofmap_0();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new cavityflow_cell_integral_5_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class cavityflow_form_6: public ufc::form
{
public:

  cavityflow_form_6() : ufc::form()
  {
    // Do nothing
  }

  ~cavityflow_form_6() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "472359694c03910e629e21539a2bc9b4ddf4a918056002af3e64ba39a75fbed4f7f5df3f50d16a39cb33f917f2897c2877ab64f37a65c40753316431c84eda1f";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 3;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 3)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {1, 3, 4};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new cavityflow_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new cavityflow_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new cavityflow_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_finite_element_0();
    case 1:
        return new cavityflow_finite_element_0();
    case 2:
        return new cavityflow_finite_element_4();
    case 3:
        return new cavityflow_finite_element_4();
    case 4:
        return new cavityflow_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_dofmap_0();
    case 1:
        return new cavityflow_dofmap_0();
    case 2:
        return new cavityflow_dofmap_4();
    case 3:
        return new cavityflow_dofmap_4();
    case 4:
        return new cavityflow_dofmap_0();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new cavityflow_cell_integral_6_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class cavityflow_form_7: public ufc::form
{
public:

  cavityflow_form_7() : ufc::form()
  {
    // Do nothing
  }

  ~cavityflow_form_7() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "897d4739e2bbc0376601728aa4584ba649bdf54bd601d287afac2dfe3c9746fa80ffe1f46202dde2bde39bf63cb484eb17240754d9ff4fd2159dc87389177a67";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 3;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 3)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 4};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new cavityflow_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new cavityflow_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new cavityflow_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_finite_element_4();
    case 1:
        return new cavityflow_finite_element_4();
    case 2:
        return new cavityflow_finite_element_5();
    case 3:
        return new cavityflow_finite_element_4();
    case 4:
        return new cavityflow_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_dofmap_4();
    case 1:
        return new cavityflow_dofmap_4();
    case 2:
        return new cavityflow_dofmap_5();
    case 3:
        return new cavityflow_dofmap_4();
    case 4:
        return new cavityflow_dofmap_0();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new cavityflow_cell_integral_7_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class cavityflow_form_8: public ufc::form
{
public:

  cavityflow_form_8() : ufc::form()
  {
    // Do nothing
  }

  ~cavityflow_form_8() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "6a2267f098abe27fc73ae04e8162138ca3422542cb4952e8ddad747fad2d49d0bd28491a7eba499288c63553fa59116b8ad52c4cc5022f61794d86358a96361e";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 2;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 2)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {1, 4};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new cavityflow_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new cavityflow_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new cavityflow_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_finite_element_4();
    case 1:
        return new cavityflow_finite_element_0();
    case 2:
        return new cavityflow_finite_element_4();
    case 3:
        return new cavityflow_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_dofmap_4();
    case 1:
        return new cavityflow_dofmap_0();
    case 2:
        return new cavityflow_dofmap_4();
    case 3:
        return new cavityflow_dofmap_0();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new cavityflow_cell_integral_8_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class cavityflow_form_9: public ufc::form
{
public:

  cavityflow_form_9() : ufc::form()
  {
    // Do nothing
  }

  ~cavityflow_form_9() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "0f63d096c414444ec1ea0e9a9a03e70fbaa57c77d642cd90914b2fec81296305b34e5c328e6329e3edbe81c99fae8447d516be9a18b3c7164d100acfeeb47d65";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 1;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 1)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {3};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new cavityflow_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new cavityflow_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new cavityflow_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_finite_element_4();
    case 1:
        return new cavityflow_finite_element_4();
    case 2:
        return new cavityflow_finite_element_4();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_dofmap_4();
    case 1:
        return new cavityflow_dofmap_4();
    case 2:
        return new cavityflow_dofmap_4();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new cavityflow_cell_integral_9_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class cavityflow_form_10: public ufc::form
{
public:

  cavityflow_form_10() : ufc::form()
  {
    // Do nothing
  }

  ~cavityflow_form_10() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "c72b067c1cfc51e76f5920037a326eb11e5f0ffafbee15c2a2976de58373fdb40365718f0c7e39f2bf22dde9b6a330ffeaeadd52eea2e995c6156bbb6ca74e68";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 0;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new cavityflow_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new cavityflow_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new cavityflow_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_finite_element_4();
    case 1:
        return new cavityflow_finite_element_4();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_dofmap_4();
    case 1:
        return new cavityflow_dofmap_4();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new cavityflow_cell_integral_10_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class cavityflow_form_11: public ufc::form
{
public:

  cavityflow_form_11() : ufc::form()
  {
    // Do nothing
  }

  ~cavityflow_form_11() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "03b9c32259c8d1655e3487fec277bcd6ab9a21213b1ddb358e023d81eb01559f5ebe6821c24aa7b1b4d0c3bb930959419b04e1f832949d114c632e9da8767712";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 0;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new cavityflow_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new cavityflow_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new cavityflow_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_finite_element_4();
    case 1:
        return new cavityflow_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_dofmap_4();
    case 1:
        return new cavityflow_dofmap_0();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return false;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class cavityflow_form_12: public ufc::form
{
public:

  cavityflow_form_12() : ufc::form()
  {
    // Do nothing
  }

  ~cavityflow_form_12() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "71256498516bcac0eafc59a44d99d1cd7773b19bc2bcc29bd52a067289f3ece7df354d540abdd0fad03095b39e7297d0734b1d53a6ab229f3aaaa576d576e8fe";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 2;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 2)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {3, 4};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new cavityflow_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new cavityflow_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new cavityflow_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_finite_element_0();
    case 1:
        return new cavityflow_finite_element_4();
    case 2:
        return new cavityflow_finite_element_4();
    case 3:
        return new cavityflow_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_dofmap_0();
    case 1:
        return new cavityflow_dofmap_4();
    case 2:
        return new cavityflow_dofmap_4();
    case 3:
        return new cavityflow_dofmap_0();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new cavityflow_cell_integral_12_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class cavityflow_form_13: public ufc::form
{
public:

  cavityflow_form_13() : ufc::form()
  {
    // Do nothing
  }

  ~cavityflow_form_13() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "4767bfa976ad0d65f6fa0a01b77cdc21acb930ce21f24104764ad12097d55e7a089998fd4a84d4765ea5c6124bf772eacf1441e749991fe9fd3e7178803e051e";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 2;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 2)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {3, 4};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new cavityflow_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new cavityflow_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new cavityflow_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_finite_element_4();
    case 1:
        return new cavityflow_finite_element_0();
    case 2:
        return new cavityflow_finite_element_4();
    case 3:
        return new cavityflow_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new cavityflow_dofmap_4();
    case 1:
        return new cavityflow_dofmap_0();
    case 2:
        return new cavityflow_dofmap_4();
    case 3:
        return new cavityflow_dofmap_0();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new cavityflow_cell_integral_13_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace cavityFlow
{

class CoefficientSpace_adjoints: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_adjoints(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_adjoints(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_m: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_m(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_m(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_sigma: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_sigma(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_5>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_sigma(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_5>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_x: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_x(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_x(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_xl: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_xl(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_xl(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_F_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_F_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_sigma Form_F_FunctionSpace_1;

typedef CoefficientSpace_x Form_F_FunctionSpace_2;

typedef CoefficientSpace_xl Form_F_FunctionSpace_3;

typedef CoefficientSpace_m Form_F_FunctionSpace_4;

class Form_F: public dolfin::Form
{
public:

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 4), sigma(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const cavityflow_form_0>();
  }

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(1, 4), sigma(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    _function_spaces[0] = V0;

    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->m = m;

    _ufc_form = std::make_shared<const cavityflow_form_0>();
  }

  // Destructor
  ~Form_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "sigma")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "m")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "sigma";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_sigma;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_x;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_xl;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner sigma;
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner xl;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_F: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), sigma(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V0), sigma(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "sigma")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "m")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "sigma";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_sigma;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_x;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_xl;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner sigma;
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner xl;
  dolfin::MultiMeshCoefficientAssigner m;
};

typedef CoefficientSpace_sigma Form_Fm_FunctionSpace_0;

typedef CoefficientSpace_x Form_Fm_FunctionSpace_1;

typedef CoefficientSpace_xl Form_Fm_FunctionSpace_2;

typedef CoefficientSpace_adjoints Form_Fm_FunctionSpace_3;

typedef CoefficientSpace_m Form_Fm_FunctionSpace_4;

class Form_Fm: public dolfin::Form
{
public:

  // Constructor
  Form_Fm(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::Form(0, 5), sigma(*this, 0), x(*this, 1), xl(*this, 2), adjoints(*this, 3), m(*this, 4)
  {
    _mesh = mesh;
    _ufc_form = std::make_shared<const cavityflow_form_1>();
  }

  // Constructor
  Form_Fm(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> adjoints, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(0, 5), sigma(*this, 0), x(*this, 1), xl(*this, 2), adjoints(*this, 3), m(*this, 4)
  {
    _mesh = mesh;
    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->adjoints = adjoints;
    this->m = m;

    _ufc_form = std::make_shared<const cavityflow_form_1>();
  }

  // Destructor
  ~Form_Fm()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "sigma")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "adjoints")
      return 3;
    else if (name == "m")
      return 4;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "sigma";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "adjoints";
    case 4:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Fm_FunctionSpace_0 CoefficientSpace_sigma;
  typedef Form_Fm_FunctionSpace_1 CoefficientSpace_x;
  typedef Form_Fm_FunctionSpace_2 CoefficientSpace_xl;
  typedef Form_Fm_FunctionSpace_3 CoefficientSpace_adjoints;
  typedef Form_Fm_FunctionSpace_4 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner sigma;
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner xl;
  dolfin::CoefficientAssigner adjoints;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_Fm: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_Fm(std::shared_ptr<const dolfin::MultiMesh> mesh):
    dolfin::MultiMeshForm(mesh), sigma(*this, 0), x(*this, 1), xl(*this, 2), adjoints(*this, 3), m(*this, 4)
  {
    // Creating a form for each part of the mesh
    for (std::size_t i=0; i< mesh->num_parts(); i++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Fm(mesh->part(i)));       add(a);    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_Fm(std::shared_ptr<const dolfin::MultiMesh> mesh, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> adjoints, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(mesh), sigma(*this, 0), x(*this, 1), xl(*this, 2), adjoints(*this, 3), m(*this, 4)
  {
    // Creating a form for each part of the mesh
    for (std::size_t i=0; i< mesh->num_parts(); i++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Fm(mesh->part(i)));       add(a);    }
    // Build multimesh form
    build();

    /// Assign coefficients    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->adjoints = adjoints;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_Fm()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "sigma")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "adjoints")
      return 3;
    else if (name == "m")
      return 4;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "sigma";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "adjoints";
    case 4:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Fm_FunctionSpace_0 CoefficientSpace_sigma;
  typedef Form_Fm_FunctionSpace_1 CoefficientSpace_x;
  typedef Form_Fm_FunctionSpace_2 CoefficientSpace_xl;
  typedef Form_Fm_FunctionSpace_3 CoefficientSpace_adjoints;
  typedef Form_Fm_FunctionSpace_4 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner sigma;
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner xl;
  dolfin::MultiMeshCoefficientAssigner adjoints;
  dolfin::MultiMeshCoefficientAssigner m;
};

class Form_J_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_J_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_sigma Form_J_FunctionSpace_2;

typedef CoefficientSpace_x Form_J_FunctionSpace_3;

typedef CoefficientSpace_m Form_J_FunctionSpace_4;

class Form_J: public dolfin::Form
{
public:

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 3), sigma(*this, 0), x(*this, 1), m(*this, 2)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const cavityflow_form_2>();
  }

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(2, 3), sigma(*this, 0), x(*this, 1), m(*this, 2)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->sigma = sigma;
    this->x = x;
    this->m = m;

    _ufc_form = std::make_shared<const cavityflow_form_2>();
  }

  // Destructor
  ~Form_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "sigma")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "m")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "sigma";
    case 1:
      return "x";
    case 2:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_sigma;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner sigma;
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_J: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), sigma(*this, 0), x(*this, 1), m(*this, 2)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V1, V0), sigma(*this, 0), x(*this, 1), m(*this, 2)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->sigma = sigma;
    this->x = x;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "sigma")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "m")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "sigma";
    case 1:
      return "x";
    case 2:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_sigma;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner sigma;
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner m;
};

class Form_Jm_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Jm_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Jm_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Jm_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Jm_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Jm_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_x Form_Jm_FunctionSpace_1;

typedef CoefficientSpace_adjoints Form_Jm_FunctionSpace_2;

typedef CoefficientSpace_m Form_Jm_FunctionSpace_3;

class Form_Jm: public dolfin::Form
{
public:

  // Constructor
  Form_Jm(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 3), x(*this, 0), adjoints(*this, 1), m(*this, 2)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const cavityflow_form_3>();
  }

  // Constructor
  Form_Jm(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> adjoints, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(1, 3), x(*this, 0), adjoints(*this, 1), m(*this, 2)
  {
    _function_spaces[0] = V0;

    this->x = x;
    this->adjoints = adjoints;
    this->m = m;

    _ufc_form = std::make_shared<const cavityflow_form_3>();
  }

  // Destructor
  ~Form_Jm()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "x")
      return 0;
    else if (name == "adjoints")
      return 1;
    else if (name == "m")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "x";
    case 1:
      return "adjoints";
    case 2:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Jm_FunctionSpace_0 TestSpace;
  typedef Form_Jm_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Jm_FunctionSpace_1 CoefficientSpace_x;
  typedef Form_Jm_FunctionSpace_2 CoefficientSpace_adjoints;
  typedef Form_Jm_FunctionSpace_3 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner adjoints;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_Jm: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_Jm(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), x(*this, 0), adjoints(*this, 1), m(*this, 2)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Jm(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_Jm(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> adjoints, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V0), x(*this, 0), adjoints(*this, 1), m(*this, 2)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Jm(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->x = x;
    this->adjoints = adjoints;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_Jm()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "x")
      return 0;
    else if (name == "adjoints")
      return 1;
    else if (name == "m")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "x";
    case 1:
      return "adjoints";
    case 2:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Jm_FunctionSpace_0 TestSpace;
  typedef Form_Jm_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Jm_FunctionSpace_1 CoefficientSpace_x;
  typedef Form_Jm_FunctionSpace_2 CoefficientSpace_adjoints;
  typedef Form_Jm_FunctionSpace_3 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner adjoints;
  dolfin::MultiMeshCoefficientAssigner m;
};

class Form_Jx_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Jx_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Jx_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Jx_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Jx_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Jx_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_sigma Form_Jx_FunctionSpace_1;

typedef CoefficientSpace_x Form_Jx_FunctionSpace_2;

typedef CoefficientSpace_adjoints Form_Jx_FunctionSpace_3;

typedef CoefficientSpace_m Form_Jx_FunctionSpace_4;

class Form_Jx: public dolfin::Form
{
public:

  // Constructor
  Form_Jx(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 4), sigma(*this, 0), x(*this, 1), adjoints(*this, 2), m(*this, 3)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const cavityflow_form_4>();
  }

  // Constructor
  Form_Jx(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> adjoints, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(1, 4), sigma(*this, 0), x(*this, 1), adjoints(*this, 2), m(*this, 3)
  {
    _function_spaces[0] = V0;

    this->sigma = sigma;
    this->x = x;
    this->adjoints = adjoints;
    this->m = m;

    _ufc_form = std::make_shared<const cavityflow_form_4>();
  }

  // Destructor
  ~Form_Jx()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "sigma")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "adjoints")
      return 2;
    else if (name == "m")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "sigma";
    case 1:
      return "x";
    case 2:
      return "adjoints";
    case 3:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Jx_FunctionSpace_0 TestSpace;
  typedef Form_Jx_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Jx_FunctionSpace_1 CoefficientSpace_sigma;
  typedef Form_Jx_FunctionSpace_2 CoefficientSpace_x;
  typedef Form_Jx_FunctionSpace_3 CoefficientSpace_adjoints;
  typedef Form_Jx_FunctionSpace_4 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner sigma;
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner adjoints;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_Jx: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_Jx(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), sigma(*this, 0), x(*this, 1), adjoints(*this, 2), m(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Jx(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_Jx(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> adjoints, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V0), sigma(*this, 0), x(*this, 1), adjoints(*this, 2), m(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Jx(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->sigma = sigma;
    this->x = x;
    this->adjoints = adjoints;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_Jx()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "sigma")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "adjoints")
      return 2;
    else if (name == "m")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "sigma";
    case 1:
      return "x";
    case 2:
      return "adjoints";
    case 3:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Jx_FunctionSpace_0 TestSpace;
  typedef Form_Jx_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Jx_FunctionSpace_1 CoefficientSpace_sigma;
  typedef Form_Jx_FunctionSpace_2 CoefficientSpace_x;
  typedef Form_Jx_FunctionSpace_3 CoefficientSpace_adjoints;
  typedef Form_Jx_FunctionSpace_4 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner sigma;
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner adjoints;
  dolfin::MultiMeshCoefficientAssigner m;
};

class Form_Jadj_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Jadj_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Jadj_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Jadj_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Jadj_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Jadj_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_sigma Form_Jadj_FunctionSpace_1;

typedef CoefficientSpace_x Form_Jadj_FunctionSpace_2;

typedef CoefficientSpace_xl Form_Jadj_FunctionSpace_3;

typedef CoefficientSpace_m Form_Jadj_FunctionSpace_4;

class Form_Jadj: public dolfin::Form
{
public:

  // Constructor
  Form_Jadj(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 4), sigma(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const cavityflow_form_5>();
  }

  // Constructor
  Form_Jadj(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(1, 4), sigma(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    _function_spaces[0] = V0;

    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->m = m;

    _ufc_form = std::make_shared<const cavityflow_form_5>();
  }

  // Destructor
  ~Form_Jadj()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "sigma")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "m")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "sigma";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Jadj_FunctionSpace_0 TestSpace;
  typedef Form_Jadj_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Jadj_FunctionSpace_1 CoefficientSpace_sigma;
  typedef Form_Jadj_FunctionSpace_2 CoefficientSpace_x;
  typedef Form_Jadj_FunctionSpace_3 CoefficientSpace_xl;
  typedef Form_Jadj_FunctionSpace_4 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner sigma;
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner xl;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_Jadj: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_Jadj(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), sigma(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Jadj(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_Jadj(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> xl, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V0), sigma(*this, 0), x(*this, 1), xl(*this, 2), m(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Jadj(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->sigma = sigma;
    this->x = x;
    this->xl = xl;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_Jadj()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "sigma")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "xl")
      return 2;
    else if (name == "m")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "sigma";
    case 1:
      return "x";
    case 2:
      return "xl";
    case 3:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Jadj_FunctionSpace_0 TestSpace;
  typedef Form_Jadj_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Jadj_FunctionSpace_1 CoefficientSpace_sigma;
  typedef Form_Jadj_FunctionSpace_2 CoefficientSpace_x;
  typedef Form_Jadj_FunctionSpace_3 CoefficientSpace_xl;
  typedef Form_Jadj_FunctionSpace_4 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner sigma;
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner xl;
  dolfin::MultiMeshCoefficientAssigner m;
};

class Form_Rform_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Rform_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Rform_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Rform_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Rform_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Rform_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Rform_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Rform_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Rform_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_Rform_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Rform_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Rform_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_x Form_Rform_FunctionSpace_2;

typedef CoefficientSpace_adjoints Form_Rform_FunctionSpace_3;

typedef CoefficientSpace_m Form_Rform_FunctionSpace_4;

class Form_Rform: public dolfin::Form
{
public:

  // Constructor
  Form_Rform(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 3), x(*this, 0), adjoints(*this, 1), m(*this, 2)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const cavityflow_form_6>();
  }

  // Constructor
  Form_Rform(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> adjoints, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(2, 3), x(*this, 0), adjoints(*this, 1), m(*this, 2)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->x = x;
    this->adjoints = adjoints;
    this->m = m;

    _ufc_form = std::make_shared<const cavityflow_form_6>();
  }

  // Destructor
  ~Form_Rform()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "x")
      return 0;
    else if (name == "adjoints")
      return 1;
    else if (name == "m")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "x";
    case 1:
      return "adjoints";
    case 2:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Rform_FunctionSpace_0 TestSpace;
  typedef Form_Rform_FunctionSpace_1 TrialSpace;
  typedef Form_Rform_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Rform_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_Rform_FunctionSpace_2 CoefficientSpace_x;
  typedef Form_Rform_FunctionSpace_3 CoefficientSpace_adjoints;
  typedef Form_Rform_FunctionSpace_4 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner adjoints;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_Rform: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_Rform(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), x(*this, 0), adjoints(*this, 1), m(*this, 2)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Rform(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_Rform(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> adjoints, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V1, V0), x(*this, 0), adjoints(*this, 1), m(*this, 2)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Rform(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->x = x;
    this->adjoints = adjoints;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_Rform()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "x")
      return 0;
    else if (name == "adjoints")
      return 1;
    else if (name == "m")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "x";
    case 1:
      return "adjoints";
    case 2:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Rform_FunctionSpace_0 TestSpace;
  typedef Form_Rform_FunctionSpace_1 TrialSpace;
  typedef Form_Rform_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Rform_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_Rform_FunctionSpace_2 CoefficientSpace_x;
  typedef Form_Rform_FunctionSpace_3 CoefficientSpace_adjoints;
  typedef Form_Rform_FunctionSpace_4 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner adjoints;
  dolfin::MultiMeshCoefficientAssigner m;
};

class Form_Aform_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Aform_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Aform_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Aform_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Aform_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Aform_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Aform_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Aform_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Aform_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_Aform_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Aform_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Aform_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_sigma Form_Aform_FunctionSpace_2;

typedef CoefficientSpace_x Form_Aform_FunctionSpace_3;

typedef CoefficientSpace_m Form_Aform_FunctionSpace_4;

class Form_Aform: public dolfin::Form
{
public:

  // Constructor
  Form_Aform(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 3), sigma(*this, 0), x(*this, 1), m(*this, 2)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const cavityflow_form_7>();
  }

  // Constructor
  Form_Aform(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(2, 3), sigma(*this, 0), x(*this, 1), m(*this, 2)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->sigma = sigma;
    this->x = x;
    this->m = m;

    _ufc_form = std::make_shared<const cavityflow_form_7>();
  }

  // Destructor
  ~Form_Aform()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "sigma")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "m")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "sigma";
    case 1:
      return "x";
    case 2:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Aform_FunctionSpace_0 TestSpace;
  typedef Form_Aform_FunctionSpace_1 TrialSpace;
  typedef Form_Aform_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Aform_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_Aform_FunctionSpace_2 CoefficientSpace_sigma;
  typedef Form_Aform_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_Aform_FunctionSpace_4 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner sigma;
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_Aform: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_Aform(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), sigma(*this, 0), x(*this, 1), m(*this, 2)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Aform(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_Aform(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> sigma, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V1, V0), sigma(*this, 0), x(*this, 1), m(*this, 2)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Aform(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->sigma = sigma;
    this->x = x;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_Aform()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "sigma")
      return 0;
    else if (name == "x")
      return 1;
    else if (name == "m")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "sigma";
    case 1:
      return "x";
    case 2:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Aform_FunctionSpace_0 TestSpace;
  typedef Form_Aform_FunctionSpace_1 TrialSpace;
  typedef Form_Aform_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Aform_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_Aform_FunctionSpace_2 CoefficientSpace_sigma;
  typedef Form_Aform_FunctionSpace_3 CoefficientSpace_x;
  typedef Form_Aform_FunctionSpace_4 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner sigma;
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner m;
};

class Form_Cform_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Cform_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Cform_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Cform_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_Cform_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_Cform_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_Cform_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Cform_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Cform_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_Cform_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_Cform_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_Cform_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_x Form_Cform_FunctionSpace_2;

typedef CoefficientSpace_m Form_Cform_FunctionSpace_3;

class Form_Cform: public dolfin::Form
{
public:

  // Constructor
  Form_Cform(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 2), x(*this, 0), m(*this, 1)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const cavityflow_form_8>();
  }

  // Constructor
  Form_Cform(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(2, 2), x(*this, 0), m(*this, 1)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->x = x;
    this->m = m;

    _ufc_form = std::make_shared<const cavityflow_form_8>();
  }

  // Destructor
  ~Form_Cform()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "x")
      return 0;
    else if (name == "m")
      return 1;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "x";
    case 1:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Cform_FunctionSpace_0 TestSpace;
  typedef Form_Cform_FunctionSpace_1 TrialSpace;
  typedef Form_Cform_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Cform_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_Cform_FunctionSpace_2 CoefficientSpace_x;
  typedef Form_Cform_FunctionSpace_3 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner x;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_Cform: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_Cform(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), x(*this, 0), m(*this, 1)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Cform(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_Cform(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> x, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V1, V0), x(*this, 0), m(*this, 1)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Cform(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->x = x;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_Cform()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "x")
      return 0;
    else if (name == "m")
      return 1;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "x";
    case 1:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Cform_FunctionSpace_0 TestSpace;
  typedef Form_Cform_FunctionSpace_1 TrialSpace;
  typedef Form_Cform_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_Cform_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_Cform_FunctionSpace_2 CoefficientSpace_x;
  typedef Form_Cform_FunctionSpace_3 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner x;
  dolfin::MultiMeshCoefficientAssigner m;
};

class Form_WuuForm_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_WuuForm_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_WuuForm_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_WuuForm_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_WuuForm_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_WuuForm_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_WuuForm_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_WuuForm_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_WuuForm_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_WuuForm_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_WuuForm_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_WuuForm_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_adjoints Form_WuuForm_FunctionSpace_2;

class Form_WuuForm: public dolfin::Form
{
public:

  // Constructor
  Form_WuuForm(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 1), adjoints(*this, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const cavityflow_form_9>();
  }

  // Constructor
  Form_WuuForm(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> adjoints):
    dolfin::Form(2, 1), adjoints(*this, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->adjoints = adjoints;

    _ufc_form = std::make_shared<const cavityflow_form_9>();
  }

  // Destructor
  ~Form_WuuForm()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "adjoints")
      return 0;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "adjoints";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_WuuForm_FunctionSpace_0 TestSpace;
  typedef Form_WuuForm_FunctionSpace_1 TrialSpace;
  typedef Form_WuuForm_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_WuuForm_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_WuuForm_FunctionSpace_2 CoefficientSpace_adjoints;

  // Coefficients
  dolfin::CoefficientAssigner adjoints;
};

class MultiMeshForm_WuuForm: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_WuuForm(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), adjoints(*this, 0)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_WuuForm(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_WuuForm(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> adjoints):
    dolfin::MultiMeshForm(V1, V0), adjoints(*this, 0)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_WuuForm(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->adjoints = adjoints;

  }

  // Destructor
  ~MultiMeshForm_WuuForm()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "adjoints")
      return 0;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "adjoints";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_WuuForm_FunctionSpace_0 TestSpace;
  typedef Form_WuuForm_FunctionSpace_1 TrialSpace;
  typedef Form_WuuForm_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_WuuForm_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_WuuForm_FunctionSpace_2 CoefficientSpace_adjoints;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner adjoints;
};

class Form_WuuFormAdd_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_WuuFormAdd_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_WuuFormAdd_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_WuuFormAdd_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_WuuFormAdd_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_WuuFormAdd_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_WuuFormAdd_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_WuuFormAdd_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_WuuFormAdd_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_WuuFormAdd_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_WuuFormAdd_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_WuuFormAdd_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_WuuFormAdd: public dolfin::Form
{
public:

  // Constructor
  Form_WuuFormAdd(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const cavityflow_form_10>();
  }

  // Destructor
  ~Form_WuuFormAdd()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_WuuFormAdd_FunctionSpace_0 TestSpace;
  typedef Form_WuuFormAdd_FunctionSpace_1 TrialSpace;
  typedef Form_WuuFormAdd_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_WuuFormAdd_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class MultiMeshForm_WuuFormAdd: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_WuuFormAdd(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_WuuFormAdd(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Destructor
  ~MultiMeshForm_WuuFormAdd()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_WuuFormAdd_FunctionSpace_0 TestSpace;
  typedef Form_WuuFormAdd_FunctionSpace_1 TrialSpace;
  typedef Form_WuuFormAdd_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_WuuFormAdd_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class Form_RFormAdd_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_RFormAdd_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_RFormAdd_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_RFormAdd_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_RFormAdd_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_RFormAdd_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_RFormAdd_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_RFormAdd_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_RFormAdd_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_RFormAdd_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_RFormAdd_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_RFormAdd_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_RFormAdd: public dolfin::Form
{
public:

  // Constructor
  Form_RFormAdd(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const cavityflow_form_11>();
  }

  // Destructor
  ~Form_RFormAdd()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_RFormAdd_FunctionSpace_0 TestSpace;
  typedef Form_RFormAdd_FunctionSpace_1 TrialSpace;
  typedef Form_RFormAdd_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_RFormAdd_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class MultiMeshForm_RFormAdd: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_RFormAdd(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_RFormAdd(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Destructor
  ~MultiMeshForm_RFormAdd()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_RFormAdd_FunctionSpace_0 TestSpace;
  typedef Form_RFormAdd_FunctionSpace_1 TrialSpace;
  typedef Form_RFormAdd_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_RFormAdd_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class Form_WauForm_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_WauForm_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_WauForm_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_WauForm_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_WauForm_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_WauForm_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_WauForm_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_WauForm_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_WauForm_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_WauForm_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_WauForm_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_WauForm_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_adjoints Form_WauForm_FunctionSpace_2;

typedef CoefficientSpace_m Form_WauForm_FunctionSpace_3;

class Form_WauForm: public dolfin::Form
{
public:

  // Constructor
  Form_WauForm(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 2), adjoints(*this, 0), m(*this, 1)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const cavityflow_form_12>();
  }

  // Constructor
  Form_WauForm(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> adjoints, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(2, 2), adjoints(*this, 0), m(*this, 1)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->adjoints = adjoints;
    this->m = m;

    _ufc_form = std::make_shared<const cavityflow_form_12>();
  }

  // Destructor
  ~Form_WauForm()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "adjoints")
      return 0;
    else if (name == "m")
      return 1;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "adjoints";
    case 1:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_WauForm_FunctionSpace_0 TestSpace;
  typedef Form_WauForm_FunctionSpace_1 TrialSpace;
  typedef Form_WauForm_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_WauForm_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_WauForm_FunctionSpace_2 CoefficientSpace_adjoints;
  typedef Form_WauForm_FunctionSpace_3 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner adjoints;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_WauForm: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_WauForm(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), adjoints(*this, 0), m(*this, 1)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_WauForm(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_WauForm(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> adjoints, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V1, V0), adjoints(*this, 0), m(*this, 1)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_WauForm(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->adjoints = adjoints;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_WauForm()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "adjoints")
      return 0;
    else if (name == "m")
      return 1;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "adjoints";
    case 1:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_WauForm_FunctionSpace_0 TestSpace;
  typedef Form_WauForm_FunctionSpace_1 TrialSpace;
  typedef Form_WauForm_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_WauForm_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_WauForm_FunctionSpace_2 CoefficientSpace_adjoints;
  typedef Form_WauForm_FunctionSpace_3 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner adjoints;
  dolfin::MultiMeshCoefficientAssigner m;
};

class Form_WuaForm_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_WuaForm_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_WuaForm_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_WuaForm_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_WuaForm_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_WuaForm_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<cavityflow_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<cavityflow_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_WuaForm_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_WuaForm_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_WuaForm_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_WuaForm_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_WuaForm_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_WuaForm_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_adjoints Form_WuaForm_FunctionSpace_2;

typedef CoefficientSpace_m Form_WuaForm_FunctionSpace_3;

class Form_WuaForm: public dolfin::Form
{
public:

  // Constructor
  Form_WuaForm(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 2), adjoints(*this, 0), m(*this, 1)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const cavityflow_form_13>();
  }

  // Constructor
  Form_WuaForm(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> adjoints, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::Form(2, 2), adjoints(*this, 0), m(*this, 1)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->adjoints = adjoints;
    this->m = m;

    _ufc_form = std::make_shared<const cavityflow_form_13>();
  }

  // Destructor
  ~Form_WuaForm()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "adjoints")
      return 0;
    else if (name == "m")
      return 1;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "adjoints";
    case 1:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_WuaForm_FunctionSpace_0 TestSpace;
  typedef Form_WuaForm_FunctionSpace_1 TrialSpace;
  typedef Form_WuaForm_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_WuaForm_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_WuaForm_FunctionSpace_2 CoefficientSpace_adjoints;
  typedef Form_WuaForm_FunctionSpace_3 CoefficientSpace_m;

  // Coefficients
  dolfin::CoefficientAssigner adjoints;
  dolfin::CoefficientAssigner m;
};

class MultiMeshForm_WuaForm: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_WuaForm(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), adjoints(*this, 0), m(*this, 1)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_WuaForm(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_WuaForm(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> adjoints, std::shared_ptr<const dolfin::GenericFunction> m):
    dolfin::MultiMeshForm(V1, V0), adjoints(*this, 0), m(*this, 1)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_WuaForm(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->adjoints = adjoints;
    this->m = m;

  }

  // Destructor
  ~MultiMeshForm_WuaForm()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "adjoints")
      return 0;
    else if (name == "m")
      return 1;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "adjoints";
    case 1:
      return "m";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_WuaForm_FunctionSpace_0 TestSpace;
  typedef Form_WuaForm_FunctionSpace_1 TrialSpace;
  typedef Form_WuaForm_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_WuaForm_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_WuaForm_FunctionSpace_2 CoefficientSpace_adjoints;
  typedef Form_WuaForm_FunctionSpace_3 CoefficientSpace_m;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner adjoints;
  dolfin::MultiMeshCoefficientAssigner m;
};

// Class typedefs
typedef Form_Fm Functional;
typedef MultiMeshForm_Fm MultiMeshFunctional;

}

#endif
