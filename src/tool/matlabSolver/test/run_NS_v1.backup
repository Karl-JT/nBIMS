function [QoIfinal, Obs] = run_NS(m)
    % ------------------------------------------------------------ %

    % declaration of global variables:
    global dy nu Kx Ky K2 Lx Ly Nx Ny Nxy X Y Xf Yf
    %%%%%%%%%%%%%%implicit RK 12 table %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % c = [ 0.000000000000000000000000000000000000000000000000000000000000
    %  0.200000000000000000000000000000000000000000000000000000000000
    %  0.555555555555555555555555555555555555555555555555555555555556
    %  0.833333333333333333333333333333333333333333333333333333333333
    %  0.333333333333333333333333333333333333333333333333333333333333
    %  1.00000000000000000000000000000000000000000000000000000000000
    %  0.671835709170513812712245661002797570438953420568682550710222
    %  0.288724941110620201935458488967024976908118598341806976469674
    %  0.562500000000000000000000000000000000000000000000000000000000
    %  0.833333333333333333333333333333333333333333333333333333333333
    %  0.947695431179199287562380162101836721649589325892740646458322
    %  0.0548112876863802643887753674810754475842153612931128785028369
    %  0.0848880518607165350639838930162674302064148175640019542045934
    %  0.265575603264642893098114059045616835297201264164077621448665
    %  0.500000000000000000000000000000000000000000000000000000000000
    %  0.734424396735357106901885940954383164702798735835922378551335
    %  0.915111948139283464936016106983732569793585182435998045795407
    %  0.947695431179199287562380162101836721649589325892740646458322
    %  0.833333333333333333333333333333333333333333333333333333333333
    %  0.288724941110620201935458488967024976908118598341806976469674
    %  0.671835709170513812712245661002797570438953420568682550710222
    %  0.333333333333333333333333333333333333333333333333333333333333
    %  0.555555555555555555555555555555555555555555555555555555555556
    %  0.200000000000000000000000000000000000000000000000000000000000
    %  1.00000000000000000000000000000000000000000000000000000000000 ];
    % 
    % b = [0.0238095238095238095238095238095238095238095238095238095238095
    % 0.0234375000000000000000000000000000000000000000000000000000000
    % 0.0312500000000000000000000000000000000000000000000000000000000
    % 0.000000000000000000000000000000000000000000000000000000000000
    % 0.0416666666666666666666666666666666666666666666666666666666667
    % 0.000000000000000000000000000000000000000000000000000000000000
    % 0.0500000000000000000000000000000000000000000000000000000000000
    % 0.0500000000000000000000000000000000000000000000000000000000000
    % 0.000000000000000000000000000000000000000000000000000000000000
    % 0.100000000000000000000000000000000000000000000000000000000000
    % 0.0714285714285714285714285714285714285714285714285714285714286
    % 0.000000000000000000000000000000000000000000000000000000000000
    % 0.138413023680782974005350203145033146748813640089941234591267
    % 0.215872690604931311708935511140681138965472074195773051123019
    % 0.243809523809523809523809523809523809523809523809523809523810
    % 0.215872690604931311708935511140681138965472074195773051123019
    % 0.138413023680782974005350203145033146748813640089941234591267
    % -0.0714285714285714285714285714285714285714285714285714285714286
    % -0.100000000000000000000000000000000000000000000000000000000000
    % -0.0500000000000000000000000000000000000000000000000000000000000
    % -0.0500000000000000000000000000000000000000000000000000000000000
    % -0.0416666666666666666666666666666666666666666666666666666666667
    % -0.0312500000000000000000000000000000000000000000000000000000000
    % -0.0234375000000000000000000000000000000000000000000000000000000
    % 0.0238095238095238095238095238095238095238095238095238095238095];
    % 
    % a = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0.200000000000000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;-0.216049382716049,0.771604938271605,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0.208333333333333,0,0.625000000000000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0.193333333333333,0,0.220000000000000,-0.0800000000000000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0.100000000000000,0,0,0.400000000000000,0.500000000000000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0.103364471650010,0,0,0.124053094528947,0.483171167561033,-0.0387530245694763,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0.124038261431833,0,0,0,0.217050632197958,0.0137455792075967,-0.0661095317267683,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0.0914774894856883,0,0,0,0,-0.00544348523717470,0.0680716801688454,0.408394315582641,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0.0890013652502551,0,0,0,0,0.00499528226645532,0.397918238819829,0.427930210752577,-0.0865117637557827,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0.0695087624134908,0,0,0,0,0.129146941900176,1.53073638102311,0.577874761129140,-0.951294772321089,-0.408276642965632,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0.0444861403295136,0,0,0,0,-0.00380476867056962,0.0106955064029624,0.0209616244499904,-0.0233146023259322,0.00263265981064537,0.00315472768977025,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0.0194588815119755,0,0,0,0,0,0,0,6.78512949171813e-05,-4.29795859049274e-05,1.76358982260285e-05,0.0653866627415027,0,0,0,0,0,0,0,0,0,0,0,0,0;0.206836835664277,0,0,0,0,0,0,0,0.0166796067104156,-0.00879501563200710,0.00346675455362464,-0.861264460105718,0.908651882074050,0,0,0,0,0,0,0,0,0,0,0,0;0.0203926084654484,0,0,0,0,0,0,0,0.0869469392016686,-0.0191649630410150,0.00655629159493663,0.0987476128127435,0.00535364695524996,0.301167864010968,0,0,0,0,0,0,0,0,0,0,0;0.228410433917778,0,0,0,0,0,0,0,-0.498707400793025,0.134841168335725,-0.0387458244055834,-1.27473257473475,1.43916364462877,-0.214007467967990,0.958202417754430,0,0,0,0,0,0,0,0,0,0;2.00222477655974,0,0,0,0,0,0,0,2.06701809961525,0.623978136086140,-0.0462283685500311,-8.84973288362650,7.74257707850856,-0.588358519250869,-1.10683733362381,-0.929529037579204,0,0,0,0,0,0,0,0,0;3.13789533412073,0,0,0,0,0.129146941900176,1.53073638102311,0.577874761129140,5.42088263055127,0.231546926034829,0.0759292995578914,-12.3729973380187,9.85455883464770,0.0859111431370437,-5.65242752862644,-1.94300935242820,-0.128352601849405,0,0,0,0,0,0,0,0;1.38360054432196,0,0,0,0,0.00499528226645532,0.397918238819829,0.427930210752577,-1.30299107424476,0.661292278669377,-0.144559774306954,-6.96576034731798,6.65808543235992,-1.66997375108842,2.06413702318035,-0.674743962644307,-0.00115618834794940,-0.00544057908677007,0,0,0,0,0,0,0;0.951236297048288,0,0,0,0.217050632197958,0.0137455792075967,-0.0661095317267683,0,0.152281696736414,-0.337741018357600,-0.0192825981633996,-3.68259269696867,3.16197870406982,-0.370462522106885,-0.0514974200365440,-0.000829625532120153,2.79801041419279e-06,0.0418603916412360,0.279084255090877,0,0,0,0,0,0;0.103364471650010,0,0,0.124053094528947,0.483171167561033,-0.0387530245694763,0,-0.438313820361122,0,-0.218636633721677,-0.0312334764394719,0,0,0,0,0,0,0.0312334764394719,0.218636633721677,0.438313820361122,0,0,0,0,0;0.193333333333333,0,0.220000000000000,-0.0800000000000000,0,0,0.0984256130499316,-0.196410889223055,0,0.436457930493069,0.0652613721675721,0,0,0,0,0,0,-0.0652613721675721,-0.436457930493069,0.196410889223055,-0.0984256130499316,0,0,0,0;-0.216049382716049,0.771604938271605,0,0,-0.666666666666667,0,-0.390696469295978,0,0,0,0,0,0,0,0,0,0,0,0,0,0.390696469295978,0.666666666666667,0,0,0;0.200000000000000,0,-0.164609053497942,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.164609053497942,0,0;1.47178724881110,0.787500000000000,0.421296296296296,0,0.291666666666667,0,0.348600717628330,0.229499544768995,5.79046485790482,0.418587511856507,0.307039880222474,-4.68700905350603,3.13571665593802,1.40134829710966,-5.52931101439499,-0.853138235508063,0.103575780373610,-0.140474416950601,-0.418587511856507,-0.229499544768995,-0.348600717628330,-0.291666666666667,-0.421296296296296,-0.787500000000000,0]];

    % ------------------------------------------------------------ %

    %%% Physical parameters:
    nu = 0.0001;	% 1/Re or viscosity

    % ------------------------------------------------------------ %

    %%% Domain definition:
    Lx = 0.5;    % Domain half-length in x-direction
    Ly = 0.5;    % Domain half-length in y-direction
    % ------------------------------------------------------------ %

    %%% Time-stepping parameters:
    t = 0.0;           	% the discrete time variable
    Tf = 1.0;          	% final simulation time
    ds = 1/8; 			% write time of the results

    %%% Numerical parameters:
    Nx = 16;  % number of Fourier modes in discrete solution x-dir
    Ny = 16;	% number of Fourier modes in discrete solution y-dir
    Nxy = Nx*Ny;

    dx = 2*Lx/Nx;   		% distance between two physical points
    x = (1-Nx/2:Nx/2)'*dx;  % physical space discretization
    %     x = (-Nx/2:Nx/2-1)'*dx;  % physical space discretization

    dy = 2*Ly/Ny;   		% distance between two physical points
    y = (1-Ny/2:Ny/2)'*dy;  % physical space discretization
%    y = (-Ny/2:Ny/2-1)'*dy;  % physical space discretization

    xf = (-0.5:1/Nx:0.5);
    yf = (-0.5:1/Ny:0.5);

    [X,Y] = meshgrid(x,y);	% 2D composed grid
    [Xf, Yf] = meshgrid(xf, yf);
    
    % ------------------------------------------------------------ %

    % vectors of wavenumbers in the transformed space:
    kx = [0:Nx/2 1-Nx/2:-1]'*pi/Lx;
    ky = [0:Ny/2 1-Ny/2:-1]'*pi/Ly;

    % antialising treatment
    jx = (Nx/4+2:Nx/4*3);  % the frequencies we sacrify
    kx(jx) = 0;

    jy = (Ny/4+2:Ny/4*3);  % the frequencies we sacrify
    ky(jy) = 0;

    % ------------------------------------------------------------ %

    %%% Some operators arising in NS equations:
    [Kx, Ky] = meshgrid(kx,ky);
    K2 = Kx.^2 + Ky.^2;     % to compute the Laplace operator

    K2inv = zeros(size(K2));
    K2inv(K2 ~= 0) = 1./K2(K2 ~= 0);

    % ------------------------------------------------------------ %

    fftw('planner', 'hybrid');

    % ------------------------------------------------------------ %
    vx = zeros(Nx, Ny);
    vy = zeros(Nx, Ny);
    Vx_hat = zeros(Nx, Ny);
    Vy_hat = zeros(Nx, Ny);
    f = m*(sin(2*pi*X)+sin(2*pi*Y));
    F_hat = fft2(f);

    % ------------------------------------------------------------%
    FigHandle = figure(1);
    set(FigHandle, 'Position', [100, 100, 600, 550]);

    frame = 0;
    v = vx.^2+vy.^2;
    % Plot(vx, t);	% we plot the initial condition

    % ------------------------------------------------------------ %
    Fx_hat = F_hat - (Kx.*F_hat+Ky.*F_hat).*K2inv.*Kx;
    Fy_hat = F_hat - (Kx.*F_hat+Ky.*F_hat).*K2inv.*Ky;
    Fx_hat = reshape(Fx_hat, Nxy, 1);
    Fy_hat = reshape(Fy_hat, Nxy, 1);
    while (t < Tf) % main loop in time
%         disp(t);
        
        Vx_hat = fft2(vx);
        Vy_hat = fft2(vy);

    % % %%%%%%%%%%%%Backward Euler%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %     Vx_hat = (1/ds*Vx_hat+F_hat-(Kx.*F_hat+Ky.*F_hat).*K2inv.*Kx)./(1/ds+nu*K2);
    %     Vy_hat = (1/ds*Vy_hat+F_hat-(Kx.*F_hat+Ky.*F_hat).*K2inv.*Ky)./(1/ds+nu*K2);

    %     Vx_hat = reshape(Vx_hat, Nxy, 1);
    %     Vy_hat = reshape(Vy_hat, Nxy, 1);%     
    %     K2 = reshape(K2, Nxy, 1);
    %     Vx_hat = (1/ds*Vx_hat+Fx_hat)./(1/ds+0.5*nu*K2);
    %     Vy_hat = (1/ds*Vy_hat+Fx_hat)./(1/ds+0.5*nu*K2);
    %     Vx_hat = reshape(Vx_hat, Nx, Ny);
    %     Vy_hat = reshape(Vy_hat, Nx, Ny);

    %%%%%%%%%%Backward Gaussian Legendra Runge Kutta%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %     s = 1;
    %     K2 = reshape(K2, Nxy, 1);
    %     Vx_hat = reshape(Vx_hat, Nxy, 1);
    %     Vy_hat = reshape(Vy_hat, Nxy, 1);
    %     
    %     [a, b, c] = RKTable(s);   
    %     I = eye(s*Nxy);
    %     In = eye(Nxy);
    %     Is = ones(s, 1);
    %     systemMatrix = I + ds*a*In*diag(nu*K2);
    %     systemRhsX = Vx_hat + ds*a*In*Fx_hat;
    %     systemRhsY = Vy_hat + ds*a*In*Fy_hat;
    %     VxS = systemMatrix \ systemRhsX;
    %     VyS = systemMatrix \ systemRhsY;
    %     VxS = reshape(VxS, Nxy, s);
    %     VyS = reshape(VyS, Nxy, s);
    %     for i = 1:s
    %         Vx_hat = Vx_hat + ds*b(i)*(-nu*K2.*VxS+Fx_hat);
    %         Vy_hat = Vy_hat + ds*b(i)*(-nu*K2.*VyS+Fy_hat);
    %     end
    % 
    %     Vx_hat = reshape(VxS, Nx, Ny);
    %     Vy_hat = reshape(VyS, Nx, Ny);


        s = 2;
        K2 = reshape(K2, Nxy, 1);
        Vx_hat = reshape(Vx_hat, Nxy, 1);
        Vy_hat = reshape(Vy_hat, Nxy, 1);

        [a, b, c] = RKTable(s);   
        I = eye(s*Nxy);
        In = eye(Nxy);
        Is = ones(s, 1);
        systemMatrix = I - ds*kron(a, In)*kron(eye(s), -diag(nu*K2));
        systemRhsX = kron(Is, Vx_hat) + ds*(kron(a, In))*kron(Is, Fx_hat);
        systemRhsY = kron(Is, Vy_hat) + ds*(kron(a, In))*kron(Is, Fy_hat);
        VxS = systemMatrix \ systemRhsX;
        VyS = systemMatrix \ systemRhsY;
        VxS = reshape(VxS, Nxy, s);
        VyS = reshape(VyS, Nxy, s);
        for i = 1:s
            Vx_hat = Vx_hat + ds*b(i)*(-nu*K2.*VxS(:, i)+Fx_hat);
            Vy_hat = Vy_hat + ds*b(i)*(-nu*K2.*VyS(:, i)+Fy_hat);
        end

        Vx_hat = reshape(Vx_hat, Nx, Ny);
        Vy_hat = reshape(Vy_hat, Nx, Ny);

       % %%%%%%%%Forward Euler%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %     h = ds;
    %     kstages = zeros(2, Nx, Ny);
    %     
    %     kstages(1, :, :) = -nu*K2*Vx_hat + F_hat - (Kx.*F_hat+Ky.*F_hat).*K2inv.*Kx;
    %     kstages(2, :, :) = -nu*K2*Vy_hat + F_hat - (Kx.*F_hat+Ky.*F_hat).*K2inv.*Ky;
    %     
    %     Vx_hat = Vx_hat + h*squeeze(kstages(1, :, :));
    %     Vy_hat = Vy_hat + h*squeeze(kstages(2, :, :));    


    % %%%%%%%%RK5(4) explicit%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %     h = ds;
    %     kstages = zeros(4, 2, Nx, Ny);
    %     kstages(1, 1, :, :) = -nu*K2*Vx_hat + F_hat - (Kx.*F_hat+Ky.*F_hat).*K2inv.*Kx;
    %     kstages(1, 2, :, :) = -nu*K2*Vy_hat + F_hat - (Kx.*F_hat+Ky.*F_hat).*K2inv.*Ky;
    %     
    %     xn = Vx_hat;
    %     yn = Vy_hat;
    %     
    %     Vx_hat = Vx_hat + h*1/6*squeeze(kstages(1, 1, :, :));
    %     Vy_hat = Vy_hat + h*1/6*squeeze(kstages(1, 2, :, :));    
    % 
    %     xSum = xn+h*1/2*squeeze(kstages(1, 1, :, :));
    %     ySum = yn+h*1/2*squeeze(kstages(1, 2, :, :));
    %     
    %     kstages(2, 1, :, :) = -nu*K2*xSum + F_hat - (Kx.*F_hat+Ky.*F_hat).*K2inv.*Kx;
    %     kstages(2, 2, :, :) = -nu*K2*ySum + F_hat - (Kx.*F_hat+Ky.*F_hat).*K2inv.*Ky;    
    %     Vx_hat = Vx_hat + h*1/3*squeeze(kstages(2, 1, :, :));
    %     Vy_hat = Vy_hat + h*1/3*squeeze(kstages(2, 2, :, :));   
    %     
    %     xSum = xn+h*1/2*squeeze(kstages(2, 1, :, :));
    %     ySum = yn+h*1/2*squeeze(kstages(2, 2, :, :));
    %     
    %     kstages(3, 1, :, :) = -nu*K2*xSum + F_hat - (Kx.*F_hat+Ky.*F_hat).*K2inv.*Kx;
    %     kstages(3, 2, :, :) = -nu*K2*ySum + F_hat - (Kx.*F_hat+Ky.*F_hat).*K2inv.*Ky;     
    %     
    %     Vx_hat = Vx_hat + h*1/3*squeeze(kstages(3, 1, :, :));
    %     Vy_hat = Vy_hat + h*1/3*squeeze(kstages(3, 2, :, :));   
    %    
    %     xSum = xn+h*1*squeeze(kstages(3, 1, :, :));
    %     ySum = yn+h*1*squeeze(kstages(2, 2, :, :));
    %     
    %     kstages(4, 1, :, :) = -nu*K2*xSum + F_hat - (Kx.*F_hat+Ky.*F_hat).*K2inv.*Kx;
    %     kstages(4, 2, :, :) = -nu*K2*ySum + F_hat - (Kx.*F_hat+Ky.*F_hat).*K2inv.*Ky;     
    %     
    %     Vx_hat = Vx_hat + h*1/6*squeeze(kstages(4, 1, :, :));
    %     Vy_hat = Vy_hat + h*1/6*squeeze(kstages(4, 2, :, :));  

    % %%%%%%%%%RK12(10) explicit%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %     h = ds;
    %     kstages = zeros(25, 2, Nx, Ny);
    %     kstages(1, 1, :, :) = -nu*K2*Vx_hat + F_hat - (Kx.*F_hat+Ky.*F_hat).*K2inv.*Kx;
    %     kstages(1, 2, :, :) = -nu*K2*Vy_hat + F_hat - (Kx.*F_hat+Ky.*F_hat).*K2inv.*Ky;
    %     xn = Vx_hat;
    %     yn = Vy_hat;
    %     Vx_hat = Vx_hat + h*b(1)*squeeze(kstages(1, 1, :, :));
    %     Vy_hat = Vy_hat + h*b(1)*squeeze(kstages(1, 2, :, :));    
    %     for i = 2:25
    %         xSum = xn;
    %         ySum = yn;
    %         for j = 1:i-1
    %             xSum = xSum + h*a(i, j)*squeeze(kstages(j, 1, :, :));
    %             ySum = ySum + h*a(i, j)*squeeze(kstages(j, 2, :, :)); 
    %         end
    %         kstages(i, 1, :, :) = -nu*K2*xSum + F_hat - (Kx.*F_hat+Ky.*F_hat).*K2inv.*Kx;
    %         kstages(i, 2, :, :) = -nu*K2*ySum + F_hat - (Kx.*F_hat+Ky.*F_hat).*K2inv.*Ky;
    %         Vx_hat = Vx_hat + h*b(i)*squeeze(kstages(i, 1, :, :));
    %         Vy_hat = Vy_hat + h*b(i)*squeeze(kstages(i, 2, :, :));          
    %     end
    %     
        vx = real(ifft2(Vx_hat));
        vy = real(ifft2(Vy_hat));

        Vxy_hat = 1i*Ky.*Vx_hat;
        Vyx_hat = 1i*Kx.*Vy_hat;
        vxy = real(ifft2(Vxy_hat));
        vyx = real(ifft2(Vyx_hat));
        
        vxy = [vxy(:, end), vxy];
        vxy = [vxy(end, :); vxy];
        vxy(1, 1) =  vxy(end, end);
        
        vyx = [vyx(:, end), vyx];
        vyx = [vyx(end, :); vyx];
        vyx(1, 1) =  vxy(end, end);
        
        yVxy = (Yf+0.5).^(0.5).*vxy;
        xVyx = (Xf+0.5).^(0.5).*vyx;
        QoI = yVxy + xVyx;

        w = LSNewtonCotes(Nx);
        w = w/2;
        w2 = kron(w, w');
        Obs = sum(sum(w2.*QoI))
        if (t == 0.5)
            QoIfinal = Obs;
        end

        t = t + ds;
        v = vx.^2+vy.^2;
        Plot(yVxy, t); % and we plot the solution
        
    end % while (t)
    return
end

function Plot (Om, t)

	global dy Lx Ly Xf Yf
    
	surf(Xf, Yf, Om), grid off
	shading interp;
	colormap(jet); cc = colorbar;
    xlim([-Lx Lx]); ylim([-Ly+dy Ly]); caxis([-1 1]);
    xlabel('$x$', 'interpreter', 'latex', 'fontsize', 12);
    ylabel('$y$', 'interpreter', 'latex', 'fontsize', 12, 'Rotation', 1);
    xlabel(cc, '$\omega(x,y,t)$', 'interpreter', 'latex', 'fontsize', 12, 'Rotation', 90);
    view([0 90]);

    title (['Vorticity distribution at t = ',num2str(t,'%4.2f')], 'interpreter', 'latex', 'fontsize', 12);

    set(gcf, 'Color', 'w');
    drawnow
end % Plot ()


